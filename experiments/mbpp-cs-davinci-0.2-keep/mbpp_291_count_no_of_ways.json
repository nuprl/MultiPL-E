{
  "name": "mbpp_291_count_no_of_ways",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long CountNoOfWays(long n, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNoOfWays((2L), (4L)) == (16L));\n    Debug.Assert(CountNoOfWays((3L), (2L)) == (6L));\n    Debug.Assert(CountNoOfWays((4L), (4L)) == (228L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // If there is only one post, there is only one way to paint it.\n        if (n == 1) {\n            return k;\n        }\n        // If there are only two posts, there are two ways to paint them.\n        if (n == 2) {\n            return k * k;\n        }\n        // If the first two posts have the same color, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have different colors.\n        // If the first two posts have different colors, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have the same color times the number of ways to paint the first two posts with different colors.\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // If there is only one post, there is only one way to paint it.\n        if (n == 1) {\n            return k;\n        }\n        // If there are only two posts, there are two ways to paint them.\n        if (n == 2) {\n            return k * k;\n        }\n        // If the first two posts have the same color, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have different colors.\n        long same = k;\n        // If the first two posts have different colors, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have the same color times the number of ways to paint the first two posts with different colors.\n        long diff = k * (k - 1);\n        // The number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have the same color plus the number of ways to paint the rest of the fence if the first two posts have different colors.\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // If there is only one post, there is only one way to paint it.\n        if (n == 1) {\n            return k;\n        }\n        // If there are only two posts, there are two ways to paint them:\n        // 1. Both posts have the same color.\n        // 2. Both posts have different colors.\n        if (n == 2) {\n            return k * k;\n        }\n        // If the first two posts have the same color, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have different colors.\n        // If the first two posts have different colors, the number of ways to paint the rest of the fence is the same as the number of ways to paint the rest of the fence if the first two posts have the same color.\n        // The number of ways to paint the rest of the fence is the same as the number of ways to paint the fence with n - 1 posts and k colors.\n        return CountNoOfWays(n - 1, k) * (k - 1);",
    "        // There are k ways to paint the first post.\n        // For the second post, there are k ways to paint it if it is different from the first post, and k-1 ways to paint it if it is the same as the first post.\n        // For the third post, there are k ways to paint it if it is different from the second post, and k-1 ways to paint it if it is the same as the second post.\n        // For the fourth post, there are k ways to paint it if it is different from the third post, and k-1 ways to paint it if it is the same as the third post.\n        // For the fifth post, there are k ways to paint it if it is different from the fourth post, and k-1 ways to paint it if it is the same as the fourth post.\n        // For the sixth post, there are k ways to paint it if it is different from the fifth post, and k-1 ways to paint it if it is the same as the fifth post.\n        // For the seventh post, there are k ways to paint it if it is different from the sixth post, and k-1 ways to paint it if it is the same as the sixth post.\n        // For the eighth post, there are k ways to paint it if it is different from the seventh post, and k-1 ways to paint it if it is the same as the seventh post.\n        // For the ninth post, there are k ways to paint it if it is different from the eighth post, and k-1 ways to paint it if it is the same as the eighth post.\n        // For the tenth post, there are k ways to paint it if it is different from the ninth post, and k-1 ways to paint it if it is the same as the ninth post.\n        // For the eleventh post, there are k ways to paint it if it is different from the tenth post, and k-1 ways to paint it if it is the same as the tenth post.\n        // For the twelfth post, there are k ways to paint it if it is different from the eleventh post, and k-1 ways to paint it if it is the same as the eleventh post.\n        // For the thirteenth post, there are k ways to paint it if it is different from the twelfth post, and k-1 ways to",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1) return k;\n        // if n == 2, then there are two situations\n        // if the two posts have the same color, k*1 ways to paint,\n        // if the two posts have different colors, k*(k-1) ways to paint\n        if (n == 2) return k + k * (k - 1);\n        // if n > 2, we can use the same color as the last one (if allowed) or different color.\n        // different color: the number of ways to paint the last post is sameColorCounts\n        // same color: the number of ways to paint the last post is diffColorCounts\n        long sameColorCounts = k;\n        long diffColorCounts = k * (k - 1);\n        for (int i = 3; i <= n; ++i) {\n            long temp = diffColorCounts;\n            diffColorCounts = (sameColorCounts + diffColorCounts) * (k - 1);\n            sameColorCounts = temp;\n        }\n        return sameColorCounts + diffColorCounts;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // if n == 0, return 0\n        if (n == 0) return 0;\n        // if n == 1, return k\n        if (n == 1) return k;\n        // if n == 2, return k + k * (k - 1)\n        if (n == 2) return k + k * (k - 1);\n        // if n > 2, return (k - 1) * (CountNoOfWays(n - 1, k) + CountNoOfWays(n - 2, k))\n        return (k - 1) * (CountNoOfWays(n - 1, k) + CountNoOfWays(n - 2, k));",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long[] dp = new long[n + 1];\n        dp[1] = k;\n        dp[2] = k * k;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = (dp[i - 1] + dp[i - 2]) * (k - 1);\n        }\n        return dp[n];",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // The idea is to use dynamic programming.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // Let's say we have a fence with n-2 posts and k colors.\n        // Let's say we have a fence with n-3 posts and k colors.\n        // Let's say we have a fence with n-4 posts and k colors.\n        // Let's say we have a fence with n-5 posts and k colors.\n        // Let's say we have a fence with n-6 posts and k colors.\n        // Let's say we have a fence with n-7 posts and k colors.\n        // Let's say we have a fence with n-8 posts and k colors.\n        // Let's say we have a fence with n-9 posts and k colors.\n        // Let's say we have a fence with n-10 posts and k colors.\n        // Let's say we have a fence with n-11 posts and k colors.\n        // Let's say we have a fence with n-12 posts and k colors.\n        // Let's say we have a fence with n-13 posts and k colors.\n        // Let's say we have a fence with n-14 posts and k colors.\n        // Let's say we have a fence with n-15 posts and k colors.\n        // Let's say we have a fence with n-16 posts and k colors.\n        // Let's say we have a fence with n-17 posts and k colors.\n        // Let's say we have a fence with n-18 posts and k colors.\n        // Let's say we have a fence with n-19 posts and k colors.\n        // Let's say we have a fence with n-20 posts and k colors.\n        // Let's say we have a fence with n-21 posts and k colors.\n        // Let's say we have a fence with n-22 posts and k colors.\n        // Let's say we have a fence with n-23 posts and k colors.\n        // Let's say we have a fence with n-24 posts and k colors.\n        // Let's say we have a fence with n-25 posts and k colors.\n        // Let's say we have a",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0, diff = k;\n        for (long i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long diff = k * (k - 1);\n        long same = k;\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (diff + same) * (k - 1);\n            same = temp;\n        }\n        return diff + same;",
    "        // The number of ways of painting the fence with n posts and k colors is the sum of the number of ways of painting the fence with n-1 posts and k colors and the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-1 posts and k colors is k times the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-2 posts and k colors is k times the number of ways of painting the fence with n-3 posts and k colors.\n        // The number of ways of painting the fence with n-3 posts and k colors is k times the number of ways of painting the fence with n-4 posts and k colors.\n        // The number of ways of painting the fence with n-4 posts and k colors is k times the number of ways of painting the fence with n-5 posts and k colors.\n        // The number of ways of painting the fence with n-5 posts and k colors is k times the number of ways of painting the fence with n-6 posts and k colors.\n        // The number of ways of painting the fence with n-6 posts and k colors is k times the number of ways of painting the fence with n-7 posts and k colors.\n        // The number of ways of painting the fence with n-7 posts and k colors is k times the number of ways of painting the fence with n-8 posts and k colors.\n        // The number of ways of painting the fence with n-8 posts and k colors is k times the number of ways of painting the fence with n-9 posts and k colors.\n        // The number of ways of painting the fence with n-9 posts and k colors is k times the number of ways of painting the fence with n-10 posts and k colors.\n        // The number of ways of painting the fence with n-10 posts and k colors is k times the number of ways of painting the fence with n-11 posts and k colors.\n        // The number of ways of painting the fence with n-11 posts and k colors is k times the number of ways of painting the fence with n-12 posts and k colors.\n        // The number of ways of painting the fence with n-12 posts and k colors is k times the number of ways of painting",
    "        // There are k ways to paint the first post.\n        // For the second post, there are k-1 ways to paint it if it is different from the first post.\n        // For the third post, there are k-1 ways to paint it if it is different from the second post.\n        // If the third post is the same as the first post, there are k-2 ways to paint it.\n        // For the fourth post, there are k-1 ways to paint it if it is different from the third post.\n        // If the fourth post is the same as the second post, there are k-2 ways to paint it.\n        // If the fourth post is the same as the first post, there are k-3 ways to paint it.\n        // For the fifth post, there are k-1 ways to paint it if it is different from the fourth post.\n        // If the fifth post is the same as the third post, there are k-2 ways to paint it.\n        // If the fifth post is the same as the second post, there are k-3 ways to paint it.\n        // If the fifth post is the same as the first post, there are k-4 ways to paint it.\n        // For the sixth post, there are k-1 ways to paint it if it is different from the fifth post.\n        // If the sixth post is the same as the fourth post, there are k-2 ways to paint it.\n        // If the sixth post is the same as the third post, there are k-3 ways to paint it.\n        // If the sixth post is the same as the second post, there are k-4 ways to paint it.\n        // If the sixth post is the same as the first post, there are k-5 ways to paint it.\n        // For the seventh post, there are k-1 ways to paint it if it is different from the sixth post.\n        // If the seventh post is the same as the fifth post, there are k-2 ways to paint it.\n        // If the seventh post is the same as the fourth post, there are k-3 ways to paint it.\n        // If the seventh post is the same as the third post, there are k-4 ways to paint it.\n        // If the seventh post is the same as the second post, there are k",
    "        // Let us assume that we have 3 posts and 3 colors.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n        // The first post can be painted in 3 ways.\n        // The second post can be painted in 2 ways.\n        // The third post can be painted in 2 ways.\n        // So, the total number of ways of painting the fence is 3*2*2 = 12.\n",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We need to find the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 0 || k == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Write your code here\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // We can paint the first post in k ways.\n        // Now, we have to paint the second post.\n        // If we paint the second post the same color as the first post, then we have k-1 ways to paint the second post.\n        // If we paint the second post a different color than the first post, then we have k-1 ways to paint the second post.\n        // This is because we have k colors to choose from and we have already used 1 color to paint the first post.\n        // Now, we have to paint the third post.\n        // If we paint the third post the same color as the second post, then we have k-1 ways to paint the third post.\n        // If we paint the third post a different color than the second post, then we have k-1 ways to paint the third post.\n        // This is because we have k colors to choose from and we have already used 1 color to paint the second post.\n        // If we paint the third post the same color as the first post, then we have k-1 ways to paint the third post.\n        // If we paint the third post a different color than the first post, then we have k-1 ways to paint the third post.\n        // This is because we have k colors to choose from and we have already used 1 color to paint the first post.\n        // We can see that we can paint the third post in 2*(k-1) ways.\n        // We can paint the fourth post in 2*(k-1) ways.\n        // We can paint the fifth post in 2*(k-1) ways.\n        // We can paint the sixth post in 2*(k-1) ways.\n        // We can paint the seventh post in 2*(k-1) ways.\n        // We can paint the eighth post in 2*(k-1) ways.\n        // We can paint the ninth post in 2*(k-1) ways.\n        // We can paint the tenth post in 2*(k-1) ways.\n        // We can paint the eleventh post in 2*(k-1) ways.\n        // We can paint the twelfth",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // If there is only one post, there is only one way to paint it.\n        if (n == 1)\n            return k;\n        // If there are only two posts, there are two ways to paint them:\n        // 1. Both posts have the same color.\n        // 2. Both posts have different colors.\n        if (n == 2)\n            return k * k;\n        // There are k ways to paint the first post.\n        // For the second post, there are two cases:\n        // 1. The second post has the same color as the first post.\n        // 2. The second post has a different color from the first post.\n        // In the first case, there are k - 1 ways to paint the second post.\n        // In the second case, there are k ways to paint the second post.\n        long same = k;\n        long diff = k * (k - 1);\n        // For the third post onwards, there are two cases:\n        // 1. The current post has the same color as the previous post.\n        // 2. The current post has a different color from the previous post.\n        // In the first case, there are diff ways to paint the current post.\n        // In the second case, there are same ways to paint the current post.\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // The number of ways of painting the fence with n posts and k colors is the sum of the number of ways of painting the fence with n-1 posts and k colors and the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-1 posts and k colors is k times the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-2 posts and k colors is k times the number of ways of painting the fence with n-3 posts and k colors.\n        // The number of ways of painting the fence with n-3 posts and k colors is k times the number of ways of painting the fence with n-4 posts and k colors.\n        // The number of ways of painting the fence with n-4 posts and k colors is k times the number of ways of painting the fence with n-5 posts and k colors.\n        // The number of ways of painting the fence with n-5 posts and k colors is k times the number of ways of painting the fence with n-6 posts and k colors.\n        // The number of ways of painting the fence with n-6 posts and k colors is k times the number of ways of painting the fence with n-7 posts and k colors.\n        // The number of ways of painting the fence with n-7 posts and k colors is k times the number of ways of painting the fence with n-8 posts and k colors.\n        // The number of ways of painting the fence with n-8 posts and k colors is k times the number of ways of painting the fence with n-9 posts and k colors.\n        // The number of ways of painting the fence with n-9 posts and k colors is k times the number of ways of painting the fence with n-10 posts and k colors.\n        // The number of ways of painting the fence with n-10 posts and k colors is k times the number of ways of painting the fence with n-11 posts and k colors.\n        // The number of ways of painting the fence with n-11 posts and k colors is k times the number of ways of painting the fence with n-12 posts and k colors.\n        // The number of ways of painting the fence with n-12 posts and k colors is k times the number of ways of painting",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // The number of ways to paint the first two posts is k*k.\n        // The number of ways to paint the first post is k.\n        // The number of ways to paint the second post is k*(k-1).\n        // The number of ways to paint the third post is k*(k-1) + k*(k-1)*(k-1).\n        // The number of ways to paint the fourth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1).\n        // The number of ways to paint the fifth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1).\n        // The number of ways to paint the sixth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1)*(k-1).\n        // The number of ways to paint the seventh post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1)*(k-1)*(k-1).\n        // The number of ways to paint the eighth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // If there is only one post, there is only one way to paint it.\n        if (n == 1) {\n            return k;\n        }\n        // If there are only two posts, there are two ways to paint them.\n        if (n == 2) {\n            return k * k;\n        }\n        // If the first two posts have the same color, the number of ways to paint the first two posts is k.\n        // The number of ways to paint the rest of the posts is the same as the number of ways to paint n - 2 posts with k colors.\n        long same = k;\n        // If the first two posts have different colors, the number of ways to paint the first two posts is k * (k - 1).\n        // The number of ways to paint the rest of the posts is the same as the number of ways to paint n - 2 posts with k colors.\n        long diff = k * (k - 1);\n        // For the rest of the posts, the number of ways to paint the ith post is the same as the number of ways to paint the (i - 1)th post if the (i - 1)th and the ith posts have different colors.\n        // The number of ways to paint the ith post is the same as the number of ways to paint the (i - 2)th post if the (i - 1)th and the ith posts have the same color.\n        // The total number of ways to paint the ith post is the sum of the number of ways to paint the (i - 1)th post and the number of ways to paint the (i - 2)th post.\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (diff + same) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1)\n            return k;\n        // if n == 2, then there are two situations\n        // if the two posts have the same color, k*1 ways to paint,\n        // if not, k*(k-1) ways to paint\n        if (n == 2)\n            return k * k;\n        // you can always maintain three states for each position:\n        // same[i]: the number of ways to paint the ith post, such that the last two are of the same color\n        // diff[i]: the number of ways to paint the ith post, such that the last two are of different colors\n        // total[i]: the number of ways to paint the ith post, no matter what's the last two\n        long[] same = new long[n];\n        long[] diff = new long[n];\n        long[] total = new long[n];\n        // Initialization\n        same[0] = same[1] = k;\n        diff[0] = k;\n        diff[1] = k * (k - 1);\n        total[0] = k;\n        total[1] = k * k;\n        // Transfer Function\n        for (int i = 2; i < n; ++i) {\n            // ways to paint the ith post, such that the last two are of the same color\n            same[i] = diff[i - 1];\n            // ways to paint the ith post, such that the last two are of different colors\n            diff[i] = (k - 1) * total[i - 1];\n            // total[i] is the sum of same[i] and diff[i]\n            total[i] = same[i] + diff[i];\n        }\n        return total[n - 1];",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's define a function f(n, k) that returns the number of ways to paint the fence with n posts and k colors.\n        // If the last post is painted with the first color, then the number of ways to paint the remaining n-1 posts is f(n-1, k).\n        // If the last post is painted with the second color, then the number of ways to paint the remaining n-1 posts is f(n-1, k-1).\n        // If the last post is painted with the third color, then the number of ways to paint the remaining n-1 posts is f(n-1, k-2).\n        // ...\n        // If the last post is painted with the kth color, then the number of ways to paint the remaining n-1 posts is f(n-1, 1).\n        // Therefore, f(n, k) = f(n-1, k) + f(n-1, k-1) + f(n-1, k-2) + ... + f(n-1, 1).\n        // We can also write this as f(n, k) = f(n-1, k) + f(n-1, k-1) + f(n-1, k-2) + ... + f(n-1, k-k+1).\n        // We can also write this as f(n, k) = f(n-1, k) + f(n-1, k-1) + f(n-1, k-2) + ... + f(n-1, 1).\n        // We can also write this as f(n, k) = f(n-1, k) + f(n-1, k-1) + f(n-1, k-2) + ... + f(n-1, 1).\n        // We can also write this as f(n, k) = f(n-1, k) + f(n-1, k-1) + f(n-1, k-2) + ... + f(n-1, 1).\n        // We can also write this as f(n, k) = f(n-1, k) + f(n-1",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // There are k ways to paint the first post.\n        // For the second post, there are k-1 ways to paint it if it is different from the first post.\n        // For the third post, there are k-1 ways to paint it if it is different from the second post.\n        // If the third post is painted with the same color as the second post, there are k-2 ways to paint it.\n        // For the fourth post, there are k-1 ways to paint it if it is different from the third post.\n        // If the fourth post is painted with the same color as the third post, there are k-2 ways to paint it.\n        // If the fourth post is painted with the same color as the second post, there are k-2 ways to paint it.\n        // For the fifth post, there are k-1 ways to paint it if it is different from the fourth post.\n        // If the fifth post is painted with the same color as the fourth post, there are k-2 ways to paint it.\n        // If the fifth post is painted with the same color as the third post, there are k-2 ways to paint it.\n        // If the fifth post is painted with the same color as the second post, there are k-2 ways to paint it.\n        // For the sixth post, there are k-1 ways to paint it if it is different from the fifth post.\n        // If the sixth post is painted with the same color as the fifth post, there are k-2 ways to paint it.\n        // If the sixth post is painted with the same color as the fourth post, there are k-2 ways to paint it.\n        // If the sixth post is painted with the same color as the third post, there are k-2 ways to paint it.\n        // If the sixth post is painted with the same color as the second post, there are k-2 ways to paint it.\n        // For the seventh post, there are k-1 ways to paint it if it is different from the sixth post.\n        // If the seventh post is painted with the same color as the sixth post, there are k-2 ways to paint it.\n        // If the seventh post is painted with the same color as the fifth post, there are k-2 ways to paint it.\n        // If the seventh post",
    "        // The number of ways to paint the first two posts is k * k.\n        // The number of ways to paint the first post is k.\n        // The number of ways to paint the second post is k * (k - 1) if the first post is painted with the same color as the second post, or k * (k - 1) if the first post is painted with a different color as the second post.\n        // The number of ways to paint the third post is k * (k - 1) if the second post is painted with the same color as the third post, or k * (k - 1) if the second post is painted with a different color as the third post.\n        // The number of ways to paint the fourth post is k * (k - 1) if the third post is painted with the same color as the fourth post, or k * (k - 1) if the third post is painted with a different color as the fourth post.\n        // The number of ways to paint the fifth post is k * (k - 1) if the fourth post is painted with the same color as the fifth post, or k * (k - 1) if the fourth post is painted with a different color as the fifth post.\n        // The number of ways to paint the sixth post is k * (k - 1) if the fifth post is painted with the same color as the sixth post, or k * (k - 1) if the fifth post is painted with a different color as the sixth post.\n        // The number of ways to paint the seventh post is k * (k - 1) if the sixth post is painted with the same color as the seventh post, or k * (k - 1) if the sixth post is painted with a different color as the seventh post.\n        // The number of ways to paint the eighth post is k * (k - 1) if the seventh post is painted with the same color as the eighth post, or k * (k - 1) if the seventh post is painted with a different color as the eighth post.\n        // The number of ways to paint the ninth post is k * (k - 1) if the eighth post is painted with the same color as the ninth post, or k * (k - 1) if the eighth post is painted with a different color as the ninth post.\n        // The number of ways to paint the tenth post is k *",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // There are k ways to paint the first post\n        // There are k ways to paint the second post\n        // There are k ways to paint the third post\n        // There are k ways to paint the fourth post\n        // There are k ways to paint the fifth post\n        // There are k ways to paint the sixth post\n        // There are k ways to paint the seventh post\n        // There are k ways to paint the eighth post\n        // There are k ways to paint the ninth post\n        // There are k ways to paint the tenth post\n        // There are k ways to paint the eleventh post\n        // There are k ways to paint the twelfth post\n        // There are k ways to paint the thirteenth post\n        // There are k ways to paint the fourteenth post\n        // There are k ways to paint the fifteenth post\n        // There are k ways to paint the sixteenth post\n        // There are k ways to paint the seventeenth post\n        // There are k ways to paint the eighteenth post\n        // There are k ways to paint the nineteenth post\n        // There are k ways to paint the twentieth post\n        // There are k ways to paint the twenty-first post\n        // There are k ways to paint the twenty-second post\n        // There are k ways to paint the twenty-third post\n        // There are k ways to paint the twenty-fourth post\n        // There are k ways to paint the twenty-fifth post\n        // There are k ways to paint the twenty-sixth post\n        // There are k ways to paint the twenty-seventh post\n        // There are k ways to paint the twenty-eighth post\n        // There are k ways to paint the twenty-ninth post\n        // There are k ways to paint the thirtieth post\n        // There are k ways to paint the thirty-first post\n        // There are k ways to paint the thirty-second post\n        // There are k ways to paint the thirty-third post\n        // There are k ways to paint the thirty-fourth post\n        // There are k ways to paint the thirty-fifth post\n        // There are k ways to paint the thirty-sixth post\n        // There are k ways to paint the thirty-seventh post\n        // There are k ways to paint the thirty-eighth post\n        // There are",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // There are k ways to paint the first post.\n        // For the second post, there are k-1 ways to paint it if the first post has the same color.\n        // There are k ways to paint the second post if the first post has a different color.\n        // For the third post, there are k-1 ways to paint it if the first and second posts have the same color.\n        // There are k ways to paint the third post if the first and second posts have a different color.\n        // There are k-1 ways to paint the third post if the first post has the same color and the second post has a different color.\n        // There are k-1 ways to paint the third post if the first post has a different color and the second post has the same color.\n        // For the fourth post, there are k-1 ways to paint it if the first, second and third posts have the same color.\n        // There are k ways to paint the fourth post if the first, second and third posts have a different color.\n        // There are k-1 ways to paint the fourth post if the first and second posts have the same color and the third post has a different color.\n        // There are k-1 ways to paint the fourth post if the first and third posts have the same color and the second post has a different color.\n        // There are k-1 ways to paint the fourth post if the second and third posts have the same color and the first post has a different color.\n        // For the fifth post, there are k-1 ways to paint it if the first, second, third and fourth posts have the same color.\n        // There are k ways to paint the fifth post if the first, second, third and fourth posts have a different color.\n        // There are k-1 ways to paint the fifth post if the first, second and third posts have the same color and the fourth post has a different color.\n        // There are k-1 ways to paint the fifth post if the first, second and fourth posts have the same color and the third post has a different color.\n        // There are k-1 ways to paint the fifth post if the first, third and fourth posts have the same color and the second post has a different color.\n        // There are k-1 ways to paint the fifth post if the second, third and fourth",
    "        // if n = 1, then there are k ways of painting\n        if (n == 1) return k;\n        // if n = 2, then there are two situations\n        // 1) You paint same color with the previous post => k*1 ways to paint, named it as same\n        // 2) You paint differently with the previous post => k*(k-1) ways to paint this way, named it as dif\n        // So, you can think, if the current situation is same, the previous situation is dif, and vice versa.\n        // Since there is a rule: \"at most 2 adjacent posts have the same color\", so add a rule:\n        // the third situation: the first one and the second one have the same color => same*1 ways to paint, named it as tsame\n        // So, we can write the following code:\n        long same = k;\n        long dif = k * (k - 1);\n        long tsame = 0;\n        for (int i = 3; i <= n; i++) {\n            tsame = same;\n            same = dif;\n            dif = (k - 1) * (same + dif);\n        }\n        return same + dif;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k, diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k, diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1) {\n            return k;\n        }\n        // if n == 2, then there are two situations\n        //      1) You paint same color with the previous post => k*1 ways to paint, named it as same\n        //      2) You paint differently with the previous post => k*(k-1) ways to paint this way, named it as dif\n        // So, you can think, if n >= 3, you can always maintain these two situations,\n        // You either paint the same color with the previous one, or differently.\n        // Since there is a rule: \"at most 2 adjacent fence posts have the same color.\"\n        // We can further analyze:\n        //      1) If you paint the same color with the previous one, it means you cannot paint the same color with the previous of previous one, you can only paint differently, and the number of ways to paint this way is same*(k-1).\n        //      2) If you paint differently with the previous one, it means you cannot paint differently with the previous of previous one, you can only paint the same color, and the number of ways to paint this way is dif*1.\n        // Here you can conclude, when seeing back from the next post of previous post, you can think the current post has two options: same color or different color, so there are same + dif ways to paint the current post.\n        // And since there is a rule: \"at most 2 adjacent fence posts have the same color.\"\n        // We can further analyze:\n        //      1) If you paint the same color with the previous one, it means you cannot paint the same color with the previous of previous one, you can only paint differently, and the number of ways to paint this way is same*(k-1).\n        //      2) If you paint differently with the previous one, it means you cannot paint differently with the previous of previous one, you can only paint the same color, and the number of ways to paint this way is dif*1.\n        // Here you can conclude, when seeing back from the next post of previous post, you can think the current post has two options: same color or different color, so there are same + dif ways to paint the current post.\n",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 0 || k == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        for (long i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0 || k == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1) {\n            return k;\n        }\n        // if n == 2, then there are two situations\n        //      1) You paint same color with the previous post => k*1 ways to paint, named it as same\n        //      2) You paint differently with the previous post => k*(k-1) ways to paint this way, named it as dif\n        // So, you can think, if n >= 3, you can always maintain these two situations,\n        // You either paint the same color with the previous one, or differently.\n        // Since there is a rule: \"at most 2 adjacent fence posts have the same color.\"\n        // We can further analyze:\n        //      same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same => dif => same =>",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Base cases\n        if (n == 0 || k == 0 || k == 1)\n            return 0;\n        if (n == 1)\n            return k;\n        if (n == 2)\n            return k + k * (k - 1);\n\n        // Recurrence relation\n        // Let dp[i] be the number of ways to paint the ith post\n        // dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = k;\n        dp[2] = k + k * (k - 1);\n        for (int i = 3; i <= n; i++)\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        return dp[n];",
    "        // There are two cases:\n        // 1. The last post has a different color than the one before last\n        // 2. The last post has the same color as the one before last\n        // In the first case, the number of ways of painting the last post is k-1 and the number of ways of painting the remaining posts is the same as the number of ways of painting n-1 posts, so the total number of ways is (k-1)*CountNoOfWays(n-1,k)\n        // In the second case, the number of ways of painting the last two posts is k and the number of ways of painting the remaining posts is the same as the number of ways of painting n-2 posts, so the total number of ways is k*CountNoOfWays(n-2,k)\n        // The total number of ways of painting the fence is the sum of the two cases above\n        if (n == 1) return k;\n        if (n == 2) return k*k;\n        long diff = k*CountNoOfWays(n-1,k);\n        long same = CountNoOfWays(n-2,k);\n        return diff+same;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n\n        long same = k;\n        long diff = k * (k - 1);\n\n        for (long i = 3; i <= n; i++) {\n            long prev_diff = diff;\n            diff = (same + diff) * (k - 1);\n            same = prev_diff;\n        }\n\n        return same + diff;",
    "        // The idea is to use dynamic programming.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // Let's say we have a fence with n-2 posts and k colors.\n        // Let's say we have a fence with n-3 posts and k colors.\n        // Let's say we have a fence with n-4 posts and k colors.\n        // Let's say we have a fence with n-5 posts and k colors.\n        // Let's say we have a fence with n-6 posts and k colors.\n        // Let's say we have a fence with n-7 posts and k colors.\n        // Let's say we have a fence with n-8 posts and k colors.\n        // Let's say we have a fence with n-9 posts and k colors.\n        // Let's say we have a fence with n-10 posts and k colors.\n        // Let's say we have a fence with n-11 posts and k colors.\n        // Let's say we have a fence with n-12 posts and k colors.\n        // Let's say we have a fence with n-13 posts and k colors.\n        // Let's say we have a fence with n-14 posts and k colors.\n        // Let's say we have a fence with n-15 posts and k colors.\n        // Let's say we have a fence with n-16 posts and k colors.\n        // Let's say we have a fence with n-17 posts and k colors.\n        // Let's say we have a fence with n-18 posts and k colors.\n        // Let's say we have a fence with n-19 posts and k colors.\n        // Let's say we have a fence with n-20 posts and k colors.\n        // Let's say we have a fence with n-21 posts and k colors.\n        // Let's say we have a fence with n-22 posts and k colors.\n        // Let's say we have a fence with n-23 posts and k colors.\n        // Let's say we have a fence with n-24 posts and k colors.\n        // Let's say we have a fence with n-25 posts and k colors.\n        // Let's say we have a",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long diff = k * (k - 1);\n        long same = k;\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (diff + same) * (k - 1);\n            same = temp;\n        }\n        return diff + same;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there is k-ways to paint.\n        // if n == 2, there is two situations\n        //      2.1 You paint same color with the previous post => k*1 ways to paint, named it as same\n        //      2.2 You paint differently with the previous post => k*(k-1) ways to paint this way, named it as dif\n        // so, you can think, if n >= 3, you can always maintain these two situations,\n        // you either paint the same color with the previous one, or differently.\n        // since there is a rule: \"at most 2 adjacent posts have the same color\" =>\n        //      you can only paint differently when the last two are having the same color (which is same), or\n        //      you can only paint same color when the last two are having different colors (which is dif).\n        // So, we can keep updating these two variables same and dif, and eventually we can get our result.\n        //\n        // Here is the total ways to paint in 3 situations:\n        //      if you paint same:\n        //          situation same: same = same * 1 = same\n        //          situation dif: dif = dif * (k-1) = dif * (k-1)\n        //      if you paint differently:\n        //          situation same: same = dif * 1 = dif\n        //          situation dif: dif = dif * (k-1) + same * (k-1) = dif * (k-1) + dif * (k-1) = dif * k\n        //\n        // Since there is a rule: at most 2 adjacent posts have the same color, we can further analyze:\n        //      from situation 1, we can see: same = same, it means there is no change from situation 1 to 2.\n        //      from situation 2, we can see: dif = dif * k, it means, every time you add a differently painted post, the number of ways to paint this post will be multiplied by k.\n        //\n        // Time Complexity: O(n), Space Complexity: O(1)\n        long same = 0, dif = k;\n        for (int i = 2; i <= n",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k, diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // Let's say we have n posts and k colors.\n        // We can paint the first post in k ways.\n        // We can paint the second post in k ways.\n        // If we paint the second post with the same color as the first post, we have k-1 ways to paint the third post.\n        // If we paint the second post with a different color than the first post, we have k-1 ways to paint the third post.\n        // We can paint the third post in k ways.\n        // If we paint the third post with the same color as the second post, we have k-1 ways to paint the fourth post.\n        // If we paint the third post with a different color than the second post, we have k-1 ways to paint the fourth post.\n        // We can paint the fourth post in k ways.\n        // If we paint the fourth post with the same color as the third post, we have k-1 ways to paint the fifth post.\n        // If we paint the fourth post with a different color than the third post, we have k-1 ways to paint the fifth post.\n        // We can paint the fifth post in k ways.\n        // If we paint the fifth post with the same color as the fourth post, we have k-1 ways to paint the sixth post.\n        // If we paint the fifth post with a different color than the fourth post, we have k-1 ways to paint the sixth post.\n        // We can paint the sixth post in k ways.\n        // If we paint the sixth post with the same color as the fifth post, we have k-1 ways to paint the seventh post.\n        // If we paint the sixth post with a different color than the fifth post, we have k-1 ways to paint the seventh post.\n        // We can paint the seventh post in k ways.\n        // If we paint the seventh post with the same color as the sixth post, we have k-1 ways to paint the eighth post.\n        // If we paint the seventh post with a different color than the sixth post, we have k-1 ways to paint the eighth post.\n        // We can paint the eighth post in k ways.\n        // If we paint the eighth post with the same color as the seventh post, we have k-1 ways to paint the ninth post.\n        // If",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // We can paint the last post with any of the k colors.\n        // If we paint the last post with the same color as the last post of the fence with n-1 posts, then we have to paint the last post of the fence with n-1 posts with one of the k-1 colors.\n        // If we paint the last post with a color different from the last post of the fence with n-1 posts, then we have to paint the last post of the fence with n-1 posts with one of the k colors.\n        // Let's say we have a fence with n-2 posts and k colors.\n        // We can paint the last post with any of the k colors.\n        // If we paint the last post with the same color as the last post of the fence with n-2 posts, then we have to paint the last post of the fence with n-2 posts with one of the k-1 colors.\n        // If we paint the last post with a color different from the last post of the fence with n-2 posts, then we have to paint the last post of the fence with n-2 posts with one of the k colors.\n        // If we paint the last post with the same color as the second last post of the fence with n-2 posts, then we have to paint the second last post of the fence with n-2 posts with one of the k-1 colors.\n        // If we paint the last post with a color different from the second last post of the fence with n-2 posts, then we have to paint the second last post of the fence with n-2 posts with one of the k colors.\n        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // We can paint the last post with any of the k colors.\n        // If we paint the last post with the same color as the last post of the fence with n-1 posts, then we have to paint the last post of the fence with n-1 posts with",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long prev_diff = diff;\n            diff = (same + diff) * (k - 1);\n            same = prev_diff;\n        }\n        return same + diff;",
    "        if (n == 0 || k == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        // if n == 2, there are two situations\n        // 1. same color: k ways to paint, 1 way to paint\n        // 2. diff color: k ways to paint, k-1 ways to paint\n        // if n > 2, there are two situations\n        // 1. same color as the previous one: dp[n-1] ways to paint\n        // 2. diff color: dp[n-2] * (k-1) ways to paint\n        // dp[n] = dp[n-1] * 1 + dp[n-2] * (k-1)\n        // dp[n] = dp[n-1] + dp[n-2] * (k-1)\n        long[] dp = new long[n+1];\n        dp[1] = k;\n        dp[2] = k + k*(k-1);\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] * (k-1);\n        }\n        return dp[n];",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // The number of ways to paint the first two posts is k * k.\n        // The number of ways to paint the first post is k.\n        // The number of ways to paint the second post is k * k.\n        // The number of ways to paint the third post is k * (k - 1).\n        // The number of ways to paint the fourth post is k * (k - 1) * (k - 1).\n        // The number of ways to paint the fifth post is k * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the sixth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the seventh post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the eighth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the ninth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the tenth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the eleventh post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1).\n        // The number of ways to paint the twelfth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (",
    "        // Write your code here\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long diffColorCounts = k * (k - 1);\n        long sameColorCounts = k;\n        for (int i = 3; i <= n; i++) {\n            long temp = diffColorCounts;\n            diffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n            sameColorCounts = temp;\n        }\n        return diffColorCounts + sameColorCounts;",
    "        // Write your code here\n        long same = 0, diff = k;\n        for (long i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the previous problem.\n        // The only difference is that we will have to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We will use the same logic as in the",
    "        // The number of ways of painting the fence with n posts and k colors is the sum of the following two numbers:\n        // 1. The number of ways of painting the fence with n-1 posts and k colors.\n        // 2. The number of ways of painting the fence with n-2 posts and k colors.\n        // The first number is k times the number of ways of painting the fence with n-1 posts and k colors.\n        // The second number is k times the number of ways of painting the fence with n-2 posts and k colors.\n        // The reason for this is that the first number is the number of ways of painting the fence with n-1 posts and k colors,\n        // and then painting the nth post with any of the k colors.\n        // The second number is the number of ways of painting the fence with n-2 posts and k colors,\n        // and then painting the nth and (n-1)th posts with any of the k colors.\n        // The reason for this is that the (n-1)th and nth posts must have the same color,\n        // and the number of ways of painting the fence with n-2 posts and k colors is the number of ways of painting the fence with n-2 posts and k colors,\n        // and then painting the (n-1)th and nth posts with any of the k colors.\n        // The number of ways of painting the fence with n posts and k colors is the sum of the following two numbers:\n        // 1. The number of ways of painting the fence with n-1 posts and k colors.\n        // 2. The number of ways of painting the fence with n-2 posts and k colors.\n        // The first number is k times the number of ways of painting the fence with n-1 posts and k colors.\n        // The second number is k times the number of ways of painting the fence with n-2 posts and k colors.\n        // The reason for this is that the first number is the number of ways of painting the fence with n-1 posts and k colors,\n        // and then painting the nth post with any of the k colors.\n        // The second number is the number of ways of painting the fence with n-2 posts and k colors,\n        // and then painting the nth and (n-1",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // The number of ways of painting the first two posts is k * k.\n        // The number of ways of painting the first post is k.\n        // The number of ways of painting the second post is k * (k - 1) because the first post has already been painted.\n        // The number of ways of painting the third post is k * (k - 1) * (k - 1) because the first and second posts have already been painted.\n        // The number of ways of painting the fourth post is k * (k - 1) * (k - 1) * (k - 1) because the first, second and third posts have already been painted.\n        // The number of ways of painting the fifth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) because the first, second, third and fourth posts have already been painted.\n        // The number of ways of painting the sixth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) because the first, second, third, fourth and fifth posts have already been painted.\n        // The number of ways of painting the seventh post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) because the first, second, third, fourth, fifth and sixth posts have already been painted.\n        // The number of ways of painting the eighth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) because the first, second, third, fourth, fifth, sixth and seventh posts have already been painted.\n        // The number of ways of painting the ninth post is k * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) because the first, second, third, fourth, fifth, sixth, seventh and eighth posts have already been painted.\n        // The number of ways of painting the tenth post is k * (k - 1) * (k",
    "        // We can use the same logic as in the problem of painting the fence with k colors.\n        // The only difference is that we need to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // Let us define the following variables:\n        //      same[i] = number of ways of painting the fence such that the ith post has the same color as the (i - 1)th post\n        //      diff[i] = number of ways of painting the fence such that the ith post has a different color than the (i - 1)th post\n        // We can easily see that same[i] = diff[i - 1] and diff[i] = (k - 1) * (same[i - 1] + diff[i - 1])\n        // We can use the same logic as in the problem of painting the fence with k colors.\n        // The only difference is that we need to keep track of the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // Let us define the following variables:\n        //      same[i] = number of ways of painting the fence such that the ith post has the same color as the (i - 1)th post\n        //      diff[i] = number of ways of painting the fence such that the ith post has a different color than the (i - 1)th post\n        // We can easily see that same[i] = diff[i - 1] and diff[i] = (k - 1) * (same[i - 1] + diff[i - 1])\n        long[] same = new long[n + 1];\n        long[] diff = new long[n + 1];\n        same[1] = 0;\n        diff[1] = k;\n        for (int i = 2; i <= n; i++) {\n            same[i] = diff[i - 1];\n            diff[i] = (k - 1) * (same[i - 1] + diff[i - 1]);\n        }\n        return same[n] + diff[n];",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if there is only one post, there are k ways to paint it\n        if (n == 1) return k;\n        // if there are only two posts, there are two cases:\n        // 1. the two posts have the same color, which yields k ways\n        // 2. the two posts have different colors, which yields k * (k - 1) ways\n        if (n == 2) return k + k * (k - 1);\n        // if there are more than two posts, we can divide the problem into two cases:\n        // 1. the first two posts have the same color, which yields k ways\n        // 2. the first two posts have different colors, which yields k * (k - 1) ways\n        // in either case, the number of ways to paint the rest of the fence is the same, which is CountNoOfWays(n - 1, k)\n        return CountNoOfWays(n - 1, k) * (k - 1) + CountNoOfWays(n - 2, k) * (k - 1);",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long prev_diff = diff;\n            diff = (same + diff) * (k - 1);\n            same = prev_diff;\n        }\n        return same + diff;",
    "        // The idea is to find the total number of ways of painting the fence.\n        // Let the total number of ways be Total(n).\n        // The idea is to break the problem in two cases:\n        // 1. The last post has a different color than the previous one.\n        // 2. The last post has the same color as the previous one.\n        //\n        // Since we can paint the last post in k different ways, and the previous one in k-1 ways, we have:\n        // Total(n) = k * (k-1)^(n-1)\n        //\n        // In case 2, we can't use the same color as the previous one, so we have:\n        // Total(n) = k * (k-1)^(n-1) - (k-1)^n\n        //\n        // The answer is Total(n) - (k-1)^n\n        //\n        // The problem is that this solution is O(n), and we need to find a solution in O(1).\n        //\n        // We can use the matrix method.\n        // Let's define a matrix M:\n        // M = [ k k-1 ]\n        //     [ 1  0  ]\n        //\n        // We can see that M^n = [ Total(n) (k-1)^n ]\n        //                      [ Total(n-1) (k-1)^(n-1) ]\n        //\n        // The answer is Total(n) - (k-1)^n\n        //\n        // We can use the matrix method to compute M^n in O(log(n)) time.\n        //\n        // The problem is that we have to compute M^n, and we need to compute M^(n-1) to get the answer.\n        //\n        // We can use the matrix method to compute M^(n-1) in O(log(n)) time.\n        //\n        // The problem is that we have to compute M^(n-1), and we need to compute M^(n-2) to get the answer.\n        //\n        // We can use the matrix method to compute M^(n-2) in O(log(n)) time.\n",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 2; i < n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long[] dp = new long[n];\n        dp[0] = k;\n        dp[1] = k * k;\n        for (int i = 2; i < n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[n - 1];",
    "        // Let's say we have n posts and k colors.\n        // If we paint the first post with color 1, we have k-1 colors left for the second post.\n        // If we paint the first post with color 2, we have k-1 colors left for the second post.\n        // If we paint the first post with color 3, we have k-1 colors left for the second post.\n        // If we paint the first post with color 4, we have k-1 colors left for the second post.\n        // If we paint the first post with color 5, we have k-1 colors left for the second post.\n        // If we paint the first post with color 6, we have k-1 colors left for the second post.\n        // If we paint the first post with color 7, we have k-1 colors left for the second post.\n        // If we paint the first post with color 8, we have k-1 colors left for the second post.\n        // If we paint the first post with color 9, we have k-1 colors left for the second post.\n        // If we paint the first post with color 10, we have k-1 colors left for the second post.\n        // If we paint the first post with color 11, we have k-1 colors left for the second post.\n        // If we paint the first post with color 12, we have k-1 colors left for the second post.\n        // If we paint the first post with color 13, we have k-1 colors left for the second post.\n        // If we paint the first post with color 14, we have k-1 colors left for the second post.\n        // If we paint the first post with color 15, we have k-1 colors left for the second post.\n        // If we paint the first post with color 16, we have k-1 colors left for the second post.\n        // If we paint the first post with color 17, we have k-1 colors left for the second post.\n        // If we paint the first post with color 18, we have k-1 colors left for the second post.\n        // If we paint the first post with color 19, we have k-1 colors left for the second post.\n        // If we paint the first post with color 20, we have k-1 colors left for the second",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n - 1 posts and k colors.\n        // We can paint the last post with any color.\n        // If the last post is painted with the same color as the second last post, then we have to paint the second last post with a different color.\n        // If the last post is painted with a different color as the second last post, then we can paint the second last post with any color.\n        // Therefore, the number of ways of painting the fence with n posts and k colors is equal to the sum of the number of ways of painting the fence with n - 1 posts and k colors and the number of ways of painting the fence with n - 2 posts and k colors.\n        // We can use this recurrence relation to solve the problem.\n        // We can use a bottom-up approach to solve the problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n - 1 posts and k colors.\n        // We can paint the last post with any color.\n        // If the last post is painted with the same color as the second last post, then we have to paint the second last post with a different color.\n        // If the last post is painted with a different color as the second last post, then we can paint the second last post with any color.\n        // Therefore, the number of ways of painting the fence with n posts and k colors is equal to the sum of the number of ways of painting the fence with n - 1 posts and k colors and the number of ways of painting the fence with n - 2 posts and k colors.\n        // We can use this recurrence relation to solve the problem.\n        // We can use a bottom-up approach to solve the problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n - 1 posts and k colors.\n        // We can paint the last post with any color.\n        // If the last post is painted with the same color as the second last post, then we have to paint the second last post with a different color.\n        // If the last post is painted with a",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // We can paint the last post in k ways.\n        // If we paint the last post in a different color than the previous post, we have (k-1) ways to paint the last post.\n        // If we paint the last post in the same color as the previous post, we have 1 way to paint the last post.\n        // So, the total number of ways to paint the fence is (k-1) * (k-1)^(n-2) + k * (k-1)^(n-2) = k * (k-1)^(n-1).\n        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // We can paint the last post in k ways.\n        // If we paint the last post in a different color than the previous post, we have (k-1) ways to paint the last post.\n        // If we paint the last post in the same color as the previous post, we have 1 way to paint the last post.\n        // So, the total number of ways to paint the fence is (k-1) * (k-1)^(n-2) + k * (k-1)^(n-2) = k * (k-1)^(n-1).\n        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // We can paint the last post in k ways.\n        // If we paint the last post in a different color than the previous post, we have (k-1) ways to paint the last post.\n        // If we paint the last post in the same color as the previous post, we have 1 way to paint the last post.\n        // So, the total number of ways to paint the fence is (k-1) * (k-1)",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long diff = k * (k - 1);\n        long same = k;\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (diff + same) * (k - 1);\n            same = temp;\n        }\n        return diff + same;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long[] dp = new long[n + 1];\n        dp[1] = k;\n        dp[2] = k * k;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[n];",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1) return k;\n        // if n == 2, then there are two situations\n        // if the two posts have the same color, k*1 ways to paint,\n        // if not, k*(k-1) ways to paint\n        if (n == 2) return k * k;\n        // if n > 2, we can use the same color as the last one (if allowed)\n        // or different color.\n        //\n        // the number of ways to paint same color (same as last) would be sameColorCounts\n        // the number of ways to paint differently (not same as last) would be diffColorCounts.\n        //\n        // Since there is a rule: \"no more than 2 adjacent fence posts have the same color.\"\n        // We can further analyze:\n        //      diffColorCounts = sameColorCounts * (k-1)\n        //      sameColorCounts = diffColorCounts * (k-1)\n        //\n        // We can conclude:\n        //      diffColorCounts = k * k\n        //      sameColorCounts = k\n        //\n        // Here we consider the case n = 3. The equation above also works for n = 2.\n        long diffColorCounts = k * k;\n        long sameColorCounts = k;\n        for (int i = 3; i <= n; ++i) {\n            long temp = diffColorCounts;\n            diffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n            sameColorCounts = temp;\n        }\n        return diffColorCounts + sameColorCounts;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long[] dp = new long[n + 1];\n        dp[0] = 0;\n        dp[1] = k;\n        dp[2] = k * k;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[n];",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have n posts and k colors.\n        // Let's say we have a table with n rows and k columns.\n        // The rows represent the number of posts and the columns represent the number of colors.\n        // The value at each cell represents the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n        // We can fill the table using the following recurrence relation:\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and k columns.\n        // Let's say we have a table with n rows and",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // if there is only one post, there is only one way to paint it\n        if (n == 1) return k;\n        // if there are only two posts, there are two ways to paint it\n        if (n == 2) return k * k;\n        // if there are more than two posts, there are two ways to paint it\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        // if n == 2, there are two situations\n        // - 2 posts have the same color, k*1 ways to paint\n        // - 2 posts have different colors, k*(k-1) ways to paint\n        // So, there are k + k*(k-1) ways to paint in total\n        // if n == 3, there are three situations\n        // - 3 posts have the same color, k*1*1 ways to paint\n        // - 2 posts have the same color, k*1*(k-1) ways to paint\n        // - 3 posts have different colors, k*(k-1)*(k-2) ways to paint\n        // So, there are k + k*(k-1) + k*(k-1)*(k-2) ways to paint in total\n        // if n == 4, there are four situations\n        // - 4 posts have the same color, k*1*1*1 ways to paint\n        // - 3 posts have the same color, k*1*1*(k-1) ways to paint\n        // - 2 posts have the same color, k*1*(k-1)*(k-1) ways to paint\n        // - 4 posts have different colors, k*(k-1)*(k-2)*(k-3) ways to paint\n        // So, there are k + k*(k-1) + k*(k-1)*(k-2) + k*(k-1)*(k-2)*(k-3) ways to paint in total\n        // if n == 5, there are five situations\n        // - 5 posts have the same color, k*1*1*1*1 ways to paint\n        // - 4 posts have the same color, k*1*1*1*(k-1) ways to paint\n        // - 3 posts have the same color, k*1*1*(k-1)*(k-1) ways to paint\n        // - 2 posts have the same color, k*1*(k-1)*(k-1)*(k-1) ways to paint\n        // - 5 posts have different colors, k*(k-1)*(k-2",
    "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return k;\n        if (n == 2)\n            return k + k * (k - 1);\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // The idea is to find the total number of ways to paint the fence.\n        // Let the total number of ways be W(n, k).\n        // The first post can be painted in k ways.\n        // The second post can be painted in k ways.\n        // But the second post cannot have the same color as the first post. So, there are k-1 ways to paint the second post.\n        // If the second post has a different color than the first post, the third post can be painted in k ways.\n        // If the second post has the same color as the first post, the third post can be painted in k-1 ways.\n        // So, the total number of ways to paint the third post is k + (k-1) * k = k + k^2 - k = k^2.\n        // Similarly, the total number of ways to paint the fourth post is k^2 + (k-1) * k^2 = k^3.\n        // So, the total number of ways to paint the nth post is k^(n-1).\n        // But the problem is to find the number of ways such that at most 2 adjacent posts have the same color.\n        // So, we subtract the number of ways such that 3 adjacent posts have the same color.\n        // The number of ways such that 3 adjacent posts have the same color is k * (k-1) * k^(n-3).\n        // So, the total number of ways to paint the fence is W(n, k) = k^(n-1) - k * (k-1) * k^(n-3).\n        return (long)Math.Pow(k, n - 1) - k * (k - 1) * (long)Math.Pow(k, n - 3);",
    "        // The number of ways of painting the fence with n posts and k colors is the sum of the number of ways of painting the fence with n-1 posts and k colors and the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-1 posts and k colors is k times the number of ways of painting the fence with n-2 posts and k colors.\n        // The number of ways of painting the fence with n-2 posts and k colors is k times the number of ways of painting the fence with n-3 posts and k colors.\n        // The number of ways of painting the fence with n-3 posts and k colors is k times the number of ways of painting the fence with n-4 posts and k colors.\n        // The number of ways of painting the fence with n-4 posts and k colors is k times the number of ways of painting the fence with n-5 posts and k colors.\n        // The number of ways of painting the fence with n-5 posts and k colors is k times the number of ways of painting the fence with n-6 posts and k colors.\n        // The number of ways of painting the fence with n-6 posts and k colors is k times the number of ways of painting the fence with n-7 posts and k colors.\n        // The number of ways of painting the fence with n-7 posts and k colors is k times the number of ways of painting the fence with n-8 posts and k colors.\n        // The number of ways of painting the fence with n-8 posts and k colors is k times the number of ways of painting the fence with n-9 posts and k colors.\n        // The number of ways of painting the fence with n-9 posts and k colors is k times the number of ways of painting the fence with n-10 posts and k colors.\n        // The number of ways of painting the fence with n-10 posts and k colors is k times the number of ways of painting the fence with n-11 posts and k colors.\n        // The number of ways of painting the fence with n-11 posts and k colors is k times the number of ways of painting the fence with n-12 posts and k colors.\n        // The number of ways of painting the fence with n-12 posts and k colors is k times the number of ways of painting",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k, diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 2; i < n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // There are two cases:\n        // 1. The last post has a different color than the one before last\n        // 2. The last post has the same color as the one before last\n        // In the first case, the number of ways of painting the last post is k-1 and the number of ways of painting the remaining posts is the same as the number of ways of painting n-1 posts.\n        // In the second case, the number of ways of painting the last post is 1 and the number of ways of painting the remaining posts is the same as the number of ways of painting n-2 posts.\n        // Therefore, the total number of ways of painting the fence is (k-1)*CountNoOfWays(n-1, k) + CountNoOfWays(n-2, k)\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k*k;\n        }\n        return (k-1)*CountNoOfWays(n-1, k) + CountNoOfWays(n-2, k);",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Write your code here\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long diffColorCounts = k * (k - 1);\n        long sameColorCounts = k;\n        for (int i = 2; i < n; i++) {\n            long temp = diffColorCounts;\n            diffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n            sameColorCounts = temp;\n        }\n        return diffColorCounts + sameColorCounts;",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have n posts and k colors.\n        // Let's say we have a function f(n, k) which returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        // We can use the following recurrence relation to calculate f(n, k):\n        // f(n, k) = f(n - 1, k) * (k - 1) + f(n - 2, k) * (k - 1)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n        // f(n, k) = f(n - 1, k) + f(n - 2, k)\n",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 2; i < n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1)\n            return k;\n        // if n == 2, then there are 2 cases\n        // 1) k*1 ways to have same colors (2 posts have same colors)\n        // 2) k*(k-1) ways to have different colors (2 posts have different colors)\n        if (n == 2)\n            return k + k * (k - 1);\n        // if n > 2, then there are 2 cases\n        // 1) Same colors: the number of ways to paint the first two posts with same colors depends on the number of ways to paint the next n-1 posts with same colors\n        // 2) Different colors: the number of ways to paint the first two posts with different colors depends on the number of ways to paint the next n-1 posts with different colors\n        return CountNoOfWays(n - 1, k) * (k - 1) + CountNoOfWays(n - 2, k) * (k - 1);",
    "        // We can use the formula for the number of ways to paint the fence\n        // with at most 2 adjacent posts having the same color.\n        // The formula is:\n        // W(n, k) = W(n-1, k) + k * W(n-2, k)\n        // where W(n, k) is the number of ways to paint the fence with n posts\n        // and k colors such that at most 2 adjacent posts have the same color.\n        // W(n-1, k) is the number of ways to paint the fence with n-1 posts\n        // and k colors such that at most 2 adjacent posts have the same color.\n        // W(n-2, k) is the number of ways to paint the fence with n-2 posts\n        // and k colors such that at most 2 adjacent posts have the same color.\n        // k * W(n-2, k) is the number of ways to paint the fence with n-2 posts\n        // and k colors such that at most 2 adjacent posts have the same color\n        // and then we can paint the last post with any of the k colors.\n        //\n        // We can use dynamic programming to compute the number of ways to paint\n        // the fence with at most 2 adjacent posts having the same color.\n        // We can use an array to store the number of ways to paint the fence\n        // with at most 2 adjacent posts having the same color.\n        // The array is indexed by the number of posts and the number of colors.\n        // The array is initialized with the base cases:\n        // W(0, k) = 0\n        // W(1, k) = k\n        // W(2, k) = k * k\n        // Then for each number of posts n, we can compute the number of ways\n        // to paint the fence with at most 2 adjacent posts having the same color\n        // for each number of colors k.\n        // The time complexity is O(n * k) and the space complexity is O(n * k).\n        long[,] W = new long[n + 1, k + 1];\n        for (long i = 0; i <= n; i++) {\n            for (long j = 0; j <= k; j++) {\n                if (i",
    "        // if n == 1, then there is k-ways to paint.\n        // if n == 2, there is two situations\n        //      2.1 You paint same color with the previous post: k*1 ways to paint, named it as same\n        //      2.2 You paint differently with the previous post: k*(k-1) ways to paint this way, named it as dif\n        // so, you can think, if n >= 3, you can always maintain these two situations,\n        // you either paint the same color with the previous one, or differently.\n        // since there is a rule: \"at most 2 adjacent posts have the same color\"\n        // the next situation will always be different with the last one.\n        // so, you can think it as:\n        //      the last two posts have the same color, the third one you want to paint differently, you have (k-1)*1 ways to do so.\n        //      the last two posts have different colors, and the third one you want to paint differently (both the first and second posts have k-1 ways to do so), you have (k-1)*(k-1) ways to paint this way.\n        // so, you can think, the total ways to paint the third one is (k-1)*1 + (k-1)*(k-1) = k*(k-1).\n        // and since the fourth one you will always have k*(k-1) ways to paint, no matter same or different color than the third one, you can think it as k*(k-1)*1.\n        // the fifth one, you will have k*(k-1)*k.\n        // and next one, you will always have k*(k-1)*k ways to paint, no matter which color it is.\n        // so, you can think the problem as how many ways you can paint the first two posts, then next two posts, then next two posts...\n        // until you reach the nth post.\n        // the total ways to paint the first two posts is k*k, then next two is k*k*k, next two is k*k*k*k...\n        // so, you can think it as k^n.\n        // then, you can think the problem as how many",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1)\n            return k;\n        // if n == 2, then there are two situations\n        // if the first two posts have the same color, k*1 ways to paint,\n        // if the first two posts have different colors, k*(k-1) ways to paint\n        else if (n == 2)\n            return k + k * (k - 1);\n        else {\n            // the third situation:\n            // if the first two are different colored, the number of ways to paint the rest is sameColorCounts\n            long sameColorCounts = k;\n            // if the first two are same colored, the number of ways to paint the rest is diffColorCounts\n            long diffColorCounts = k * (k - 1);\n            for (int i = 2; i < n; i++) {\n                // the third situation:\n                // if the first two are different colored, the number of ways to paint the rest is sameColorCounts\n                // if the first two are same colored, the number of ways to paint the rest is diffColorCounts\n                long temp = diffColorCounts;\n                diffColorCounts = (diffColorCounts + sameColorCounts) * (k - 1);\n                sameColorCounts = temp;\n            }\n            return sameColorCounts + diffColorCounts;\n        }",
    "        // The number of ways to paint the first two posts is k*k.\n        // The number of ways to paint the first post is k.\n        // The number of ways to paint the second post is k*(k-1) because the first post cannot be painted the same color as the second post.\n        // The number of ways to paint the third post is k*(k-1) + k*(k-1)*(k-1) because the third post can be painted the same color as the second post or a different color.\n        // The number of ways to paint the fourth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) because the fourth post can be painted the same color as the third post or a different color.\n        // The number of ways to paint the fifth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1) because the fifth post can be painted the same color as the fourth post or a different color.\n        // The number of ways to paint the sixth post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1)*(k-1) because the sixth post can be painted the same color as the fifth post or a different color.\n        // The number of ways to paint the seventh post is k*(k-1) + k*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-1)*(k-1)*(k-1)*(k-1)*(k-1) + k*(k-",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        // There are two cases:\n        // 1. The last post has a different color than the one before last\n        // 2. The last post has the same color as the one before last\n        // In the first case, there are k-1 options for the last post, and the number of ways to paint the other posts is the same as the number of ways to paint n-1 posts.\n        // In the second case, there is only one option for the last post, and the number of ways to paint the other posts is the same as the number of ways to paint n-2 posts.\n        // The total number of ways is the sum of these two cases.\n        // The base cases are:\n        // n = 1, k ways\n        // n = 2, 2k ways\n        // n = 3, (k-1)*(k+1) ways\n        long[] dp = new long[n + 1];\n        dp[1] = k;\n        dp[2] = k * k;\n        dp[3] = (k - 1) * (k + 1);\n        for (int i = 4; i <= n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[n];",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if there is only one post, there is only one way to paint it\n        if (n == 1) return k;\n        // if there are only two posts, there are two ways to paint it\n        if (n == 2) return k * k;\n        // if the first post is painted with color i, then the second post can be painted with any color except i\n        // if the first post is painted with color i, then the second post can be painted with any color except i\n        // if the first two posts have the same color, then the third post can be painted with any color except the first two posts\n        // if the first two posts have different colors, then the third post can be painted with any color\n        // so, the total number of ways to paint the fence is\n        // k * (k - 1) + k * (k - 1) * (k - 1) = k * (k - 1) * (k + 1)\n        long[] dp = new long[n];\n        dp[0] = k;\n        dp[1] = k * k;\n        for (int i = 2; i < n; i++) {\n            dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1);\n        }\n        return dp[n - 1];",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // Let's say we have a fence with n-2 posts and k colors.\n        // Let's say we have a fence with n-3 posts and k colors.\n        // Let's say we have a fence with n-4 posts and k colors.\n        // Let's say we have a fence with n-5 posts and k colors.\n        // Let's say we have a fence with n-6 posts and k colors.\n        // Let's say we have a fence with n-7 posts and k colors.\n        // Let's say we have a fence with n-8 posts and k colors.\n        // Let's say we have a fence with n-9 posts and k colors.\n        // Let's say we have a fence with n-10 posts and k colors.\n        // Let's say we have a fence with n-11 posts and k colors.\n        // Let's say we have a fence with n-12 posts and k colors.\n        // Let's say we have a fence with n-13 posts and k colors.\n        // Let's say we have a fence with n-14 posts and k colors.\n        // Let's say we have a fence with n-15 posts and k colors.\n        // Let's say we have a fence with n-16 posts and k colors.\n        // Let's say we have a fence with n-17 posts and k colors.\n        // Let's say we have a fence with n-18 posts and k colors.\n        // Let's say we have a fence with n-19 posts and k colors.\n        // Let's say we have a fence with n-20 posts and k colors.\n        // Let's say we have a fence with n-21 posts and k colors.\n        // Let's say we have a fence with n-22 posts and k colors.\n        // Let's say we have a fence with n-23 posts and k colors.\n        // Let's say we have a fence with n-24 posts and k colors.\n        // Let's say we have a fence with n-25 posts and k colors.\n        // Let's say we",
    "        // The first post can be painted in k ways.\n        // The second post can be painted in k ways, but it cannot be painted in the same color as the first post.\n        // The third post can be painted in k ways, but it cannot be painted in the same color as the second post.\n        // The fourth post can be painted in k ways, but it cannot be painted in the same color as the third post.\n        // The fifth post can be painted in k ways, but it cannot be painted in the same color as the fourth post.\n        // The sixth post can be painted in k ways, but it cannot be painted in the same color as the fifth post.\n        // The seventh post can be painted in k ways, but it cannot be painted in the same color as the sixth post.\n        // The eighth post can be painted in k ways, but it cannot be painted in the same color as the seventh post.\n        // The ninth post can be painted in k ways, but it cannot be painted in the same color as the eighth post.\n        // The tenth post can be painted in k ways, but it cannot be painted in the same color as the ninth post.\n        // The eleventh post can be painted in k ways, but it cannot be painted in the same color as the tenth post.\n        // The twelfth post can be painted in k ways, but it cannot be painted in the same color as the eleventh post.\n        // The thirteenth post can be painted in k ways, but it cannot be painted in the same color as the twelfth post.\n        // The fourteenth post can be painted in k ways, but it cannot be painted in the same color as the thirteenth post.\n        // The fifteenth post can be painted in k ways, but it cannot be painted in the same color as the fourteenth post.\n        // The sixteenth post can be painted in k ways, but it cannot be painted in the same color as the fifteenth post.\n        // The seventeenth post can be painted in k ways, but it cannot be painted in the same color as the sixteenth post.\n        // The eighteenth post can be painted in k ways, but it cannot be painted in the same color as the seventeenth post.\n        // The nineteenth post can be painted in k ways, but it cannot be painted in the same color as the",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Base cases\n        if (n == 0 || k == 0 || k == 1) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n\n        // There are two cases for the ith post\n        // 1) The ith post has the same color as the (i-1)th post\n        // 2) The ith post has a different color from the (i-1)th post\n        //\n        // Since we are allowed to have at most 2 adjacent posts with the same color,\n        // we can further break the cases into two subcases depending on the color of the (i-2)th post\n        // 1a) The ith post has the same color as the (i-1)th post, which has a different color from the (i-2)th post\n        // 1b) The ith post has the same color as the (i-1)th post, which has the same color as the (i-2)th post\n        // 2a) The ith post has a different color from the (i-1)th post, which has a different color from the (i-2)th post\n        // 2b) The ith post has a different color from the (i-1)th post, which has the same color as the (i-2)th post\n        //\n        // We can describe the total number of ways W(i, 0) to paint the first i posts such that at most 2 adjacent posts have the same color\n        // as a recurrence relation\n        // W(i, 0) = W(i-1, 0) * (k-1) + W(i-1, 1) * (k-1) + W(i-1, 2) * (k-1)\n        // W(i, 1) = W(i-1, 0)\n        // W(i, 2) = W(i-1, 1)\n        //\n        // We can solve the recurrence relation using dynamic programming\n        long[] W = new long[3];\n        W[0] = k;\n        W[1] = k * k;\n        W[2] = 0;\n        for (int i = 3; i <= n; i++) {\n",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // We can use dynamic programming to solve this problem.\n        // Let's say we have a fence with n posts and k colors.\n        // Let's say we have a fence with n-1 posts and k colors.\n        // Let's say we have a fence with n-2 posts and k colors.\n        // Let's say we have a fence with n-3 posts and k colors.\n        // Let's say we have a fence with n-4 posts and k colors.\n        // Let's say we have a fence with n-5 posts and k colors.\n        // Let's say we have a fence with n-6 posts and k colors.\n        // Let's say we have a fence with n-7 posts and k colors.\n        // Let's say we have a fence with n-8 posts and k colors.\n        // Let's say we have a fence with n-9 posts and k colors.\n        // Let's say we have a fence with n-10 posts and k colors.\n        // Let's say we have a fence with n-11 posts and k colors.\n        // Let's say we have a fence with n-12 posts and k colors.\n        // Let's say we have a fence with n-13 posts and k colors.\n        // Let's say we have a fence with n-14 posts and k colors.\n        // Let's say we have a fence with n-15 posts and k colors.\n        // Let's say we have a fence with n-16 posts and k colors.\n        // Let's say we have a fence with n-17 posts and k colors.\n        // Let's say we have a fence with n-18 posts and k colors.\n        // Let's say we have a fence with n-19 posts and k colors.\n        // Let's say we have a fence with n-20 posts and k colors.\n        // Let's say we have a fence with n-21 posts and k colors.\n        // Let's say we have a fence with n-22 posts and k colors.\n        // Let's say we have a fence with n-23 posts and k colors.\n        // Let's say we have a fence with n-24 posts and k colors.\n        // Let's say we have a fence with n-25 posts and k colors.\n        // Let's say we",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // if n == 1, then there are k ways to paint\n        if (n == 1) return k;\n        // if n == 2, then there are two situations\n        //      1) You paint same color with the previous post => k*1 ways to paint, named it as same\n        //      2) You paint differently with the previous post => k*(k-1) ways to paint this way, named it as dif\n        // So, you can think, if n >= 3, you can always maintain these two situations,\n        // You either paint the same color with the previous one, or differently.\n        // Since there is a rule: \"at most 2 adjacent fence posts have the same color.\"\n        // We can further analyze:\n        //      1) if you paint the same color with the previous one, it means you cannot paint the same color with the previous of the previous one, you can only paint differently, and the number of ways to paint this way is same*(k-1).\n        //      2) if you paint differently with the previous one, it means you cannot paint differently with the previous of the previous one, you can only paint the same color, and the number of ways to paint this way is dif*1.\n        // So, we can get the formula:\n        //      same = dif*1;\n        //      dif = (same + dif)*(k-1);\n        //      To get the total ways to paint, just add same and dif.\n        // Because we can further analyze the situation, so I think this problem belongs to Dynamic Programming.\n        // The final answer will be same + dif;\n        long same = k;\n        long dif = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = dif;\n            dif = (same + dif) * (k - 1);\n            same = temp;\n        }\n        return same + dif;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long[] dp = new long[n];\n        dp[0] = k;\n        dp[1] = k * k;\n        for (int i = 2; i < n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[n - 1];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;"
  ]
}