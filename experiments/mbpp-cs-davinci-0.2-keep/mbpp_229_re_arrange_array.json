{
  "name": "mbpp_229_re_arrange_array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        negative.AddRange(positive);\n        return negative;",
    "        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (j < n) {\n            if (arr[j] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n            }\n            j++;\n        }\n        return arr;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                positive.Add(arr[i]);\n            } else {\n                negative.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;",
    "        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        List<long> positive = new List<long>();\n        List<long> negative = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        // Write your code here.\n        List<long> neg = new List<long>();\n        List<long> pos = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.Add(arr[i]);\n            } else {\n                pos.Add(arr[i]);\n            }\n        }\n        neg.AddRange(pos);\n        return neg;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        List<long> negative = new List<long>();\n        List<long> positive = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negative.Add(arr[i]);\n            } else {\n                positive.Add(arr[i]);\n            }\n        }\n        result.AddRange(negative);\n        result.AddRange(positive);\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result.Add(arr[i]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result.Add(arr[i]);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] < 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return arr;"
  ]
}