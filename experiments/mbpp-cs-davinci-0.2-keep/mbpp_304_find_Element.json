{
  "name": "mbpp_304_find_Element",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find element at a given index after number of rotations.\n    public static long FindElement(List<long> arr, List<List<long>> ranges, long rotations, long index) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)2L}), (List<long>)new List<long>(new long[]{(long)0L, (long)3L})})), (2L), (1L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (2L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (1L)) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long n = arr.Count;\n        long[] temp = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp[i] = arr[i];\n        }\n        for (int i = 0; i < ranges.Count; i++) {\n            long start = ranges[i][0];\n            long end = ranges[i][1];\n            long diff = end - start + 1;\n            long[] temp2 = new long[diff];\n            for (int j = 0; j < diff; j++) {\n                temp2[j] = arr[start + j];\n            }\n            for (int j = 0; j < diff; j++) {\n                temp[start + j] = temp2[diff - 1 - j];\n            }\n        }\n        long[] temp3 = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp3[i] = temp[i];\n        }\n        for (int i = 0; i < rotations; i++) {\n            long[] temp4 = new long[n];\n            for (int j = 0; j < n; j++) {\n                temp4[j] = temp3[j];\n            }\n            for (int j = 0; j < n; j++) {\n                temp3[j] = temp4[(j + 1) % n];\n            }\n        }\n        return temp3[index];",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var r = rotations % n;\n        var i = index - r;\n        if (i < 0) {\n            i += n;\n        }\n        for (var j = 0; j < m; j++) {\n            var range = ranges[j];\n            var l = range[0];\n            var rr = range[1];\n            if (l <= i && i <= rr) {\n                i = rr - (i - l);\n            }\n        }\n        return arr[i];",
    "        long n = arr.Count;\n        long m = ranges.Count;\n        long[] a = arr.ToArray();\n        long[,] r = new long[m, 2];\n        for (long i = 0; i < m; i++) {\n            r[i, 0] = ranges[(int)i][0];\n            r[i, 1] = ranges[(int)i][1];\n        }\n        long[] b = new long[n];\n        for (long i = 0; i < n; i++) {\n            b[i] = a[i];\n        }\n        for (long i = 0; i < rotations; i++) {\n            for (long j = 0; j < m; j++) {\n                long l = r[j, 0];\n                long rr = r[j, 1];\n                long t = b[l];\n                for (long k = l; k < rr; k++) {\n                    b[k] = b[k + 1];\n                }\n                b[rr] = t;\n            }\n        }\n        return b[index];",
    "        // Write your code here\n        var n = arr.Count;\n        var m = ranges.Count;\n        var r = rotations % n;\n        var l = ranges.Select(x => x[0]).ToList();\n        var rr = ranges.Select(x => x[1]).ToList();\n        var a = new List<long>();\n        var b = new List<long>();\n        for (int i = 0; i < m; i++) {\n            var ll = l[i];\n            var rr = rr[i];\n            if (ll <= rr) {\n                a.Add(ll);\n                b.Add(rr);\n            } else {\n                a.Add(ll);\n                b.Add(n - 1);\n                a.Add(0);\n                b.Add(rr);\n            }\n        }\n        var c = new List<long>();\n        var d = new List<long>();\n        for (int i = 0; i < a.Count; i++) {\n            var ll = a[i];\n            var rr = b[i];\n            if (ll <= rr) {\n                c.Add(ll);\n                d.Add(rr);\n            } else {\n                c.Add(ll);\n                d.Add(n - 1);\n                c.Add(0);\n                d.Add(rr);\n            }\n        }\n        var e = new List<long>();\n        var f = new List<long>();\n        for (int i = 0; i < c.Count; i++) {\n            var ll = c[i];\n            var rr = d[i];\n            if (ll <= rr) {\n                e.Add(ll);\n                f.Add(rr);\n            } else {\n                e.Add(ll);\n                f.Add(n - 1);\n                e.Add(0);\n                f.Add(rr);\n            }\n        }\n        var g = new List<long>();\n        var h = new List<long>();\n        for (int i = 0; i < e.Count; i++) {\n            var ll = e[i];\n           ",
    "        // Write your code here\n        long[] arr2 = new long[arr.Count];\n        for (int i = 0; i < arr.Count; i++) {\n            arr2[i] = arr[i];\n        }\n        for (int i = 0; i < ranges.Count; i++) {\n            long start = ranges[i][0];\n            long end = ranges[i][1];\n            long temp = arr2[start];\n            for (int j = start; j < end; j++) {\n                arr2[j] = arr2[j + 1];\n            }\n            arr2[end] = temp;\n        }\n        return arr2[(int)index];",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var rot = rotations % n;\n        var idx = (index - rot + n) % n;\n        var val = arr[idx];\n        for (var i = 0; i < m; i++) {\n            var range = ranges[i];\n            var l = range[0];\n            var r = range[1];\n            var x = range[2];\n            if (l <= idx && idx <= r) {\n                val = (val + x) % 1000000007;\n            }\n        }\n        return val;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        var n = arr.Count;\n        var m = ranges.Count;\n        var rot = rotations % n;\n        var idx = index % n;\n        var res = arr[idx];\n        for (int i = 0; i < m; i++) {\n            var r = ranges[i];\n            var l = r[0];\n            var rr = r[1];\n            var k = r[2];\n            if (idx >= l && idx <= rr) {\n                res += k;\n            }\n        }\n        return res;",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var mod = 1000000007;\n        var rotations_ = rotations % (n * m);\n        var rotations_per_range = rotations_ / m;\n        var rotations_left = rotations_ % m;\n        var range_index = index / n;\n        var range_index_ = (range_index + rotations_left) % m;\n        var range = ranges[(int)range_index_];\n        var range_start = range[0];\n        var range_end = range[1];\n        var range_length = range_end - range_start + 1;\n        var range_rotations = rotations_per_range % range_length;\n        var range_index_in_range = index % n;\n        var range_index_in_range_ = (range_index_in_range + range_rotations) % range_length;\n        var element_index = range_start + range_index_in_range_;\n        return arr[(int)element_index];",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var range_sum = new long[n];\n        for (int i = 0; i < m; i++) {\n            var range = ranges[i];\n            var l = (int)range[0];\n            var r = (int)range[1];\n            range_sum[l] += 1;\n            if (r + 1 < n) {\n                range_sum[r + 1] -= 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            range_sum[i] += range_sum[i - 1];\n        }\n        var range_sum_rotated = new long[n];\n        for (int i = 0; i < n; i++) {\n            var new_index = (i + rotations) % n;\n            range_sum_rotated[new_index] = range_sum[i];\n        }\n        var arr_rotated = new long[n];\n        for (int i = 0; i < n; i++) {\n            var new_index = (i + rotations) % n;\n            arr_rotated[new_index] = arr[i];\n        }\n        var arr_rotated_sorted = new long[n];\n        for (int i = 0; i < n; i++) {\n            arr_rotated_sorted[i] = arr_rotated[i];\n        }\n        Array.Sort(arr_rotated_sorted);\n        var arr_rotated_sorted_index = new long[n];\n        for (int i = 0; i < n; i++) {\n            arr_rotated_sorted_index[i] = Array.IndexOf(arr_rotated, arr_rotated_sorted[i]);\n        }\n        var arr_rotated_sorted_index_sum = new long[n];\n        for (int i = 0; i < n; i++) {\n            arr_rotated_sorted_index_sum[i] = range_sum_rotated[i];\n        }\n        for (int i = 1; i < n; i++) {",
    "        // Write your code here\n        long n = arr.Count;\n        long[] new_arr = new long[n];\n        foreach (var range in ranges) {\n            long l = range[0];\n            long r = range[1];\n            long k = range[2];\n            for (long i = l; i <= r; i++) {\n                new_arr[i] += k;\n            }\n        }\n        long[] sum_arr = new long[n];\n        sum_arr[0] = new_arr[0];\n        for (long i = 1; i < n; i++) {\n            sum_arr[i] = sum_arr[i - 1] + new_arr[i];\n        }\n        long[] arr_rot = new long[n];\n        for (long i = 0; i < n; i++) {\n            long new_index = (i + rotations) % n;\n            arr_rot[new_index] = arr[i] + sum_arr[i];\n        }\n        return arr_rot[index];",
    "        // Write your code here\n        long n = arr.Count;\n        long[] new_arr = new long[n];\n        for (int i = 0; i < n; i++) {\n            new_arr[i] = arr[i];\n        }\n        for (int i = 0; i < ranges.Count; i++) {\n            long l = ranges[i][0];\n            long r = ranges[i][1];\n            long d = ranges[i][2];\n            for (int j = (int)l; j <= r; j++) {\n                new_arr[j] += d;\n            }\n        }\n        long[] rotated_arr = new long[n];\n        for (int i = 0; i < n; i++) {\n            rotated_arr[(i + (int)rotations) % n] = new_arr[i];\n        }\n        return rotated_arr[(int)index];",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long n = arr.Count;\n        long[] new_arr = new long[n];\n        long[] new_index = new long[n];\n        for (int i = 0; i < n; i++) {\n            new_arr[i] = arr[i];\n            new_index[i] = i;\n        }\n        for (int i = 0; i < ranges.Count; i++) {\n            long start = ranges[i][0];\n            long end = ranges[i][1];\n            long temp = new_arr[start];\n            long temp_index = new_index[start];\n            for (int j = (int)start; j < end; j++) {\n                new_arr[j] = new_arr[j + 1];\n                new_index[j] = new_index[j + 1];\n            }\n            new_arr[end] = temp;\n            new_index[end] = temp_index;\n        }\n        long[] new_new_arr = new long[n];\n        long[] new_new_index = new long[n];\n        for (int i = 0; i < n; i++) {\n            new_new_arr[i] = new_arr[i];\n            new_new_index[i] = new_index[i];\n        }\n        for (int i = 0; i < rotations; i++) {\n            long temp = new_new_arr[0];\n            long temp_index = new_new_index[0];\n            for (int j = 0; j < n - 1; j++) {\n                new_new_arr[j] = new_new_arr[j + 1];\n                new_new_index[j] = new_new_index[j + 1];\n            }\n            new_new_arr[n - 1] = temp;\n            new_new_index[n - 1] = temp_index;\n        }\n        for (int i = 0; i < n; i++) {\n            if (new_",
    "        // Write your code here\n        long n = arr.Count;\n        long m = ranges.Count;\n        long[] prefix = new long[n];\n        for (int i = 0; i < n; i++) {\n            prefix[i] = 0;\n        }\n        for (int i = 0; i < m; i++) {\n            prefix[ranges[i][0] - 1] += ranges[i][2];\n            if (ranges[i][1] < n) {\n                prefix[ranges[i][1]] -= ranges[i][2];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            arr[i] += prefix[i];\n        }\n        long[] prefix2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            prefix2[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            prefix2[i] = arr[i];\n            if (i > 0) {\n                prefix2[i] += prefix2[i - 1];\n            }\n        }\n        long[] prefix3 = new long[n];\n        for (int i = 0; i < n; i++) {\n            prefix3[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            prefix3[i] = arr[i];\n            if (i > 0) {\n                prefix3[i] += prefix3[i - 1];\n            }\n        }\n        long[] prefix4 = new long[n];\n        for (int i = 0; i < n; i++) {\n            prefix4[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            prefix4[i] = arr[i];\n            if (i > 0) {\n                prefix4[i] += prefix4[i - 1];\n            }\n        }\n        long[] prefix5 = new long[n];\n",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var mod = (long)1e9 + 7;\n        var range_sum = new long[n];\n        for (var i = 0; i < m; i++) {\n            var l = ranges[i][0];\n            var r = ranges[i][1];\n            range_sum[l]++;\n            if (r + 1 < n) {\n                range_sum[r + 1]--;\n            }\n        }\n        for (var i = 1; i < n; i++) {\n            range_sum[i] += range_sum[i - 1];\n        }\n        var range_sum_sum = new long[n];\n        for (var i = 0; i < n; i++) {\n            range_sum_sum[i] = range_sum[i] * (range_sum[i] + 1) / 2;\n        }\n        for (var i = 1; i < n; i++) {\n            range_sum_sum[i] += range_sum_sum[i - 1];\n        }\n        var range_sum_sum_sum = new long[n];\n        for (var i = 0; i < n; i++) {\n            range_sum_sum_sum[i] = range_sum_sum[i] * (range_sum[i] + 1) / 2;\n        }\n        for (var i = 1; i < n; i++) {\n            range_sum_sum_sum[i] += range_sum_sum_sum[i - 1];\n        }\n        var range_sum_sum_sum_sum = new long[n];\n        for (var i = 0; i < n; i++) {\n            range_sum_sum_sum_sum[i] = range_sum_sum_sum[i] * (range_sum[i] + 1) / 2;\n        }\n        for (var i = 1; i < n; i++) {\n            range_sum_sum_sum_sum[i] += range_sum_sum_sum_sum[i - 1];\n        }\n        var range_sum_sum_sum_sum_sum",
    "        var N = arr.Count;\n        var M = ranges.Count;\n        var R = rotations;\n        var I = index;\n        var A = arr;\n        var B = ranges;\n        var C = new List<long>();\n        var D = new List<long>();\n        var E = new List<long>();\n        var F = new List<long>();\n        var G = new List<long>();\n        var H = new List<long>();\n        var J = new List<long>();\n        var K = new List<long>();\n        var L = new List<long>();\n        var M1 = new List<long>();\n        var N1 = new List<long>();\n        var O = new List<long>();\n        var P = new List<long>();\n        var Q = new List<long>();\n        var R1 = new List<long>();\n        var S = new List<long>();\n        var T = new List<long>();\n        var U = new List<long>();\n        var V = new List<long>();\n        var W = new List<long>();\n        var X = new List<long>();\n        var Y = new List<long>();\n        var Z = new List<long>();\n        var AA = new List<long>();\n        var BB = new List<long>();\n        var CC = new List<long>();\n        var DD = new List<long>();\n        var EE = new List<long>();\n        var FF = new List<long>();\n        var GG = new List<long>();\n        var HH = new List<long>();\n        var II = new List<long>();\n        var JJ = new List<long>();\n        var KK = new List<long>();\n        var LL = new List<long>();\n        var MM = new List<long>();\n        var NN = new List<long>();\n        var OO = new List<long>();\n        var PP = new List<long>();\n        var QQ = new List<long>();\n        var RR = new List<long>();\n        var SS = new List",
    "        var rotationsPerRange = ranges.Select(range => range[1] - range[0] + 1).ToList();\n        var rotationsPerRangeCumulative = new List<long>();\n        var rotationsPerRangeCumulativeSum = 0;\n        foreach (var rotationsPerRangeElement in rotationsPerRange) {\n            rotationsPerRangeCumulativeSum += rotationsPerRangeElement;\n            rotationsPerRangeCumulative.Add(rotationsPerRangeCumulativeSum);\n        }\n        var rangeIndex = 0;\n        while (rotationsPerRangeCumulative[rangeIndex] < rotations) {\n            rangeIndex++;\n        }\n        var range = ranges[rangeIndex];\n        var rangeRotations = rotations - (rangeIndex == 0 ? 0 : rotationsPerRangeCumulative[rangeIndex - 1]);\n        var rangeLength = range[1] - range[0] + 1;\n        var rangeStart = range[0];\n        var rangeEnd = range[1];\n        var rangeStartIndex = rangeStart + rangeRotations % rangeLength;\n        var rangeEndIndex = rangeEnd - rangeRotations % rangeLength;\n        if (index >= rangeStartIndex && index <= rangeEndIndex) {\n            return arr[index];\n        } else if (index < rangeStartIndex) {\n            return arr[rangeEndIndex - (rangeStartIndex - index) + 1];\n        } else {\n            return arr[rangeStartIndex + (index - rangeEndIndex) - 1];\n        }",
    "        // Write your code here\n        long n = arr.Count;\n        long[] arr2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            arr2[i] = arr[(int)i];\n        }\n        for (long i = 0; i < ranges.Count; i++) {\n            long l = ranges[(int)i][0];\n            long r = ranges[(int)i][1];\n            long d = ranges[(int)i][2];\n            for (long j = l; j <= r; j++) {\n                arr2[j] += d;\n            }\n        }\n        long[] arr3 = new long[n];\n        for (long i = 0; i < n; i++) {\n            arr3[i] = arr2[(int)i];\n        }\n        for (long i = 0; i < rotations; i++) {\n            for (long j = 0; j < n; j++) {\n                arr3[j] = arr2[(int)j] + arr3[(int)j];\n            }\n        }\n        return arr3[(int)index];",
    "        var n = arr.Count;\n        var m = ranges.Count;\n        var range_index = 0;\n        var range = ranges[range_index];\n        var range_start = range[0];\n        var range_end = range[1];\n        var range_length = range_end - range_start + 1;\n        var range_rotations = rotations % range_length;\n        var range_index_after_rotations = (range_start + range_rotations) % n;\n        var range_index_after_rotations_in_range = range_index_after_rotations - range_start;\n        var index_in_range = index - range_start;\n        var index_after_rotations_in_range = (index_in_range + range_rotations) % range_length;\n        var index_after_rotations = range_start + index_after_rotations_in_range;\n        return arr[index_after_rotations];",
    "        // Write your code here\n        long n = arr.Count;\n        long[] temp = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp[i] = arr[i];\n        }\n        for (int i = 0; i < ranges.Count; i++) {\n            long start = ranges[i][0];\n            long end = ranges[i][1];\n            long diff = end - start + 1;\n            long[] temp2 = new long[diff];\n            for (int j = 0; j < diff; j++) {\n                temp2[j] = temp[start + j];\n            }\n            for (int j = 0; j < diff; j++) {\n                temp[start + j] = temp2[diff - j - 1];\n            }\n        }\n        long[] temp3 = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp3[i] = temp[i];\n        }\n        for (int i = 0; i < rotations; i++) {\n            long[] temp2 = new long[n];\n            for (int j = 0; j < n; j++) {\n                temp2[j] = temp3[j];\n            }\n            for (int j = 0; j < n; j++) {\n                temp3[j] = temp2[(j + 1) % n];\n            }\n        }\n        return temp3[index];",
    "        long n = arr.Count;\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                return arr[(int)mid];\n            }\n            if (mid < index) {\n                if (index - mid <= mod) {\n                    return arr[(int)index];\n                }\n                start = mid + 1;\n            }\n            else {\n                if (mid - index <= mod) {\n                    return arr[(int)index];\n                }\n                end = mid - 1;\n            }\n        }\n        return -1;"
  ]
}