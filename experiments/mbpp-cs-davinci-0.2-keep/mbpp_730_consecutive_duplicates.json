{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    public static object ConsecutiveDuplicates(object nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConsecutiveDuplicates((new object(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new object(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L}))));\n    Debug.Assert(ConsecutiveDuplicates((new object(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new object(new long[]{(long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)17L, (long)18L, (long)10L}))));\n    Debug.Assert(ConsecutiveDuplicates((new object(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"}))));\n    Debug.Assert(ConsecutiveDuplicates((new object(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\", (string)\"a\", (string)\"a\"}))).Equals((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"a\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        if (list.Count == 0) {\n            return result;\n        }\n        result.Add(list[0]);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i] != list[i - 1]) {\n                result.Add(list[i]);\n            }\n        }\n        return result;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        result.Add(list[0]);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i].Equals(list[i - 1])) {\n                continue;\n            }\n            result.Add(list[i]);\n        }\n        return result;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (last != list[i]) {\n                result.Add(list[i]);\n                last = list[i];\n            }\n        }\n        return result;",
    "        if (nums == null) return null;\n        var list = (List<object>)nums;\n        if (list.Count == 0) return list;\n        var result = new List<object>();\n        result.Add(list[0]);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i].Equals(list[i - 1])) continue;\n            result.Add(list[i]);\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i] != last) {\n                result.Add(list[i]);\n                last = list[i];\n            }\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        object last = null;\n        foreach (object num in (List<object>)nums) {\n            if (num != last) {\n                result.Add(num);\n                last = num;\n            }\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        object last = null;\n        foreach (object num in (List<object>)nums) {\n            if (num != last) {\n                result.Add(num);\n                last = num;\n            }\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        if (nums is List<object>) {\n            List<object> list = (List<object>)nums;\n            List<object> result = new List<object>();\n            object prev = null;\n            foreach (object num in list) {\n                if (num != prev) {\n                    result.Add(num);\n                    prev = num;\n                }\n            }\n            return result;\n        } else {\n            return nums;\n        }",
    "        List<object> result = new List<object>();\n        if (nums is List<object>) {\n            List<object> list = (List<object>)nums;\n            if (list.Count == 0) {\n                return result;\n            }\n            result.Add(list[0]);\n            for (int i = 1; i < list.Count; i++) {\n                if (!list[i].Equals(list[i - 1])) {\n                    result.Add(list[i]);\n                }\n            }\n        }\n        return result;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i] != last) {\n                result.Add(list[i]);\n                last = list[i];\n            }\n        }\n        return result;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (last != list[i]) {\n                result.Add(list[i]);\n            }\n            last = list[i];\n        }\n        return result;",
    "        if (nums is string) {\n            return ConsecutiveDuplicates((string)nums);\n        } else if (nums is int[]) {\n            return ConsecutiveDuplicates((int[])nums);\n        } else {\n            throw new Exception(\"Invalid input type\");\n        }",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (!last.Equals(list[i])) {\n                result.Add(list[i]);\n            }\n            last = list[i];\n        }\n        return result;",
    "        if (nums is List<int>) {\n            List<int> list = (List<int>)nums;\n            if (list.Count == 0) {\n                return list;\n            }\n            List<int> newList = new List<int>();\n            newList.Add(list[0]);\n            for (int i = 1; i < list.Count; i++) {\n                if (list[i] != list[i - 1]) {\n                    newList.Add(list[i]);\n                }\n            }\n            return newList;\n        }\n        if (nums is List<string>) {\n            List<string> list = (List<string>)nums;\n            if (list.Count == 0) {\n                return list;\n            }\n            List<string> newList = new List<string>();\n            newList.Add(list[0]);\n            for (int i = 1; i < list.Count; i++) {\n                if (list[i] != list[i - 1]) {\n                    newList.Add(list[i]);\n                }\n            }\n            return newList;\n        }\n        return null;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (last != list[i]) {\n                result.Add(list[i]);\n                last = list[i];\n            }\n        }\n        return result;",
    "        var list = (List<object>)nums;\n        var result = new List<object>();\n        var last = list[0];\n        result.Add(last);\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i] != last) {\n                result.Add(list[i]);\n                last = list[i];\n            }\n        }\n        return result;",
    "        List<object> list = new List<object>();\n        object prev = null;\n        foreach (var num in (List<object>)nums) {\n            if (num != prev) {\n                list.Add(num);\n            }\n            prev = num;\n        }\n        return list;",
    "        List<object> result = new List<object>();\n        object last = null;\n        foreach (var num in (List<object>)nums) {\n            if (num != last) {\n                result.Add(num);\n                last = num;\n            }\n        }\n        return result;"
  ]
}