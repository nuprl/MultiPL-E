{
  "name": "mbpp_279_is_num_decagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long IsNumDecagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNumDecagonal((3L)) == (27L));\n    Debug.Assert(IsNumDecagonal((7L)) == (175L));\n    Debug.Assert(IsNumDecagonal((10L)) == (370L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-8)/6\n        // n = -4/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-10)/6\n        // n = -5/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 5/3\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-12)/6\n        // n =",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 1\n        return (n * (3 * n - 1)) / 2;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return 0;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 2 == 0) {\n            return x2;\n        }\n        return 0;",
    "        // n = (3 * x^2 - x) / 2\n        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return (long)x;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 +",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1)/2;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = 1\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n =",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (int)x1) {\n            return (long)x1;\n        }\n        if (x2 > 0 && x2 == (int)x2) {\n            return (long)x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n = (1 + sqrt(1 + 24 * n)) / 6\n        double d = 1 + Math.Sqrt(1 + 24 * n);\n        if (d % 6 == 0) {\n            return (long)d / 6;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/3\n        // n = (-1 + sqrt(1 + 24*k))/6\n        // n = (-1 + sqrt(1 + 8*(3*k)))/3\n        // n = (-1 + sqrt(1 + 24*(2*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(2*k)))/3\n        // n = (-1 + sqrt(1 + 24*(4*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(4*k)))/3\n        // n = (-1 + sqrt(1 + 24*(8*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(8*k)))/3\n        // n = (-1 + sqrt(1 + 24*(16*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(16*k)))/3\n        // n = (-1 + sqrt(1 + 24*(32*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(32*k)))/3\n        // n = (-1 + sqrt(1 + 24*(64*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(64*k)))/3\n        // n = (-1 + sqrt(1 + 24*(128*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(128*k)))/3\n        // n = (-1 + sqrt(1 + 24*(256*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(256*k)))/3\n        // n = (-1 + sqrt(1 + 24*(512*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(512*k)))/3",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 1 + 24n = y^2\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24k\n        // y^2 = 24k + 1\n        // y = sqrt(24k + 1)\n        // y must be an integer\n        // sqrt(24k + 1) must be an integer\n        // 24k + 1 must be a perfect square\n        // 24k + 1 = z^2\n        // 24k = z^2 - 1\n        // k = (z^2 - 1) / 24\n        // z^2 - 1 must be a multiple of 24\n        // z^2 - 1 = 24m\n        // z^2 = 24m + 1\n        // z = sqrt(24m + 1)\n        // z must be an integer\n        // sqrt(24m + 1) must be an integer\n        // 24m + 1 must be a perfect square\n        // 24m + 1 = w^2\n        // 24m = w^2 - 1\n        // m = (w^2 - 1) / 24\n        // w^2 - 1 must be a multiple of 24\n        // w^2 - 1 = 24n\n        // w^2 = 24n + 1\n        // w = sqrt(24n + 1)\n        // w must be an integer\n        // sqrt(24n + 1) must be an integer\n        // 24n + 1 must be a perfect square\n        // 24n + 1 = x^2\n        // 24n = x^2 - 1\n        // n = (x^2 - 1) / 24\n        // x^2 - 1 must be a multiple of 24\n        // x^2 - 1 = 24p\n        // x^2 = 24p + 1\n        // x = sqrt(24p + 1",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        // n = (3*6^2 - 6)/2\n        // n = (3*36 - 6)/2\n        // n = (108 - 6)/2\n        // n = 102/2\n        // n = 51\n        // n = (3*51^2 - 51)/2\n        // n = (3*2601 - 51)/2\n        // n = (7802 - 51)/2\n        // n = 7750/2\n        // n = 3875\n        // n = (3*3875^2 - 3875)/2\n        // n = (3*1550625 - 3875)/2\n        // n = (4661875 - 3875)/2\n        // n = 4628000/2\n        // n = 2314000\n        // n = (3*2314000^2 - 2314000)/2\n        // n = (3*53496000000 - 2314000)/2\n        // n = (160488000000 - 2314000)/2\n        // n = 160464686000/2\n        // n = 802323430\n        // n = (3*802323430^2 - 802323430)/2\n        // n = (3*641858751688900 - 802323430)/2\n        // n = (1925576255066700 - 802323430)/2\n        // n = 1925496022842370/2\n        // n = 96274801421185\n        // n = (3*96274801421185^2 - 96274801421185)/2\n        // n = (3*927492028843470225 - 96274801421185)/2\n        // n = (2782476286304020700 - 96274801421185)/2\n        // n =",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        long x = (long)Math.Floor((1 + Math.Sqrt(1 + 24 * n)) / 6);\n        return (3 * x * x - x) / 2 == n ? x : 0;",
    "        long num = (long)((3 + Math.Sqrt(9 + 8 * n)) / 2);\n        if (num * (3 * num - 1) / 2 == n)\n            return num;\n        return 0;",
    "        // n = (3 * n * n - n) / 2\n        // 3 * n * n - n - 2 * n = 0\n        // n * (3 * n - 1) - 2 * n = 0\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12(3n^2 - n)))/6\n        // n = (1 +- sqrt(1 + 36n^2 - 12n))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n       ",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        return (long)x;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return -1;\n        x += 1;\n        if (x % 6 != 0) return -1;\n        x /= 6;\n        if ((3 * x * x - x) / 2 != n) return -1;\n        return x;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sq",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        long p = (long)Math.Sqrt(1 + 4 * 2 * n);\n        if (p * p == 1 + 4 * 2 * n && (p - 1) % 4 == 0)\n            return (p - 1) / 4;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1",
    "        long x = 1;\n        while (true) {\n            long y = x * (3 * x - 1) / 2;\n            if (y == n)\n                return x;\n            if (y > n)\n                return 0;\n            x++;\n        }",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        double a = (3 + Math.Sqrt(9 + 8 * n)) / 2;\n        if (a == (long)a)\n            return (long)a;\n        else\n            return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt(1/9 + 8/3)\n        // n = (1/3) +- sqrt(1 + 8)\n        // n = (1/3) +- sqrt(9)\n        // n = (1/3) +- 3\n        // n = 1/3 + 3 = 4/3\n        // n = 1/3 - 3 = -2/3\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -1\n        // n = 4/3\n        // n = 1\n        // n = -2/3\n        // n = -",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long nth = 0;\n        long num = 0;\n        while (nth < n) {\n            num++;\n            if (IsDecagonal(num)) {\n                nth++;\n            }\n        }\n        return num;",
    "        // n = (3x^2 - x)/2\n        // n = (3x^2 - x - 2n)/2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))",
    "        long x = (long)Math.Sqrt(1 + 4 * 2 * n);\n        if (x * x != 1 + 4 * 2 * n) return -1;\n        x = (x - 1) / 2;\n        if (x % 2 == 0) return x / 2;\n        return -1;",
    "        long nth = n * (3 * n - 2);\n        long sqrt = (long)Math.Sqrt(nth);\n        if (sqrt * sqrt == nth && (sqrt + 1) % 6 == 0) {\n            return nth;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 +",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return -1;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = 3x^2 - x\n        // x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x = (1 + sqrt(1 + 8n)) / 3\n        // x = (1 - sqrt(1 + 8n)) / 3\n        // x =",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        return nth;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0)\n            return x1;\n        if (x2 > 0 && x2 % 10 == 0)\n            return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n       ",
    "        long nth = (long)((3 + Math.Sqrt(9 + 8 * n)) / 2);\n        if (nth * (3 * nth - 1) / 2 == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = n;\n        long b = 1;\n        long c = -3 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (int)x)\n            return (long)x;\n        else\n            return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // n = 3x^2 - x\n        // n + x = 3x^2\n        // x^2 = (n + x) / 3\n        // x = sqrt((n + x) / 3)\n        // x = sqrt(n / 3 + x / 3)\n        // x = sqrt(n / 3) + x / 3\n        // x = sqrt(n / 3) + sqrt(n / 3) / 3\n        // x = sqrt(n / 3) + sqrt(n / 9)\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3) + sqrt(n) / 3\n        // x = sqrt(n / 3)",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n = (3 +- sqrt(9 - 24))/2\n        // n = (3 +- sqrt(15))/2\n        double sqrt = Math.Sqrt(15);\n        double n1 = (3 + sqrt)/2;\n        double n2 = (3 - sqrt)/2;\n        if (n1 == n) {\n            return (long)n1;\n        }\n        if (n2 == n) {\n            return (long)n2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1)/2;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 1 or n = 1\n        // n = 1\n        return n;",
    "        long nth = 0;\n        long i = 0;\n        while (nth < n) {\n            i++;\n            nth = i * (3 * i - 1) / 2;\n        }\n        if (nth == n) {\n            return i;\n        } else {\n            return -1;\n        }",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6 is not an integer\n        // x = (1 - sqrt(1 + 24n)) / 6 is an integer\n        // x = (1 - sqrt(1 + 24n)) / 6 > 0\n        // 1 - sqrt(1 + 24n) > 0\n        // sqrt(1 + 24n) < 1\n        // 1 + 24n < 1\n        // 24n < 0\n        // n < 0\n        // n = (1 - sqrt(1 + 24n)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24n)^(1/2)) / 6\n        // n = (1 - (1 + 24",
    "        // Decagonal numbers are of the form n(3n-1)/2\n        // We want to find the n such that n(3n-1)/2 = x\n        // Solving this quadratic equation gives us two solutions\n        // n = (1 +- sqrt(1 + 24x))/6\n        // We want the positive solution\n        // We also need to check that n is an integer\n        var n1 = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (n1 == (long)n1) return (long)n1;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is not a decagonal number\n        // n = 5 is the fourth decagonal number\n        // n = 6 is the fifth decagonal number\n        // n = 7 is not a decagonal number\n        // n = 8 is the sixth decagonal number\n        // n = 9 is the seventh decagonal number\n        // n = 10 is not a decagonal number\n        // n = 11 is the eighth decagonal number\n        // n = 12 is the ninth decagonal number\n        // n = 13 is not a decagonal number\n        // n = 14 is the tenth decagonal number\n        // n = 15 is not a decagonal number\n        // n = 16 is the eleventh decagonal number\n        // n = 17 is not a decagonal number\n        // n = 18 is the twelfth decagonal number\n        // n = 19 is not a decagonal number\n        // n = 20 is the thirteenth decagonal number\n        // n = 21 is not a decagonal number\n        // n = 22 is the fourteenth decagonal number\n        // n = 23 is not a decagonal number\n        // n = 24 is the fifteenth decagonal number\n        // n = 25 is not a decagonal number\n        // n = 26 is the sixteenth decagonal number\n        // n = 27 is not a decagonal number\n        // n = 28 is the seventeenth decagonal number\n        // n = 29 is not a decagonal number\n        // n = 30 is the eighteenth decagonal number\n        // n = 31 is not a decagonal number\n        // n = 32 is the nineteenth decagonal number\n        // n = 33 is not a decagonal number\n        // n = 34 is the twentieth decagonal number\n        // n = 35 is not a decagonal number\n        // n = 36 is the twenty-first dec",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)*n - (2/3) = 0\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 + sqrt(25/9))/2\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1/3 - sqrt(25/9))/2\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 + sqrt(25/9))/2\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1/3 - sqrt(25/9))/2\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 + sqrt(25/9))/2\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1/3 - sqrt(25/9))/2\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 +",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        } else {\n            return 0;\n        }",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n)\n            return x;\n        return 0;",
    "        // n = (3 * n^2 - n) / 2\n        // 3 * n^2 - n - 2 * n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +- sqrt((1/9) + (8/3))\n        // n = (1/3) +- sqrt(1 + 8)\n        // n = (1/3) +- sqrt(9)\n        // n = (1/3) +- 3\n        // n = 1, 2\n        // n = 2\n        return n;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2 * n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-7)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-8)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-9)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*7))/6\n        // n =",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-7)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-8)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-9)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*7))/6\n        //",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (-1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-7)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-8)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-9)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*7))/6\n        //",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24n))/6\n        // x = (1 - sqrt(1 + 24n))/6\n        // x = (1 + sqrt(1 + 24",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 1 + 24n = y^2\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 - 1 must be divisible by 24\n        // y^2 - 1 = 24k\n        // y^2 = 24k + 1\n        // y = sqrt(24k + 1)\n        // y must be an integer\n        // 24k + 1 must be a perfect square\n        // 24k + 1 = z^2\n        // 24k = z^2 - 1\n        // k = (z^2 - 1) / 24\n        // z^2 - 1 must be divisible by 24\n        // z^2 - 1 = 24m\n        // z^2 = 24m + 1\n        // z = sqrt(24m + 1)\n        // z must be an integer\n        // 24m + 1 must be a perfect square\n        // 24m + 1 = w^2\n        // 24m = w^2 - 1\n        // m = (w^2 - 1) / 24\n        // w^2 - 1 must be divisible by 24\n        // w^2 - 1 = 24p\n        // w^2 = 24p + 1\n        // w = sqrt(24p + 1)\n        // w must be an integer\n        // 24p + 1 must be a perfect square\n        // 24p + 1 = q^2\n        // 24p = q^2 - 1\n        // p = (q^2 - 1) / 24\n        // q^2 - 1 must be divisible by 24\n        // q^2 - 1 = 24r\n        // q^2 = 24r + 1\n        // q = sqrt(24r + 1)\n        // q must be an integer\n        // 24r + 1 must be a perfect square\n        // 24r + 1 = s^2\n        // 24r = s^2 - 1\n        //",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x =",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 + (1/3)*n - (2/3) = 0\n        // n = (-1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (-1/3 +- sqrt(11/9))/2\n        // n = (-1/3 +- sqrt(11)/3)/2\n        // n = (-1 +- sqrt(11))/6\n        // n = (5 +- sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n = (5 + sqrt(11))/6\n        // n = (5 - sqrt(11))/6\n        // n =",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n * 2);\n        if (x * (x + 1) == n * 2) {\n            return x;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 +",
    "        double a = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (a == (long)a)\n            return (long)a;\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 / 10) * 10) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 / 10) * 10) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-7)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-8)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-9)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*7))/6\n        //",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = (3 - 1)/2\n       ",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3*n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n = (3 +- sqrt(9 - 8)) / 2\n        // n = (3 +- 1) / 2\n        // n = 1 or 2\n        // n = 1\n        return n;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return -1;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n)\n            return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n)\n            return x2;\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n)\n            return nth;\n        else\n            return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 1 + 24n = y^2\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 - 1 must be divisible by 24\n        // y^2 - 1 = 24k\n        // y^2 = 24k + 1\n        // y = sqrt(24k + 1)\n        // y must be an integer\n        // 24k + 1 must be a perfect square\n        // 24k + 1 = z^2\n        // 24k = z^2 - 1\n        // k = (z^2 - 1) / 24\n        // z^2 - 1 must be divisible by 24\n        // z^2 - 1 = 24m\n        // z^2 = 24m + 1\n        // z = sqrt(24m + 1)\n        // z must be an integer\n        // 24m + 1 must be a perfect square\n        // 24m + 1 = w^2\n        // 24m = w^2 - 1\n        // m = (w^2 - 1) / 24\n        // w^2 - 1 must be divisible by 24\n        // w^2 - 1 = 24n\n        // w^2 = 24n + 1\n        // w = sqrt(24n + 1)\n        // w must be an integer\n        // 24n + 1 must be a perfect square\n        // 24n + 1 = x^2\n        // 24n = x^2 - 1\n        // n = (x^2 - 1) / 24\n        // x^2 - 1 must be divisible by 24\n        // x^2 - 1 = 24n\n        // x^2 = 24n + 1\n        // x = sqrt(24n + 1)\n        // x must be an integer\n        // 24n + 1 must be a perfect square\n        // 24n + 1 = y^2\n        // 24n = y^2 - 1\n       ",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        return nth;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-7)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-8)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-9)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*7))/6\n        // n =",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 10 is the second decagonal number\n        // n = 100 is the third decagonal number\n        // n = 1000 is the fourth decagonal number\n        // n = 10000 is the fifth decagonal number\n        // n = 100000 is the sixth decagonal number\n        // n = 1000000 is the seventh decagonal number\n        // n = 10000000 is the eighth decagonal number\n        // n = 100000000 is the ninth decagonal number\n        // n = 1000000000 is the tenth decagonal number\n        // n = 10000000000 is the eleventh decagonal number\n        // n = 100000000000 is the twelfth decagonal number\n        // n = 1000000000000 is the thirteenth decagonal number\n        // n = 10000000000000 is the fourteenth decagonal number\n        // n = 100000000000000 is the fifteenth decagonal number\n        // n = 1000000000000000 is the sixteenth decagonal number\n        // n = 10000000000000000 is the seventeenth decagonal number\n        // n = 100000000000000000 is the eighteenth decagonal number\n        // n = 1000000000000000000 is the nineteenth decagonal number\n        // n = 10000000000000000000 is the twentieth decagonal number\n        // n = 100000000000000000000 is the twenty-first decagonal number\n        // n = 1000000000000000000000 is the twenty-second decagonal number\n        // n = 10000000000000000000000 is the twenty-third decagonal number\n        // n = 100000000000000000000000 is the twenty-fourth decagonal number\n        // n = 1000000000000000000000000 is the twenty-fifth decagonal number\n        // n = 10000000000000000000000000 is the twenty-sixth decagonal number\n        // n = 100000000000000000000000000 is the twenty-seventh decagonal number\n        // n = 1000000000000000000000000000 is the twenty-eighth decagonal number\n        // n = 10000000000000000000000000000 is the twenty-ninth decagonal number\n        // n = 100",
    "        // n = (3x^2 - x) / 2\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        else\n            return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return 0;",
    "        double a = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (a == (long)a)\n            return (long)a;\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return -1;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 <= 0)\n            return -1;\n        if (x1 * (3 * x1 - 1) / 2 == n)\n            return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n)\n            return x2;\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n) / 2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(25)) / 6\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = 0.66666...\n        // n is not an integer\n        // n is not a decagonal number\n        // n = 1\n        // n is a decagonal number\n        // n = 1\n        // n = (1 +- sqrt(1 + 12*2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(25)) / 6\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = 0.66666...\n        // n is not an integer\n        // n is not a decagonal number\n        // n = 1\n        // n is a decagonal number\n        // n = 1\n        // n = (1 +- sqrt(1 + 12*2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(25)) / 6\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = 0.66666...\n        // n is not an integer\n        // n is not a decagonal number\n        // n = 1\n        // n is a decagonal number\n        // n = 1\n        // n = (1 +- sqrt(1 + 12*2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n       ",
    "        // n = (3*n^2 - n) / 2\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0\n        // n^2 - n - 2*n/3 = 0",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(1 + 12*2))/6\n        // n = (1 - sq",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 > 0 && x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n && (x % 10) == 3)\n            return x;\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long nthDecagonal = 0;\n        for (long i = 1; i <= n; i++) {\n            nthDecagonal = i * (3 * i - 1) / 2;\n        }\n        return nthDecagonal;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (-1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (1 + sqrt(1 + 12*n))/6\n        // n = (",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n/3 = 0\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (1 + sqrt(1 + 8/3)) / 2\n        // n = (",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the thirty-third decagonal number\n        // n = 34",
    "        long a = (long)Math.Sqrt(1 + 4 * 2 * n);\n        if (a * a == 1 + 4 * 2 * n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3 * x^2 - x) / 2\n        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 +",
    "        // n = (3*n^2 - n) / 2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2 = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is a decagonal number\n        // So, n is a decagonal number if n = 1\n        if (n == 1) {\n            return 1;\n        } else {\n            return -1;\n        }",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) {\n            return x1;\n        }\n        if (x2 * (3 * x2 - 1) / 2 == n) {\n            return x2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 3 == 1) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 3 == 1) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 = 1 + 24n\n        // y = sqrt(1 + 24n)\n        // y must be an integer\n        // y must be odd\n        // y = 2k + 1\n        // y^2 = 4k^2 + 4k + 1\n        // y^2 = 4(k^2 + k) + 1\n        // y^2 = 4(k + 1/2)^2\n        // y^2 = 4(k + 1/2)^2 - 1\n        // y^2 = 4(k + 1/2)^2 - 4(1/2)^2\n        // y^2 = 4(k + 1/2)^2 - 4(1/2)^2 + 4(1/2)^2 - 4(1/2)^2\n        // y^2 = 4((k + 1/2)^2 - (1/2)^2) + 4(1/2)^2 - 4(1/2)^2\n        // y^2 = 4((k + 1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2)\n        // y^2 = 4((k + 1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2)\n        // y^2 = 4((k + 1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2 + (1/2)^2 - (1/2)^2)\n        // y^2 = 4((k + 1/2)",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0)\n            return x1;\n        if (x2 > 0 && x2 % 10 == 0)\n            return x2;\n        return 0;",
    "        long a = 1, b = 1, c = 1;\n        while (a < n) {\n            c = b;\n            b = a;\n            a = 10 * b + c;\n        }\n        if (a == n) return 1;\n        return 0;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if ((b + d) % (2 * a) == 0) {\n            return (b + d) / (2 * a);\n        } else if ((b - d) % (2 * a) == 0) {\n            return (b - d) / (2 * a);\n        } else {\n            return -1;\n        }",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        return (long)((1 + Math.Sqrt(1 + 12*n))/6);",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        return n;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - 3n - 2n / 3 = 0\n        // n^2 - 5n / 3 = 0\n        // n^2 - 5n = 0\n        // n(n - 5) = 0\n        // n = 0, n = 5\n        // n = 5\n        // n = 5\n        return n;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) return x1;\n        if (x2 > 0 && x2 % 10 == 0) return x2;\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double a = Math.Sqrt(1 + 4 * 2 * n);\n        if (a == Math.Floor(a)) {\n            return (long)a;\n        }\n        return 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the",
    "        long nth = 0;\n        long i = 0;\n        while (nth < n) {\n            i++;\n            nth = i * (3 * i - 1) / 2;\n        }\n        if (nth == n) {\n            return i;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 0;\n        while (nth < n) {\n            i++;\n            nth = i * (3 * i - 1) / 2;\n        }\n        if (nth == n) {\n            return i;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 2 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return 0;\n        }",
    "        // n = (3 * n^2 - n) / 2\n        // 3 * n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12 * 2)) / 6\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - sqrt(25)) / 6\n        // n = (-4) / 6\n        // n = -2 / 3\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 3)) / 6\n        // n = (1 + sqrt(37)) / 6\n        // n = (1 + 6) / 6\n        // n = 7 / 6\n        // n = 1\n        // n = (1 - sqrt(37)) / 6\n        // n = (-6) / 6\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 4)) / 6\n        // n = (1 + sqrt(49)) / 6\n        // n = (1 + 7) / 6\n        // n = 8 / 6\n        // n = 1\n        // n = (1 - sqrt(49)) / 6\n        // n = (-8) / 6\n        // n = -4 / 3\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 5)) / 6\n        // n = (1 + sqrt(61)) / 6\n        // n = (1 + 8) / 6\n        // n = 9 / 6\n        // n = 1\n        // n = (1 - sqrt(61)) / 6\n        // n = (-10) / 6\n        // n = -5 / 3\n        // n = -1\n        // n = (1 + sqrt(1 + 12 * 6)) / 6\n        // n = (1 + sqrt(73)) / 6\n        // n = (1 + 9) / 6\n        // n = 10 / 6\n        // n = 5 / 3\n        // n = 1\n        // n = (1 - sqrt(73)) / 6\n        //",
    "        long n2 = n * 2;\n        long n3 = n * 3;\n        long n4 = n * 4;\n        long n5 = n * 5;\n        long n6 = n * 6;\n        long n7 = n * 7;\n        long n8 = n * 8;\n        long n9 = n * 9;\n        long n10 = n * 10;\n        long n11 = n * 11;\n        long n12 = n * 12;\n        long n13 = n * 13;\n        long n14 = n * 14;\n        long n15 = n * 15;\n        long n16 = n * 16;\n        long n17 = n * 17;\n        long n18 = n * 18;\n        long n19 = n * 19;\n        long n20 = n * 20;\n        long n21 = n * 21;\n        long n22 = n * 22;\n        long n23 = n * 23;\n        long n24 = n * 24;\n        long n25 = n * 25;\n        long n26 = n * 26;\n        long n27 = n * 27;\n        long n28 = n * 28;\n        long n29 = n * 29;\n        long n30 = n * 30;\n        long n31 = n * 31;\n        long n32 = n * 32;\n        long n33 = n * 33;\n        long n34 = n * 34;\n        long n35 = n * 35;\n        long n36 = n * 36;\n        long n37 = n * 37;\n        long n38 = n * 38;\n        long n39 = n * 39;\n        long n40 = n * 40;\n        long n41 = n * 41;\n        long n42 = n * 42;\n        long n43 = n * 43;\n        long n44 = n * 44;\n        long n45 = n * 45;\n        long n46 = n * 46;\n        long n47 = n * 47;\n        long n48 = n * 48;\n        long n49 = n * 49;\n        long n50 = n * 50;\n        long n51 = n * 51;\n        long n52 = n * 52;\n       ",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = (long)Math.Pow(10, 2) * n + (long)Math.Pow(10, 1) * n + n;\n        long sqrt = (long)Math.Sqrt(nth);\n        if (sqrt * sqrt == nth) {\n            return sqrt;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3) +/- sqrt((1/9) + (8/3))\n        // n = (1/3) +/- (1 + sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt(33))/6\n        // n = (1 + sqrt(33))/6\n        // n = (1 - sqrt",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long num = n;\n        long nth = 0;\n        long i = 1;\n        while (nth < num) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == num) {\n            return 1;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        return nth;",
    "        double x = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (x == (long)x)\n            return (long)x;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        return (long)((1 + Math.Sqrt(1 + 12*n))/6);",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n        // n = 1\n       ",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 + sqrt(9 + 8*n))/2\n        // n = (3 +",
    "        long x = 1;\n        while (x * (3 * x - 1) / 2 < n) {\n            x++;\n        }\n        if (x * (3 * x - 1) / 2 == n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return -1;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 * (3 * x1 - 1) / 2 == n) return x1;\n        if (x2 * (3 * x2 - 1) / 2 == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1) / 2;\n        if (x == (int)x)\n            return (long)x;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = 1\n        return n;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n-1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32 is the thirty-second decagonal number\n        // n = 33 is the thirty-third decagonal number\n        // n = 34",
    "        // n = (3 * n^2 - n) / 2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12 * 2)) / 6\n        // n = (1 +- sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = -2 / 3\n        // n = -1\n        // n = (3 * n^2 - n) / 2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12 * 2)) / 6\n        // n = (1 +- sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = -2 / 3\n        // n = -1\n        // n = (3 * n^2 - n) / 2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12 * 2)) / 6\n        // n = (1 +- sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = -2 / 3\n        // n = -1\n        // n = (3 * n^2 - n) / 2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12 * 2)) / 6\n        // n = (1 +- sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1 - 5) / 6\n        // n = -4 / 6\n        // n = -2 / 3\n        //",
    "        double x = (Math.Sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 1/6 or 5/6\n        // n = 1/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (1 - 5)/6\n        // n = -4/6\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n = -2/3\n        // n =",
    "        var d = (Math.Sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        if (d == (long)d)\n            return (long)d;\n        return 0;",
    "        double a = (3 + Math.Sqrt(9 + 8 * n)) / 2;\n        if (a == (int)a) {\n            return (long)a;\n        }\n        return 0;",
    "        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        long x = (long)Math.Floor((1 + Math.Sqrt(1 + 24 * n)) / 6);\n        return (3 * x * x - x) / 2 == n ? x : -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 1 or n = 1\n        // n = 1\n        return n;",
    "        double a = 3;\n        double b = -1;\n        double c = -2 * n;\n        double x = (-b + Math.Sqrt(b * b - 4 * a * c)) / (2 * a);\n        if (x == Math.Round(x))\n            return (long)x;\n        return -1;",
    "        long num = n * (3 * n - 2);\n        long sqrt = (long)Math.Sqrt(num);\n        if (sqrt * sqrt == num) {\n            return sqrt;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return 0;\n        }",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = 1 + 5\n        // n = 6\n        // n = 6 + 5\n        // n = 11\n        // n = 11 + 5\n        // n = 16\n        // n = 16 + 5\n        // n = 21\n        // n = 21 + 5\n        // n = 26\n        // n = 26 + 5\n        // n = 31\n        // n = 31 + 5\n        // n = 36\n        // n = 36 + 5\n        // n = 41\n        // n = 41 + 5\n        // n = 46\n        // n = 46 + 5\n        // n = 51\n        // n = 51 + 5\n        // n = 56\n        // n = 56 + 5\n        // n = 61\n        // n = 61 + 5\n        // n = 66\n        // n = 66 + 5\n        // n = 71\n        // n = 71 + 5\n        // n = 76\n        // n = 76 + 5\n        // n = 81\n        // n = 81 + 5\n        // n = 86\n        // n = 86 + 5\n        // n = 91\n        // n = 91 + 5\n        // n = 96\n        // n = 96 + 5\n        // n = 101\n        // n = 101 + 5\n        // n = 106\n        // n = 106 + 5\n        // n = 111\n        // n = 111 + 5\n        // n = 116\n        // n = 116 + 5\n        // n = 121\n        // n = 121 + 5\n        // n = 126\n        // n = 126 + 5\n        // n = 131\n        // n = 131 + 5\n        // n = 136\n        // n = 136 + 5\n        // n = 141\n        // n = 141 + 5\n        // n = 146\n        // n = 146 + 5\n        // n = 151\n       ",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return -1;",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        // n = (3*n^2 - n)/2\n        // 3*n^2 - n - 2*n = 0\n        // n^2 - (1/3)n - (2/3) = 0\n        // n = (1/3 +- sqrt(1/9 + 8/3))/2\n        // n = (1/3 +- sqrt(11/9))/2\n        // n = (1/3 +- sqrt(11)/3)/2\n        // n = (1 +- sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = (1 - sqrt(11))/6\n        // n = (1 + sqrt(11))/6\n        // n = ("
  ]
}