{
  "name": "mbpp_279_is_num_decagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long IsNumDecagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNumDecagonal((3L)) == (27L));\n    Debug.Assert(IsNumDecagonal((7L)) == (175L));\n    Debug.Assert(IsNumDecagonal((10L)) == (370L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 + sqrt(1 + 12*2))/6\n        // n = (1 + sqrt(25))/6\n        // n = (1 + 5)/6\n        // n = 6/6\n        // n = 1\n        // n = (1 - sqrt(25))/6\n        // n = (-4)/6\n        // n = -2/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*3))/6\n        // n = (1 + sqrt(37))/6\n        // n = (1 + 6)/6\n        // n = 7/6\n        // n = 1\n        // n = (1 - sqrt(37))/6\n        // n = (-6)/6\n        // n = -1\n        // n = (1 + sqrt(1 + 12*4))/6\n        // n = (1 + sqrt(49))/6\n        // n = (1 + 7)/6\n        // n = 8/6\n        // n = 1\n        // n = (1 - sqrt(49))/6\n        // n = (-8)/6\n        // n = -4/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*5))/6\n        // n = (1 + sqrt(61))/6\n        // n = (1 + 8)/6\n        // n = 9/6\n        // n = 1\n        // n = (1 - sqrt(61))/6\n        // n = (-10)/6\n        // n = -5/3\n        // n = -1\n        // n = (1 + sqrt(1 + 12*6))/6\n        // n = (1 + sqrt(73))/6\n        // n = (1 + 9)/6\n        // n = 10/6\n        // n = 5/3\n        // n = 1\n        // n = (1 - sqrt(73))/6\n        // n = (-12)/6\n        // n =",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 1\n        return (n * (3 * n - 1)) / 2;",
    "        long a = 1;\n        long b = 3;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return 0;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 2 == 0) {\n            return x2;\n        }\n        return 0;",
    "        // n = (3 * x^2 - x) / 2\n        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        return (long)x;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 8*k))/3\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 + sqrt(1 + 24*k))/6\n        // n = (1 +",
    "        double x = (Math.Sqrt(4*n*n + 4*n + 1) + 1)/2;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n = 0 or n = 3 - 2\n        // n = 3 - 2\n        // n = 1\n        // n = (3*1^2 - 1)/2\n        // n = (3*1 - 1)/2\n        // n = 1\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n = (3*n^2 - n)/2\n        // n =",
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n^2 - n = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the first decagonal number\n        // n = 1 is the",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return 0;",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n",
    "        long a = 1;\n        long b = -3;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (int)x1) {\n            return (long)x1;\n        }\n        if (x2 > 0 && x2 == (int)x2) {\n            return (long)x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n = (1 + sqrt(1 + 24 * n)) / 6\n        double d = 1 + Math.Sqrt(1 + 24 * n);\n        if (d % 6 == 0) {\n            return (long)d / 6;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*k))/3\n        // n = (-1 + sqrt(1 + 24*k))/6\n        // n = (-1 + sqrt(1 + 8*(3*k)))/3\n        // n = (-1 + sqrt(1 + 24*(2*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(2*k)))/3\n        // n = (-1 + sqrt(1 + 24*(4*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(4*k)))/3\n        // n = (-1 + sqrt(1 + 24*(8*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(8*k)))/3\n        // n = (-1 + sqrt(1 + 24*(16*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(16*k)))/3\n        // n = (-1 + sqrt(1 + 24*(32*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(32*k)))/3\n        // n = (-1 + sqrt(1 + 24*(64*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(64*k)))/3\n        // n = (-1 + sqrt(1 + 24*(128*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(128*k)))/3\n        // n = (-1 + sqrt(1 + 24*(256*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(256*k)))/3\n        // n = (-1 + sqrt(1 + 24*(512*k)))/6\n        // n = (-1 + sqrt(1 + 8*(3*(512*k)))/3",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        // x must be an integer\n        // 1 + 24n must be a perfect square\n        // 1 + 24n = y^2\n        // 24n = y^2 - 1\n        // n = (y^2 - 1) / 24\n        // y^2 - 1 must be a multiple of 24\n        // y^2 - 1 = 24k\n        // y^2 = 24k + 1\n        // y = sqrt(24k + 1)\n        // y must be an integer\n        // sqrt(24k + 1) must be an integer\n        // 24k + 1 must be a perfect square\n        // 24k + 1 = z^2\n        // 24k = z^2 - 1\n        // k = (z^2 - 1) / 24\n        // z^2 - 1 must be a multiple of 24\n        // z^2 - 1 = 24m\n        // z^2 = 24m + 1\n        // z = sqrt(24m + 1)\n        // z must be an integer\n        // sqrt(24m + 1) must be an integer\n        // 24m + 1 must be a perfect square\n        // 24m + 1 = w^2\n        // 24m = w^2 - 1\n        // m = (w^2 - 1) / 24\n        // w^2 - 1 must be a multiple of 24\n        // w^2 - 1 = 24n\n        // w^2 = 24n + 1\n        // w = sqrt(24n + 1)\n        // w must be an integer\n        // sqrt(24n + 1) must be an integer\n        // 24n + 1 must be a perfect square\n        // 24n + 1 = x^2\n        // 24n = x^2 - 1\n        // n = (x^2 - 1) / 24\n        // x^2 - 1 must be a multiple of 24\n        // x^2 - 1 = 24p\n        // x^2 = 24p + 1\n        // x = sqrt(24p + 1",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12*2))/6\n        // n = (1 +- sqrt(25))/6\n        // n = (1 +- 5)/6\n        // n = 6 or -1\n        // n = 6\n        // n = (3*6^2 - 6)/2\n        // n = (3*36 - 6)/2\n        // n = (108 - 6)/2\n        // n = 102/2\n        // n = 51\n        // n = (3*51^2 - 51)/2\n        // n = (3*2601 - 51)/2\n        // n = (7802 - 51)/2\n        // n = 7750/2\n        // n = 3875\n        // n = (3*3875^2 - 3875)/2\n        // n = (3*1550625 - 3875)/2\n        // n = (4661875 - 3875)/2\n        // n = 4628000/2\n        // n = 2314000\n        // n = (3*2314000^2 - 2314000)/2\n        // n = (3*53496000000 - 2314000)/2\n        // n = (160488000000 - 2314000)/2\n        // n = 160464686000/2\n        // n = 802323430\n        // n = (3*802323430^2 - 802323430)/2\n        // n = (3*641858751688900 - 802323430)/2\n        // n = (1925576255066700 - 802323430)/2\n        // n = 1925496022842370/2\n        // n = 96274801421185\n        // n = (3*96274801421185^2 - 96274801421185)/2\n        // n = (3*927492028843470225 - 96274801421185)/2\n        // n = (2782476286304020700 - 96274801421185)/2\n        // n =",
    "        // n = (3x^2 - x) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 +- sqrt(1 + 24n)) / 6\n        long x = (long)Math.Floor((1 + Math.Sqrt(1 + 24 * n)) / 6);\n        return (3 * x * x - x) / 2 == n ? x : 0;",
    "        long num = (long)((3 + Math.Sqrt(9 + 8 * n)) / 2);\n        if (num * (3 * num - 1) / 2 == n)\n            return num;\n        return 0;",
    "        // n = (3 * n * n - n) / 2\n        // 3 * n * n - n - 2 * n = 0\n        // n * (3 * n - 1) - 2 * n = 0\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2 * n\n        // n * (3 * n - 3) = 2",
    "        // n = (3*n^2 - n)/2\n        // 3n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 12(3n^2 - n)))/6\n        // n = (1 +- sqrt(1 + 36n^2 - 12n))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n        // n = (1 +- sqrt(36n^2 - 11n + 1))/6\n       "
  ]
}