{
  "name": "mbpp_576_is_Sub_Array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether a list is sublist of another or not.\n    public static bool IsSubArray(List<long> A, List<long> B) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)2L}))) == (false));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (true));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)0L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        if (m > n) return false;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) break;\n            }\n            if (j == m) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A[0] == B[i]) {\n                bool found = true;\n                for (int j = 1; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        if (i == A.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        int m = A.Count;\n        int n = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++)\n                if (B[i + j] != A[j])\n                    break;\n            if (j == m)\n                return true;\n        }\n        return false;",
    "        // If A is empty, then it is a subarray of B\n        if (A.Count == 0) return true;\n        // If B is empty, then A is not a subarray of B\n        if (B.Count == 0) return false;\n        // If A is longer than B, then A cannot be a subarray of B\n        if (A.Count > B.Count) return false;\n        // If A is the same length as B, then A must be equal to B\n        if (A.Count == B.Count) return A.SequenceEqual(B);\n\n        // Otherwise, we need to check if A is a subarray of B\n        // We do this by checking if A is a subarray of B[0:i] for all i in [0, B.Count - A.Count]\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool flag = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        // O(n^2)\n        for (int i = 0; i < A.Count; i++) {\n            if (A[i] == B[0]) {\n                bool isSub = true;\n                for (int j = 0; j < B.Count; j++) {\n                    if (A[i + j] != B[j]) {\n                        isSub = false;\n                        break;\n                    }\n                }\n                if (isSub) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        if (m > n) return false;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) break;\n            }\n            if (j == m) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count < B.Count) return false;\n        for (int i = 0; i < A.Count - B.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < B.Count; j++) {\n                if (A[i + j] != B[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool match = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count == 0) return true;\n        if (B.Count == 0) return false;\n        if (A.Count > B.Count) return false;\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool match = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool isSubArray = true;\n                for (int j = 1; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count == 0) {\n            return true;\n        }\n        if (B.Count == 0) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n            }\n            j++;\n        }\n        return i == A.Count;",
    "        for (int i = 0; i < A.Count; i++) {\n            if (A[i] != B[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool isSub = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        isSub = false;\n                        break;\n                    }\n                }\n                if (isSub) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count == 0) return true;\n        if (B.Count == 0) return false;\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = 0;\n                j++;\n            }\n        }\n        if (i == A.Count) return true;\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of A in B.\n        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of A in B.\n        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of A in B.\n        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of A in B.\n        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of A in B.\n        // A is a subarray of B iff A is a subset of B and A is contiguous in B.\n        // A is a subset of B iff every element in A is in B.\n        // A is contiguous in B iff A is a subset of B and the index of the first element of A in B is the same as the index of the last element of",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count == 0) {\n            return true;\n        }\n        if (B.Count == 0) {\n            return false;\n        }\n        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool found = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n            }\n            j++;\n        }\n        return i == A.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return j == B.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (B.Count > A.Count) {\n            return false;\n        }\n        for (int i = 0; i < A.Count; i++) {\n            if (A[i] == B[0]) {\n                bool match = true;\n                for (int j = 0; j < B.Count; j++) {\n                    if (i + j >= A.Count || A[i + j] != B[j]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = 0;\n                j++;\n            }\n        }\n        if (i == A.Count) {\n            return true;\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool found = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count == 0) return true;\n        if (B.Count == 0) return false;\n        if (A.Count > B.Count) return false;\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (B.GetRange(i, A.Count).SequenceEqual(A)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) return false;\n        if (A.Count == 0) return true;\n        var a = A[0];\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == a) {\n                var sub = B.GetRange(i, A.Count);\n                if (sub.SequenceEqual(A)) return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                int j = 1;\n                for (; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        break;\n                    }\n                }\n                if (j == A.Count) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (B[i] == A[0]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = 0;\n                j++;\n            }\n        }\n        if (i == A.Count) {\n            return true;\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return j == B.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        // A is a subarray of B iff B contains A as a contiguous subarray.\n        // This is equivalent to saying that B contains A as a subsequence.\n        // We can use dynamic programming to solve this problem.\n        // Let dp[i, j] be the length of the longest common subsequence of A[0..i] and B[0..j].\n        // Then dp[i, j] = dp[i - 1, j - 1] + 1 if A[i] == B[j]\n        //                max(dp[i - 1, j], dp[i, j - 1]) otherwise.\n        // We can compute dp in O(n^2) time.\n        // Then we can check if dp[n - 1, m - 1] == n.\n        int n = A.Count;\n        int m = B.Count;\n        int[,] dp = new int[n, m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (A[i] == B[j]) {\n                    dp[i, j] = (i > 0 && j > 0 ? dp[i - 1, j - 1] : 0) + 1;\n                } else {\n                    dp[i, j] = Math.Max(i > 0 ? dp[i - 1, j] : 0, j > 0 ? dp[i, j - 1] : 0);\n                }\n            }\n        }\n        return dp[n - 1, m - 1] == n;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        // A is a subarray of B iff A is a subsequence of B\n        // A is a subsequence of B iff there exists a strictly increasing sequence of indices\n        // i_1, i_2, ..., i_n such that A[j] = B[i_j] for all j in 1..n\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n            }\n            j++;\n        }\n        return i == A.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        return j == B.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        return j == B.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count < B.Count) return false;\n        for (int i = 0; i < A.Count - B.Count; i++) {\n            if (A.GetRange(i, B.Count).SequenceEqual(B)) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        // A is a subarray of B iff A is a subsequence of B.\n        // A subsequence of B is a list of elements of B in the same order as they appear in B, but not necessarily contiguous.\n        // For example, [1, 3, 4] is a subsequence of [1, 2, 3, 4] but not a subarray.\n        // A subsequence can be obtained from a string by deleting some number of characters (possibly zero) from it, without changing the order of the remaining elements.\n        // For example, the sequence [1, 2, 3] is a subsequence of the string \"abcdefg\".\n        // The sequence [2, 1] is not a subsequence of the string \"abcdefg\" because order matters.\n        //\n        // We can solve this problem by using a sliding window.\n        // We will iterate through A and B simultaneously, and keep track of the index of the last element of A that we have seen.\n        // If we see an element of A that is not in B, we reset the index of the last element of A that we have seen to -1.\n        // If we see an element of A that is in B, we increment the index of the last element of A that we have seen.\n        // If we reach the end of A and the index of the last element of A that we have seen is equal to the length of A - 1, we have found a subsequence.\n        //\n        // We can do this in O(n + m) time, where n is the length of A and m is the length of B.\n        //\n        // We can do this in O(1) space.\n        //\n        // We can do this in O(n + m) time and O(1) space.\n        int index = -1;\n        for (int i = 0; i < B.Count; i++) {\n            if (A[index + 1] == B[i]) {\n                index++;\n            } else {\n                index = -1;\n            }\n            if (index == A.Count - 1) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        // A is a sublist of B iff A is a contiguous subsequence of B.\n        // A is a contiguous subsequence of B iff there exists a sequence of indices\n        // i_1, i_2, ..., i_k such that A[j] = B[i_j] for all j.\n        //\n        // We can check this by iterating over B and checking whether the subsequence\n        // starting at each index is equal to A.\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        for (int i = 0; i < A.Count; i++) {\n            if (A[i] != B[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) return false;\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool match = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) return false;\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) return true;\n        }\n        return false;",
    "        if (A.Count == 0) return true;\n        if (B.Count == 0) return false;\n        if (A.Count > B.Count) return false;\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = 0;\n                j++;\n            }\n        }\n        return i == A.Count;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count == 0) {\n            return true;\n        }\n        if (B.Count == 0) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = 0;\n                j++;\n            }\n        }\n        if (i == A.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        return j == B.Count;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;"
  ]
}