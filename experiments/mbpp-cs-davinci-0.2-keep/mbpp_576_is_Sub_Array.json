{
  "name": "mbpp_576_is_Sub_Array",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether a list is sublist of another or not.\n    public static bool IsSubArray(List<long> A, List<long> B) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)2L}))) == (false));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (true));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)0L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (A[0] == B[i]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count; i++) {\n            if (B[i] == A[0]) {\n                bool isSubArray = true;\n                for (int j = 0; j < A.Count; j++) {\n                    if (i + j >= B.Count || B[i + j] != A[j]) {\n                        isSubArray = false;\n                        break;\n                    }\n                }\n                if (isSubArray) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.Count) {\n            return true;\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int n = A.Count;\n        int m = B.Count;\n        if (m > n) return false;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (A[i + j] != B[j]) break;\n            }\n            if (j == m) return true;\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool found = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A[0] == B[i]) {\n                bool found = true;\n                for (int j = 1; j < A.Count; j++) {\n                    if (A[j] != B[i + j]) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            if (A.SequenceEqual(B.GetRange(i, A.Count))) {\n                return true;\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < A.Count && j < B.Count) {\n            if (A[i] == B[j]) {\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        if (i == A.Count) {\n            return true;\n        } else {\n            return false;\n        }",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) {\n                return true;\n            }\n        }\n        return false;",
    "        if (A.Count > B.Count) {\n            return false;\n        }\n        for (int i = 0; i < B.Count - A.Count + 1; i++) {\n            bool isSub = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (A[j] != B[i + j]) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) {\n                return true;\n            }\n        }\n        return false;",
    "        int m = A.Count;\n        int n = B.Count;\n        for (int i = 0; i <= n - m; i++) {\n            int j;\n            for (j = 0; j < m; j++)\n                if (B[i + j] != A[j])\n                    break;\n            if (j == m)\n                return true;\n        }\n        return false;"
  ]
}