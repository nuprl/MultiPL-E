{
  "name": "mbpp_630_get_coordinates",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    public static List<List<long>> GetCoordinates(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetCoordinates((long)Tuple.Create(3L, 4L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))));\n    Debug.Assert(GetCoordinates((long)Tuple.Create(4L, 5L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))));\n    Debug.Assert(GetCoordinates((long)Tuple.Create(5L, 6L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)7L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        return coordinates;",
    "        List<long> test_list = new List<long>();\n        List<List<long>> test_list_list = new List<List<long>>();\n        test_list.Add(test_tup);\n        test_list_list.Add(test_list);\n        return test_list_list;",
    "        // Extract the coordinate tuple.\n        List<long> tup = new List<long>();\n        while (test_tup > 0) {\n            tup.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        // Create a list of all the adjacent coordinates.\n        List<List<long>> coord_list = new List<List<long>>();\n        for (int i = 0; i < tup.Count; i++) {\n            for (int j = 0; j < tup.Count; j++) {\n                if (i != j) {\n                    List<long> temp = new List<long>(tup);\n                    temp[i] = tup[j];\n                    temp[j] = tup[i];\n                    coord_list.Add(temp);\n                }\n            }\n        }\n        return coord_list;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> temp = new List<long>();\n        long x = test_tup / 100;\n        long y = test_tup % 100;\n        temp.Add(x - 1);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x - 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x - 1);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        return coordinates;",
    "        List<List<long>> coords = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coords.Add(new List<long> { x - 1, y });\n        coords.Add(new List<long> { x + 1, y });\n        coords.Add(new List<long> { x, y - 1 });\n        coords.Add(new List<long> { x, y + 1 });\n        return coords;",
    "        List<List<long>> result = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        for (long i = x - 1; i <= x + 1; i++) {\n            for (long j = y - 1; j <= y + 1; j++) {\n                if (i == x && j == y) {\n                    continue;\n                }\n                result.Add(new List<long>() { i, j });\n            }\n        }\n        return result;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> tup = new List<long>();\n        tup.Add(test_tup);\n        coordinates.Add(tup);\n        for (int i = 0; i < tup.Count; i++) {\n            List<long> tup_list = new List<long>();\n            tup_list.Add(tup[i] - 1);\n            tup_list.Add(tup[i] + 1);\n            tup_list.Add(tup[i] - 10);\n            tup_list.Add(tup[i] + 10);\n            tup_list.Add(tup[i] - 11);\n            tup_list.Add(tup[i] + 11);\n            tup_list.Add(tup[i] - 9);\n            tup_list.Add(tup[i] + 9);\n            tup_list.Add(tup[i] - 100);\n            tup_list.Add(tup[i] + 100);\n            tup_list.Add(tup[i] - 101);\n            tup_list.Add(tup[i] + 101);\n            tup_list.Add(tup[i] - 99);\n            tup_list.Add(tup[i] + 99);\n            tup_list.Add(tup[i] - 110);\n            tup_list.Add(tup[i] + 110);\n            tup_list.Add(tup[i] - 109);\n            tup_list.Add(tup[i] + 109);\n            tup_list.Add(tup[i] - 111);\n            tup_list.Add(tup[i] + 111);\n            tup_list.Add(tup[i] - 91);\n            tup_list.Add(tup[i] + 91);\n            tup_list.Add(tup[i] - 89);\n            tup_list.Add(tup[i] + 89);\n            tup_list.Add(tup[i]",
    "        List<List<long>> coordinates = new List<List<long>>();\n        for (long i = -1; i <= 1; i++) {\n            for (long j = -1; j <= 1; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                List<long> coordinate = new List<long>();\n                coordinate.Add(test_tup + i);\n                coordinate.Add(test_tup + j);\n                coordinates.Add(coordinate);\n            }\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x, y });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        List<List<long>> coords = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coords.Add(new List<long>() { x + 1, y });\n        coords.Add(new List<long>() { x - 1, y });\n        coords.Add(new List<long>() { x, y + 1 });\n        coords.Add(new List<long>() { x, y - 1 });\n        return coords;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> tup = new List<long>();\n        long x = test_tup;\n        while (x > 0) {\n            tup.Add(x % 10);\n            x /= 10;\n        }\n        tup.Reverse();\n        for (int i = 0; i < tup.Count; i++) {\n            for (int j = 0; j < tup.Count; j++) {\n                if (i == j) {\n                    continue;\n                }\n                List<long> new_tup = new List<long>();\n                for (int k = 0; k < tup.Count; k++) {\n                    if (k == i || k == j) {\n                        continue;\n                    }\n                    new_tup.Add(tup[k]);\n                }\n                coordinates.Add(new_tup);\n            }\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        List<long> temp_coord = new List<long>();\n        long temp_tup = test_tup;\n        long temp_coord_val = 0;\n        while (temp_tup > 0) {\n            temp_coord_val = temp_tup % 10;\n            temp_coord.Add(temp_coord_val);\n            temp_tup /= 10;\n        }\n        coordinates.Add(temp_coord);\n        for (int i = 0; i < temp_coord.Count; i++) {\n            temp_coord = new List<long>();\n            for (int j = 0; j < temp_coord.Count; j++) {\n                if (j == i) {\n                    temp_coord.Add(temp_coord[j] + 1);\n                }\n                else {\n                    temp_coord.Add(temp_coord[j]);\n                }\n            }\n            coordinates.Add(temp_coord);\n        }\n        return coordinates;",
    "        var tup = new List<long>();\n        while (test_tup > 0) {\n            tup.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        var coordinates = new List<List<long>>();\n        for (int i = 0; i < tup.Count; i++) {\n            var new_tup = new List<long>(tup);\n            new_tup[i] = tup[i] + 1;\n            coordinates.Add(new_tup);\n            new_tup = new List<long>(tup);\n            new_tup[i] = tup[i] - 1;\n            coordinates.Add(new_tup);\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        List<List<long>> all_coords = new List<List<long>>();\n        List<long> coords = new List<long>();\n        long x = test_tup;\n        long y = test_tup;\n        long z = test_tup;\n        long w = test_tup;\n        long v = test_tup;\n        long u = test_tup;\n        long t = test_tup;\n        long s = test_tup;\n        long r = test_tup;\n        long q = test_tup;\n        long p = test_tup;\n        long o = test_tup;\n        long n = test_tup;\n        long m = test_tup;\n        long l = test_tup;\n        long k = test_tup;\n        long j = test_tup;\n        long i = test_tup;\n        long h = test_tup;\n        long g = test_tup;\n        long f = test_tup;\n        long e = test_tup;\n        long d = test_tup;\n        long c = test_tup;\n        long b = test_tup;\n        long a = test_tup;\n        coords.Add(a);\n        coords.Add(b);\n        coords.Add(c);\n        coords.Add(d);\n        coords.Add(e);\n        coords.Add(f);\n        coords.Add(g);\n        coords.Add(h);\n        coords.Add(i);\n        coords.Add(j);\n        coords.Add(k);\n        coords.Add(l);\n        coords.Add(m);\n        coords.Add(n);\n        coords.Add(o);\n        coords.Add(p);\n        coords.Add(q);\n        coords.Add(r);\n        coords.Add(s);\n        coords.Add(t);\n        coords.Add(u);\n        coords.Add(v);\n        coords.Add(w);\n        coords.Add(x);",
    "        var coordinates = new List<List<long>>();\n        var tup = new List<long>();\n        var tup_str = test_tup.ToString();\n        var tup_len = tup_str.Length;\n        var tup_str_arr = tup_str.ToCharArray();\n        for (int i = 0; i < tup_len; i++) {\n            tup.Add(long.Parse(tup_str_arr[i].ToString()));\n        }\n        var tup_len_minus_one = tup_len - 1;\n        for (int i = 0; i < tup_len; i++) {\n            var tup_copy = new List<long>(tup);\n            if (i == 0) {\n                tup_copy[i] = tup_copy[i + 1];\n            }\n            else if (i == tup_len_minus_one) {\n                tup_copy[i] = tup_copy[i - 1];\n            }\n            else {\n                tup_copy[i] = tup_copy[i - 1] + tup_copy[i + 1];\n            }\n            coordinates.Add(tup_copy);\n        }\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 100;\n        long y = test_tup % 100;\n        List<long> temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x - 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup % 100;\n        long y = test_tup / 100;\n        coordinates.Add(new List<long>() { x, y });\n        coordinates.Add(new List<long>() { x + 1, y });\n        coordinates.Add(new List<long>() { x - 1, y });\n        coordinates.Add(new List<long>() { x, y + 1 });\n        coordinates.Add(new List<long>() { x, y - 1 });\n        return coordinates;",
    "        List<List<long>> coordinates = new List<List<long>>();\n        long x = test_tup / 1000000;\n        long y = test_tup % 1000000;\n        List<long> temp = new List<long>();\n        temp.Add(x - 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x + 1);\n        temp.Add(y);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y - 1);\n        coordinates.Add(temp);\n        temp = new List<long>();\n        temp.Add(x);\n        temp.Add(y + 1);\n        coordinates.Add(temp);\n        return coordinates;",
    "        var test_tup_list = new List<long>();\n        test_tup_list.Add(test_tup);\n        return GetCoordinates(test_tup_list);"
  ]
}