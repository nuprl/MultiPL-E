{
  "name": "mbpp_470_add_pairwise",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    public static long AddPairwise(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddPairwise((long)Tuple.Create(1L, 5L, 7L, 8L, 10L)) == (long)Tuple.Create(6L, 12L, 15L, 18L));\n    Debug.Assert(AddPairwise((long)Tuple.Create(2L, 6L, 8L, 9L, 11L)) == (long)Tuple.Create(8L, 14L, 17L, 20L));\n    Debug.Assert(AddPairwise((long)Tuple.Create(3L, 7L, 9L, 10L, 12L)) == (long)Tuple.Create(10L, 16L, 19L, 22L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here.\n        return 0;",
    "        long result = 0;\n        long temp = test_tup;\n        long last_digit = 0;\n        long current_digit = 0;\n        while (temp > 0) {\n            last_digit = current_digit;\n            current_digit = temp % 10;\n            result += last_digit + current_digit;\n            temp /= 10;\n        }\n        return result;",
    "        long sum = 0;\n        long prev = test_tup % 10;\n        long curr = 0;\n        while (test_tup > 0) {\n            curr = test_tup % 10;\n            sum += prev + curr;\n            prev = curr;\n            test_tup /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long tup = test_tup;\n        long prev = 0;\n        while (tup > 0) {\n            long curr = tup % 10;\n            sum += prev + curr;\n            prev = curr;\n            tup /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long temp = test_tup;\n        long digit = 0;\n        while (temp > 0) {\n            digit = temp % 10;\n            sum += digit;\n            temp /= 10;\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        long tup = test_tup;\n        long prev = 0;\n        while (tup != 0) {\n            long curr = tup % 10;\n            sum += prev + curr;\n            prev = curr;\n            tup /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long prev = 0;\n        while (test_tup != 0) {\n            long curr = test_tup % 10;\n            sum += prev + curr;\n            prev = curr;\n            test_tup /= 10;\n        }\n        return sum;",
    "        // Write your code here\n        return 0;",
    "        // Your code goes here\n        return 0;",
    "        long sum = 0;\n        string tup_str = test_tup.ToString();\n        for (int i = 0; i < tup_str.Length - 1; i++) {\n            sum += int.Parse(tup_str[i].ToString()) + int.Parse(tup_str[i + 1].ToString());\n        }\n        return sum;",
    "        // Convert to string\n        string test_str = test_tup.ToString();\n        // Convert to list\n        List<int> test_list = test_str.Select(c => int.Parse(c.ToString())).ToList();\n        // Add pairwise\n        long sum = 0;\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            sum += test_list[i] + test_list[i + 1];\n        }\n        return sum;",
    "        long sum = 0;\n        long tup = test_tup;\n        while (tup > 0) {\n            long digit = tup % 10;\n            sum += digit;\n            tup = tup / 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long prev = 0;\n        while (test_tup > 0) {\n            long curr = test_tup % 10;\n            sum += prev + curr;\n            prev = curr;\n            test_tup /= 10;\n        }\n        return sum;",
    "        // Convert the tuple to a list.\n        List<int> test_list = new List<int>();\n        while (test_tup > 0) {\n            test_list.Add((int)(test_tup % 10));\n            test_tup /= 10;\n        }\n        // Add the neighboring elements.\n        long sum = 0;\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            sum += test_list[i] + test_list[i + 1];\n        }\n        return sum;",
    "        long result = 0;\n        long[] tup = new long[test_tup.ToString().Length];\n        for (int i = 0; i < tup.Length; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < tup.Length - 1; i++) {\n            result += tup[i] + tup[i + 1];\n        }\n        return result;",
    "        long result = 0;\n        long temp = test_tup;\n        long last_digit = 0;\n        while (temp > 0) {\n            last_digit = temp % 10;\n            temp = temp / 10;\n            result = result + last_digit;\n        }\n        return result;",
    "        // Your code here\n        return 0;",
    "        long sum = 0;\n        string tup_str = test_tup.ToString();\n        for (int i = 0; i < tup_str.Length - 1; i++) {\n            sum += int.Parse(tup_str[i].ToString()) + int.Parse(tup_str[i + 1].ToString());\n        }\n        return sum;",
    "        long sum = 0;\n        long tup = test_tup;\n        while (tup > 0) {\n            sum += tup % 10;\n            tup /= 10;\n        }\n        return sum;",
    "        long result = 0;\n        long[] tup = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < tup.Length - 1; i++) {\n            result += tup[i] + tup[i + 1];\n        }\n        return result;"
  ]
}