{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static bool TextLowercaseUnderscore(string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    Debug.Assert(TextLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    Debug.Assert(TextLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (char.IsLower(text[0]) && text[1] == '_') return TextLowercaseUnderscore(text.Substring(2));\n        if (char.IsLower(text[0])) return TextLowercaseUnderscore(text.Substring(1));\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code goes here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        var chars = text.ToCharArray();\n        var lowercase = new List<char>();\n        var underscore = new List<char>();\n        var result = new List<char>();\n        for (int i = 0; i < chars.Length; i++) {\n            if (Char.IsLower(chars[i])) {\n                lowercase.Add(chars[i]);\n            } else if (chars[i] == '_') {\n                underscore.Add(chars[i]);\n            } else {\n                result.Add(chars[i]);\n            }\n        }\n        if (lowercase.Count == 0 || underscore.Count == 0) {\n            return false;\n        }\n        if (result.Count > 0) {\n            return false;\n        }\n        return true;",
    "        // your code goes here\n        return false;",
    "        return text.Split('_').All(x => x.All(y => y >= 'a' && y <= 'z'));",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) {\n            return false;\n        }\n        if (text.Length == 1) {\n            return char.IsLower(text[0]);\n        }\n        if (text[0] == '_') {\n            return false;\n        }\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == text.Length - 1) {\n                    return false;\n                }\n                if (!char.IsLower(text[i + 1])) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.All(x => char.IsLower(x) || x == '_');",
    "        // TODO: Implement this function\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (!char.IsLower(text[0])) return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == text.Length - 1) return false;\n                if (!char.IsLower(text[i + 1])) return false;\n            } else if (!char.IsLower(text[i])) {\n                return false;\n            }\n        }\n        return true;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (text[text.Length - 1] == '_') return false;\n        if (text[0] == '_' && text[1] == '_') return false;\n        if (text[text.Length - 1] == '_' && text[text.Length - 2] == '_') return false;\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (text[i - 1] == '_' || text[i + 1] == '_') return false;\n                if (!char.IsLower(text[i - 1]) || !char.IsLower(text[i + 1])) return false;\n            }\n        }\n        return true;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // TODO: Implement this function.\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) {\n            return false;\n        }\n        bool underscore = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (underscore) {\n                    return false;\n                }\n                underscore = true;\n            } else if (underscore) {\n                if (text[i] < 'a' || text[i] > 'z') {\n                    return false;\n                }\n                underscore = false;\n            } else if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n        return !underscore;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.All(c => Char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        var textArray = text.ToCharArray();\n        var isLowercase = false;\n        var isUnderscore = false;\n        var isLowercaseUnderscore = false;\n        for (int i = 0; i < textArray.Length; i++) {\n            if (Char.IsLower(textArray[i])) {\n                isLowercase = true;\n            } else if (textArray[i] == '_') {\n                isUnderscore = true;\n            } else {\n                isLowercaseUnderscore = false;\n                break;\n            }\n            if (isLowercase && isUnderscore) {\n                isLowercaseUnderscore = true;\n                isLowercase = false;\n                isUnderscore = false;\n            }\n        }\n        return isLowercaseUnderscore;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Any(c => c == '_');",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (text[text.Length - 1] == '_') return false;\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (char.IsLower(text[i - 1]) && char.IsLower(text[i + 1])) continue;\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Your code goes here.\n        return false;",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        if (text.Length == 0) {\n            return false;\n        }\n        for (int i = 0; i < text.Length; i++) {\n            if (i == 0) {\n                if (!Char.IsLower(text[i])) {\n                    return false;\n                }\n            } else if (i == text.Length - 1) {\n                if (!Char.IsLower(text[i])) {\n                    return false;\n                }\n            } else {\n                if (!Char.IsLower(text[i]) && text[i] != '_') {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        // Your code here\n        return false;",
    "        // your code here\n        return false;",
    "        if (text.Length == 0) {\n            return false;\n        }\n        bool hasUnderscore = false;\n        bool hasLowercase = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '_') {\n                hasUnderscore = true;\n            } else if (Char.IsLower(text[i])) {\n                hasLowercase = true;\n            } else {\n                return false;\n            }\n        }\n        return hasUnderscore && hasLowercase;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // Your code goes here.\n        return false;",
    "        var arr = text.Split('_');\n        foreach (var item in arr) {\n            if (item.Length == 0) {\n                return false;\n            }\n            foreach (var c in item) {\n                if (!char.IsLower(c)) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        // Write your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        bool result = false;\n        if (text.Length > 0) {\n            for (int i = 0; i < text.Length; i++) {\n                if (text[i] == '_') {\n                    if (i > 0 && i < text.Length - 1) {\n                        if (char.IsLower(text[i - 1]) && char.IsLower(text[i + 1])) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n        return result;",
    "        // Your code here.\n        return false;",
    "        return text.All(x => char.IsLower(x) || x == '_');",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        // TODO\n        return false;",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.All(x => (x == '_' || char.IsLower(x)));",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (text[text.Length - 1] == '_') return false;\n        if (text.Contains(\"__\")) return false;\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == '_') {\n                if (!char.IsLower(text[i - 1]) || !char.IsLower(text[i + 1])) return false;\n            } else {\n                if (!char.IsLower(text[i])) return false;\n            }\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // your code here\n        return false;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // TODO: Implement this function\n        return false;",
    "        // TODO\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        return text.Contains(\"_\");",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z_]+$\");",
    "        // TODO: Implement this function\n        return false;",
    "        if (text.Length == 0) return false;\n        if (text.Length == 1) return char.IsLower(text[0]);\n        if (text[0] == '_') return false;\n        if (text[text.Length - 1] == '_') return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (text[i - 1] == '_') return false;\n                if (i == text.Length - 1) return false;\n                if (!char.IsLower(text[i + 1])) return false;\n            }\n        }\n        return true;",
    "        if (text.Length == 0) return false;\n        if (text[0] < 'a' || text[0] > 'z') return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i + 1 < text.Length) {\n                    if (text[i + 1] < 'a' || text[i + 1] > 'z') return false;\n                }\n                else return false;\n            }\n            else if (text[i] < 'a' || text[i] > 'z') return false;\n        }\n        return true;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        if (text.Length == 0) {\n            return false;\n        }\n        if (text[0] < 'a' || text[0] > 'z') {\n            return false;\n        }\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == text.Length - 1) {\n                    return false;\n                }\n                if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                    return false;\n                }\n            } else if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n        return true;",
    "        // TODO: Implement this function.\n        return false;",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.All(c => char.IsLower(c) || c == '_');",
    "        if (text.Length == 0) {\n            return false;\n        }\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i == 0 || i == text.Length - 1) {\n                    return false;\n                }\n                if (!char.IsLower(text[i - 1]) || !char.IsLower(text[i + 1])) {\n                    return false;\n                }\n            } else if (!char.IsLower(text[i])) {\n                return false;\n            }\n        }\n        return true;",
    "        return text.Split('_').All(x => x.All(y => char.IsLower(y)));",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // Write your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        if (text.Length == 0) return false;\n        if (text[0] < 'a' || text[0] > 'z') return false;\n        for (int i = 1; i < text.Length; i++) {\n            if (text[i] == '_') {\n                if (i + 1 < text.Length && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    i++;\n                    continue;\n                }\n                return false;\n            }\n            if (text[i] < 'a' || text[i] > 'z') return false;\n        }\n        return true;",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // TODO: Implement this function\n        return false;",
    "        return text.Contains(\"_\");",
    "        // Your code here\n        return false;",
    "        return text.Contains(\"_\");",
    "        // split the string into an array of words\n        string[] words = text.Split(' ');\n        // loop through the words\n        foreach (string word in words) {\n            // if the word contains an underscore\n            if (word.Contains('_')) {\n                // split the word into an array of characters\n                char[] characters = word.ToCharArray();\n                // loop through the characters\n                foreach (char character in characters) {\n                    // if the character is not a lowercase letter or an underscore\n                    if (!char.IsLower(character) && character != '_') {\n                        // return false\n                        return false;\n                    }\n                }\n            }\n        }\n        // return true\n        return true;",
    "        return text.Contains(\"_\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^[a-z]+(_[a-z]+)*$\");",
    "        // TODO: Implement this function\n        return false;"
  ]
}