{
  "name": "mbpp_92_is_undulating",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        // TODO: Implement this function\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        // TODO: Implement this function.\n        return false;",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        // The number is undulating if it has at least three digits, and\n        // the difference between the digits at even positions and the digits\n        // at odd positions is a constant.\n        if (n < 100) return false;\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        int diff = digits[1] - digits[0];\n        for (int i = 2; i < digits.Count; i++) {\n            if (digits[i] - digits[i - 1] != diff) return false;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var len = digits.Length;\n        for (int i = 0; i < len - 2; i++) {\n            if (digits[i] != digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1])\n                return true;\n        }\n        return false;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastSign = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var sign = Math.Sign(digits[i] - last);\n            if (sign == 0) continue;\n            if (sign == lastSign) return false;\n            lastSign = sign;\n            last = digits[i];\n        }\n        return true;",
    "        // TODO: Implement this function.\n        return false;",
    "        if (n < 10) return false;\n        var s = n.ToString();\n        var last = s[0];\n        var lastDiff = 0;\n        for (int i = 1; i < s.Length; i++) {\n            var diff = s[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            lastDiff = diff;\n            last = s[i];\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            last = digits[i];\n            lastDiff = diff;\n        }\n        return true;",
    "        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 1; i++) {\n            if (s[i] == s[i + 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;",
    "        // An undulating number is a number that has alternating digits.\n        // For example, the number 1214 is undulating because it has the digits 1, 2, 1, and 4.\n        // The number 1234 is not undulating because it has the digits 1, 2, 3, and 4.\n        // The number 12 is not undulating because it has only two digits.\n        // The number 1 is not undulating because it has only one digit.\n        // The number 0 is not undulating because it has only one digit.\n        // The number -1 is not undulating because it has only one digit.\n        // The number -12 is not undulating because it has only two digits.\n        // The number -123 is not undulating because it has only three digits.\n        // The number -1234 is not undulating because it has only four digits.\n        // The number -12345 is not undulating because it has only five digits.\n        // The number -123456 is not undulating because it has only six digits.\n        // The number -1234567 is not undulating because it has only seven digits.\n        // The number -12345678 is not undulating because it has only eight digits.\n        // The number -123456789 is not undulating because it has only nine digits.\n        // The number -1234567890 is not undulating because it has only ten digits.\n        // The number -12345678901 is not undulating because it has only eleven digits.\n        // The number -123456789012 is not undulating because it has only twelve digits.\n        // The number -1234567890123 is not undulating because it has only thirteen digits.\n        // The number -12345678901234 is not undulating because it has only fourteen digits.\n        // The number -123456789012345 is not undulating because it has only fifteen digits.\n        // The number -1234567890123456 is not undulating because it has only sixteen digits.\n        // The number -12345678901234567 is not undulating because it has only seventeen digits.\n        // The number -123456789012345678 is not undulating because it has only eighteen digits.\n        // The number -123456789012345",
    "        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (var i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    undulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        return undulating || count > 2;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;"
  ]
}