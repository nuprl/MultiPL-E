{
  "name": "mbpp_479_first_Digit",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first digit of a given number.\n    public static long FirstDigit(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstDigit((123L)) == (1L));\n    Debug.Assert(FirstDigit((456L)) == (4L));\n    Debug.Assert(FirstDigit((12L)) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        long result = 0;\n        while (n > 0) {\n            result = n % 10;\n            n /= 10;\n        }\n        return result;",
    "        return n.ToString()[0] - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        // Your code here\n        return 0;",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n < 0 ? -FirstDigit(-n) : (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString()[0] - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString().First() - '0';",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return (long)Math.Floor(Math.Abs(n) / Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(n)))));",
    "        return n / (long)Math.Pow(10, (int)Math.Log10(n));",
    "        return n / (long)Math.Pow(10, (int)Math.Log10(n));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString()[0] - '0';",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n.ToString().First() - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        // Your code goes here.\n        return 0;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n.ToString().First() - '0';",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        // Your code goes here.\n        return 0;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        long first = 0;\n        while (n > 0) {\n            first = n % 10;\n            n /= 10;\n        }\n        return first;",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, (int)Math.Log10(n));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return (long)Math.Floor(Math.Log10(n));",
    "        // Your code goes here.\n        // return 0;\n        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        var s = n.ToString();\n        return long.Parse(s[0].ToString());",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        // Your code goes here.\n        return 0;",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString().First() - '0';",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString().First() - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString().First() - '0';",
    "        if (n < 0) n = -n;\n        while (n >= 10) n /= 10;\n        return n;",
    "        return (long)Math.Floor(Math.Abs(n) / Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(n)))));",
    "        // Your code goes here.\n        return 0;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        string s = n.ToString();\n        return long.Parse(s[0].ToString());",
    "        return n / (long)Math.Pow(10, (int)Math.Log10(n));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        // Your code goes here.\n        return 0;",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString()[0] - '0';",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        // Your code goes here.\n        return 0;",
    "        if (n < 0) n = -n;\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n.ToString().First() - '0';",
    "        return (long)Math.Floor(Math.Abs(n) / Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(n)))));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString().First() - '0';",
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        // Your code goes here.\n        return 0;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        // Your code goes here.\n        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        var s = n.ToString();\n        return long.Parse(s[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        // Your code goes here.\n        return 0;",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString().First() - '0';",
    "        return n.ToString().First() - '0';",
    "        return (long)Math.Floor(Math.Abs(n) / Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(n)))));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n.ToString()[0] - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return (long)Math.Floor(n / Math.Pow(10, Math.Floor(Math.Log10(n))));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        long first = 0;\n        while (n > 0) {\n            first = n % 10;\n            n /= 10;\n        }\n        return first;",
    "        return n / (long)Math.Pow(10, (int)Math.Log10(n));",
    "        return n.ToString()[0] - '0';",
    "        // Your code goes here.\n        return 0;",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return (long)Math.Floor(Math.Log10(Math.Abs(n)));",
    "        return n.ToString().First() - '0';",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n.ToString().First() - '0';",
    "        return n.ToString()[0] - '0';",
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        long first = n;\n        while (first >= 10) {\n            first /= 10;\n        }\n        return first;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        // Your code goes here.\n        return n.ToString()[0] - '0';",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return (long)Math.Floor(Math.Abs(n) / Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(n)))));",
    "        return long.Parse(n.ToString()[0].ToString());",
    "        long firstDigit = n;\n        while (firstDigit >= 10) {\n            firstDigit /= 10;\n        }\n        return firstDigit;",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        return n.ToString().First() - '0';",
    "        return n / (long)Math.Pow(10, Math.Floor(Math.Log10(n)));",
    "        return n.ToString().First() - '0';",
    "        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        return n.ToString()[0] - '0';",
    "        return n / 10;"
  ]
}