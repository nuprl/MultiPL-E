{
  "name": "mbpp_119_search",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                if (i == arr.Count - 1) {\n                    result = arr[i];\n                    break;\n                }\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b66d54f6e6fb47b0b663ddae1e4c8fda>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2y55e9fs.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if (m % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if (m % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt41zmsn2.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxzr47z03.cs(27,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(27,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(27,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(27,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(30,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxzr47z03.cs(30,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code here\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result = arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49a0360323444ce4b2202310717d1188>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    if ((mid - 1) % 2 == 0) {\n                        high = mid - 2;\n                    } else {\n                        low = mid + 1;\n                    }\n                } else {\n                    if ((mid - 1) % 2 == 0) {\n                        low = mid + 2;\n                    } else {\n                        high = mid - 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeiqylew_.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(28,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(28,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        int left = 0;\n        int right = arr.Count - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp846jsiej.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp846jsiej.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01f5ecdc87494e08b3356c61aaf8579f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <01f5ecdc87494e08b3356c61aaf8579f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2y55e9fs.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        var n = arr.Count;\n        var lo = 0;\n        var hi = n - 1;\n        while (lo < hi) {\n            var mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[(int)mid] == arr[(int)mid + 1]) {\n                return Search(arr.GetRange((int)mid + 2, (int)arr.Count - (int)mid - 2));\n            } else {\n                return Search(arr.GetRange(0, (int)mid));\n            }\n        } else {\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                return Search(arr.GetRange((int)mid + 1, (int)arr.Count - (int)mid - 1));\n            } else {\n                return Search(arr.GetRange(0, (int)mid));\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk51fm324.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Write your code here\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result = result ^ arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <282c882e6467407baa6b82df373d4330>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <282c882e6467407baa6b82df373d4330>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n            else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n            else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqlbvufsh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        int low = 0;\n        int high = arr.Count - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <df7a0cadec824209ab21b41fef968f78>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0, hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp11h0wldz.cs(14,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp11h0wldz.cs(14,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp11h0wldz.cs(20,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp11h0wldz.cs(20,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp11h0wldz.cs(27,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp11h0wldz.cs(30,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // your code goes here\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result = arr[i];\n            } else {\n                if (arr[i] != result) {\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement your solution here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <16eae0593a1548e6b929421f45df8160>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <16eae0593a1548e6b929421f45df8160>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    hi = mid - 1;\n                } else {\n                    lo = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppw3ddfdg.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppw3ddfdg.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjogfxcau.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq52bcbsz.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        int n = arr.Count;\n        if (n == 1) {\n            return arr[0];\n        }\n        int mid = n / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, n - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, n - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3fd131d070450d8799eac368bde127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3a3fd131d070450d8799eac368bde127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if ((m - l) % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if ((r - m) % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkp6rurve.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp6rurve.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp6rurve.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp6rurve.cs(21,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp6rurve.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkp6rurve.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if (m % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if (m % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt41zmsn2.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    if ((mid - 1) % 2 == 0) {\n                        high = mid - 2;\n                    }\n                    else {\n                        low = mid + 1;\n                    }\n                }\n                else {\n                    if ((mid - 1) % 2 == 0) {\n                        low = mid + 2;\n                    }\n                    else {\n                        high = mid - 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzyhr9wz3.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(18,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(25,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(25,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(33,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(33,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(33,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(33,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(34,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(36,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzyhr9wz3.cs(36,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf3_ix1n2.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbhzhfch0.cs(16,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbhzhfch0.cs(16,60): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbhzhfch0.cs(19,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbhzhfch0.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbhzhfch0.cs(22,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbhzhfch0.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        // return -1;\n        long result = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b66d54f6e6fb47b0b663ddae1e4c8fda>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                left = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                right = mid - 1;\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk75ia3o9.cs(19,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(19,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(20,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(29,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(29,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(29,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(29,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(30,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(31,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk75ia3o9.cs(31,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result = result ^ arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3649faaa3154609b95ba3884ab3654e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3649faaa3154609b95ba3884ab3654e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        } else if (arr[mid] == arr[mid + 1]) {\n            return Search(arr.GetRange(0, mid));\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00022] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0004c] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00022] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0004c] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00075] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <14a60313f21f43d9aa3ac98aa77e70b0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement Search\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4e5cd7ca8ba4e55b440d6eaebbad4ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4e5cd7ca8ba4e55b440d6eaebbad4ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        } else if (arr[mid] == arr[mid + 1]) {\n            return Search(arr.GetRange(0, mid));\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpts_0v25m.cs(15,17): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(15,29): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(16,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(16,49): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(17,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(18,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjogfxcau.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] == arr[m - 1]) {\n                if (m % 2 == 0) {\n                    r = m - 2;\n                } else {\n                    l = m + 1;\n                }\n            } else if (arr[m] == arr[m + 1]) {\n                if (m % 2 == 0) {\n                    l = m + 2;\n                } else {\n                    r = m - 1;\n                }\n            } else {\n                return arr[m];\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt41zmsn2.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(21,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt41zmsn2.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    low = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplpqpgpk9.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(18,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(23,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(24,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(28,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(28,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(28,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(29,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(30,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(30,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(36,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplpqpgpk9.cs(36,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4a7ign10.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4a7ign10.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4a7ign10.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4a7ign10.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4a7ign10.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        long start = 0;\n        long end = arr.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    start = mid + 2;\n                } else {\n                    end = mid - 2;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpajy0c_24.cs(24,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(24,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(24,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(24,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(28,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(28,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(34,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpajy0c_24.cs(34,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Binary search for the first element that is not equal to its neighbor.\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplyjkc2h5.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplyjkc2h5.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplyjkc2h5.cs(22,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80360d9c44f94f23b4c522e3a45e93f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <80360d9c44f94f23b4c522e3a45e93f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b66d54f6e6fb47b0b663ddae1e4c8fda>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe7vzodxf.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(26,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(26,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(26,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(28,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpe7vzodxf.cs(28,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement Search\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4e5cd7ca8ba4e55b440d6eaebbad4ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4e5cd7ca8ba4e55b440d6eaebbad4ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    low = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwu0pi4z0.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(28,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(28,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(28,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(28,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(29,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(30,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwu0pi4z0.cs(30,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5imz8ofv.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5imz8ofv.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) return arr[0];\n        if (arr[0] != arr[1]) return arr[0];\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) return arr[arr.Count - 1];\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) return arr[mid];\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) low = mid + 2;\n                else high = mid - 2;\n            } else {\n                if (arr[mid] == arr[mid - 1]) low = mid + 1;\n                else high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk4fqmgc.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(18,82): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(20,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(20,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjk4fqmgc.cs(23,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp31sy1pkt.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp31sy1pkt.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp31sy1pkt.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp31sy1pkt.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp31sy1pkt.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp31sy1pkt.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    low = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfjbrycz_.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(28,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(28,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(28,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(28,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(29,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(30,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfjbrycz_.cs(30,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid + 1]) {\n                if ((mid - left + 1) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 2;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpol0n17_o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpol0n17_o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpol0n17_o.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpol0n17_o.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpol0n17_o.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpol0n17_o.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphwg45_35.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphwg45_35.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphwg45_35.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphwg45_35.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphwg45_35.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphwg45_35.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - low) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((high - mid) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqlbvufsh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqlbvufsh.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result = result ^ arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f83cf160a974f11a6dc207ec9bd072a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f83cf160a974f11a6dc207ec9bd072a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2y55e9fs.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (m % 2 == 0) {\n                if (arr[m] == arr[m + 1]) {\n                    l = m + 2;\n                } else {\n                    r = m;\n                }\n            } else {\n                if (arr[m] == arr[m - 1]) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n        }\n        return arr[l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjogfxcau.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjogfxcau.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq52bcbsz.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code here\n        // return the element that appears only once\n        int i = 0;\n        while (i < arr.Count) {\n            if (i == arr.Count - 1) {\n                return arr[i];\n            }\n            if (arr[i] == arr[i + 1]) {\n                i += 2;\n            } else {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    low = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] != arr[mid + 1] && arr[mid] != arr[mid - 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid + 1]) {\n                low = mid + 1;\n            } else if (arr[mid] == arr[mid - 1]) {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5mc4zdwe.cs(17,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(18,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(23,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(23,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(24,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(28,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(28,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(28,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(29,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(30,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(30,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(32,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mc4zdwe.cs(32,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[(int)mid] == arr[(int)mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6725a934996b4923aa5946caf3c5ca6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6725a934996b4923aa5946caf3c5ca6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    if ((mid - 1) % 2 == 0) {\n                        high = mid - 2;\n                    }\n                    else {\n                        low = mid + 1;\n                    }\n                }\n                else {\n                    if ((mid - 1) % 2 == 0) {\n                        low = mid + 2;\n                    }\n                    else {\n                        high = mid - 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7rtx9c76.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(32,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(32,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(32,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(32,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(33,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(35,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7rtx9c76.cs(35,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int low = 0;\n        int high = arr.Count - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <a761fc978ba341b08e920baa9b0de987>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a761fc978ba341b08e920baa9b0de987>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0002d] in <a761fc978ba341b08e920baa9b0de987>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a761fc978ba341b08e920baa9b0de987>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long start = 0;\n        long end = arr.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_uz00rj3.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_uz00rj3.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)mid];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq52bcbsz.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq52bcbsz.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    high = mid - 2;\n                } else {\n                    low = mid + 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf3_ix1n2.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf3_ix1n2.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    if ((mid - 1) % 2 == 0) {\n                        high = mid - 2;\n                    }\n                    else {\n                        low = mid + 1;\n                    }\n                }\n                else {\n                    if ((mid - 1) % 2 == 0) {\n                        low = mid + 2;\n                    }\n                    else {\n                        high = mid - 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplagsgvbu.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(28,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(28,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(28,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(28,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(29,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(31,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplagsgvbu.cs(31,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c36aaf71f0014493a98a34ccd38c5bdd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c09eed52206d425d9e56514d2d98fc6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid));\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00099] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0006d] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00099] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x0006d] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <ceb48a3ea947450e9b9caabfde2f60f8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpddp8cvqg.cs(16,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpddp8cvqg.cs(16,60): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpddp8cvqg.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpddp8cvqg.cs(22,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpddp8cvqg.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    low = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxk1rh6ms.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(27,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(27,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(27,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(27,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(29,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(29,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(35,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxk1rh6ms.cs(35,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            } else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else if (arr[mid] == arr[mid - 1]) {\n                    if ((mid - 1) % 2 == 0) {\n                        high = mid - 2;\n                    } else {\n                        low = mid + 1;\n                    }\n                } else {\n                    if ((mid - 1) % 2 == 0) {\n                        low = mid + 2;\n                    } else {\n                        high = mid - 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeiqylew_.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(26,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(28,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpeiqylew_.cs(28,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2y55e9fs.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2y55e9fs.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int left = 1;\n        int right = arr.Count - 2;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        long mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n        } else if (arr[mid] == arr[mid + 1]) {\n            return Search(arr.GetRange(0, mid));\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpts_0v25m.cs(15,17): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(15,29): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(16,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(16,49): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(17,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(18,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpts_0v25m.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else if (arr[mid] == arr[mid - 1]) {\n                    high = mid - 2;\n                }\n                else {\n                    low = mid + 2;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw1kyxbtz.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(32,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(32,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(32,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(32,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(33,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(35,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw1kyxbtz.cs(35,42): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6fe022d6164460fbefe73cfd1784b83>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6fe022d6164460fbefe73cfd1784b83>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c3c5e73e5bd4727be338492dbee734c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        if (arr[arr.Count - 1] != arr[arr.Count - 2]) {\n            return arr[arr.Count - 1];\n        }\n        int low = 1;\n        int high = arr.Count - 2;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b66d54f6e6fb47b0b663ddae1e4c8fda>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj06ifupe.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(31,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(31,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(31,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(31,66): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(32,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(34,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(34,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(42,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpj06ifupe.cs(42,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    lo = mid + 2;\n                }\n                else {\n                    hi = mid;\n                }\n            }\n            else {\n                if (arr[mid] == arr[mid - 1]) {\n                    lo = mid + 1;\n                }\n                else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpndoobvat.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpndoobvat.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpndoobvat.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpndoobvat.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpndoobvat.cs(32,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk51fm324.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk51fm324.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - left) % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((right - mid) % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8daoewkp.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8daoewkp.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxz5ypspw.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(31,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(31,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(31,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(31,66): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(32,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(34,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxz5ypspw.cs(34,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                if (i + 1 < arr.Count) {\n                    if (arr[i] != arr[i + 1]) {\n                        result = arr[i];\n                        break;\n                    }\n                } else {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[(int)mid];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00030] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <daf06ad7de5645d883b1fa1393800b3a>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] != arr[(int)mid - 1] && arr[(int)mid] != arr[(int)mid + 1]) {\n                return arr[(int)mid];\n            }\n            if (arr[(int)mid] == arr[(int)mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    right = mid - 2;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if (mid % 2 == 0) {\n                    left = mid + 2;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmyto4l59.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmyto4l59.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0 && arr[i] != arr[i + 1]) {\n                result = arr[i];\n                break;\n            }\n            if (i == arr.Count - 1 && arr[i] != arr[i - 1]) {\n                result = arr[i];\n                break;\n            }\n            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                result = arr[i];\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00072] in <d27c5f008b89458ea5ccd5d2a12506c8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d27c5f008b89458ea5ccd5d2a12506c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Search (System.Collections.Generic.List`1[T] arr) [0x00072] in <d27c5f008b89458ea5ccd5d2a12506c8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d27c5f008b89458ea5ccd5d2a12506c8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfbp7dshj.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(27,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(27,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(33,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(33,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                } else {\n                    hi = mid - 1;\n                }\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else {\n                if ((mid - 1) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvx5vu7jg.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(27,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(27,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(27,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(27,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(29,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvx5vu7jg.cs(29,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Write your code here\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                if (arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else if (i == arr.Count - 1) {\n                if (arr[i] != arr[i - 1]) {\n                    result = arr[i];\n                    break;\n                }\n            } else {\n                if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                    result = arr[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i % 2 == 0) {\n                result ^= arr[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4df4595d624344f5a2c8f3d10a953dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - lo) % 2 == 0) {\n                    hi = mid - 2;\n                } else {\n                    lo = mid + 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((hi - mid) % 2 == 0) {\n                    lo = mid + 2;\n                } else {\n                    hi = mid - 1;\n                }\n            } else {\n                return arr[mid];\n            }\n        }\n        return arr[lo];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8v8iw7f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(21,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk8v8iw7f.cs(31,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0) {\n                if (arr[mid] != arr[mid + 1]) {\n                    return arr[mid];\n                }\n                low = mid + 1;\n            } else if (mid == arr.Count - 1) {\n                if (arr[mid] != arr[mid - 1]) {\n                    return arr[mid];\n                }\n                high = mid - 1;\n            } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (arr[mid] == arr[mid + 1]) {\n                if ((mid + 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfbp7dshj.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(17,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(21,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(21,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(22,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(25,68): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(27,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(27,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(33,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfbp7dshj.cs(33,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return arr[low];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh2oj7ul.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoh2oj7ul.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 2;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    low = mid + 2;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbjwiihvf.cs(16,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(18,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(18,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(19,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbjwiihvf.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int mid = arr.Count / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            } else {\n                return Search(arr.GetRange(0, mid - 1));\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                return Search(arr.GetRange(0, mid - 1));\n            } else {\n                return Search(arr.GetRange(mid + 1, arr.Count - mid - 1));\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123289,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1843eeb179594984a58553325baf9c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (mid % 2 == 0) {\n                if (mid + 1 < arr.Count && arr[(int)mid] == arr[(int)mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    return arr[(int)mid];\n                }\n            } else {\n                if (mid - 1 >= 0 && arr[(int)mid] == arr[(int)mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    return arr[(int)mid];\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123290,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c36aaf71f0014493a98a34ccd38c5bdd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <44c35313e29647b1b71f1a67abdbb43c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1]) {\n                    left = mid + 2;\n                } else {\n                    right = mid;\n                }\n            } else {\n                if (arr[mid] == arr[mid - 1]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return arr[left];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510213,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcbfyplh7.cs(16,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(16,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(22,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpcbfyplh7.cs(29,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i += 2) {\n            if (i == arr.Count - 1) {\n                result = arr[i];\n                break;\n            }\n            if (arr[i] != arr[i + 1]) {\n                result = arr[i];\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (mid == 0 || mid == arr.Count - 1) {\n                return arr[mid];\n            }\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            if (arr[mid] == arr[mid - 1]) {\n                if (mid % 2 == 0) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                if (mid % 2 == 0) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n",
      "timestamp": 1666123291,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiuokwe3v.cs(17,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(19,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(19,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(19,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(19,61): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(20,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpiuokwe3v.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}