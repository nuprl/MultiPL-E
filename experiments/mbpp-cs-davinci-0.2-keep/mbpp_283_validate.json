{
  "name": "mbpp_283_validate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Validate((1234L)) == (true));\n    Debug.Assert(Validate((51241L)) == (false));\n    Debug.Assert(Validate((321L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        var s = n.ToString();\n        var d = new Dictionary<char, int>();\n        foreach (var c in s) {\n            if (!d.ContainsKey(c)) {\n                d[c] = 0;\n            }\n            d[c] += 1;\n        }\n        foreach (var kv in d) {\n            if (kv.Value > int.Parse(kv.Key.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            if (++digits[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (!digits.ContainsKey(digit)) {\n                digits[digit] = 0;\n            }\n            digits[digit] += 1;\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Create a dictionary to store the frequency of each digit\n        Dictionary<char, int> freq = new Dictionary<char, int>();\n        // Loop through the string\n        foreach (char c in s) {\n            // If the character is not in the dictionary, add it with a frequency of 1\n            if (!freq.ContainsKey(c)) {\n                freq.Add(c, 1);\n            }\n            // Otherwise, increment the frequency of the character\n            else {\n                freq[c]++;\n            }\n        }\n        // Loop through the string\n        foreach (char c in s) {\n            // If the frequency of the character is greater than the character itself, return false\n            if (freq[c] > int.Parse(c.ToString())) {\n                return false;\n            }\n        }\n        // Return true if the frequency of each digit is less than or equal to the digit itself\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new Dictionary<char, int>();\n        foreach (var d in digits) {\n            if (!counts.ContainsKey(d)) {\n                counts[d] = 0;\n            }\n            counts[d] += 1;\n        }\n        foreach (var d in digits) {\n            if (counts[d] > int.Parse(d.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            if (counts[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (++digits[digit] > digit)\n                return false;\n            n /= 10;\n        }\n        return true;"
  ]
}