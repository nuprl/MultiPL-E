{
  "name": "mbpp_283_validate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Validate((1234L)) == (true));\n    Debug.Assert(Validate((51241L)) == (false));\n    Debug.Assert(Validate((321L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        var s = n.ToString();\n        var d = new Dictionary<char, int>();\n        foreach (var c in s) {\n            if (!d.ContainsKey(c)) {\n                d[c] = 0;\n            }\n            d[c] += 1;\n        }\n        foreach (var kv in d) {\n            if (kv.Value > int.Parse(kv.Key.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            if (++digits[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (!digits.ContainsKey(digit)) {\n                digits[digit] = 0;\n            }\n            digits[digit] += 1;\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Create a dictionary to store the frequency of each digit\n        Dictionary<char, int> freq = new Dictionary<char, int>();\n        // Loop through the string\n        foreach (char c in s) {\n            // If the character is not in the dictionary, add it with a frequency of 1\n            if (!freq.ContainsKey(c)) {\n                freq.Add(c, 1);\n            }\n            // Otherwise, increment the frequency of the character\n            else {\n                freq[c]++;\n            }\n        }\n        // Loop through the string\n        foreach (char c in s) {\n            // If the frequency of the character is greater than the character itself, return false\n            if (freq[c] > int.Parse(c.ToString())) {\n                return false;\n            }\n        }\n        // Return true if the frequency of each digit is less than or equal to the digit itself\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new Dictionary<char, int>();\n        foreach (var d in digits) {\n            if (!counts.ContainsKey(d)) {\n                counts[d] = 0;\n            }\n            counts[d] += 1;\n        }\n        foreach (var d in digits) {\n            if (counts[d] > int.Parse(d.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            if (counts[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (++digits[digit] > digit)\n                return false;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var s = n.ToString();\n        var counts = new int[10];\n        foreach (var c in s) {\n            counts[c - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(x => x - '0').ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = digits.GroupBy(d => d).Select(g => new { digit = g.Key, count = g.Count() });\n        return counts.All(c => c.count <= c.digit);",
    "        var digits = n.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = new Dictionary<int, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit]++;\n        }\n        foreach (var digit in digits) {\n            if (counts[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new Dictionary<char, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit] += 1;\n        }\n        foreach (var digit in digits) {\n            if (counts[digit] > int.Parse(digit.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (counts.ContainsKey(digit)) {\n                counts[digit]++;\n            } else {\n                counts[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in counts) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        foreach (var c in n.ToString()) {\n            counts[c - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            if (digits[d] > d) {\n                return false;\n            }\n            digits[d]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (!digits.ContainsKey(digit)) {\n                digits[digit] = 0;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Convert the integer to a string\n        string s = n.ToString();\n        // Create a dictionary to store the frequency of each digit\n        Dictionary<char, int> freq = new Dictionary<char, int>();\n        // Iterate through the string\n        foreach (char c in s) {\n            // If the digit is not in the dictionary, add it\n            if (!freq.ContainsKey(c)) {\n                freq.Add(c, 1);\n            }\n            // Otherwise, increment the frequency\n            else {\n                freq[c]++;\n            }\n        }\n        // Iterate through the string\n        foreach (char c in s) {\n            // If the frequency of the digit is greater than the digit itself, return false\n            if (freq[c] > int.Parse(c.ToString())) {\n                return false;\n            }\n        }\n        // Otherwise, return true\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        var freq = new int[10];\n        foreach (var d in digits) {\n            freq[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) return false;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        foreach (var c in n.ToString()) {\n            digits[c - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        Dictionary<int, int> freq = new Dictionary<int, int>();\n        while (n > 0) {\n            int digit = (int)(n % 10);\n            if (freq.ContainsKey(digit)) {\n                freq[digit] += 1;\n            } else {\n                freq[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in freq) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = digits.GroupBy(x => x).Select(g => new { digit = g.Key, count = g.Count() });\n        return counts.All(c => c.digit >= c.count);",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] >= digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new Dictionary<char, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit] += 1;\n        }\n        foreach (var digit in digits) {\n            if (counts[digit] > int.Parse(digit.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        for (int i = 0; i < digits.Length; i++) {\n            counts[digits[i]]++;\n        }\n        for (int i = 0; i < digits.Length; i++) {\n            if (counts[digits[i]] > digits[i]) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToList();\n        var digitCounts = new Dictionary<int, int>();\n        foreach (var digit in digits) {\n            if (!digitCounts.ContainsKey(digit)) {\n                digitCounts[digit] = 0;\n            }\n            digitCounts[digit]++;\n        }\n        foreach (var digit in digits) {\n            if (digitCounts[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            if (counts[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            n /= 10;\n            digits[digit]++;\n        }\n        for (int i = 1; i < digits.Length; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            if (counts[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            if (++digits[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var counts = new Dictionary<int, int>();\n        foreach (var c in n.ToString()) {\n            var d = int.Parse(c.ToString());\n            if (!counts.ContainsKey(d)) {\n                counts[d] = 0;\n            }\n            counts[d]++;\n        }\n        foreach (var kvp in counts) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 1; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var freq = new int[10];\n        foreach (var d in digits) {\n            freq[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        // Write your code here\n        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            n /= 10;\n            if (digits.ContainsKey(digit)) {\n                digits[digit]++;\n            } else {\n                digits[digit] = 1;\n            }\n        }\n        foreach (var digit in digits) {\n            if (digit.Value > digit.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            if (counts[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit] += 1;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits) {\n            if (digit.Value > digit.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            int digit = (int)(n % 10);\n            n /= 10;\n            if (digits.ContainsKey(digit)) {\n                digits[digit] += 1;\n            } else {\n                digits[digit] = 1;\n            }\n        }\n        foreach (var kvp in digits) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        foreach (var c in n.ToString()) {\n            var d = int.Parse(c.ToString());\n            if (!digits.ContainsKey(d)) {\n                digits[d] = 0;\n            }\n            digits[d]++;\n        }\n        return digits.All(kv => kv.Value <= kv.Key);",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = (int)(n % 10);\n            if (digits[d] > d) {\n                return false;\n            }\n            digits[d]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (!digits.ContainsKey(digit)) {\n                digits[digit] = 0;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        foreach (var digit in digits) {\n            if (digit.Value > digit.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(x => int.Parse(x.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var freq = new int[10];\n        foreach (var d in digits) {\n            freq[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit]++;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in digits) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToList();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (counts.ContainsKey(digit)) {\n                counts[digit]++;\n            } else {\n                counts[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kvp in counts) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        string s = n.ToString();\n        int[] freq = new int[10];\n        foreach (char c in s) {\n            freq[c - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var s = n.ToString();\n        var counts = new int[10];\n        foreach (var c in s) {\n            counts[c - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (var i = 0; i < digits.Length; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => int.Parse(c.ToString()));\n        var counts = new Dictionary<int, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit] += 1;\n        }\n        foreach (var digit in counts.Keys) {\n            if (counts[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new Dictionary<char, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit] += 1;\n        }\n        foreach (var digit in digits) {\n            if (counts[digit] > digit - '0') {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit] += 1;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit]++;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => int.Parse(c.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (var i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int[] digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit] += 1;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits) {\n            if (digit.Key < digit.Value) {\n                return false;\n            }\n        }\n        return true;",
    "        Dictionary<int, int> freq = new Dictionary<int, int>();\n        while (n > 0) {\n            int digit = (int)(n % 10);\n            if (freq.ContainsKey(digit)) {\n                freq[digit]++;\n            } else {\n                freq[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var pair in freq) {\n            if (pair.Value > pair.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 1; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new Dictionary<int, int>();\n        while (n > 0) {\n            var d = (int)(n % 10);\n            if (freq.ContainsKey(d)) {\n                freq[d]++;\n            } else {\n                freq[d] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kvp in freq) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            freq[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (counts.ContainsKey(digit)) {\n                counts[digit]++;\n            } else {\n                counts[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kvp in counts) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i)\n                return false;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            counts[d]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (counts.ContainsKey(digit)) {\n                counts[digit] += 1;\n            } else {\n                counts[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in counts) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit]++;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            freq[d]++;\n            if (freq[d] > d) return false;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var dict = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (!dict.ContainsKey(digit)) {\n                dict[digit] = 0;\n            }\n            dict[digit]++;\n            n /= 10;\n        }\n        foreach (var kv in dict) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var s = n.ToString();\n        var d = s.GroupBy(c => c).ToDictionary(g => g.Key, g => g.Count());\n        foreach (var kv in d) {\n            if (kv.Value > int.Parse(kv.Key.ToString())) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new Dictionary<int, int>();\n        while (n > 0) {\n            var d = (int)(n % 10);\n            if (freq.ContainsKey(d)) {\n                freq[d]++;\n            } else {\n                freq[d] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in freq) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        foreach (var c in n.ToString()) {\n            var d = int.Parse(c.ToString());\n            if (digits.ContainsKey(d)) {\n                digits[d]++;\n            } else {\n                digits[d] = 1;\n            }\n        }\n        foreach (var kv in digits) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToList();\n        var counts = digits.GroupBy(x => x).Select(x => new { digit = x.Key, count = x.Count() });\n        return counts.All(x => x.count <= x.digit);",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var d = n % 10;\n            digits[d]++;\n            if (digits[d] > d) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var freq = new int[10];\n        foreach (var d in digits) {\n            freq[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToList();\n        var counts = digits.GroupBy(x => x).Select(x => new { digit = x.Key, count = x.Count() });\n        return counts.All(x => x.count <= x.digit);",
    "        var count = new int[10];\n        while (n > 0) {\n            count[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var dict = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (dict.ContainsKey(digit)) {\n                dict[digit] += 1;\n            } else {\n                dict[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var kv in dict) {\n            if (kv.Value > kv.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (freq[digit] > digit) {\n                return false;\n            }\n            freq[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Your code here\n        var s = n.ToString();\n        var counts = new Dictionary<char, int>();\n        foreach (var c in s) {\n            if (!counts.ContainsKey(c)) {\n                counts[c] = 0;\n            }\n            counts[c]++;\n        }\n        foreach (var kv in counts) {\n            if (kv.Value > (kv.Key - '0')) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (++digits[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            if (counts[digit] > digit) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            counts[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var freq = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            freq[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (freq[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        var digits = n.ToString().ToCharArray();\n        var counts = new int[10];\n        foreach (var digit in digits) {\n            counts[digit - '0']++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToList();\n        var counts = new Dictionary<int, int>();\n        foreach (var digit in digits) {\n            if (!counts.ContainsKey(digit)) {\n                counts[digit] = 0;\n            }\n            counts[digit]++;\n        }\n        foreach (var digit in digits) {\n            if (counts[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var counts = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            counts[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().ToCharArray().Select(c => int.Parse(c.ToString())).ToList();\n        var counts = new Dictionary<int, int>();\n        foreach (var d in digits) {\n            if (!counts.ContainsKey(d)) {\n                counts[d] = 0;\n            }\n            counts[d]++;\n        }\n        foreach (var kvp in counts) {\n            if (kvp.Value > kvp.Key) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            if (digits[digit] > digit) {\n                return false;\n            }\n            digits[digit]++;\n            n /= 10;\n        }\n        return true;",
    "        var digits = new Dictionary<int, int>();\n        while (n > 0) {\n            var digit = (int)(n % 10);\n            if (digits.ContainsKey(digit)) {\n                digits[digit]++;\n            } else {\n                digits[digit] = 1;\n            }\n            n /= 10;\n        }\n        foreach (var digit in digits.Keys) {\n            if (digits[digit] > digit) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var counts = new int[10];\n        foreach (var d in digits) {\n            counts[d]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (counts[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            var digit = n % 10;\n            digits[digit]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;",
    "        var digits = new int[10];\n        while (n > 0) {\n            digits[n % 10]++;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > i) {\n                return false;\n            }\n        }\n        return true;"
  ]
}