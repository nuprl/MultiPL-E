{
  "name": "mbpp_103_eulerian_num",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    public static long EulerianNum(long n, long m) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EulerianNum((3L), (1L)) == (4L));\n    Debug.Assert(EulerianNum((4L), (1L)) == (11L));\n    Debug.Assert(EulerianNum((5L), (3L)) == (26L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (m > n) return 0;\n        if (m == n) return 1;\n        if (m == 1) return n;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        if (m > n) return 0;\n        if (m == n) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + m * EulerianNum(n, m - 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        return (n - m) * EulerianNum(n - 1, m) + EulerianNum(n - 1, m - 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m) * EulerianNum(n - 1, m) + m * EulerianNum(n - 1, m - 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        return (n - m) * EulerianNum(n - 1, m) + m * EulerianNum(n - 1, m - 1);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m) * EulerianNum(n - 1, m - 1) + m * EulerianNum(n - 1, m);",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        long[,] a = new long[n + 1, m + 1];\n        for (int i = 0; i <= n; i++) {\n            a[i, 0] = 1;\n        }\n        for (int i = 0; i <= m; i++) {\n            a[0, i] = 1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                a[i, j] = a[i - 1, j - 1] + (i - 1) * a[i - 1, j];\n            }\n        }\n        return a[n, m];",
    "        long[,] dp = new long[n + 1, m + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i, 0] = 1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                dp[i, j] = dp[i - 1, j - 1] + (i - 1) * dp[i - 1, j];\n            }\n        }\n        return dp[n, m];",
    "        if (n < m) return 0;\n        if (n == m) return 1;\n        if (m == 0) return 1;\n        return (n - m) * EulerianNum(n - 1, m) + m * EulerianNum(n - 1, m - 1);",
    "        if (n < m) return 0;\n        if (m == 0) return 1;\n        return (n - m + 1) * EulerianNum(n, m - 1) + (m + 1) * EulerianNum(n, m + 1);",
    "        // TODO\n        return 0;"
  ]
}