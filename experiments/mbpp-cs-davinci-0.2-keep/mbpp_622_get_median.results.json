{
  "name": "mbpp_622_get_median",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        // if n is odd, then median is middle element of sorted array\n        // if n is even, then median is average of middle two elements of sorted array\n        if (n == 0) return 0;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        // if m1 and m2 are equal then return either m1 or m2\n        if (m1 == m2) return m1;\n\n        // if m1 < m2 then median must exist in arr1[m1....] and arr2[....m2]\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n        // if m1 > m2 then median must exist in arr1[....m1] and arr2[m2...]\n        else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n            }\n            else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n /\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy8v29i4m.cs(38,123): error CS1525: Invalid expression term '}'\n/tmp/tmpy8v29i4m.cs(38,123): error CS1026: ) expected\n/tmp/tmpy8v29i4m.cs(38,123): error CS1002: ; expected\n/tmp/tmpy8v29i4m.cs(40,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpy8v29i4m.cs(46,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp81m22pre.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp81m22pre.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnqfb7dbk.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpnqfb7dbk.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyssx5bn5.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpyssx5bn5.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4d53bhqu.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp4d53bhqu.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - (int)n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - (int)n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9546enqm.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp9546enqm.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0ln6fcgs.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp0ln6fcgs.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp0ln6fcgs.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(27,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(27,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(29,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(29,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(32,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0ln6fcgs.cs(34,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1nn5n0c0.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1nn5n0c0.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3nr3s4rf.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3nr3s4rf.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6l2t89zq.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp6l2t89zq.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw83fakx7.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpw83fakx7.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi920g_nr.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpi920g_nr.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp683v5r6i.cs(25,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp683v5r6i.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp683v5r6i.cs(27,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp683v5r6i.cs(31,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp683v5r6i.cs(35,16): error CS0266: Cannot implicitly convert type 'double' to 'float'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpimgscc_f.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpimgscc_f.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0mccv4fr.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0mccv4fr.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpis97rcpf.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpis97rcpf.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgb8myoya.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpgb8myoya.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        long m1 = -1, m2 = -1;\n        while (count <= n) {\n            count++;\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <28e789fe6ccd4996b1d4e9b4a7129230>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpknr91t_2.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpknr91t_2.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputbivhs1.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmputbivhs1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp684a8tba.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp684a8tba.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7zh52o3d.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp7zh52o3d.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcpbvikz_.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpcpbvikz_.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps8ofoepd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmps8ofoepd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpty_w4uoy.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpty_w4uoy.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp81m22pre.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp81m22pre.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        } else if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        } else if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_bs7w6w3.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp_bs7w6w3.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr98ljb7e.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpr98ljb7e.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9l9pbrw.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpy9l9pbrw.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjsctk8c4.cs(20,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpjsctk8c4.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoia15lx0.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpoia15lx0.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpoia15lx0.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(27,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(27,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(29,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(29,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(32,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoia15lx0.cs(34,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        // if n is odd, then median is middle element of sorted array\n        // if n is even, then median is average of middle two elements of sorted array\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmparj8gula.cs(23,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmparj8gula.cs(24,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmparj8gula.cs(32,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(32,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(32,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(34,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(34,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(34,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(38,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(38,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(38,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(40,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(40,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmparj8gula.cs(40,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaoqj9svs.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpaoqj9svs.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpune_4rb0.cs(17,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpune_4rb0.cs(22,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpune_4rb0.cs(27,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpune_4rb0.cs(32,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp36owrxl8.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp36owrxl8.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuhjb62c8.cs(14,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpuhjb62c8.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp684a8tba.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp684a8tba.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3_h5irz0.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3_h5irz0.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoyie1bgx.cs(27,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(27,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(29,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoyie1bgx.cs(33,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoaf2zeav.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpoaf2zeav.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpoaf2zeav.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(27,82): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(29,72): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpoaf2zeav.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8189dwov.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8189dwov.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj60oa64c.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj60oa64c.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzc6hgq4.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpmzc6hgq4.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0mccv4fr.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0mccv4fr.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1aoa1g22.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp1aoa1g22.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgb8myoya.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpgb8myoya.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpszp9x_vr.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpszp9x_vr.cs(22,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf04rhju6.cs(18,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpf04rhju6.cs(19,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppn9t_j9a.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmppn9t_j9a.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        // if n is odd then median is middle element of sorted array\n        // if n is even then median is average of middle two elements of sorted array\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9gwls292.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp9gwls292.cs(23,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwtiz202s.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpwtiz202s.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb_ff4s3j.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpb_ff4s3j.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprsfalzd1.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmprsfalzd1.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7d7cqqtv.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7d7cqqtv.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt5c18x4i.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt5c18x4i.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0cz1_nxv.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0cz1_nxv.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp0cz1_nxv.cs(30,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(30,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(30,92): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(32,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(32,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(32,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(36,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(36,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(36,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(38,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(38,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cz1_nxv.cs(38,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwsg8zav1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpwsg8zav1.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1gvla7_.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp_1gvla7_.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw892ty2k.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpw892ty2k.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp86laltgf.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp86laltgf.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcniok0wb.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpcniok0wb.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9uy7l1n5.cs(23,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uy7l1n5.cs(23,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uy7l1n5.cs(25,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9uy7l1n5.cs(29,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                median = GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            } else {\n                median = GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                median = GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            } else {\n                median = GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5tlbjpe4.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp5tlbjpe4.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvang4ggf.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpvang4ggf.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpab1gnh26.cs(17,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpab1gnh26.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpub4mhl_c.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpub4mhl_c.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpub4mhl_c.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(27,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(27,88): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqarm3838.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpqarm3838.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp589oytmo.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp589oytmo.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv_ynnxu6.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpv_ynnxu6.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgtbllagj.cs(14,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpgtbllagj.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk68t8fwm.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpk68t8fwm.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1;\n        long m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5n4_512x.cs(26,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(26,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(28,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5n4_512x.cs(32,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpub4mhl_c.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpub4mhl_c.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpub4mhl_c.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(27,59): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(27,88): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,51): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(29,80): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(32,84): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpub4mhl_c.cs(34,76): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8e9r16y_.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8e9r16y_.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3nr3s4rf.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3nr3s4rf.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl5ea1rd1.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpl5ea1rd1.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfudtx5i9.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpfudtx5i9.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj60oa64c.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpj60oa64c.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp28ojltj0.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp28ojltj0.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpce8n056w.cs(20,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpce8n056w.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8tv6h42n.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8tv6h42n.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvang4ggf.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpvang4ggf.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdvl375rm.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpdvl375rm.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpty_w4uoy.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpty_w4uoy.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxsnlpm4c.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpxsnlpm4c.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgumfkzal.cs(20,19): error CS0103: The name 'median' does not exist in the current context\n/tmp/tmpgumfkzal.cs(21,19): error CS0103: The name 'median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpis97rcpf.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpis97rcpf.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyj7zkotc.cs(25,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyj7zkotc.cs(25,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyj7zkotc.cs(27,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyj7zkotc.cs(31,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpszp9x_vr.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpszp9x_vr.cs(22,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        return GetMedianRec(arr1, arr2, 0, n - 1, 0, n - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw_dnw6u3.cs(11,16): error CS0103: The name 'GetMedianRec' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)n - (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)n - (int)(n / 2)), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)n - (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)n - (int)(n / 2)), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfdlqubo3.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpfdlqubo3.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3zcyjfny.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3zcyjfny.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8ks1om10.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp8ks1om10.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwtiz202s.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpwtiz202s.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplznwaozc.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmplznwaozc.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgyrkc532.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpgyrkc532.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbiws5ixz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbiws5ixz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgg_gmxcq.cs(20,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpgg_gmxcq.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputbivhs1.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmputbivhs1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdcui163.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpzdcui163.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw83fakx7.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmpw83fakx7.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgyrkc532.cs(15,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpgyrkc532.cs(16,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbsufpyi9.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbsufpyi9.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0jk9djy.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpt0jk9djy.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgsfrs4_.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmphgsfrs4_.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp36owrxl8.cs(15,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp36owrxl8.cs(16,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa1dfxi31.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpa1dfxi31.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbiws5ixz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbiws5ixz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123800,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd66p0ozu.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpd66p0ozu.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpct3fltx8.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpct3fltx8.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps1j7he3a.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmps1j7he3a.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphqlnio1p.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmphqlnio1p.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr_5web8i.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpr_5web8i.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprj89cdfv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmprj89cdfv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmprj89cdfv.cs(27,48): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(27,82): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(29,44): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(29,72): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(32,47): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(32,73): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(34,43): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n/tmp/tmprj89cdfv.cs(34,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqq45pvr7.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpqq45pvr7.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        // If the number of elements is odd, then the median is the middle element\n        if (n % 2 == 1) {\n            return GetMedianUtil(arr1, arr2, n / 2 + 1);\n        }\n        // If the number of elements is even, then the median is the average of the middle two elements\n        return (GetMedianUtil(arr1, arr2, n / 2) + GetMedianUtil(arr1, arr2, n / 2 + 1)) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfsi2o7jr.cs(13,20): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n/tmp/tmpfsi2o7jr.cs(16,17): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n/tmp/tmpfsi2o7jr.cs(16,52): error CS0103: The name 'GetMedianUtil' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2.0f;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2.0f;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkta_s52v.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpkta_s52v.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3djridd5.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp3djridd5.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_po714ey.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp_po714ey.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjh8ey_a3.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpjh8ey_a3.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2t7flntg.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp2t7flntg.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4d53bhqu.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp4d53bhqu.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbiws5ixz.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpbiws5ixz.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkoglb1b.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmppkoglb1b.cs(22,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps8ofoepd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmps8ofoepd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphsbw6osz.cs(20,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n/tmp/tmphsbw6osz.cs(21,20): error CS0103: The name 'GetMedianSingle' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp81m22pre.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp81m22pre.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddcfaa864e5e4e88a3dbfce411d02ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb3iz0sim.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpb3iz0sim.cs(19,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpab1gnh26.cs(17,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpab1gnh26.cs(18,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnqfb7dbk.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmpnqfb7dbk.cs(22,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1nn5n0c0.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1nn5n0c0.cs(22,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqzdz8rbg.cs(15,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpqzdz8rbg.cs(16,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        int m1 = -1, m2 = -1;\n        while (count <= n) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n            count++;\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2w_hi9yo.cs(18,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2w_hi9yo.cs(22,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2w_hi9yo.cs(27,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2w_hi9yo.cs(31,22): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123805,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9qmmx_72.cs(18,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp9qmmx_72.cs(19,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7z019_bd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmp7z019_bd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123804,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpszp9x_vr.cs(21,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpszp9x_vr.cs(22,19): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputbivhs1.cs(20,20): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmputbivhs1.cs(21,20): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517716,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1sg6a_56.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmp1sg6a_56.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps8ofoepd.cs(20,19): error CS0103: The name 'Median' does not exist in the current context\n/tmp/tmps8ofoepd.cs(21,19): error CS0103: The name 'Median' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1665517717,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpny_0e1wv.cs(20,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n/tmp/tmpny_0e1wv.cs(21,20): error CS7036: There is no argument given that corresponds to the required formal parameter 'n' of 'Problem.GetMedian(List<long>, List<long>, long)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}