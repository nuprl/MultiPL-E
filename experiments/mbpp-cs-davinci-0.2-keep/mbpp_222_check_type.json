{
  "name": "mbpp_222_check_type",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static bool CheckType(object test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckType(Tuple.Create(5L, 6L, 7L, 3L, 5L, 6L)) == (true));\n    Debug.Assert(CheckType(Tuple.Create(1L, 2L, \"4\")) == (false));\n    Debug.Assert(CheckType(Tuple.Create(3L, 2L, 1L, 4L, 5L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType) {\n            Type[] generic_args = t.GetGenericArguments();\n            Type first_arg = generic_args[0];\n            foreach (Type arg in generic_args) {\n                if (arg != first_arg) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            var args = t.GetGenericArguments();\n            Type first = args[0];\n            foreach (Type arg in args) {\n                if (arg != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType) {\n            Type[] g = t.GetGenericArguments();\n            if (g.Length == 1) {\n                return true;\n            }\n        }\n        return false;",
    "        var type = test_tuple.GetType();\n        var type_list = type.GetGenericArguments();\n        var first_type = type_list[0];\n        foreach (var t in type_list) {\n            if (t != first_type) {\n                return false;\n            }\n        }\n        return true;",
    "        // Get the type of the tuple.\n        Type t = test_tuple.GetType();\n        // Get the type of the first element in the tuple.\n        Type t_first = t.GetGenericArguments()[0];\n        // Get the number of elements in the tuple.\n        int num_elements = t.GetGenericArguments().Length;\n        // Loop over all the elements in the tuple.\n        for (int i = 0; i < num_elements; i++) {\n            // Get the type of the current element.\n            Type t_current = t.GetGenericArguments()[i];\n            // If the type of the current element is not the same as the type of the first element, return false.\n            if (t_current != t_first) {\n                return false;\n            }\n        }\n        // If all the elements have the same type, return true.\n        return true;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = t.GetGenericArguments();\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != types[0]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types.Length > 0) {\n                Type firstType = types[0];\n                foreach (Type t in types) {\n                    if (t != firstType) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType) {\n            Type[] types = t.GetGenericArguments();\n            Type first = types[0];\n            foreach (Type type in types) {\n                if (type != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        var type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            var types = type.GetGenericArguments();\n            return types.All(t => t == types[0]);\n        }\n        return false;",
    "        var tuple = test_tuple as Tuple<object, object, object, object, object>;\n        if (tuple == null) {\n            return false;\n        }\n        var type = tuple.Item1.GetType();\n        return tuple.Item2.GetType() == type && tuple.Item3.GetType() == type && tuple.Item4.GetType() == type && tuple.Item5.GetType() == type;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType) {\n            Type[] generic_args = type.GetGenericArguments();\n            Type first_arg = generic_args[0];\n            foreach (Type arg in generic_args) {\n                if (arg != first_arg) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType) {\n            Type[] generic_types = type.GetGenericArguments();\n            Type first_type = generic_types[0];\n            foreach (Type t in generic_types) {\n                if (t != first_type) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        var tuple_type = test_tuple.GetType();\n        var tuple_type_name = tuple_type.Name;\n        var tuple_type_full_name = tuple_type.FullName;\n        var tuple_type_base_type = tuple_type.BaseType;\n        var tuple_type_namespace = tuple_type.Namespace;\n        var tuple_type_assembly = tuple_type.Assembly;\n        var tuple_type_generic_type_arguments = tuple_type.GenericTypeArguments;\n        var tuple_type_generic_parameters = tuple_type.GenericParameterAttributes;\n        var tuple_type_generic_type_parameters = tuple_type.GenericTypeParameters;\n        var tuple_type_generic_type_definition = tuple_type.GetGenericTypeDefinition();\n        var tuple_type_generic_type_definition_name = tuple_type_generic_type_definition.Name;\n        var tuple_type_generic_type_definition_full_name = tuple_type_generic_type_definition.FullName;\n        var tuple_type_generic_type_definition_base_type = tuple_type_generic_type_definition.BaseType;\n        var tuple_type_generic_type_definition_namespace = tuple_type_generic_type_definition.Namespace;\n        var tuple_type_generic_type_definition_assembly = tuple_type_generic_type_definition.Assembly;\n        var tuple_type_generic_type_definition_generic_type_arguments = tuple_type_generic_type_definition.GenericTypeArguments;\n        var tuple_type_generic_type_definition_generic_parameters = tuple_type_generic_type_definition.GenericParameterAttributes;\n        var tuple_type_generic_type_definition_generic_type_parameters = tuple_type_generic_type_definition.GenericTypeParameters;\n        var tuple_type_generic_type_definition_generic_type_definition = tuple_type_generic_type_definition.GetGenericTypeDefinition();\n        var tuple_type_generic_type_definition_generic_type_definition_name = tuple_type_generic_type_definition_generic_type_definition.Name;\n        var tuple_type_generic_type",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            return types[0] == types[1];\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types.Length > 0) {\n                Type first = types[0];\n                foreach (Type t in types) {\n                    if (t != first) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != types[0]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = t.GetGenericArguments();\n            if (types.Length == 0) {\n                return true;\n            }\n            Type first = types[0];\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            Type first = types[0];\n            foreach (Type t in types) {\n                if (t != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;"
  ]
}