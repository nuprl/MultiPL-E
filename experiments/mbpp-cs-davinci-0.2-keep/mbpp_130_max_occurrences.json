{
  "name": "mbpp_130_max_occurrences",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    public static long MaxOccurrences(List<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)2L, (long)6L, (long)5L, (long)1L, (long)6L, (long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)6L, (long)9L, (long)1L, (long)2L}))) == (2L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)7L, (long)9L, (long)15L, (long)14L, (long)10L, (long)12L, (long)13L, (long)16L, (long)18L}))) == (8L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)10L, (long)20L, (long)20L, (long)30L, (long)40L, (long)90L, (long)80L, (long)50L, (long)30L, (long)20L, (long)50L, (long)10L}))) == (20L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var counts = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (!counts.ContainsKey(num)) {\n                counts[num] = 0;\n            }\n            counts[num]++;\n        }\n        return counts.Values.Max();",
    "        // Your code here\n        return 0;",
    "        var freq = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (!freq.ContainsKey(num)) {\n                freq[num] = 0;\n            }\n            freq[num]++;\n        }\n        return freq.Values.Max();",
    "        // Your code here\n        var dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        var max = dict.Values.Max();\n        return dict.First(x => x.Value == max).Key;",
    "        // Your code here\n        return 0;",
    "        // Your code here.\n        return 0;",
    "        var dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        return dict.Values.Max();",
    "        var dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        long max = 0;\n        foreach (var kvp in dict) {\n            if (kvp.Value > max) {\n                max = kvp.Value;\n            }\n        }\n        return max;",
    "        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in nums) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq[num] = 1;\n            }\n        }\n        long max = 0;\n        long maxKey = 0;\n        foreach (KeyValuePair<long, long> pair in freq) {\n            if (pair.Value > max) {\n                max = pair.Value;\n                maxKey = pair.Key;\n            }\n        }\n        return maxKey;",
    "        Dictionary<long, long> d = new Dictionary<long, long>();\n        foreach (long n in nums) {\n            if (d.ContainsKey(n)) {\n                d[n]++;\n            } else {\n                d[n] = 1;\n            }\n        }\n        return d.Values.Max();",
    "        // Your code goes here.\n        return 0;",
    "        var dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        return dict.Values.Max();",
    "        var counts = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        return counts.Values.Max();",
    "        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in nums) {\n            if (freq.ContainsKey(num)) {\n                freq[num] += 1;\n            } else {\n                freq[num] = 1;\n            }\n        }\n        long max = 0;\n        long maxNum = 0;\n        foreach (long num in freq.Keys) {\n            if (freq[num] > max) {\n                max = freq[num];\n                maxNum = num;\n            }\n        }\n        return maxNum;",
    "        Dictionary<long, long> occurrences = new Dictionary<long, long>();\n        foreach (long num in nums) {\n            if (occurrences.ContainsKey(num)) {\n                occurrences[num]++;\n            } else {\n                occurrences[num] = 1;\n            }\n        }\n        long max = 0;\n        foreach (long key in occurrences.Keys) {\n            if (occurrences[key] > max) {\n                max = occurrences[key];\n            }\n        }\n        return max;",
    "        var counts = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        return counts.Values.Max();",
    "        // Your code goes here.\n        return 0;",
    "        var dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        return dict.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;",
    "        var dict = new Dictionary<long, long>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        long max = 0;\n        long maxNum = 0;\n        foreach (KeyValuePair<long, long> entry in dict) {\n            if (entry.Value > max) {\n                max = entry.Value;\n                maxNum = entry.Key;\n            }\n        }\n        return maxNum;",
    "        Dictionary<long, long> occurrences = new Dictionary<long, long>();\n        foreach (long num in nums) {\n            if (occurrences.ContainsKey(num)) {\n                occurrences[num]++;\n            } else {\n                occurrences[num] = 1;\n            }\n        }\n        long max = 0;\n        foreach (long num in occurrences.Keys) {\n            if (occurrences[num] > max) {\n                max = occurrences[num];\n            }\n        }\n        return max;"
  ]
}