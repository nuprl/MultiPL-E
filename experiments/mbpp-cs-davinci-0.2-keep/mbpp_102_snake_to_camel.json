{
  "name": "mbpp_102_snake_to_camel",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(char.ToUpper(c));\n                    isFirst = false;\n                } else {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var first = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                first = true;\n            } else if (first) {\n                sb.Append(c.ToString().ToUpper());\n                first = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper() + words[i].Substring(1));\n        }\n        return result.ToString();",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(char.ToUpper(w[0]));\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();",
    "        string result = \"\";\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    result += char.ToUpper(c);\n                    isFirst = false;\n                } else {\n                    result += c;\n                }\n            }\n        }\n        return result;",
    "        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();",
    "        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char c in word) {\n            if (c == '_') {\n                isFirst = true;\n            } else {\n                if (isFirst) {\n                    sb.Append(c.ToString().ToUpper());\n                    isFirst = false;\n                } else {\n                    sb.Append(c.ToString().ToLower());\n                }\n            }\n        }\n        return sb.ToString();",
    "        string[] words = word.Split('_');\n        string result = \"\";\n        foreach (string w in words) {\n            result += w.Substring(0, 1).ToUpper() + w.Substring(1);\n        }\n        return result;",
    "        var sb = new StringBuilder();\n        var isFirst = true;\n        foreach (var c in word) {\n            if (c == '_') {\n                isFirst = true;\n                continue;\n            }\n            if (isFirst) {\n                sb.Append(char.ToUpper(c));\n                isFirst = false;\n            } else {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper() + w.Substring(1).ToLower());\n        }\n        return sb.ToString();",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper());\n            result.Append(w.Substring(1));\n        }\n        return result.ToString();",
    "        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n        }\n        return result;",
    "        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        result.Append(words[0]);\n        for (int i = 1; i < words.Length; i++) {\n            result.Append(words[i].Substring(0, 1).ToUpper());\n            result.Append(words[i].Substring(1));\n        }\n        return result.ToString();",
    "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == '_') {\n                sb.Append(char.ToUpper(word[i + 1]));\n                i++;\n            } else {\n                sb.Append(word[i]);\n            }\n        }\n        return sb.ToString();",
    "        string[] words = word.Split('_');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1);\n            }\n        }\n        return result;",
    "        string[] words = word.Split('_');\n        StringBuilder sb = new StringBuilder();\n        foreach (string w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();",
    "        var result = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            result.Append(w.Substring(0, 1).ToUpper() + w.Substring(1));\n        }\n        return result.ToString();",
    "        var sb = new StringBuilder();\n        var words = word.Split('_');\n        foreach (var w in words) {\n            sb.Append(w.Substring(0, 1).ToUpper());\n            sb.Append(w.Substring(1));\n        }\n        return sb.ToString();"
  ]
}