{
  "name": "mbpp_281_all_unique",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check if the elements of a given list are unique or not.\n    public static bool AllUnique(List<long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in test_list) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in test_list) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        // Create a dictionary to store the elements of the list as keys.\n        Dictionary<long, long> test_dict = new Dictionary<long, long>();\n        // Loop through the list.\n        foreach (long element in test_list) {\n            // If the element is already in the dictionary, return false.\n            if (test_dict.ContainsKey(element)) {\n                return false;\n            }\n            // Otherwise, add the element to the dictionary.\n            else {\n                test_dict.Add(element, 1);\n            }\n        }\n        // If the loop completes, return true.\n        return true;",
    "        HashSet<long> test_set = new HashSet<long>(test_list);\n        return test_set.Count == test_list.Count;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in test_list) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        // Create a dictionary to hold the elements of the list\n        Dictionary<long, bool> test_dict = new Dictionary<long, bool>();\n        // Iterate through the list\n        foreach (long element in test_list) {\n            // If the element is already in the dictionary, return false\n            if (test_dict.ContainsKey(element)) {\n                return false;\n            }\n            // Otherwise, add the element to the dictionary\n            else {\n                test_dict.Add(element, true);\n            }\n        }\n        // If the loop completes, return true\n        return true;",
    "        HashSet<long> test_set = new HashSet<long>(test_list);\n        return test_set.Count == test_list.Count;",
    "        HashSet<long> unique_set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (unique_set.Contains(item)) {\n                return false;\n            }\n            unique_set.Add(item);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in test_list) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (var item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;",
    "        // Create a hashset to store the values\n        HashSet<long> hash_set = new HashSet<long>();\n        // Iterate through the list\n        foreach (long value in test_list) {\n            // If the value is already in the hashset, return false\n            if (hash_set.Contains(value)) {\n                return false;\n            }\n            // Otherwise, add the value to the hashset\n            hash_set.Add(value);\n        }\n        // If we get through the loop, return true\n        return true;",
    "        HashSet<long> test_set = new HashSet<long>(test_list);\n        return test_set.Count == test_list.Count;",
    "        HashSet<long> test_set = new HashSet<long>(test_list);\n        if (test_set.Count == test_list.Count) {\n            return true;\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in test_list) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long item in test_list) {\n            if (set.Contains(item)) {\n                return false;\n            }\n            set.Add(item);\n        }\n        return true;"
  ]
}