{
  "name": "mbpp_736_left_insertion",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    public static long LeftInsertion(List<long> a, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            }\n            if (a[(int)m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.Count - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int left = 0;\n        int right = a.Count - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x <= a[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (a[(int)mid] < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long lo = 0;\n        long hi = a.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x <= a[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;",
    "        int l = 0;\n        int r = a.Count - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0, r = a.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a[m] < x) l = m + 1;\n            else r = m;\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        int m = 0;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (x > a[m]) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.Count - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l < r) {\n            long mid = (l + r) / 2;\n            if (a[mid] < x) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] == x) {\n                return m;\n            } else if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a[(int)m] < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.Count;\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a[m] == x) {\n                return m;\n            } else if (a[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;"
  ]
}