{
  "name": "mbpp_639_sample_nam",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    public static long SampleNam(List<string> sample_names) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"sally\", (string)\"Dylan\", (string)\"rebecca\", (string)\"Diana\", (string)\"Joanne\", (string)\"keith\"}))) == (16L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"php\", (string)\"res\", (string)\"Python\", (string)\"abcd\", (string)\"Java\", (string)\"aaa\"}))) == (10L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"abcd\", (string)\"Python\", (string)\"abba\", (string)\"aba\"}))) == (6L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sum = 0;\n        foreach (string name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        return sample_names.Where(name => name[0] >= 'A' && name[0] <= 'Z').Sum(name => name.Length);",
    "        // Write your code here\n        return sample_names.Where(x => x[0] >= 'A' && x[0] <= 'Z').Sum(x => x.Length);",
    "        return sample_names.Where(x => x[0] >= 'A' && x[0] <= 'Z').Sum(x => x.Length);",
    "        long sum = 0;\n        foreach (string name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        return sample_names.Where(x => x[0] >= 'A' && x[0] <= 'Z').Sum(x => x.Length);",
    "        return sample_names.Where(x => x.First() >= 'A' && x.First() <= 'Z').Sum(x => x.Length);",
    "        return sample_names.Where(name => name[0] >= 'A' && name[0] <= 'Z').Sum(name => name.Length);",
    "        return sample_names.Where(name => Char.IsUpper(name[0])).Sum(name => name.Length);",
    "        long sum = 0;\n        foreach (string name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        return sample_names.Where(name => char.IsUpper(name[0])).Sum(name => name.Length);",
    "        return sample_names.Where(name => name[0] >= 'A' && name[0] <= 'Z').Sum(name => name.Length);",
    "        long sum = 0;\n        foreach (string name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        return sample_names.Where(name => name[0] >= 'A' && name[0] <= 'Z').Sum(name => name.Length);",
    "        var sum = 0;\n        foreach (var name in sample_names) {\n            if (name[0] >= 'A' && name[0] <= 'Z') {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        return sample_names.Where(name => name[0] >= 'A' && name[0] <= 'Z').Sum(name => name.Length);",
    "        return sample_names.Where(name => Char.IsUpper(name[0])).Sum(name => name.Length);",
    "        return sample_names.Where(x => Char.IsUpper(x[0])).Sum(x => x.Length);",
    "        long sum = 0;\n        foreach (string name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        foreach (var name in sample_names) {\n            if (Char.IsUpper(name[0])) {\n                sum += name.Length;\n            }\n        }\n        return sum;"
  ]
}