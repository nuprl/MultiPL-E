{
  "name": "mbpp_724_power_base_sum",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long PowerBaseSum(long numBase, long power) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PowerBaseSum((2L), (100L)) == (115L));\n    Debug.Assert(PowerBaseSum((8L), (10L)) == (37L));\n    Debug.Assert(PowerBaseSum((8L), (15L)) == (62L));\n    Debug.Assert(PowerBaseSum((3L), (3L)) == (9L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        string resultString = result.ToString();\n        long sum = 0;\n        for (int i = 0; i < resultString.Length; i++) {\n            sum += (long)Char.GetNumericValue(resultString[i]);\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        string resultString = result.ToString();\n        long sum = 0;\n        for (int i = 0; i < resultString.Length; i++) {\n            sum += int.Parse(resultString[i].ToString());\n        }\n        return sum;",
    "        long sum = 0;\n        BigInteger result = BigInteger.Pow(numBase, power);\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        foreach (char c in result.ToString()) {\n            sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        return result.ToString().Select(c => long.Parse(c.ToString())).Sum();",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        return result.ToString().Select(x => long.Parse(x.ToString())).Sum();",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        return result.ToString().Select(c => c - '0').Sum();",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        string resultString = result.ToString();\n        long sum = 0;\n        foreach (char c in resultString) {\n            sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        foreach (char c in result.ToString()) {\n            sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += (long)(result % 10);\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.Pow(numBase, power);\n        long sum = 0;\n        foreach (char c in result.ToString()) {\n            sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;"
  ]
}