{
  "name": "mbpp_71_comb_sort",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> CombSort(List<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)5L, (long)15L, (long)37L, (long)25L, (long)79L}))).Equals((new List<long>(new long[]{(long)5L, (long)15L, (long)25L, (long)37L, (long)79L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)41L, (long)32L, (long)15L, (long)19L, (long)22L}))).Equals((new List<long>(new long[]{(long)15L, (long)19L, (long)22L, (long)32L, (long)41L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)99L, (long)15L, (long)13L, (long)47L}))).Equals((new List<long>(new long[]{(long)13L, (long)15L, (long)47L, (long)99L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1)\n                gap = (int)(gap / 1.247330950103979);\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            swapped = false;\n            for (int i = 0; i + gap < nums.Count; i++) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        var gap = nums.Count;\n        var swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            swapped = false;\n            for (var i = 0; i + gap < nums.Count; i++) {\n                if (nums[i] > nums[i + gap]) {\n                    var temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.25);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            swapped = false;\n            for (int i = 0; i + gap < nums.Count; i++) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        return nums;",
    "        // The gap starts at the length of the list and shrinks by a factor of 1.3\n        // until it is less than or equal to 1.\n        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.247330950103979);\n            }\n            int i = 0;\n            swapped = false;\n            while (i + gap < nums.Count) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n                i++;\n            }\n        }\n        return nums;",
    "        // TODO: Implement Comb Sort\n        return nums;",
    "        int gap = nums.Count;\n        bool swapped = true;\n        while (gap > 1 || swapped) {\n            if (gap > 1) {\n                gap = (int)(gap / 1.3);\n            }\n            swapped = false;\n            for (int i = 0; i + gap < nums.Count; i++) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        return nums;"
  ]
}