{
  "name": "mbpp_262_split_two_parts",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    public static object SplitTwoParts(object list1, long L) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitTwoParts((new object(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals(Tuple.Create(new List<long>(new long[]{(long)1L, (long)1L, (long)2L}), new List<long>(new long[]{(long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(SplitTwoParts((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (2L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"a\", (string)\"b\"}), new List<string>(new string[]{(string)\"c\", (string)\"d\"}))));\n    Debug.Assert(SplitTwoParts((new object(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"})), (4L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\"}), new List<string>(new string[]{(string)\"o\", (string)\"n\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        list.RemoveRange(0, (int)L);\n        return new Tuple<object, object>(list2, list);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i < L) {\n                list2.Add(list[i]);\n            }\n        }\n        return new Tuple<object, object>(list2, list);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here.\n        return null;",
    "        throw new NotImplementedException();",
    "        // Write your code here\n        return null;",
    "        object list2 = new List<object>();\n        object list3 = new List<object>();\n        object list4 = new List<object>();\n        object list5 = new List<object>();\n        object list6 = new List<object>();\n        object list7 = new List<object>();\n        object list8 = new List<object>();\n        object list9 = new List<object>();\n        object list10 = new List<object>();\n        object list11 = new List<object>();\n        object list12 = new List<object>();\n        object list13 = new List<object>();\n        object list14 = new List<object>();\n        object list15 = new List<object>();\n        object list16 = new List<object>();\n        object list17 = new List<object>();\n        object list18 = new List<object>();\n        object list19 = new List<object>();\n        object list20 = new List<object>();\n        object list21 = new List<object>();\n        object list22 = new List<object>();\n        object list23 = new List<object>();\n        object list24 = new List<object>();\n        object list25 = new List<object>();\n        object list26 = new List<object>();\n        object list27 = new List<object>();\n        object list28 = new List<object>();\n        object list29 = new List<object>();\n        object list30 = new List<object>();\n        object list31 = new List<object>();\n        object list32 = new List<object>();\n        object list33 = new List<object>();\n        object list34 = new List<object>();\n        object list35 = new List<object>();\n        object list36 = new List<object>();\n        object list37 = new List<object>();\n        object list38 = new List<object>();\n        object list39 = new List<object>();\n        object list40 = new List<object>();\n        object list41 = new List<object>();\n        object list42 = new List<object>();\n        object list43 = new List<object>();\n        object list44 = new List",
    "        // Write your code here.\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list.Skip(L).ToList());",
    "        var list = (List<object>)list1;\n        var first = new List<object>();\n        var second = new List<object>();\n        for (int i = 0; i < L; i++) {\n            first.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            second.Add(list[i]);\n        }\n        return new Tuple<object, object>(first, second);"
  ]
}