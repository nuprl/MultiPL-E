{
  "name": "mbpp_262_split_two_parts",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    public static object SplitTwoParts(object list1, long L) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitTwoParts((new object(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals(Tuple.Create(new List<long>(new long[]{(long)1L, (long)1L, (long)2L}), new List<long>(new long[]{(long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(SplitTwoParts((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (2L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"a\", (string)\"b\"}), new List<string>(new string[]{(string)\"c\", (string)\"d\"}))));\n    Debug.Assert(SplitTwoParts((new object(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"})), (4L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\"}), new List<string>(new string[]{(string)\"o\", (string)\"n\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        list.RemoveRange(0, (int)L);\n        return new Tuple<object, object>(list2, list);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i < L) {\n                list2.Add(list[i]);\n            }\n        }\n        return new Tuple<object, object>(list2, list);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here.\n        return null;",
    "        throw new NotImplementedException();",
    "        // Write your code here\n        return null;",
    "        object list2 = new List<object>();\n        object list3 = new List<object>();\n        object list4 = new List<object>();\n        object list5 = new List<object>();\n        object list6 = new List<object>();\n        object list7 = new List<object>();\n        object list8 = new List<object>();\n        object list9 = new List<object>();\n        object list10 = new List<object>();\n        object list11 = new List<object>();\n        object list12 = new List<object>();\n        object list13 = new List<object>();\n        object list14 = new List<object>();\n        object list15 = new List<object>();\n        object list16 = new List<object>();\n        object list17 = new List<object>();\n        object list18 = new List<object>();\n        object list19 = new List<object>();\n        object list20 = new List<object>();\n        object list21 = new List<object>();\n        object list22 = new List<object>();\n        object list23 = new List<object>();\n        object list24 = new List<object>();\n        object list25 = new List<object>();\n        object list26 = new List<object>();\n        object list27 = new List<object>();\n        object list28 = new List<object>();\n        object list29 = new List<object>();\n        object list30 = new List<object>();\n        object list31 = new List<object>();\n        object list32 = new List<object>();\n        object list33 = new List<object>();\n        object list34 = new List<object>();\n        object list35 = new List<object>();\n        object list36 = new List<object>();\n        object list37 = new List<object>();\n        object list38 = new List<object>();\n        object list39 = new List<object>();\n        object list40 = new List<object>();\n        object list41 = new List<object>();\n        object list42 = new List<object>();\n        object list43 = new List<object>();\n        object list44 = new List",
    "        // Write your code here.\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list.Skip(L).ToList());",
    "        var list = (List<object>)list1;\n        var first = new List<object>();\n        var second = new List<object>();\n        for (int i = 0; i < L; i++) {\n            first.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            second.Add(list[i]);\n        }\n        return new Tuple<object, object>(first, second);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i < L) {\n                list2.Add(list[i]);\n            }\n        }\n        return new Tuple<object, object>(list2, list);",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < list.Length; i++) {\n            if (i < L) {\n                list3[i] = list[i];\n            } else {\n                list2[i - L] = list[i];\n            }\n        }\n        return new object[] { list3, list2 };",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return Tuple.Create(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        List<object> list = (List<object>)list1;\n        List<object> list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        List<object> list3 = new List<object>();\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < L; i++) {\n            list3[i] = list[i];\n        }\n        for (int i = 0; i < list.Length - L; i++) {\n            list2[i] = list[i + L];\n        }\n        return Tuple.Create(list3, list2);",
    "        // Write your code here\n        return null;",
    "        // Write your code here.\n        return null;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        return null;",
    "        // Your code goes here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        var list3 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        var list3 = list.Take((int)L).ToList();\n        return Tuple.Create(list3, list2);",
    "        List<object> list = (List<object>)list1;\n        List<object> list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        List<object> list3 = new List<object>();\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Your code goes here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here.\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        var list3 = list.Take((int)L).ToList();\n        return Tuple.Create(list3, list2);",
    "        // Write your code here.\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < L; i++) {\n            list3[i] = list[i];\n        }\n        for (int i = 0; i < list.Length - L; i++) {\n            list2[i] = list[i + L];\n        }\n        return new object[] { list3, list2 };",
    "        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return Tuple.Create(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        if (list1 is List<object>) {\n            List<object> list = (List<object>)list1;\n            if (list.Count < L) {\n                return null;\n            }\n            List<object> list2 = new List<object>();\n            for (int i = 0; i < L; i++) {\n                list2.Add(list[i]);\n            }\n            List<object> list3 = new List<object>();\n            for (int i = (int)L; i < list.Count; i++) {\n                list3.Add(list[i]);\n            }\n            return new Tuple<object, object>(list2, list3);\n        }\n        return null;",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i < L) {\n                list2.Add(list[i]);\n            }\n        }\n        var list3 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i >= L) {\n                list3.Add(list[i]);\n            }\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        var list3 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return Tuple.Create(list2, list3);",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        var list3 = list.Take((int)L).ToList();\n        return new Tuple<object, object>(list3, list2);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        return null;",
    "        // Your code goes here.\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code goes here\n        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        var list3 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        var list3 = new List<object>();\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        return null;",
    "        var list2 = new List<object>();\n        var list3 = new List<object>();\n        foreach (var item in (List<object>)list1) {\n            list2.Add(item);\n        }\n        for (long i = 0; i < L; i++) {\n            list3.Add(list2[0]);\n            list2.RemoveAt(0);\n        }\n        return Tuple.Create(list3, list2);",
    "        // Write your code here.\n        return null;",
    "        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return Tuple.Create(list, list2);",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < list.Length; i++) {\n            if (i < L) {\n                list3[i] = list[i];\n            } else {\n                list2[i - L] = list[i];\n            }\n        }\n        return new object[] { list3, list2 };",
    "        // Write your code here.\n        return null;",
    "        // Your code here\n        return null;",
    "        // Your code goes here.\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code goes here.\n        return null;",
    "        // Your code goes here.\n        return null;",
    "        if (L == 0) {\n            return new Tuple<object, object>(new List<object>(), list1);\n        }\n        if (list1 is List<object>) {\n            List<object> list = (List<object>)list1;\n            if (list.Count == 0) {\n                return new Tuple<object, object>(new List<object>(), new List<object>());\n            }\n            if (list.Count == 1) {\n                return new Tuple<object, object>(list, new List<object>());\n            }\n            if (list.Count == 2) {\n                return new Tuple<object, object>(new List<object>() { list[0] }, new List<object>() { list[1] });\n            }\n            if (list.Count == 3) {\n                return new Tuple<object, object>(new List<object>() { list[0] }, new List<object>() { list[1], list[2] });\n            }\n            if (list.Count == 4) {\n                return new Tuple<object, object>(new List<object>() { list[0], list[1] }, new List<object>() { list[2], list[3] });\n            }\n            if (list.Count == 5) {\n                return new Tuple<object, object>(new List<object>() { list[0], list[1] }, new List<object>() { list[2], list[3], list[4] });\n            }\n            if (list.Count == 6) {\n                return new Tuple<object, object>(new List<object>() { list[0], list[1], list[2] }, new List<object>() { list[3], list[4], list[5] });\n            }\n            if (list.Count == 7) {\n                return new Tuple<object, object>(new List<object>() { list[0], list[1], list[2] }, new List<object>() { list[3], list[4], list[5], list[6] });\n            }\n            if (list.Count == 8) {\n                return new Tuple<object, object>(new List<object>()",
    "        var list = new List<object>();\n        list.Add(list1);\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[0]);\n            list.RemoveAt(0);\n        }\n        return new Tuple<object, object>(list2, list);",
    "        var list = (IEnumerable<object>)list1;\n        var list2 = list.Skip((int)L);\n        var list1_ = list.Take((int)L);\n        return Tuple.Create(list1_, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list.Skip(L).ToList());",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < list.Length; i++) {\n            if (i < L) {\n                list3[i] = list[i];\n            } else {\n                list2[i - L] = list[i];\n            }\n        }\n        return new object[] { list3, list2 };",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        object list2 = new List<object>();\n        object list3 = new List<object>();\n        for (long i = 0; i < L; i++) {\n            list2.Add(list1[i]);\n        }\n        for (long i = L; i < list1.Count; i++) {\n            list3.Add(list1[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Your code here\n        return null;",
    "        // Write your code here.\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list1_ = new List<object>();\n        var list2_ = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list1_.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            list2_.Add(list[i]);\n        }\n        return new Tuple<object, object>(list1_, list2_);",
    "        // Write your code here.\n        return null;",
    "        // Your code here\n        return null;",
    "        // Your code goes here\n        return null;",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < list.Length; i++) {\n            if (i < L) {\n                list3[i] = list[i];\n            } else {\n                list2[i - L] = list[i];\n            }\n        }\n        return new object[] { list3, list2 };",
    "        // Your code goes here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return Tuple.Create(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (long i = L; i < list.Count; i++) {\n            list2.Add(list[(int)i]);\n        }\n        list.RemoveRange((int)L, (int)(list.Count - L));\n        return new Tuple<List<object>, List<object>>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        return Tuple.Create(list2, list.Skip(L).ToList());",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        var list3 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < list.Length; i++) {\n            if (i < L) {\n                list3[i] = list[i];\n            } else {\n                list2[i - L] = list[i];\n            }\n        }\n        return new Tuple<object[], object[]>(list3, list2);",
    "        // Write your code here\n        return null;",
    "        // Write your code here.\n        return null;",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < L; i++) {\n            list3[i] = list[i];\n        }\n        for (int i = 0; i < list.Length - L; i++) {\n            list2[i] = list[L + i];\n        }\n        return new object[] { list3, list2 };",
    "        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here.\n        return null;",
    "        // Your code goes here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        List<object> list = (List<object>)list1;\n        List<object> first = new List<object>();\n        List<object> second = new List<object>();\n        for (int i = 0; i < L; i++) {\n            first.Add(list[i]);\n        }\n        for (int i = (int)L; i < list.Count; i++) {\n            second.Add(list[i]);\n        }\n        return new Tuple<List<object>, List<object>>(first, second);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (long i = L; i < list.Count; i++) {\n            list2.Add(list[(int)i]);\n        }\n        list.RemoveRange((int)L, (int)(list.Count - L));\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Write your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        // Your code goes here\n        return null;",
    "        // Your code goes here.\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        var list3 = new List<object>();\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        object[] list = (object[])list1;\n        object[] list1part = new object[L];\n        object[] list2part = new object[list.Length - L];\n        for (int i = 0; i < L; i++) {\n            list1part[i] = list[i];\n        }\n        for (int i = 0; i < list.Length - L; i++) {\n            list2part[i] = list[L + i];\n        }\n        return new object[] { list1part, list2part };",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        for (int i = 0; i < L; i++) {\n            list2.Add(list[i]);\n        }\n        var list3 = new List<object>();\n        for (int i = (int)L; i < list.Count; i++) {\n            list3.Add(list[i]);\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = new List<object>();\n        var list3 = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i < L) {\n                list2.Add(list[i]);\n            } else {\n                list3.Add(list[i]);\n            }\n        }\n        return new Tuple<object, object>(list2, list3);",
    "        // Write your code here!\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        object[] list = (object[])list1;\n        object[] list2 = new object[list.Length - L];\n        object[] list3 = new object[L];\n        for (int i = 0; i < L; i++) {\n            list3[i] = list[i];\n        }\n        for (int i = 0; i < list.Length - L; i++) {\n            list2[i] = list[i + L];\n        }\n        return new object[] { list3, list2 };",
    "        return null;",
    "        // Your code here\n        return null;",
    "        throw new NotImplementedException();",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Write your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.Skip((int)L).ToList();\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);",
    "        // Your code here\n        return null;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)list1;\n        var list2 = list.GetRange((int)L, list.Count - (int)L);\n        list.RemoveRange((int)L, list.Count - (int)L);\n        return new Tuple<object, object>(list, list2);"
  ]
}