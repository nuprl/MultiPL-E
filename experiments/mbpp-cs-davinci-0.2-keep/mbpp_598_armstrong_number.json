{
  "name": "mbpp_598_armstrong_number",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    public static bool ArmstrongNumber(long number) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ArmstrongNumber((153L)) == (true));\n    Debug.Assert(ArmstrongNumber((259L)) == (false));\n    Debug.Assert(ArmstrongNumber((4458L)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number % 10));\n            number /= 10;\n        }\n        var sum = digits.Sum(d => (int)Math.Pow(d, digits.Count));\n        return sum == digits.Aggregate((a, b) => a * 10 + b);",
    "        int digits = (int)Math.Floor(Math.Log10(number)) + 1;\n        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            sum += (long)Math.Pow(temp % 10, digits);\n            temp /= 10;\n        }\n        return sum == number;",
    "        // TODO: Write your code here\n        return false;",
    "        var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number % 10));\n            number /= 10;\n        }\n        var sum = digits.Sum(d => (int)Math.Pow(d, digits.Count));\n        return sum == number;",
    "        var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number % 10));\n            number /= 10;\n        }\n        var sum = digits.Sum(d => (long)Math.Pow(d, digits.Count));\n        return sum == number;",
    "        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            sum += (long)Math.Pow(temp % 10, 3);\n            temp /= 10;\n        }\n        return sum == number;",
    "        // TODO: Implement me\n        return false;",
    "        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            sum += (long)Math.Pow(temp % 10, 3);\n            temp /= 10;\n        }\n        return sum == number;",
    "        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            sum += (long)Math.Pow(temp % 10, 3);\n            temp /= 10;\n        }\n        return sum == number;",
    "        var digits = new List<int>();\n        var n = number;\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        var sum = 0L;\n        foreach (var digit in digits) {\n            sum += (long)Math.Pow(digit, digits.Count);\n        }\n        return sum == number;",
    "        var digits = new List<int>();\n        var temp = number;\n        while (temp > 0) {\n            digits.Add((int)temp % 10);\n            temp /= 10;\n        }\n        var sum = 0L;\n        foreach (var digit in digits) {\n            sum += (long)Math.Pow(digit, digits.Count);\n        }\n        return sum == number;",
    "        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            long digit = temp % 10;\n            sum += digit * digit * digit;\n            temp /= 10;\n        }\n        return sum == number;",
    "        int digits = (int)Math.Floor(Math.Log10(number) + 1);\n        long sum = 0;\n        long temp = number;\n        while (temp > 0) {\n            sum += (long)Math.Pow(temp % 10, digits);\n            temp /= 10;\n        }\n        return sum == number;",
    "        // Convert the number to a string.\n        string numberString = number.ToString();\n        // Get the length of the number.\n        int length = numberString.Length;\n        // Create a variable to store the sum of the digits.\n        long sum = 0;\n        // Loop through each digit of the number.\n        for (int i = 0; i < length; i++) {\n            // Get the digit at the current index.\n            int digit = int.Parse(numberString[i].ToString());\n            // Add the digit to the sum.\n            sum += (long)Math.Pow(digit, length);\n        }\n        // Return whether the sum is equal to the number.\n        return sum == number;",
    "        // Write your code here.\n        var digits = number.ToString().Select(c => (int)char.GetNumericValue(c)).ToArray();\n        var sum = digits.Select(d => (long)Math.Pow(d, digits.Length)).Sum();\n        return sum == number;",
    "        // Convert number to string\n        string numberString = number.ToString();\n        // Get the length of the number\n        int numberLength = numberString.Length;\n        // Calculate the power of each digit and sum them\n        long sum = 0;\n        for (int i = 0; i < numberLength; i++) {\n            sum += (long)Math.Pow(numberString[i] - '0', numberLength);\n        }\n        // Compare the sum with the number\n        return sum == number;",
    "        var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number % 10));\n            number /= 10;\n        }\n        var sum = digits.Sum(d => (int)Math.Pow(d, digits.Count));\n        return sum == digits.Aggregate((a, b) => a * 10 + b);",
    "        // Convert the number to a string\n        string numberString = number.ToString();\n        // Get the length of the string\n        int length = numberString.Length;\n        // Create a new BigInteger to hold the sum\n        BigInteger sum = 0;\n        // Loop through each digit\n        foreach (char digit in numberString) {\n            // Convert the digit to an integer\n            int digitInteger = int.Parse(digit.ToString());\n            // Add the digit to the sum\n            sum += BigInteger.Pow(digitInteger, length);\n        }\n        // Check if the sum is equal to the number\n        return sum == number;",
    "        var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number % 10));\n            number /= 10;\n        }\n        var sum = digits.Sum(d => (long)Math.Pow(d, digits.Count));\n        return sum == number;",
    "        var digits = number.ToString().Select(c => (int)char.GetNumericValue(c)).ToArray();\n        var sum = digits.Select(d => (long)Math.Pow(d, digits.Length)).Sum();\n        return sum == number;"
  ]
}