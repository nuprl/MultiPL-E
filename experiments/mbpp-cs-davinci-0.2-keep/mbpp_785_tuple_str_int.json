{
  "name": "mbpp_785_tuple_str_int",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert tuple string to integer tuple.\n    public static long TupleStrInt(string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleStrInt((\"(7, 8, 9)\")) == (long)Tuple.Create(7L, 8L, 9L));\n    Debug.Assert(TupleStrInt((\"(1, 2, 3)\")) == (long)Tuple.Create(1L, 2L, 3L));\n    Debug.Assert(TupleStrInt((\"(4, 5, 6)\")) == (long)Tuple.Create(4L, 5L, 6L));\n    Debug.Assert(TupleStrInt((\"(7, 81, 19)\")) == (long)Tuple.Create(7L, 81L, 19L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        long result = 0;\n        int i = 0;\n        while (i < test_str.Length) {\n            int j = i;\n            while (j < test_str.Length && test_str[j] != ',') {\n                j++;\n            }\n            result = result * 100 + int.Parse(test_str.Substring(i, j - i));\n            i = j + 1;\n        }\n        return result;",
    "        var tuple_str = test_str.Split(',');\n        var tuple_int = new long[tuple_str.Length];\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int[i] = long.Parse(tuple_str[i]);\n        }\n        return tuple_int[0];",
    "        var test_str_split = test_str.Split(',');\n        var test_int_tuple = new Tuple<int, int>(int.Parse(test_str_split[0]), int.Parse(test_str_split[1]));\n        return test_int_tuple.GetHashCode();",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        var tuple_str = test_str.Split(',');\n        long tuple_int = 0;\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int += long.Parse(tuple_str[i]) * (long)Math.Pow(10, i);\n        }\n        return tuple_int;",
    "        var test_str_split = test_str.Split(',');\n        var test_int_tuple = new Tuple<int, int>(int.Parse(test_str_split[0]), int.Parse(test_str_split[1]));\n        return test_int_tuple.GetHashCode();",
    "        var str_arr = test_str.Split(',');\n        long result = 0;\n        foreach (var str in str_arr) {\n            result = result * 100 + long.Parse(str);\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        var tuple_str = test_str.Split(',');\n        long tuple_int = 0;\n        foreach (var item in tuple_str) {\n            tuple_int = tuple_int * 100 + long.Parse(item);\n        }\n        return tuple_int;",
    "        var str_split = test_str.Split(',');\n        var int_tuple = new long[str_split.Length];\n        for (int i = 0; i < str_split.Length; i++) {\n            int_tuple[i] = long.Parse(str_split[i]);\n        }\n        return int_tuple[0] * 1000000 + int_tuple[1];",
    "        var test_str_split = test_str.Split(',');\n        var test_int = new long[test_str_split.Length];\n        for (int i = 0; i < test_str_split.Length; i++) {\n            test_int[i] = long.Parse(test_str_split[i]);\n        }\n        return test_int[0];",
    "        var test_str_list = test_str.Split(',');\n        var test_int_list = new List<long>();\n        foreach (var str in test_str_list) {\n            test_int_list.Add(long.Parse(str));\n        }\n        return TupleInt(test_int_list);",
    "        long result = 0;\n        int i = 0;\n        int len = test_str.Length;\n        while (i < len) {\n            if (test_str[i] == '(') {\n                i++;\n                continue;\n            }\n            if (test_str[i] == ')') {\n                i++;\n                continue;\n            }\n            if (test_str[i] == ',') {\n                i++;\n                continue;\n            }\n            result = result * 10 + (test_str[i] - '0');\n            i++;\n        }\n        return result;",
    "        var test_str_arr = test_str.Split(',');\n        var test_int_arr = new long[test_str_arr.Length];\n        for (int i = 0; i < test_str_arr.Length; i++) {\n            test_int_arr[i] = long.Parse(test_str_arr[i]);\n        }\n        return TupleToInt(test_int_arr);",
    "        var tuple_str = test_str.Split(',');\n        var tuple_int = new long[tuple_str.Length];\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int[i] = long.Parse(tuple_str[i]);\n        }\n        return TupleInt(tuple_int);",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        var tuple_str = test_str.Split(new char[] { ',' });\n        long tuple_int = 0;\n        for (int i = 0; i < tuple_str.Length; i++) {\n            tuple_int += long.Parse(tuple_str[i]) * (long)Math.Pow(10, i);\n        }\n        return tuple_int;",
    "        long result = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        return result;",
    "        var test_str_split = test_str.Split(',');\n        var test_int_tuple = new Tuple<int, int>(int.Parse(test_str_split[0]), int.Parse(test_str_split[1]));\n        return test_int_tuple.GetHashCode();"
  ]
}