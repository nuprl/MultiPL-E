{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));\n    Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));\n    Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first decreasing digit\n        var i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, return -1\n        if (i == 0) return -1;\n        // Find the first digit greater than the decreasing digit\n        var j = s.Length - 1;\n        while (j > 0 && s[j] <= s[i - 1]) j--;\n        // Swap the decreasing digit and the greater digit\n        var c = s[i - 1];\n        s = s.Remove(i - 1, 1).Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, c.ToString());\n        // Reverse the digits after the decreasing digit\n        s = s.Substring(0, i) + new string(s.Substring(i).Reverse().ToArray());\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Reverse(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) {\n            index--;\n        }\n        if (index < 0) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length\n        int len = s.Length;\n        // Create a list of numbers\n        List<int> nums = new List<int>();\n        // Add each digit to the list\n        for (int i = 0; i < len; i++) {\n            nums.Add(int.Parse(s[i].ToString()));\n        }\n        // Create a list of indices\n        List<int> indices = new List<int>();\n        // Add each index to the list\n        for (int i = 0; i < len; i++) {\n            indices.Add(i);\n        }\n        // Create a list of permutations\n        List<List<int>> perms = new List<List<int>>();\n        // Add each permutation to the list\n        foreach (var p in indices.Permutations()) {\n            perms.Add(p.ToList());\n        }\n        // Create a list of numbers\n        List<int> nums2 = new List<int>();\n        // Add each number to the list\n        foreach (var p in perms) {\n            int num = 0;\n            for (int i = 0; i < len; i++) {\n                num += nums[p[i]] * (int)Math.Pow(10, len - i - 1);\n            }\n            nums2.Add(num);\n        }\n        // Sort the list\n        nums2.Sort();\n        // Find the index of the given number\n        int index = nums2.IndexOf(n);\n        // Return the next number\n        if (index == nums2.Count - 1) {\n            return -1;\n        } else {\n            return nums2[index + 1];\n        }",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) index--;\n        if (index <= 0) return -1;\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) swapIndex--;\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Sort(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1])\n            i--;\n        // If no such digit exists, the number is already the largest possible\n        if (i < 0)\n            return -1;\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i])\n            j--;\n        // Swap the two digits\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits to the right of i\n        string suffix = s.Substring(i + 1);\n        suffix = new string(suffix.Reverse().ToArray());\n        s = s.Remove(i + 1);\n        s = s.Insert(i + 1, suffix);\n        // Return the new number\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is not in descending order\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        // If all digits are in descending order, then no bigger number can be made\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is greater than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Sort the digits to the right of i in ascending order\n        string right = s.Substring(i + 1);\n        right = new string(right.OrderBy(c => c).ToArray());\n        // Return the result\n        return long.Parse(s.Substring(0, i + 1) + right);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, return -1\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of the decreasing digit\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) j--;\n        // Swap the decreasing digit and the smallest digit to the right\n        char[] chars = s.ToCharArray();\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        Array.Reverse(chars, i, s.Length - i);\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        // convert to string\n        var s = n.ToString();\n        // find the first digit that is smaller than the next digit\n        for (int i = s.Length - 2; i >= 0; i--) {\n            if (s[i] < s[i + 1]) {\n                // find the smallest digit to the right of i that is bigger than s[i]\n                int j = s.Length - 1;\n                while (s[j] <= s[i]) {\n                    j--;\n                }\n                // swap s[i] and s[j]\n                var t = s[i];\n                s = s.Substring(0, i) + s[j] + s.Substring(i + 1, j - i - 1) + t + s.Substring(j + 1);\n                // sort the digits to the right of i\n                var sorted = s.Substring(i + 1).OrderBy(c => c).ToArray();\n                return long.Parse(s.Substring(0, i + 1) + new string(sorted));\n            }\n        }\n        return -1;",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the pivot point\n        int pivot = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // If no pivot, then the number is already the maximum\n        if (pivot == -1) return -1;\n        // Find the rightmost successor to the pivot\n        int successor = 0;\n        for (int i = digits.Length - 1; i > pivot; i--) {\n            if (digits[i] > digits[pivot]) {\n                successor = i;\n                break;\n            }\n        }\n        // Swap the pivot with the successor\n        char temp = digits[pivot];\n        digits[pivot] = digits[successor];\n        digits[successor] = temp;\n        // Reverse the suffix\n        Array.Reverse(digits, pivot + 1, digits.Length - pivot - 1);\n        // Return the result\n        return long.Parse(new string(digits));",
    "        // Convert to array of digits\n        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) j--;\n        // Swap the two digits\n        int temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        var chars = n.ToString().ToCharArray();\n        // Find the first decreasing digit\n        int i = chars.Length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit, no bigger number\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit that is greater than it\n        int j = chars.Length - 1;\n        while (chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        var temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = chars.Length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i <= 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var chars = n.ToString().ToCharArray();\n        var len = chars.Length;\n        for (int i = len - 1; i > 0; i--) {\n            if (chars[i - 1] < chars[i]) {\n                var min = i;\n                for (int j = i + 1; j < len; j++) {\n                    if (chars[j] > chars[i - 1] && chars[j] < chars[min]) {\n                        min = j;\n                    }\n                }\n                var temp = chars[i - 1];\n                chars[i - 1] = chars[min];\n                chars[min] = temp;\n                Array.Sort(chars, i, len - i);\n                return long.Parse(new string(chars));\n            }\n        }\n        return -1;",
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] arr = s.ToCharArray();\n        // Find the first decreasing digit\n        int i = arr.Length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i])\n            i--;\n        // If no such digit exists, return -1\n        if (i <= 0)\n            return -1;\n        // Find the next largest digit\n        int j = arr.Length - 1;\n        while (arr[j] <= arr[i - 1])\n            j--;\n        // Swap the digits\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Reverse the digits after the first decreasing digit\n        j = arr.Length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return long.Parse(new string(arr));",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first digit that is less than the next digit\n        for (int i = s.Length - 2; i >= 0; i--) {\n            if (s[i] < s[i + 1]) {\n                // Find the smallest digit that is greater than the current digit\n                var min = s[i + 1];\n                var minIndex = i + 1;\n                for (int j = i + 2; j < s.Length; j++) {\n                    if (s[j] > s[i] && s[j] < min) {\n                        min = s[j];\n                        minIndex = j;\n                    }\n                }\n                // Swap the two digits\n                var temp = s[i];\n                s = s.Substring(0, i) + min + s.Substring(i + 1);\n                s = s.Substring(0, minIndex) + temp + s.Substring(minIndex + 1);\n                // Sort the remaining digits\n                var sorted = s.Substring(i + 1).OrderBy(c => c);\n                s = s.Substring(0, i + 1) + new string(sorted.ToArray());\n                // Return the result\n                return long.Parse(s);\n            }\n        }\n        // If no digit was found, return -1\n        return -1;",
    "        var s = n.ToString();\n        var l = s.Length;\n        var i = l - 1;\n        while (i > 0 && s[i - 1] >= s[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = l - 1;\n        while (s[j] <= s[i - 1]) {\n            j--;\n        }\n        var t = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, t.ToString());\n        var r = s.Substring(0, i);\n        var q = s.Substring(i, l - i);\n        var p = new string(q.OrderBy(c => c).ToArray());\n        return long.Parse(r + p);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first decreasing digit\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        // If no decreasing digit, then no bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i, digits.Length - i);\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string and sort in descending order\n        var s = n.ToString().OrderByDescending(c => c).ToArray();\n        // Convert back to number\n        var n2 = long.Parse(new string(s));\n        // Return if n2 is bigger than n\n        return n2 > n ? n2 : null;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(digits);",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToList();\n        var index = digits.Count - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Count - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        digits.Reverse(index, digits.Count - index);\n        return long.Parse(string.Join(\"\", digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the next digit\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1).Insert(i, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, temp.ToString());\n        // Reverse the digits to the right of i\n        string suffix = new string(s.Substring(i + 1).Reverse().ToArray());\n        // Return the result\n        return long.Parse(s.Substring(0, i + 1) + suffix);",
    "        var digits = n.ToString().ToCharArray();\n        var max = digits.Max();\n        var maxIndex = Array.IndexOf(digits, max);\n        var minIndex = Array.IndexOf(digits, digits.Where(x => x > digits[maxIndex]).Min());\n        var temp = digits[maxIndex];\n        digits[maxIndex] = digits[minIndex];\n        digits[minIndex] = temp;\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i+1]) i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Sort the digits to the right of i\n        s = s.Substring(0, i+1) + String.Concat(s.Substring(i+1).OrderBy(c => c));\n        // Return the result\n        return Int64.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] c = s.ToCharArray();\n        // Sort the array\n        Array.Sort(c);\n        // Convert to string\n        s = new string(c);\n        // Convert to long\n        long l = Convert.ToInt64(s);\n        // Return the number\n        return l;",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the one to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to its right\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits to the right of the pivot\n        string right = s.Substring(i + 1);\n        char[] rightArray = right.ToCharArray();\n        Array.Reverse(rightArray);\n        right = new string(rightArray);\n        s = s.Remove(i + 1);\n        s = s.Insert(i + 1, right);\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Sort(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = digits.Count - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                int min = i;\n                for (int j = i + 1; j < digits.Count; j++) {\n                    if (digits[j] < digits[min] && digits[j] > digits[i - 1]) {\n                        min = j;\n                    }\n                }\n                var temp = digits[i - 1];\n                digits[i - 1] = digits[min];\n                digits[min] = temp;\n                digits.Sort(i, digits.Count - i, Comparer<int>.Create((a, b) => b.CompareTo(a)));\n                return digits.Aggregate(0L, (a, b) => a * 10 + b);\n            }\n        }\n        return -1;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string and sort\n        var chars = n.ToString().ToCharArray();\n        Array.Sort(chars);\n        var sorted = new string(chars);\n\n        // Find the first digit that is less than the next digit\n        for (int i = 0; i < sorted.Length - 1; i++) {\n            if (sorted[i] < sorted[i + 1]) {\n                // Swap the digits\n                var temp = sorted[i];\n                sorted = sorted.Remove(i, 1).Insert(i, sorted[i + 1].ToString());\n                sorted = sorted.Remove(i + 1, 1).Insert(i + 1, temp.ToString());\n\n                // Sort the rest of the digits\n                var rest = sorted.Substring(i + 1);\n                chars = rest.ToCharArray();\n                Array.Sort(chars);\n                rest = new string(chars);\n\n                // Return the result\n                return long.Parse(sorted.Remove(i + 1) + rest);\n            }\n        }\n\n        // No bigger number\n        return -1;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var i = digits.Count - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = digits.Count - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Count - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        foreach (var digit in digits)\n            result = result * 10 + digit;\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // convert to string\n        string s = n.ToString();\n        // find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i])\n            i--;\n        // if no decreasing digit, it's the biggest number\n        if (i == 0)\n            return -1;\n        // find the smallest digit greater than the decreasing digit\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1])\n            j--;\n        // swap the digits\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // sort the digits after the decreasing digit\n        s = s.Substring(0, i) + String.Concat(s.Substring(i).OrderBy(c => c));\n        // return the number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var min = digits.Min();\n        var minIndex = Array.IndexOf(digits, min);\n        var max = digits.Max();\n        var maxIndex = Array.IndexOf(digits, max);\n        if (minIndex == maxIndex) {\n            return -1;\n        }\n        var temp = digits[minIndex];\n        digits[minIndex] = digits[maxIndex];\n        digits[maxIndex] = temp;\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int index = -1;\n        for (int i = 0; i < digits.Length - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n            }\n        }\n        // If no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int swapIndex = index + 1;\n        for (int i = index + 1; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[swapIndex]) {\n                swapIndex = i;\n            }\n        }\n        // Swap the pivot with the smallest digit to its right\n        char temp = digits[index];\n        digits[index] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        // Reverse the digits to the right of the pivot\n        Array.Reverse(digits, index + 1, digits.Length - index - 1);\n        // Return the new number\n        return long.Parse(new string(digits));",
    "        // Convert to string for easy access to digits\n        var digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1])\n            i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0)\n            return -1;\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i])\n            j--;\n        // Swap the pivot with the smallest digit to its right that is larger than the pivot\n        Swap(digits, i, j);\n        // Reverse the digits to the right of the pivot\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the next digit\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) return -1;\n        // Find the smallest digit that is larger than the digit found above\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap the digits\n        char[] chars = s.ToCharArray();\n        char temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the digit found above\n        Array.Reverse(chars, i + 1, s.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first pair of adjacent digits in decreasing order\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no such pair exists, the number is the largest possible\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of the pair that is greater than the first digit\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) j--;\n        // Swap the digits\n        char[] c = s.ToCharArray();\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the pair\n        Array.Reverse(c, i, c.Length - i);\n        // Return the new number\n        return long.Parse(new string(c));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // convert to string\n        var s = n.ToString();\n        // find the first digit from the right that is smaller than the one to its right\n        var i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) {\n            i--;\n        }\n        // if no such digit exists, the number is already at its maximum\n        if (i == 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of the pivot that is larger than the pivot\n        var j = s.Length - 1;\n        while (s[j] <= s[i - 1]) {\n            j--;\n        }\n        // swap the pivot with the smallest digit to its right\n        var temp = s[i - 1];\n        s = s.Remove(i - 1, 1).Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, temp.ToString());\n        // reverse the digits to the right of the pivot\n        var left = s.Substring(0, i);\n        var right = new string(s.Substring(i).Reverse().ToArray());\n        return long.Parse(left + right);",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, then no bigger number\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of the decreasing digit\n        int j = i;\n        while (j < s.Length && s[j] > s[i - 1]) j++;\n        // Swap the decreasing digit with the smallest digit to the right\n        var c = s[i - 1];\n        s = s.Remove(i - 1, 1).Insert(i - 1, s[j - 1].ToString());\n        s = s.Remove(j - 1, 1).Insert(j - 1, c.ToString());\n        // Reverse the digits to the right of the decreasing digit\n        var r = s.Substring(i).Reverse().ToArray();\n        s = s.Remove(i).Insert(i, new string(r));\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is already at its maximum\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1).Insert(i, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, temp.ToString());\n        // Reverse the digits to the right of i\n        string end = s.Substring(i + 1);\n        char[] endArray = end.ToCharArray();\n        Array.Reverse(endArray);\n        s = s.Remove(i + 1);\n        s += new string(endArray);\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Int64.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i, digits.Length - i);\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Find the first digit that is less than the digit to its right\n        // Find the smallest digit to the right of that digit that is greater than it\n        // Swap the two digits\n        // Sort the digits to the right of the swapped digits\n        // Return the new number\n        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        Array.Sort(digits, i, digits.Length - i);\n        return long.Parse(new string(digits));",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var permutations = new List<long>();\n        permutations.Add(digits.Aggregate(0L, (acc, x) => acc * 10 + x));\n        while (NextPermutation(digits)) {\n            permutations.Add(digits.Aggregate(0L, (acc, x) => acc * 10 + x));\n        }\n        permutations.Sort();\n        var index = permutations.IndexOf(permutations.First(x => x == permutations.Max(y => y < x)));\n        return index == permutations.Count - 1 ? -1 : permutations[index + 1];",
    "        if (n < 10) return -1;\n        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) index--;\n        if (index < 0) return -1;\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        var i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        // If no such digit exists, the number is already the largest possible\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is larger than s[i]\n        var j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap the two digits\n        var t = s[i];\n        s = s.Substring(0, i) + s[j] + s.Substring(i + 1);\n        s = s.Substring(0, j) + t + s.Substring(j + 1);\n        // Reverse the digits to the right of i\n        s = s.Substring(0, i + 1) + new string(s.Substring(i + 1).Reverse().ToArray());\n        // Return the result\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is less than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, then the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (j >= 0 && s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Sort the digits to the right of i\n        string right = s.Substring(i + 1);\n        char[] rightArray = right.ToCharArray();\n        Array.Sort(rightArray);\n        right = new string(rightArray);\n        // Return the result\n        return long.Parse(s.Substring(0, i + 1) + right);",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n\n        // No such digit found, so no bigger number exists\n        if (i < 0) {\n            return -1;\n        }\n\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n\n        // Swap the digits\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - (i + 1));\n\n        // Convert to long and return\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) return -1;\n        var smallestIndex = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[smallestIndex]) {\n                smallestIndex = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallestIndex];\n        digits[smallestIndex] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to the right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (j > i && s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the substring s[i+1..n]\n        s = s.Substring(0, i + 1) + new string(s.Substring(i + 1).Reverse().ToArray());\n        // Return the result\n        return long.Parse(s);",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var s = n.ToString();\n        var l = s.Length;\n        var i = l - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        if (i == 0) return -1;\n        var j = l - 1;\n        while (s[j] <= s[i - 1]) j--;\n        var t = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, t.ToString());\n        var a = s.Substring(0, i);\n        var b = s.Substring(i);\n        var r = long.Parse(a + new string(b.Reverse().ToArray()));\n        return r;",
    "        var digits = n.ToString().Select(x => int.Parse(x.ToString())).ToArray();\n        var max = digits.Max();\n        var min = digits.Min();\n        var maxIndex = Array.IndexOf(digits, max);\n        var minIndex = Array.IndexOf(digits, min);\n        if (maxIndex > minIndex) {\n            var temp = digits[maxIndex];\n            digits[maxIndex] = digits[minIndex];\n            digits[minIndex] = temp;\n            return long.Parse(string.Join(\"\", digits));\n        }\n        return -1;",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        Swap(digits, i - 1, j);\n        j = digits.Length - 1;\n        while (i < j) {\n            Swap(digits, i, j);\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var index = -1;\n        for (var i = 0; i < digits.Count - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var min = digits[index + 1];\n        var minIndex = index + 1;\n        for (var i = index + 2; i < digits.Count; i++) {\n            if (digits[i] > digits[index] && digits[i] < min) {\n                min = digits[i];\n                minIndex = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[minIndex];\n        digits[minIndex] = temp;\n        digits.Sort(index + 1, digits.Count - index - 1, new Comparison<int>((a, b) => b.CompareTo(a)));\n        var result = 0L;\n        for (var i = 0; i < digits.Count; i++) {\n            result = result * 10 + digits[i];\n        }\n        return result;",
    "        if (n < 10) return -1;\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var i = digits.Count - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Count - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Count - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        var result = 0L;\n        foreach (var d in digits) {\n            result = result * 10 + d;\n        }\n        return result;",
    "        // Convert number to string\n        string s = n.ToString();\n        // Convert string to char array\n        char[] c = s.ToCharArray();\n        // Find the largest index i such that c[i] < c[i+1]\n        int i = c.Length - 2;\n        while (i >= 0 && c[i] >= c[i+1]) {\n            i--;\n        }\n        // If no such index exists, the permutation is the last permutation\n        if (i == -1) {\n            return -1;\n        }\n        // Find the largest index j such that j > i and c[j] > c[i]\n        int j = c.Length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // Swap c[i] and c[j]\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the sequence from c[i+1] to the end\n        Array.Reverse(c, i+1, c.Length - (i+1));\n        // Return the result\n        return new string(c);",
    "        // Convert to a string and then to a character array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of the pivot\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Convert the character array back to a string and then to a long\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(digits);",
    "        // Convert to string and get the digits\n        var digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (j >= 0 && digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the two digits\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Convert back to long\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1])\n            i--;\n        if (i < 0)\n            return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i])\n            j--;\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is less than the digit to its right\n        for (int i = s.Length - 1; i > 0; i--) {\n            if (s[i - 1] < s[i]) {\n                // Find the smallest digit to the right of this digit that is greater than it\n                int j = i;\n                while (j < s.Length && s[j] > s[i - 1]) {\n                    j++;\n                }\n                j--;\n                // Swap the two digits\n                char[] c = s.ToCharArray();\n                char temp = c[i - 1];\n                c[i - 1] = c[j];\n                c[j] = temp;\n                // Sort the digits to the right of the swapped digit\n                Array.Sort(c, i, c.Length - i);\n                // Return the new number\n                return long.Parse(new string(c));\n            }\n        }\n        // If no digit was found that was less than the digit to its right, return -1\n        return -1;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to a string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the one to its right\n        for (int i = s.Length - 2; i >= 0; i--) {\n            if (s[i] < s[i + 1]) {\n                // Find the smallest digit to the right of i that is larger than s[i]\n                int j = s.Length - 1;\n                while (s[j] < s[i]) {\n                    j--;\n                }\n                // Swap s[i] and s[j]\n                char temp = s[i];\n                s[i] = s[j];\n                s[j] = temp;\n                // Reverse the digits to the right of i\n                char[] tempArr = s.Substring(i + 1).ToCharArray();\n                Array.Reverse(tempArr);\n                s = s.Substring(0, i + 1) + new string(tempArr);\n                // Return the new number\n                return long.Parse(s);\n            }\n        }\n        return -1;",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first decreasing digit\n        var i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If there is no decreasing digit, then the number is already the biggest\n        if (i == 0) return null;\n        // Find the smallest digit greater than the decreasing digit\n        var j = s.Length - 1;\n        while (s[j] <= s[i - 1]) j--;\n        // Swap the decreasing digit with the smallest digit greater than it\n        var c = s[i - 1];\n        s = s.Remove(i - 1, 1).Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, c.ToString());\n        // Reverse the digits after the decreasing digit\n        var r = s.Substring(i).Reverse().ToArray();\n        s = s.Remove(i, s.Length - i).Insert(i, new string(r));\n        // Return the number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) {\n            index--;\n        }\n        if (index < 0) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i == 0)\n            return -1;\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i, digits.Length - i);\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToList();\n        var i = digits.Count - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i <= 0) return -1;\n        var j = digits.Count - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Count - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(string.Join(\"\", digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length\n        int len = s.Length;\n        // Create a list of digits\n        List<int> digits = new List<int>();\n        // Add each digit to the list\n        for (int i = 0; i < len; i++) {\n            digits.Add(int.Parse(s[i].ToString()));\n        }\n        // Get the index of the first digit that is smaller than the next digit\n        int index = -1;\n        for (int i = 0; i < len - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n            }\n        }\n        // If no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Get the index of the smallest digit that is larger than the digit at index\n        int index2 = index + 1;\n        for (int i = index + 1; i < len; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[index2]) {\n                index2 = i;\n            }\n        }\n        // Swap the digits at index and index2\n        int temp = digits[index];\n        digits[index] = digits[index2];\n        digits[index2] = temp;\n        // Sort the digits after index\n        digits.Sort(index + 1, len - index - 1, null);\n        // Convert the list of digits to a string\n        string result = \"\";\n        foreach (int digit in digits) {\n            result += digit.ToString();\n        }\n        // Return the result\n        return long.Parse(result);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) {\n            index--;\n        }\n        if (index < 0) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first digit that is less than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is greater than s[i]\n        int j = s.Length - 1;\n        while (j > i && s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        var temp = s[i];\n        s[i] = s[j];\n        s[j] = temp;\n        // Reverse the digits to the right of i\n        var left = s.Substring(0, i + 1);\n        var right = s.Substring(i + 1);\n        right = new string(right.Reverse().ToArray());\n        // Return the new number\n        return long.Parse(left + right);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1])\n            i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0)\n            return -1;\n        // Find the smallest digit to the right of i that is greater than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i])\n            j--;\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1).Insert(i, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, temp.ToString());\n        // Reverse the digits after i\n        string end = s.Substring(i + 1);\n        char[] arr = end.ToCharArray();\n        Array.Reverse(arr);\n        end = new string(arr);\n        s = s.Remove(i + 1).Insert(i + 1, end);\n        // Return the result\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) return -1;\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = digits.Count - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                var min = i;\n                for (int j = i + 1; j < digits.Count; j++) {\n                    if (digits[j] > digits[i - 1] && digits[j] < digits[min]) {\n                        min = j;\n                    }\n                }\n                var tmp = digits[i - 1];\n                digits[i - 1] = digits[min];\n                digits[min] = tmp;\n                digits.Sort(i, digits.Count - i, Comparer<int>.Create((x, y) => y.CompareTo(x)));\n                break;\n            }\n        }\n        var result = 0L;\n        foreach (var digit in digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var tmp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = tmp;\n        j = digits.Length - 1;\n        while (i < j) {\n            tmp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = tmp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Get the digits of the number\n        List<int> digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n\n        // Find the first digit that is smaller than the digit to its right\n        int index = -1;\n        for (int i = 0; i < digits.Count - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n            }\n        }\n\n        // If no such digit exists, the number is the largest possible\n        if (index == -1) {\n            return -1;\n        }\n\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int min = index + 1;\n        for (int i = index + 1; i < digits.Count; i++) {\n            if (digits[i] < digits[min] && digits[i] > digits[index]) {\n                min = i;\n            }\n        }\n\n        // Swap the pivot with the smallest digit to its right\n        int temp = digits[index];\n        digits[index] = digits[min];\n        digits[min] = temp;\n\n        // Sort the digits to the right of the pivot\n        digits.Sort(index + 1, digits.Count - index - 1, null);\n\n        // Return the new number\n        long result = 0;\n        for (int i = 0; i < digits.Count; i++) {\n            result = result * 10 + digits[i];\n        }\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return index;\n        }\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string, then to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to its right\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of the pivot\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().Select(x => x - '0').ToList();\n        var i = digits.Count - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Count - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Count - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(string.Join(\"\", digits));",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) {\n            i--;\n        }\n        // If we didn't find such a digit, then the number is the largest possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the next largest digit\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits to the right of the pivot\n        char[] arr = s.ToCharArray();\n        Array.Reverse(arr, i, s.Length - i);\n        s = new string(arr);\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(digits);",
    "        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Sort(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the one to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, return -1\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the string from i + 1 to the end\n        s = s.Substring(0, i + 1) + new string(s.Substring(i + 1).Reverse().ToArray());\n        // Return the result\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i])\n            i--;\n        // If it is the last digit, then there is no bigger number\n        if (i == 0)\n            return -1;\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1])\n            j--;\n        // Swap the first decreasing digit with the smallest digit to the right\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Sort the digits to the right of the first decreasing digit in ascending order\n        string s2 = s.Substring(i);\n        char[] s2Array = s2.ToCharArray();\n        Array.Sort(s2Array);\n        s2 = new string(s2Array);\n        s = s.Remove(i);\n        s = s.Insert(i, s2);\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) return -1;\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (j > i && digits[j] <= digits[i]) {\n            j--;\n        }\n        var tmp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = tmp;\n        Array.Reverse(digits, i + 1, len - i - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the largest index i such that s[i] < s[i+1]. If no such index exists, the permutation is the last permutation.\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) {\n            i--;\n        }\n        // Find the largest index j greater than i such that s[j] > s[i]. Such a j must exist, since i+1 is such an index.\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) {\n            j--;\n        }\n        // Swap s[i-1] with s[j].\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the order of all of the elements after index i-1.\n        string s2 = s.Substring(i);\n        char[] arr = s2.ToCharArray();\n        Array.Reverse(arr);\n        s2 = new string(arr);\n        s = s.Remove(i);\n        s += s2;\n        // Return the result\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Create a list of characters\n        List<char> chars = s.ToList();\n        // Find the first index where the next character is bigger\n        int i = chars.Count - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no such index exists, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first index where the next character is bigger than the character at the previous index\n        int j = chars.Count - 1;\n        while (j > 0 && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the characters at the two indices\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the characters after the previous index\n        j = chars.Count - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return long.Parse(new string(chars.ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first decreasing digit\n        var i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        // If no decreasing digit, return -1\n        if (i < 0) return -1;\n        // Find the smallest digit greater than s[i]\n        var j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap s[i] and s[j]\n        var t = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, t.ToString());\n        // Reverse the string from s[i+1] to the end\n        var r = s.Substring(i + 1);\n        r = new string(r.Reverse().ToArray());\n        s = s.Remove(i + 1);\n        s = s.Insert(i + 1, r);\n        // Return the result\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var max = digits.Max();\n        var maxIndex = Array.IndexOf(digits, max);\n        var maxDigits = digits.Where(d => d == max).ToArray();\n        var otherDigits = digits.Where(d => d != max).ToArray();\n        var otherDigitsSorted = otherDigits.OrderByDescending(d => d).ToArray();\n        var otherDigitsSortedString = new string(otherDigitsSorted);\n        var maxDigitsString = new string(maxDigits);\n        var result = long.Parse(otherDigitsSortedString + maxDigitsString);\n        return result > n ? result : -1;",
    "        var digits = n.ToString().ToCharArray();\n        var digitsList = new List<char>(digits);\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var min = digits[index];\n        var minIndex = index;\n        for (int i = index + 1; i < digits.Length; i++) {\n            if (digits[i] > min && digits[i] < digits[index]) {\n                min = digits[i];\n                minIndex = i;\n            }\n        }\n        digitsList[index] = min;\n        digitsList[minIndex] = digits[index];\n        digitsList.Sort(index + 1, digitsList.Count - index - 1, null);\n        return long.Parse(new string(digitsList.ToArray()));",
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] c = s.ToCharArray();\n        // Find the first decreasing digit\n        int i = c.Length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If there is no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit that is greater than the decreasing digit\n        int j = c.Length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit to the right of the decreasing digit that is greater than the decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.Length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert char array to string\n        s = new string(c);\n        // Convert string to long\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap the two digits\n        char[] c = s.ToCharArray();\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(c, i + 1, s.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(c));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) return -1;\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Create a list of the digits\n        List<int> digits = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            digits.Add(int.Parse(s[i].ToString()));\n        }\n        // Find the first digit that is smaller than the digit after it\n        int index = -1;\n        for (int i = 0; i < digits.Count - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n            }\n        }\n        // If no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit after the digit at index that is larger than the digit at index\n        int min = index + 1;\n        for (int i = index + 1; i < digits.Count; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[min]) {\n                min = i;\n            }\n        }\n        // Swap the digits at index and min\n        int temp = digits[index];\n        digits[index] = digits[min];\n        digits[min] = temp;\n        // Sort the digits after index\n        digits.Sort(index + 1, digits.Count - index - 1, null);\n        // Convert the list of digits to a string\n        string result = \"\";\n        for (int i = 0; i < digits.Count; i++) {\n            result += digits[i];\n        }\n        // Return the string\n        return result;",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length of the string\n        int len = s.Length;\n        // Create a list of the digits\n        List<int> digits = new List<int>();\n        for (int i = 0; i < len; i++) {\n            digits.Add(int.Parse(s[i].ToString()));\n        }\n        // Find the first digit that is smaller than the digit to its right\n        int index = -1;\n        for (int i = 0; i < len - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                index = i;\n                break;\n            }\n        }\n        // If no such digit exists, the number is the largest possible\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int min = int.MaxValue;\n        int minIndex = -1;\n        for (int i = index + 1; i < len; i++) {\n            if (digits[i] > digits[index] && digits[i] < min) {\n                min = digits[i];\n                minIndex = i;\n            }\n        }\n        // Swap the pivot with the smallest digit to its right\n        int temp = digits[index];\n        digits[index] = digits[minIndex];\n        digits[minIndex] = temp;\n        // Sort the digits to the right of the pivot\n        digits.Sort(index + 1, len - index - 1, null);\n        // Convert the list of digits back to a number\n        string result = \"\";\n        for (int i = 0; i < len; i++) {\n            result += digits[i].ToString();\n        }\n        return long.Parse(result);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Create a list of the digits\n        List<int> digits = s.Select(c => int.Parse(c.ToString())).ToList();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Count - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = digits.Count - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to its right that is larger than the pivot\n        int temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of the pivot\n        digits.Reverse(i + 1, digits.Count - i - 1);\n        // Convert the list of digits to a string and return it\n        return long.Parse(string.Join(\"\", digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length of the string\n        int len = s.Length;\n        // Create a list of the digits\n        List<int> digits = new List<int>();\n        for (int i = 0; i < len; i++) {\n            digits.Add(int.Parse(s[i].ToString()));\n        }\n        // Find the first digit that is smaller than the digit to the right of it\n        int firstSmaller = -1;\n        for (int i = len - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                firstSmaller = i - 1;\n                break;\n            }\n        }\n        // If there is no such digit, return -1\n        if (firstSmaller == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first smaller digit that is larger than it\n        int smallestLarger = -1;\n        for (int i = len - 1; i > firstSmaller; i--) {\n            if (digits[i] > digits[firstSmaller]) {\n                smallestLarger = i;\n                break;\n            }\n        }\n        // Swap the first smaller digit with the smallest larger digit\n        int temp = digits[firstSmaller];\n        digits[firstSmaller] = digits[smallestLarger];\n        digits[smallestLarger] = temp;\n        // Sort the digits to the right of the first smaller digit\n        digits.Sort(firstSmaller + 1, len - firstSmaller - 1, null);\n        // Convert the list of digits back to a string\n        s = \"\";\n        for (int i = 0; i < len; i++) {\n            s += digits[i];\n        }\n        // Return the string\n        return s;",
    "        var digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string nString = n.ToString();\n        // Find the first number that is smaller than the number to its right\n        int index = -1;\n        for (int i = 0; i < nString.Length - 1; i++) {\n            if (nString[i] < nString[i + 1]) {\n                index = i;\n            }\n        }\n        // If no such number exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest number to the right of the number that is larger than the number\n        int index2 = index + 1;\n        for (int i = index + 1; i < nString.Length; i++) {\n            if (nString[i] > nString[index] && nString[i] < nString[index2]) {\n                index2 = i;\n            }\n        }\n        // Swap the two numbers\n        char temp = nString[index];\n        nString = nString.Remove(index, 1);\n        nString = nString.Insert(index, nString[index2].ToString());\n        nString = nString.Remove(index2, 1);\n        nString = nString.Insert(index2, temp.ToString());\n        // Sort the numbers to the right of the number\n        string nString2 = nString.Substring(index + 1);\n        char[] nString2Array = nString2.ToCharArray();\n        Array.Sort(nString2Array);\n        nString2 = new string(nString2Array);\n        nString = nString.Remove(index + 1);\n        nString = nString.Insert(index + 1, nString2);\n        // Return the number\n        return long.Parse(nString);",
    "        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var index = -1;\n        for (int i = digits.Count - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var min = int.MaxValue;\n        var minIndex = 0;\n        for (int i = index + 1; i < digits.Count; i++) {\n            if (digits[i] > digits[index] && digits[i] < min) {\n                min = digits[i];\n                minIndex = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[minIndex];\n        digits[minIndex] = temp;\n        digits.Sort(index + 1, digits.Count - index - 1, Comparer<int>.Default);\n        var result = 0L;\n        foreach (var digit in digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        // Convert to string\n        string s = n.ToString();\n        // Create a list of digits\n        List<int> digits = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            digits.Add(int.Parse(s[i].ToString()));\n        }\n        // Find the first decreasing digit\n        int firstDecreasing = -1;\n        for (int i = digits.Count - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                firstDecreasing = i - 1;\n                break;\n            }\n        }\n        if (firstDecreasing == -1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the first decreasing digit\n        int smallestGreater = -1;\n        for (int i = digits.Count - 1; i > firstDecreasing; i--) {\n            if (digits[i] > digits[firstDecreasing]) {\n                smallestGreater = i;\n                break;\n            }\n        }\n        // Swap the first decreasing digit with the smallest greater digit\n        int temp = digits[firstDecreasing];\n        digits[firstDecreasing] = digits[smallestGreater];\n        digits[smallestGreater] = temp;\n        // Sort the digits after the first decreasing digit\n        digits.Sort(firstDecreasing + 1, digits.Count - firstDecreasing - 1, null);\n        // Convert back to string\n        string result = \"\";\n        foreach (int digit in digits) {\n            result += digit;\n        }\n        return long.Parse(result);",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to array of digits\n        var digits = n.ToString().ToCharArray().Select(c => (int)Char.GetNumericValue(c)).ToArray();\n        // Find the first digit that is smaller than the digit to its right\n        var i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, then the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        var j = digits.Length - 1;\n        while (j >= 0 && digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap digits[i] and digits[j]\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return BigInteger.Parse(new string(digits.Select(d => d.ToString()[0]).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length\n        int len = s.Length;\n        // If the length is 1, return -1\n        if (len == 1) return -1;\n        // Get the last digit\n        char last = s[len - 1];\n        // Get the second to last digit\n        char secondLast = s[len - 2];\n        // If the last digit is greater than the second to last digit, swap them\n        if (last > secondLast) {\n            s = s.Remove(len - 1, 1);\n            s = s.Remove(len - 2, 1);\n            s = s.Insert(len - 2, last.ToString());\n            s = s.Insert(len - 1, secondLast.ToString());\n            return long.Parse(s);\n        }\n        // If the last digit is less than the second to last digit, remove the last digit\n        s = s.Remove(len - 1, 1);\n        // If the length is now 1, return -1\n        if (s.Length == 1) return -1;\n        // Get the last digit\n        last = s[s.Length - 1];\n        // Get the second to last digit\n        secondLast = s[s.Length - 2];\n        // If the last digit is greater than the second to last digit, swap them\n        if (last > secondLast) {\n            s = s.Remove(s.Length - 1, 1);\n            s = s.Remove(s.Length - 2, 1);\n            s = s.Insert(s.Length - 2, last.ToString());\n            s = s.Insert(s.Length - 1, secondLast.ToString());\n            return long.Parse(s);\n        }\n        // If the last digit is less than the second to last digit, remove the last digit\n        s = s.Remove(s.Length - 1, 1);\n        // If the length is now 1, return -1\n        if (s.Length == 1) return -1;\n        // Get the last digit\n        last = s[s.Length - 1];\n        // Get the second to last digit\n        secondLast = s[s.",
    "        // Convert to array of digits\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        // Find the first digit that is less than the next digit\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, return -1\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit that is greater than the digit at i\n        int j = digits.Length - 1;\n        while (j > i && digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the digits at i and j\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits after i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Convert to long and return\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the next digit\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is already the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit that is larger than the digit at i\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap the two digits\n        char[] chars = s.ToCharArray();\n        char temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after i\n        Array.Reverse(chars, i + 1, chars.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert the number to a string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        // If we didn't find any such digit, then the number is already the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the digit we found that is larger than it\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // Swap the two digits\n        char[] c = s.ToCharArray();\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the digit we found\n        Array.Reverse(c, i + 1, s.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(c));",
    "        // get digits\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        // find the first digit that is smaller than the one after it\n        int i = 0;\n        while (i < digits.Count - 1 && digits[i] >= digits[i + 1]) {\n            i++;\n        }\n        if (i == digits.Count - 1) {\n            return -1;\n        }\n        // find the smallest digit that is larger than the one at i\n        int j = i + 1;\n        while (j < digits.Count && digits[j] > digits[i]) {\n            j++;\n        }\n        j--;\n        // swap them\n        var temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // sort the rest of the digits\n        digits.Sort(i + 1, digits.Count - i - 1, null);\n        // return the new number\n        long result = 0;\n        foreach (var digit in digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i])\n            i--;\n        // If no decreasing digit, return -1\n        if (i <= 0)\n            return -1;\n        // Find the smallest digit greater than s[i - 1]\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1])\n            j--;\n        // Swap s[i - 1] and s[j]\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits after s[i - 1]\n        string s2 = s.Substring(i);\n        char[] s2a = s2.ToCharArray();\n        Array.Reverse(s2a);\n        s2 = new string(s2a);\n        s = s.Remove(i);\n        s += s2;\n        // Return the result\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits from i + 1 to the end\n        s = s.Substring(0, i + 1) + new string(s.Substring(i + 1).Reverse().ToArray());\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        for (int i = len - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                var min = i;\n                for (int j = i + 1; j < len; j++) {\n                    if (digits[j] > digits[i - 1] && digits[j] < digits[min]) {\n                        min = j;\n                    }\n                }\n                var temp = digits[i - 1];\n                digits[i - 1] = digits[min];\n                digits[min] = temp;\n                Array.Sort(digits, i, len - i);\n                return new string(digits);\n            }\n        }\n        return -1;",
    "        // convert to string\n        string s = n.ToString();\n        // find the first decreasing digit\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of i that is greater than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) {\n            j--;\n        }\n        // swap s[i] and s[j]\n        char[] c = s.ToCharArray();\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // reverse the digits to the right of i\n        Array.Reverse(c, i + 1, c.Length - i - 1);\n        // return the new number\n        return long.Parse(new string(c));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        char[] chars = n.ToString().ToCharArray();\n        // Find the first decreasing digit\n        int i = chars.Length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit greater than the decreasing digit\n        int j = chars.Length - 1;\n        while (chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit and the greater digit\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = chars.Length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var length = digits.Length;\n        var i = length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        if (n < 0) throw new ArgumentException(\"n must be positive\");\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var i = digits.Count - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Count - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var tmp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = tmp;\n        j = digits.Count - 1;\n        while (i < j) {\n            tmp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = tmp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        foreach (var d in digits) {\n            result = result * 10 + d;\n        }\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Reverse(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length\n        int len = s.Length;\n        // Create an array of characters\n        char[] arr = new char[len];\n        // Copy the string to the array\n        s.CopyTo(0, arr, 0, len);\n        // Find the first index where the next digit is smaller\n        int i = len - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // If we have reached the end, then no bigger number is possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of (i-1)th digit that is greater than number[i-1]\n        int x = arr[i - 1], smallest = i;\n        for (int j = i + 1; j < len; j++) {\n            if (arr[j] > x && arr[j] <= arr[smallest]) {\n                smallest = j;\n            }\n        }\n        // Swap the above found smallest digit with number[i-1]\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[smallest];\n        arr[smallest] = temp;\n        // Sort the digits after (i-1) in ascending order\n        Array.Sort(arr, i, len - i);\n        // Convert the array to a string\n        string result = new string(arr);\n        // Return the result\n        return long.Parse(result);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, return -1\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = i;\n        while (j < s.Length && s[j] > s[i - 1]) j++;\n        // Swap the first decreasing digit with the smallest digit to the right\n        char[] c = s.ToCharArray();\n        char t = c[i - 1];\n        c[i - 1] = c[j - 1];\n        c[j - 1] = t;\n        // Reverse the digits to the right of the first decreasing digit\n        Array.Reverse(c, i, s.Length - i);\n        // Return the new number\n        return long.Parse(new string(c));",
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] c = s.ToCharArray();\n        // Sort the array\n        Array.Sort(c);\n        // Convert back to string\n        string sorted = new string(c);\n        // Convert to long\n        long sortedLong = long.Parse(sorted);\n        // Check if the sorted number is the same as the original\n        if (sortedLong == n) {\n            // If so, return -1\n            return -1;\n        }\n        // Otherwise, return the sorted number\n        return sortedLong;",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (j >= 0 && digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallestIndex = index + 1;\n        for (int i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] < digits[smallestIndex]) {\n                smallestIndex = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallestIndex];\n        digits[smallestIndex] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string nString = n.ToString();\n        // Convert to array\n        char[] nArray = nString.ToCharArray();\n        // Find the first digit that is less than the digit to its right\n        int index = -1;\n        for (int i = 0; i < nArray.Length - 1; i++) {\n            if (nArray[i] < nArray[i + 1]) {\n                index = i;\n            }\n        }\n        // If no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the digit found above that is greater than the digit found above\n        int index2 = -1;\n        for (int i = index + 1; i < nArray.Length; i++) {\n            if (nArray[i] > nArray[index]) {\n                index2 = i;\n            }\n        }\n        // Swap the two digits found above\n        char temp = nArray[index];\n        nArray[index] = nArray[index2];\n        nArray[index2] = temp;\n        // Sort the digits to the right of the digit found above in ascending order\n        Array.Sort(nArray, index + 1, nArray.Length - index - 1);\n        // Convert to string\n        string result = new string(nArray);\n        // Convert to long\n        long resultLong = long.Parse(result);\n        // Return\n        return resultLong;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(digits);"
  ]
}