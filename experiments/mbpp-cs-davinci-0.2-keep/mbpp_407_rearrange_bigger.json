{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));\n    Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));\n    Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Convert to string\n        var s = n.ToString();\n        // Find the first decreasing digit\n        var i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, return -1\n        if (i == 0) return -1;\n        // Find the first digit greater than the decreasing digit\n        var j = s.Length - 1;\n        while (j > 0 && s[j] <= s[i - 1]) j--;\n        // Swap the decreasing digit and the greater digit\n        var c = s[i - 1];\n        s = s.Remove(i - 1, 1).Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1).Insert(j, c.ToString());\n        // Reverse the digits after the decreasing digit\n        s = s.Substring(0, i) + new string(s.Substring(i).Reverse().ToArray());\n        // Return the new number\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) {\n            index--;\n        }\n        if (index <= 0) {\n            return -1;\n        }\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) {\n            swapIndex--;\n        }\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Reverse(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) {\n            index--;\n        }\n        if (index < 0) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Get the length\n        int len = s.Length;\n        // Create a list of numbers\n        List<int> nums = new List<int>();\n        // Add each digit to the list\n        for (int i = 0; i < len; i++) {\n            nums.Add(int.Parse(s[i].ToString()));\n        }\n        // Create a list of indices\n        List<int> indices = new List<int>();\n        // Add each index to the list\n        for (int i = 0; i < len; i++) {\n            indices.Add(i);\n        }\n        // Create a list of permutations\n        List<List<int>> perms = new List<List<int>>();\n        // Add each permutation to the list\n        foreach (var p in indices.Permutations()) {\n            perms.Add(p.ToList());\n        }\n        // Create a list of numbers\n        List<int> nums2 = new List<int>();\n        // Add each number to the list\n        foreach (var p in perms) {\n            int num = 0;\n            for (int i = 0; i < len; i++) {\n                num += nums[p[i]] * (int)Math.Pow(10, len - i - 1);\n            }\n            nums2.Add(num);\n        }\n        // Sort the list\n        nums2.Sort();\n        // Find the index of the given number\n        int index = nums2.IndexOf(n);\n        // Return the next number\n        if (index == nums2.Count - 1) {\n            return -1;\n        } else {\n            return nums2[index + 1];\n        }",
    "        var digits = n.ToString().ToCharArray();\n        var index = digits.Length - 1;\n        while (index > 0 && digits[index - 1] >= digits[index]) index--;\n        if (index <= 0) return -1;\n        var swapIndex = digits.Length - 1;\n        while (digits[swapIndex] <= digits[index - 1]) swapIndex--;\n        var temp = digits[index - 1];\n        digits[index - 1] = digits[swapIndex];\n        digits[swapIndex] = temp;\n        Array.Sort(digits, index, digits.Length - index);\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1])\n            i--;\n        // If no such digit exists, the number is already the largest possible\n        if (i < 0)\n            return -1;\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i])\n            j--;\n        // Swap the two digits\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits to the right of i\n        string suffix = s.Substring(i + 1);\n        suffix = new string(suffix.Reverse().ToArray());\n        s = s.Remove(i + 1);\n        s = s.Insert(i + 1, suffix);\n        // Return the new number\n        return long.Parse(s);",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is not in descending order\n        int i = s.Length - 2;\n        while (i >= 0 && s[i] >= s[i + 1]) i--;\n        // If all digits are in descending order, then no bigger number can be made\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is greater than s[i]\n        int j = s.Length - 1;\n        while (s[j] <= s[i]) j--;\n        // Swap s[i] and s[j]\n        char temp = s[i];\n        s = s.Remove(i, 1);\n        s = s.Insert(i, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Sort the digits to the right of i in ascending order\n        string right = s.Substring(i + 1);\n        right = new string(right.OrderBy(c => c).ToArray());\n        // Return the result\n        return long.Parse(s.Substring(0, i + 1) + right);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first decreasing digit\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        // If no decreasing digit, return -1\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of the decreasing digit\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) j--;\n        // Swap the decreasing digit and the smallest digit to the right\n        char[] chars = s.ToCharArray();\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        Array.Reverse(chars, i, s.Length - i);\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        // convert to string\n        var s = n.ToString();\n        // find the first digit that is smaller than the next digit\n        for (int i = s.Length - 2; i >= 0; i--) {\n            if (s[i] < s[i + 1]) {\n                // find the smallest digit to the right of i that is bigger than s[i]\n                int j = s.Length - 1;\n                while (s[j] <= s[i]) {\n                    j--;\n                }\n                // swap s[i] and s[j]\n                var t = s[i];\n                s = s.Substring(0, i) + s[j] + s.Substring(i + 1, j - i - 1) + t + s.Substring(j + 1);\n                // sort the digits to the right of i\n                var sorted = s.Substring(i + 1).OrderBy(c => c).ToArray();\n                return long.Parse(s.Substring(0, i + 1) + new string(sorted));\n            }\n        }\n        return -1;",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the pivot point\n        int pivot = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // If no pivot, then the number is already the maximum\n        if (pivot == -1) return -1;\n        // Find the rightmost successor to the pivot\n        int successor = 0;\n        for (int i = digits.Length - 1; i > pivot; i--) {\n            if (digits[i] > digits[pivot]) {\n                successor = i;\n                break;\n            }\n        }\n        // Swap the pivot with the successor\n        char temp = digits[pivot];\n        digits[pivot] = digits[successor];\n        digits[successor] = temp;\n        // Reverse the suffix\n        Array.Reverse(digits, pivot + 1, digits.Length - pivot - 1);\n        // Return the result\n        return long.Parse(new string(digits));",
    "        // Convert to array of digits\n        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) i--;\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) return -1;\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) j--;\n        // Swap the two digits\n        int temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Return the new number\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        var chars = n.ToString().ToCharArray();\n        // Find the first decreasing digit\n        int i = chars.Length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit, no bigger number\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit that is greater than it\n        int j = chars.Length - 1;\n        while (chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        var temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = chars.Length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return long.Parse(new string(chars));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));"
  ]
}