{
  "name": "mbpp_223_is_majority",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        foreach (long item in arr) {\n            if (item == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        foreach (long i in arr) {\n            if (i == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        if (arr.Count == 0) {\n            return false;\n        }\n        long count = 0;\n        foreach (long i in arr) {\n            if (i == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        // Hint: Use binary search to find the first occurrence of x.\n        // Then use binary search to find the last occurrence of x.\n        // If the difference between the first and last occurrences is greater than n/2, then x is the majority element.\n        long first = BinarySearchFirst(arr, x);\n        long last = BinarySearchLast(arr, x);\n        if (last - first + 1 > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx2qt22e8.cs(15,22): error CS0103: The name 'BinarySearchFirst' does not exist in the current context\n/tmp/tmpx2qt22e8.cs(16,21): error CS0103: The name 'BinarySearchLast' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        int count = 0;\n        foreach (long num in arr) {\n            if (num == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d42577498d07430f9ba924dcfa82e222>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d42577498d07430f9ba924dcfa82e222>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // your code goes here\n        int count = 0;\n        foreach (long i in arr) {\n            if (i == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        return count > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // your code goes here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5830ec7a89ed4b2e9d9a5c8e9a629d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5830ec7a89ed4b2e9d9a5c8e9a629d94>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        foreach (long num in arr) {\n            if (num == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(a => a == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        return count > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <c9e5c9d633844d7098c79c3912a6dc4c>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <c9e5c9d633844d7098c79c3912a6dc4c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <c9e5c9d633844d7098c79c3912a6dc4c>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <c9e5c9d633844d7098c79c3912a6dc4c>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d42577498d07430f9ba924dcfa82e222>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d42577498d07430f9ba924dcfa82e222>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(i => i == x) > n/2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <5c28cbb542dd48fdb5ef837bfcdc84fc>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <5c28cbb542dd48fdb5ef837bfcdc84fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <5c28cbb542dd48fdb5ef837bfcdc84fc>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <5c28cbb542dd48fdb5ef837bfcdc84fc>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4ce5e2e2c7494daaa38272004fe34800>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4ce5e2e2c7494daaa38272004fe34800>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <b62a31b192fb433e995d0d64a01658f6>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <b62a31b192fb433e995d0d64a01658f6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <f321b8a3bcc547ddacaa99044d51a146>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here.\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        return count > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here.\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (long i = 0; i < n; i++) {\n            if (arr[(int)i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x0000a] in <3d5e2b8023a04913af78c2f581234576>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <3d5e2b8023a04913af78c2f581234576>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x0000a] in <3d5e2b8023a04913af78c2f581234576>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <3d5e2b8023a04913af78c2f581234576>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpirfperlx.cs(10,24): error CS0161: 'Problem.IsMajority(List<long>, long, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return arr.Count(a => a == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        int count = 0;\n        foreach (long i in arr) {\n            if (i == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        foreach (long i in arr) {\n            if (i == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <a8de24012697481cac2e4310703d4cf0>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <a8de24012697481cac2e4310703d4cf0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(e => e == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here.\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <97140a6896244e929036d36737040606>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <97140a6896244e929036d36737040606>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00008] in <97140a6896244e929036d36737040606>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <97140a6896244e929036d36737040606>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return arr.Count(i => i == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here\n        return arr.Count(y => y == x) > n / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d402e168005417bafd251a61977a34b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here.\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsMajority (System.Collections.Generic.List`1[T] arr, System.Int64 n, System.Int64 x) [0x00009] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n  at Problem.Main (System.String[] args) [0x00089] in <bee9c1a7d151443ba1ef085cb50512cd>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7de4639f4bf435fae427b70029dd154>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510128,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b0c823f7494a30ba081f6077337133>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8b0656c6566a4885b7227919e7a41854>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        // You may add other functions as needed.\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123103,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        // Your code goes here.\n        //return false;\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == x) {\n                count++;\n            }\n        }\n        if (count > n / 2) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123104,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}