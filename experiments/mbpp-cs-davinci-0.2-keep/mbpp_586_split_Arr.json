{
  "name": "mbpp_586_split_Arr",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to split a list at the nth eelment and add the first part to the end.\n    public static List<long> SplitArr(List<long> l, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)12L, (long)10L, (long)5L, (long)6L, (long)52L, (long)36L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)52L, (long)36L, (long)12L, (long)10L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (1L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (3L)).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)0L, (long)1L, (long)2L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (long i = n; i < l.Count; i++) {\n            ret.Add(l[(int)i]);\n        }\n        for (long i = 0; i < n; i++) {\n            ret.Add(l[(int)i]);\n        }\n        return ret;",
    "        List<long> res = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            res.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            res.Add(l[i]);\n        }\n        return res;",
    "        List<long> ret = new List<long>();\n        for (long i = n; i < l.Count; i++) {\n            ret.Add(l[(int)i]);\n        }\n        for (long i = 0; i < n; i++) {\n            ret.Add(l[(int)i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i == n) {\n                ret.AddRange(l.GetRange(0, i));\n            }\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i < n) {\n                ret.Add(l[i]);\n            } else {\n                ret.Insert(0, l[i]);\n            }\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> res = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            res.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            res.Add(l[i]);\n        }\n        return res;",
    "        List<long> ret = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i < n) {\n                ret.Add(l[i]);\n            } else {\n                ret.Add(l[i - n]);\n            }\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> first = l.GetRange(0, (int)n);\n        List<long> second = l.GetRange((int)n, l.Count - (int)n);\n        second.AddRange(first);\n        return second;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (long i = n; i < l.Count; i++) {\n            ret.Add(l[(int)i]);\n        }\n        for (long i = 0; i < n; i++) {\n            ret.Add(l[(int)i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (int i = (int)n; i < l.Count; i++) {\n            ret.Add(l[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            ret.Add(l[i]);\n        }\n        return ret;",
    "        List<long> ret = new List<long>();\n        for (long i = n; i < l.Count; i++) {\n            ret.Add(l[(int)i]);\n        }\n        for (long i = 0; i < n; i++) {\n            ret.Add(l[(int)i]);\n        }\n        return ret;"
  ]
}