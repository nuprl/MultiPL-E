{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                ans = Math.Max(ans, a[index] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return ans;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        if (a[index] < a[k]) {\n            max = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index; i < k; i++) {\n            if (maxSum < dp[i]) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            if (maxIndex == index) {\n                sum += a[k];\n            }\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] > a[index]) {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n            else {\n                sum = 0;\n            }\n        }\n        return maxSum + a[k];",
    "        long ans = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                ans = MaxSumIncreasingSubseq(a, n, i, k);\n                if (ans > max) {\n                    max = ans;\n                }\n            }\n        }\n        return max + a[k];",
    "        if (index == n) return 0;\n        long max_sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max_sum) {\n                    max_sum = sum;\n                }\n            }\n        }\n        return max_sum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i <= index; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (int i = (int)index + 1; i < n; i++) {\n            if (a[i] > a[k]) {\n                max += a[i];\n            }\n        }\n        return max;",
    "        if (k < index) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return a[k] + max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];"
  ]
}