{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                ans = Math.Max(ans, a[index] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return ans;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        if (a[index] < a[k]) {\n            max = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index; i < k; i++) {\n            if (maxSum < dp[i]) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            if (maxIndex == index) {\n                sum += a[k];\n            }\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] > a[index]) {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n            else {\n                sum = 0;\n            }\n        }\n        return maxSum + a[k];",
    "        long ans = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                ans = MaxSumIncreasingSubseq(a, n, i, k);\n                if (ans > max) {\n                    max = ans;\n                }\n            }\n        }\n        return max + a[k];",
    "        if (index == n) return 0;\n        long max_sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max_sum) {\n                    max_sum = sum;\n                }\n            }\n        }\n        return max_sum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i <= index; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (int i = (int)index + 1; i < n; i++) {\n            if (a[i] > a[k]) {\n                max += a[i];\n            }\n        }\n        return max;",
    "        if (k < index) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return a[k] + max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] < a[(int)k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[(int)k];",
    "        // Write your code here\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        if (index == k) {\n            return a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        if (a[(int)index] < a[(int)k]) {\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return Math.Max(a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, k));",
    "        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum + a[k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = a[index];\n        long maxSumTillNow = a[index];\n        for (long i = index + 1; i <= k; i++) {\n            if (a[i] > a[i - 1]) {\n                maxSumTillNow += a[i];\n            } else {\n                maxSumTillNow = a[i];\n            }\n            if (maxSumTillNow > maxSum) {\n                maxSum = maxSumTillNow;\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long maxSum = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 0; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i <= k) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1) + a[k];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long msis = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] < a[k] && msis < a[i] + max) {\n                msis = a[i] + max;\n            }\n        }\n        return msis;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n            max[i] = Math.Max(max[i - 1], dp[i]);\n        }\n        long sum = 0;\n        long curr = index;\n        while (curr != -1) {\n            sum += a[curr];\n            curr = prev[curr];\n        }\n        if (k == -1) {\n            return sum;\n        }\n        return sum + max[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum1 = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        long sum2 = 0;\n        if (a[(int)index] < a[(int)k]) {\n            sum2 = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n        }\n        return Math.Max(sum1, sum2);",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (k == index) {\n            sum = a[(int)index];\n        }\n        long maxSum = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        if (k > index) {\n            long maxSumIncluding = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n            if (maxSumIncluding > maxSum) {\n                maxSum = maxSumIncluding;\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[k] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long maxSum = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n                } else if (i == k) {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i] + a[index]);\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] next = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            next[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long curr = maxIndex;\n        while (curr != -1) {\n            next[curr] = maxIndex;\n            maxIndex = prev[maxIndex];\n            curr = prev[curr];\n        }\n        curr = index;\n        while (curr != -1 && curr != k) {\n            curr = next[curr];\n        }\n        if (curr == -1) {\n            return -1;\n        }\n        return dp[k];",
    "        long sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex = i;\n            }\n        }\n        return maxSum;",
    "        // Base case\n        if (index == n) {\n            return 0;\n        }\n        // Recursive case\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[i]);\n            }\n        }\n        if (index < k) {\n            max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return a[k] + max;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, i) + a[k];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;",
    "        if (index == n)\n            return 0;\n        if (a[index] > a[k])\n            return Math.Max(MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, index) + a[index]);\n        else\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < temp) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long sum = 0;\n        long max = 0;\n        for(long i = index; i < k; i++) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return a[index] + max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && j < k && i > k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];",
    "        long maxSum = a[index];\n        long maxSumSoFar = maxSum;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[i] > a[i - 1]) {\n                maxSum += a[i];\n            } else {\n                maxSum = a[i];\n            }\n            maxSumSoFar = Math.Max(maxSumSoFar, maxSum);\n        }\n        return maxSumSoFar;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        long sum = 0;\n        for (long i = index + 1; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, k) + a[index];\n                if (sum > ans) {\n                    ans = sum;\n                }\n            }\n        }\n        return ans;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            maxSum = Math.Max(maxSum, max[i]);\n        }\n        return maxSum + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        else {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n            long sum = 0;\n            for (long i = index + 1; i < n; i++) {\n                if (a[i] > a[index]) {\n                    sum = MaxSumIncreasingSubseq(a, n, i, i);\n                    ans = Math.Max(ans, a[index] + sum);\n                }\n            }\n        }\n        return ans;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return max;",
    "        // If k is not greater than i, return 0.\n        if (k <= index) {\n            return 0;\n        }\n        // If k is greater than i, then we have to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        // We can find the maximum sum of increasing subsequence from prefix until ith index by using the same function.\n        long maxSum = MaxSumIncreasingSubseq(a, n, index, k - 1);\n        // If a[i] < a[k], then we can include a[k] in the increasing subsequence.\n        if (a[index] < a[k]) {\n            // We can find the maximum sum of increasing subsequence from prefix until ith index by using the same function.\n            long maxSumUntilIndex = MaxSumIncreasingSubseq(a, n, index, index);\n            // We can find the maximum sum of increasing subsequence from prefix until kth index by using the same function.\n            long maxSumUntilK = MaxSumIncreasingSubseq(a, n, k, k);\n            // We can find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i by adding the maximum sum of increasing subsequence from prefix until ith index and the maximum sum of increasing subsequence from prefix until kth index.\n            maxSum = Math.Max(maxSum, maxSumUntilIndex + maxSumUntilK);\n        }\n        // Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        return maxSum;",
    "        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long max_so_far = 0;\n        for (long i = index; i < k; i++) {\n            max_so_far = Math.Max(max_so_far, max[i]);\n        }\n        return max_so_far;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            sum += a[i];\n        }\n        sum += dp[k];\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            if (maxSum < dp[i]) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) max = temp;\n            }\n        }\n        return a[k] + max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSumIncludingK = Math.Max(maxSumIncludingK, a[k] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        maxSum = Math.Max(maxSum, maxSumIncludingK);\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        // dp[i] = maximum sum of increasing subsequence from prefix until ith index\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];",
    "        // Write your code here\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // dp[i] = max sum of increasing subsequence from prefix until ith index\n        // dp[i] = max(dp[i], dp[j] + a[i]) for j < i\n        // dp[i] = max(dp[i], dp[j] + a[i]) for j < k < i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n            for (long j = k; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        long max = dp[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        long maxSumIncludingKIndex = -1;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        maxSumIncludingK = maxSum + a[k];\n        return maxSumIncludingK;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[(int)i] < a[(int)k]) {\n                sum = Math.Max(sum, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return sum + a[(int)k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = a[index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        ans = Math.Max(ans, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return ans;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        maxSum = sum;\n        sum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        maxSum += sum;\n        return maxSum;",
    "        long[] dp = new long[n + 1];\n        for (long i = 0; i <= n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i <= n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i <= k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp2[i] = Math.Max(dp2[i], dp2[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (i < index) {\n                max = Math.Max(max, dp[i]);\n            } else if (i == index) {\n                max = Math.Max(max, dp2[i]);\n            } else {\n                max = Math.Max(max, dp[i]);\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long ans = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            ans += a[i];\n        }\n        return ans;",
    "        long[] dp = new long[n];\n        long[] kdp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            kdp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n                if (a[i] > a[j] && j < k && kdp[i] < kdp[j] + a[i]) {\n                    kdp[i] = kdp[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + kdp[k];",
    "        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n        }\n        return sum;",
    "        long maxSum = 0;\n        long maxSumIncluding = 0;\n        long maxSumExcluding = 0;\n        for (long i = index; i < k; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j]) {\n                    maxSumIncluding = MaxSumIncreasingSubseq(a, n, j, k) + a[i];\n                    if (maxSumIncluding > maxSumExcluding) {\n                        maxSumExcluding = maxSumIncluding;\n                    }\n                }\n            }\n            if (maxSumExcluding > maxSum) {\n                maxSum = maxSumExcluding;\n            }\n        }\n        return maxSum;",
    "        long max = a[index];\n        for (long i = index + 1; i < k; i++) {\n            if (a[i] > a[index]) {\n                max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return maxSum;",
    "        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && i < k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum = Math.Max(sum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return sum + a[k];",
    "        long[] dp = new long[a.Count];\n        dp[0] = a[0];\n        for (long i = 1; i < a.Count; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, dp[i]);\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        long max = a[index];\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        if (index < k) {\n            sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, k, k));\n        }\n        return sum;",
    "        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        long maxSumIncludingKIndex = -1;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        maxSumIncludingK = maxSum + a[k];\n        return maxSumIncludingK;",
    "        // Base case\n        if (index == n) {\n            return 0;\n        }\n        // Recursive case\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i, k) + a[i]);\n            }\n            if (i == k) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i, k) + a[index]);\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                maxSum = Math.Max(maxSum, a[i]);\n            } else {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum1 = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        long sum2 = 0;\n        if (a[(int)index] < a[(int)k]) {\n            sum2 = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n        }\n        return Math.Max(sum1, sum2);",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        // Write your code here\n        long[] dp = new long[a.Count];\n        dp[0] = a[0];\n        for (int i = 1; i < a.Count; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            maxSum = Math.Max(maxSum, dp[i]);\n        }\n        maxSum += a[k];\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return a[index] + max;",
    "        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return sum;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = index; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;",
    "        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];",
    "        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (index < k) {\n            sum = a[index];\n        }\n        long max = 0;\n        for (long i = index + 1; i <= n; i++) {\n            if (i <= k) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return sum + max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[k];",
    "        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = a[(int)index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && j < k && i > k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = a[index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return Math.Max(sum, MaxSumIncreasingSubseq(a, n, index + 1, k));",
    "        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[k] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return maxSum;",
    "        if (index == n)\n            return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                    if (sum > max)\n                        max = sum;\n                }\n                else if (i == k) {\n                    long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                    if (sum > max)\n                        max = sum;\n                }\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        // Write your code here\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n        }\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, index + 1, index));\n        return sum;",
    "        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];",
    "        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            maxSum = Math.Max(maxSum, sum);\n        }\n        return maxSum;",
    "        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (k == index) {\n            ans = a[(int)index];\n        }\n        long max = 0;\n        for (long i = index + 1; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return ans + max;",
    "        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;",
    "        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (i < k && a[i] < a[k]) {\n                sum += a[k];\n            } else {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long curr = maxIndex;\n        while (curr != -1) {\n            sum += a[curr];\n            curr = prev[curr];\n        }\n        return sum;"
  ]
}