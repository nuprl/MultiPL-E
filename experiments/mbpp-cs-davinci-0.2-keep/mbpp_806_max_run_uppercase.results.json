{
  "name": "mbpp_806_max_run_uppercase",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                max_run = Math.Max(max_run, cur_run);\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fa6d1a8a4e6247dc9b7ee8a288fcce2d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                run++;\n            } else {\n                max_run = Math.Max(max_run, run);\n                run = 0;\n            }\n        }\n        return Math.Max(max_run, run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n            } else {\n                if (run > max_run) {\n                    max_run = run;\n                }\n                run = 0;\n            }\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                count++;\n            } else {\n                if (count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n        }\n        if (count > max) {\n            max = count;\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        return Math.Max(max_run, current_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n            } else {\n                max_run = Math.Max(max_run, run);\n                run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run += 1;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        var max_run = 0;\n        var cur_run = 0;\n        foreach (var c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <abb183a268dc411f8b57fcda9a1476a8>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                curr_run++;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run += 1;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                max_run = Math.Max(max_run, curr_run);\n                curr_run = 0;\n            }\n        }\n        return Math.Max(max_run, curr_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach(char c in test_str) {\n            if(Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Write your code here.\n        long maxRun = 0;\n        long currentRun = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                currentRun++;\n            } else {\n                maxRun = Math.Max(maxRun, currentRun);\n                currentRun = 0;\n            }\n        }\n        maxRun = Math.Max(maxRun, currentRun);\n        return maxRun;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // TODO: Implement this function.\n        // You can add helper functions as needed.\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            } else {\n                count = 0;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a524fcde86b14c828381a9179b01ec57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run += 1;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                current_run = 0;\n            }\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code goes here\n        long maxRun = 0;\n        long currentRun = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                currentRun++;\n            } else {\n                if (currentRun > maxRun) {\n                    maxRun = currentRun;\n                }\n                currentRun = 0;\n            }\n        }\n        if (currentRun > maxRun) {\n            maxRun = currentRun;\n        }\n        return maxRun;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run += 1;\n            } else {\n                cur_run = 0;\n            }\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                max_run = Math.Max(max_run, curr_run);\n                curr_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, curr_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e06bf452993141f8a541a2a26fc6baf5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                run++;\n            } else {\n                max_run = Math.Max(max_run, run);\n                run = 0;\n            }\n        }\n        return Math.Max(max_run, run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run += 1;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n                curr_run = 0;\n            }\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Write your code here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7a17fc23ac342a699048fa55fc731e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e7a17fc23ac342a699048fa55fc731e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max = 0;\n        long current = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current++;\n            } else {\n                if (current > max) {\n                    max = current;\n                }\n                current = 0;\n            }\n        }\n        if (current > max) {\n            max = current;\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                cur_run = 0;\n            }\n            max_run = Math.Max(max_run, cur_run);\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                run++;\n            } else {\n                max_run = Math.Max(max_run, run);\n                run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n            } else {\n                max_run = Math.Max(max_run, curr_run);\n                curr_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, curr_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run += 1;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3848bff66baa4e28bd94091ff06d737d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3848bff66baa4e28bd94091ff06d737d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                max_run = Math.Max(max_run, cur_run);\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                cur_run = 0;\n            }\n            max_run = Math.Max(max_run, cur_run);\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        int max_run = 0;\n        int cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1028d2fc97ce4c789179d3c87f332cf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n            } else {\n                max_run = Math.Max(max_run, run);\n                run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                curr_run++;\n            } else {\n                curr_run = 0;\n            }\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Your code here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3848bff66baa4e28bd94091ff06d737d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3848bff66baa4e28bd94091ff06d737d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                curr_run++;\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n            } else {\n                curr_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                run++;\n                if (run > max_run) {\n                    max_run = run;\n                }\n            } else {\n                run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n            } else {\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n                current_run = 0;\n            }\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c71179d5aa9943d6876d0c4c7d6b1346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c71179d5aa9943d6876d0c4c7d6b1346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            }\n            else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n                if (current_run > max_run) {\n                    max_run = current_run;\n                }\n            } else {\n                current_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run += 1;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        return Math.Max(max_run, cur_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                max_run = Math.Max(max_run, cur_run);\n                cur_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, cur_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                curr_run++;\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n            } else {\n                curr_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long curr_run = 0;\n        for (int i = 0; i < test_str.Length; i++) {\n            if (Char.IsUpper(test_str[i])) {\n                curr_run++;\n                if (curr_run > max_run) {\n                    max_run = curr_run;\n                }\n            } else {\n                curr_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        return Math.Max(max_run, current_run);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run;\n                }\n                cur_run = 0;\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long cur_run = 0;\n        foreach (char c in test_str) {\n            if (Char.IsUpper(c)) {\n                cur_run++;\n                max_run = Math.Max(max_run, cur_run);\n            } else {\n                cur_run = 0;\n            }\n        }\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long max_run = 0;\n        long current_run = 0;\n        foreach (char c in test_str) {\n            if (char.IsUpper(c)) {\n                current_run++;\n            } else {\n                max_run = Math.Max(max_run, current_run);\n                current_run = 0;\n            }\n        }\n        max_run = Math.Max(max_run, current_run);\n        return max_run;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}