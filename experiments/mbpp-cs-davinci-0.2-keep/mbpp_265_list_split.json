{
  "name": "mbpp_265_list_split",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static object ListSplit(object S, long step) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));\n    Debug.Assert(ListSplit((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new object(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));\n    Debug.Assert(ListSplit((new object(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var n = list.Count;\n        var i = 0;\n        while (i < n) {\n            var j = i + step;\n            if (j > n) {\n                j = n;\n            }\n            result.Add(list.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var lst = (List<object>)S;\n        var res = new List<object>();\n        var cur = new List<object>();\n        for (int i = 0; i < lst.Count; i++) {\n            cur.Add(lst[i]);\n            if ((i + 1) % step == 0) {\n                res.Add(cur);\n                cur = new List<object>();\n            }\n        }\n        if (cur.Count > 0)\n            res.Add(cur);\n        return res;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var currentList = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(currentList);\n                currentList = new List<object>();\n            }\n            currentList.Add(list[i]);\n        }\n        result.Add(currentList);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j++;\n            if (j == step) {\n                j = 0;\n            }\n        }\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (long i = 0; i < L.Count; i++) {\n            T.Add(L[(int)i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                    temp = new List<object>();\n                }\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j = (j + 1) % step;\n        }\n        return R;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                }\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            if (i == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            } else {\n                i++;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            current.Add(L[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(L[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            if (i % step == 0) {\n                if (r.Count > 0) {\n                    R.Add(r);\n                }\n                r = new List<object>();\n            }\n            r.Add(L[i]);\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            sublist.Add(item);\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var r = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            r.Add(L[i]);\n            if (i % step == step - 1) {\n                R.Add(r);\n                r = new List<object>();\n            }\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            i++;\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (S is IEnumerable<object> list) {\n            var result = new List<object>();\n            var current = new List<object>();\n            var i = 0L;\n            foreach (var item in list) {\n                if (i % step == 0) {\n                    current = new List<object>();\n                    result.Add(current);\n                }\n                current.Add(item);\n                i++;\n            }\n            return result;\n        }\n        return null;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var length = list.Count;\n        var index = 0;\n        while (index < length) {\n            var sublist = new List<object>();\n            for (var i = 0; i < step; i++) {\n                if (index + i < length) {\n                    sublist.Add(list[index + i]);\n                }\n            }\n            result.Add(sublist);\n            index += step;\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j = (j + 1) % step;\n        }\n        return R;",
    "        var L = new List<object>();\n        var N = new List<object>();\n        foreach (var x in (List<object>)S) {\n            N.Add(x);\n            if (N.Count == step) {\n                L.Add(N);\n                N = new List<object>();\n            }\n        }\n        if (N.Count > 0) {\n            L.Add(N);\n        }\n        return L;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var len = list.Count;\n        var i = 0;\n        while (i < len) {\n            var sublist = new List<object>();\n            var j = 0;\n            while (j < step && i < len) {\n                sublist.Add(list[i]);\n                i++;\n                j++;\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        if (step < 1) {\n            throw new Exception(\"Step must be greater than 0\");\n        }\n        if (S is List<object>) {\n            List<object> list = (List<object>)S;\n            List<object> result = new List<object>();\n            for (int i = 0; i < list.Count; i += (int)step) {\n                result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n            }\n            return result;\n        } else {\n            throw new Exception(\"S must be a list\");\n        }",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var N = L.Count;\n        var R = new List<object>();\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            R.Add(L.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                    temp = new List<object>();\n                }\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                }\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var index = 0;\n        foreach (var item in list) {\n            if (index % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            index++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var N = L.Count;\n        for (int i = 0; i < N; i += (int)step) {\n            var T = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < N) {\n                    T.Add(L[i + j]);\n                }\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var N = L.Count;\n        var R = new List<object>();\n        for (long i = 0; i < N; i += step) {\n            R.Add(L.GetRange((int)i, (int)Math.Min(step, N - i)));\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var index = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            index += 1;\n            if (index == step) {\n                result.Add(current);\n                current = new List<object>();\n                index = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<List<object>>();\n        var i = 0;\n        while (i < L.Count) {\n            R.Add(L.GetRange(i, (int)Math.Min(step, L.Count - i)));\n            i += (int)step;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> L = (List<object>)S;\n        List<object> R = new List<object>();\n        for (int i = 0; i < L.Count; i += (int)step) {\n            R.Add(L.GetRange(i, (int)Math.Min(step, L.Count - i)));\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        result.Add(sublist);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var N = L.Count;\n        while (i < N) {\n            var T = new List<object>();\n            while (i < N && j < step) {\n                T.Add(L[i]);\n                i++;\n                j++;\n            }\n            R.Add(T);\n            j = 0;\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in L) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null)\n            return null;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) R.Add(T);\n        return R;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            var T = new List<object>();\n            while (j < step && i < L.Count) {\n                T.Add(L[i]);\n                i++;\n                j++;\n            }\n            R.Add(T);\n            j = 0;\n        }\n        return R;",
    "        var list = S as IEnumerable<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step < 1) {\n            throw new ArgumentException(\"step must be greater than 0\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                current = new List<object>();\n                result.Add(current);\n            }\n            current.Add(item);\n            i++;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var k = 0;\n        while (i < L.Count) {\n            var T = new List<object>();\n            while (j < step && i < L.Count) {\n                T.Add(L[i]);\n                i++;\n                j++;\n            }\n            R.Add(T);\n            j = 0;\n            k++;\n        }\n        return R;",
    "        var L = (IList<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in L) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            List<object> sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = list.Count;\n        var i = 0;\n        while (i < count) {\n            var sublist = new List<object>();\n            var j = 0;\n            while (j < step && i < count) {\n                sublist.Add(list[i]);\n                i++;\n                j++;\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (step == 0) {\n            return null;\n        }\n        if (step < 0) {\n            step = -step;\n        }\n        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = list.Count;\n        var i = 0;\n        while (i < count) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step && i < count; j++) {\n                sublist.Add(list[i]);\n                i++;\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                count = 0;\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        long i = 0;\n        List<object> subList = new List<object>();\n        foreach (object item in list) {\n            if (i % step == 0) {\n                subList = new List<object>();\n                result.Add(subList);\n            }\n            subList.Add(item);\n            i++;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var N = L.Count;\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            R.Add(L.GetRange(i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var N = L.Count;\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            R.Add(L.GetRange((int)i, (int)(j - i)));\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var L = new List<object>();\n        var T = new List<object>();\n        foreach (var i in (List<object>)S) {\n            T.Add(i);\n            if (T.Count == step) {\n                L.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            L.Add(T);\n        }\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var length = list.Count;\n        for (int i = 0; i < length; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, length - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = S as IList<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step < 1) {\n            throw new ArgumentException(\"step must be greater than 0\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[(int)i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j = (j + 1) % step;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var currentList = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(currentList);\n                currentList = new List<object>();\n            }\n            currentList.Add(list[i]);\n        }\n        result.Add(currentList);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            temp.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        long i = 0;\n        while (i < list.Count) {\n            List<object> sublist = new List<object>();\n            for (long j = 0; j < step; j++) {\n                if (i + j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n            i += step;\n        }\n        return result;",
    "        var L = new List<object>();\n        var N = new List<object>();\n        var i = 0;\n        foreach (var e in (List<object>)S) {\n            if (i % step == 0) {\n                L.Add(N);\n                N = new List<object>();\n            }\n            N.Add(e);\n            i++;\n        }\n        L.Add(N);\n        return L;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = 0;\n        var temp = new List<object>();\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(temp);\n                temp = new List<object>();\n                count = 0;\n            }\n            temp.Add(item);\n            count++;\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        while (i < L.Count) {\n            var T = new List<object>();\n            for (var j = 0; j < step && i < L.Count; j++) {\n                T.Add(L[i]);\n                i++;\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var r = new List<object>();\n        foreach (var e in L) {\n            r.Add(e);\n            i++;\n            if (i == step) {\n                R.Add(r);\n                r = new List<object>();\n                i = 0;\n            }\n        }\n        if (r.Count > 0) {\n            R.Add(r);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        result.Add(current);\n        return result;",
    "        var l = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < l.Count; i++) {\n            current.Add(l[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (S == null) {\n            return null;\n        }\n        if (step <= 0) {\n            return null;\n        }\n        if (S is string) {\n            string str = (string)S;\n            if (str.Length == 0) {\n                return null;\n            }\n            List<string> result = new List<string>();\n            for (int i = 0; i < str.Length; i += (int)step) {\n                result.Add(str.Substring(i, Math.Min((int)step, str.Length - i)));\n            }\n            return result;\n        }\n        if (S is List<object>) {\n            List<object> list = (List<object>)S;\n            if (list.Count == 0) {\n                return null;\n            }\n            List<object> result = new List<object>();\n            for (int i = 0; i < list.Count; i += (int)step) {\n                result.Add(list.GetRange(i, Math.Min((int)step, list.Count - i)));\n            }\n            return result;\n        }\n        return null;",
    "        var list = (List<object>)S;\n        var result = new List<List<object>>();\n        var currentList = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (currentList.Count > 0) {\n                    result.Add(currentList);\n                }\n                currentList = new List<object>();\n            }\n            currentList.Add(list[i]);\n        }\n        if (currentList.Count > 0) {\n            result.Add(currentList);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[(int)i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var length = list.Count;\n        var i = 0;\n        while (i < length) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step; j++) {\n                if (i + j < length) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n            i += step;\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (temp.Count > 0) {\n                    result.Add(temp);\n                    temp = new List<object>();\n                }\n            }\n            temp.Add(list[i]);\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        if (step < 1) {\n            throw new ArgumentException(\"step must be greater than 0\");\n        }\n        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.Count) {\n                    sublist.Add(list[i + j]);\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = new List<object>();\n        var T = new List<object>();\n        var i = 0L;\n        foreach (var x in (List<object>)S) {\n            T.Add(x);\n            i++;\n            if (i == step) {\n                L.Add(T);\n                T = new List<object>();\n                i = 0;\n            }\n        }\n        if (T.Count > 0) {\n            L.Add(T);\n        }\n        return L;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        if (step < 1) {\n            throw new ArgumentException(\"step must be greater than 0\");\n        }\n        var list = (IList<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        while (i < L.Count) {\n            if (j == 0) {\n                R.Add(new List<object>());\n            }\n            ((List<object>)R[R.Count - 1]).Add(L[i]);\n            i++;\n            j++;\n            if (j == step) {\n                j = 0;\n            }\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var count = 0;\n        var sublist = new List<object>();\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(sublist);\n                sublist = new List<object>();\n                count = 0;\n            }\n            sublist.Add(item);\n            count++;\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = new List<object>();\n        var N = (List<object>)S;\n        var i = 0;\n        var j = 0;\n        while (i < N.Count) {\n            var T = new List<object>();\n            while (j < step && i < N.Count) {\n                T.Add(N[i]);\n                i++;\n                j++;\n            }\n            L.Add(T);\n            j = 0;\n        }\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var currentList = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(currentList);\n                currentList = new List<object>();\n            }\n            currentList.Add(list[(int)i]);\n        }\n        result.Add(currentList);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0L;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var currentList = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                result.Add(currentList);\n                currentList = new List<object>();\n            }\n            currentList.Add(item);\n            i++;\n        }\n        result.Add(currentList);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long count = 0;\n        foreach(var item in list) {\n            current.Add(item);\n            count++;\n            if(count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if(current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, Math.Min((int)step, list.Count - i)));\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0 && i != 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (sublist.Count > 0) {\n                    result.Add(sublist);\n                }\n                sublist = new List<object>();\n            }\n            sublist.Add(list[i]);\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        var length = list.Count;\n        var i = 0;\n        while (i < length) {\n            var sublist = new List<object>();\n            for (var j = 0; j < step; j++) {\n                if (i < length) {\n                    sublist.Add(list[i]);\n                    i++;\n                }\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (IEnumerable<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(temp);\n                temp = new List<object>();\n                count = 0;\n            }\n            temp.Add(item);\n            count++;\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var i = 0;\n        var j = 0;\n        var N = L.Count;\n        while (i < N) {\n            var T = new List<object>();\n            while (i < N && j < step) {\n                T.Add(L[i]);\n                i++;\n                j++;\n            }\n            R.Add(T);\n            j = 0;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            i++;\n            if (i == step) {\n                result.Add(current);\n                current = new List<object>();\n                i = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> L = (List<object>)S;\n        List<object> R = new List<object>();\n        for (int i = 0; i < L.Count; i += (int)step) {\n            R.Add(L.GetRange(i, (int)Math.Min(step, L.Count - i)));\n        }\n        return R;",
    "        var L = (List<object>)S;\n        var N = L.Count;\n        var R = new List<object>();\n        for (var i = 0; i < N; i += step) {\n            var T = new List<object>();\n            for (var j = 0; j < step; j++) {\n                if (i + j < N) {\n                    T.Add(L[i + j]);\n                }\n            }\n            R.Add(T);\n        }\n        return R;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step; j++) {\n                if (i + j >= list.Count) {\n                    break;\n                }\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(list[i]);\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n            temp.Add(list[i]);\n        }\n        result.Add(temp);\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            var sublist = new List<object>();\n            for (int j = 0; j < step && i + j < list.Count; j++) {\n                sublist.Add(list[i + j]);\n            }\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = S as IEnumerable<object>;\n        if (list == null) {\n            throw new ArgumentException(\"S must be a list\");\n        }\n        if (step <= 0) {\n            throw new ArgumentException(\"step must be positive\");\n        }\n        var result = new List<object>();\n        var current = new List<object>();\n        long i = 0;\n        foreach (var item in list) {\n            if (i % step == 0) {\n                if (current.Count > 0) {\n                    result.Add(current);\n                }\n                current = new List<object>();\n            }\n            current.Add(item);\n            i++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            count++;\n            current.Add(item);\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            current.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            T.Add(L[i]);\n            if ((i + 1) % step == 0) {\n                R.Add(T);\n                T = new List<object>();\n            }\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var N = L.Count;\n        var R = new List<object>();\n        for (int i = 0; i < N; i += (int)step) {\n            R.Add(L.GetRange(i, Math.Min((int)step, N - i)));\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var T = new List<object>();\n        for (long i = 0; i < L.Count; i++) {\n            if (i % step == 0) {\n                if (T.Count > 0) {\n                    R.Add(T);\n                }\n                T = new List<object>();\n            }\n            T.Add(L[(int)i]);\n        }\n        if (T.Count > 0) {\n            R.Add(T);\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var L = new List<object>();\n        var N = new List<object>();\n        foreach (var x in (List<object>)S) {\n            N.Add(x);\n            if (N.Count == step) {\n                L.Add(N);\n                N = new List<object>();\n            }\n        }\n        if (N.Count > 0) {\n            L.Add(N);\n        }\n        return L;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n            current.Add(item);\n            count++;\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        List<object> result = new List<object>();\n        List<object> list = (List<object>)S;\n        for (int i = 0; i < list.Count; i += (int)step) {\n            result.Add(list.GetRange(i, (int)Math.Min(step, list.Count - i)));\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var R = new List<object>();\n        var N = L.Count;\n        var i = 0;\n        while (i < N) {\n            var j = i + step;\n            if (j > N) {\n                j = N;\n            }\n            var T = new List<object>();\n            for (var k = i; k < j; k++) {\n                T.Add(L[k]);\n            }\n            R.Add(T);\n            i = j;\n        }\n        return R;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var currentList = new List<object>();\n        for (var i = 0; i < list.Count; i++) {\n            currentList.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(currentList);\n                currentList = new List<object>();\n            }\n        }\n        if (currentList.Count > 0) {\n            result.Add(currentList);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i+1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            temp.Add(list[i]);\n            if ((i + 1) % step == 0) {\n                result.Add(temp);\n                temp = new List<object>();\n            }\n        }\n        if (temp.Count > 0) {\n            result.Add(temp);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        var count = 0;\n        foreach (var item in list) {\n            current.Add(item);\n            count++;\n            if (count == step) {\n                result.Add(current);\n                current = new List<object>();\n                count = 0;\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var L = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (int i = 0; i < L.Count; i++) {\n            current.Add(L[i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var current = new List<object>();\n        for (long i = 0; i < list.Count; i++) {\n            current.Add(list[(int)i]);\n            if (i % step == step - 1) {\n                result.Add(current);\n                current = new List<object>();\n            }\n        }\n        if (current.Count > 0) {\n            result.Add(current);\n        }\n        return result;",
    "        var list = (List<object>)S;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            sublist.Add(list[i]);\n            if (i % step == step - 1) {\n                result.Add(sublist);\n                sublist = new List<object>();\n            }\n        }\n        if (sublist.Count > 0) {\n            result.Add(sublist);\n        }\n        return result;"
  ]
}