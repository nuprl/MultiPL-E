{
  "name": "mbpp_125_find_length",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Create a count array and initialize all values as 0\n        int[] count = new int[2];\n\n        // Consider all sub-strings starting from i\n        for (int i = 0; i < str.Length; i++) {\n            // Reset count array\n            count[0] = 0;\n            count[1] = 0;\n\n            // Consider all sub-strings ending at j\n            for (int j = i; j < str.Length; j++) {\n                // Increment count of current character\n                count[str[j] - '0']++;\n\n                // If difference between count of 0s and 1s is\n                // atmost 1, then increment answer\n                if (Math.Abs(count[0] - count[1]) <= 1) {\n                    max_len = Math.Max(max_len, j - i + 1);\n                }\n            }\n        }\n        return max_len;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        right[n - 1] = arr[n - 1];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int l = i == 0 ? 0 : left[i - 1];\n                int r = j == n - 1 ? 0 : right[j + 1];\n                int zeros = l + (right[j] - right[i]);\n                int ones = r + (left[j] - left[i]);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int curr = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                curr--;\n            } else {\n                curr++;\n            }\n            count[i] = curr;\n            max = Math.Max(max, curr);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_len = 0;\n        int min_len = 0;\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_len = Math.Max(max_len, count[str[i] - '0']);\n            min_len = Math.Min(min_len, count[str[i] - '0']);\n            max_diff = Math.Max(max_diff, max_len - min_len);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            if (count[0] == count[1]) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            else {\n                int diff = count[0] - count[1];\n                if (prevDiff == diff) {\n                    maxLen = Math.Max(maxLen, currLen);\n                }\n                else {\n                    maxLen = Math.Max(maxLen, currLen - 1);\n                }\n                prevDiff = diff;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] diff = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                diff[i] = arr[i];\n            } else {\n                diff[i] = diff[i - 1] + arr[i];\n            }\n        }\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            count[diff[i]]++;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (count[i] > 0) {\n                max = Math.Max(max, count[i]);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr",
    "        var count = 0;\n        var max = 0;\n        var map = new Dictionary<int, int>();\n        map[0] = -1;\n        for (var i = 0; i < str.Length; i++) {\n            count += str[i] == '0' ? 1 : -1;\n            if (map.ContainsKey(count)) {\n                max = Math.Max(max, i - map[count]);\n            } else {\n                map[count] = i;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n            if (curr_diff < 0) {\n                curr_diff = 0;\n            }\n        }\n        return max_diff;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int left = 0, right = 0;\n\n        // Initialize left_count and right_count\n        int left_count = 0, right_count = 0;\n\n        // Traverse through the string\n        while (right < str.Length) {\n            // If 0, then increment left_count\n            // Else if 1, then increment right_count\n            if (str[right] == '0')\n                left_count++;\n            else\n                right_count++;\n\n            // If left_count is equal to right_count, then update result\n            if (left_count == right_count)\n                result = Math.Max(result, right - left + 1);\n\n            // If left_count is greater than right_count, then update left\n            else if (left_count > right_count) {\n                while (left < right && left_count > right_count) {\n                    if (str[left] == '0')\n                        left_count--;\n                    left++;\n                }\n            }\n\n            // Increment right\n            right++;\n        }\n\n        return result;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_len = 0;\n        int min_len = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_len = Math.Max(max_len, count[str[i] - '0']);\n            min_len = Math.Min(min_len, count[str[i] - '0']);\n        }\n        return (max_len - min_len);",
    "        var count = 0;\n        var max = 0;\n        var start = 0;\n        var end = 0;\n        while (end < str.Length) {\n            if (str[end] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n                start = end + 1;\n            }\n            if (count > max) {\n                max = count;\n            }\n            end++;\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            int currDiff = Math.Abs(count[0] - count[1]);\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (currDiff == prevDiff) {\n                currLen++;\n                maxLen = Math.Max(maxLen, currLen);\n            } else if (currDiff > prevDiff) {\n                currLen = i - maxDiff;\n            } else {\n                maxDiff = currDiff;\n                maxLen = Math.Max(maxLen, i - maxDiff);\n            }\n            prevDiff = currDiff;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        long max = 0;\n        long sum = 0;\n        Dictionary<long, int> map = new Dictionary<long, int>();\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n            if (sum == 0) {\n                max = i + 1;\n            }\n            if (map.ContainsKey(sum)) {\n                max = Math.Max(max, i - map[sum]);\n            } else {\n                map.Add(sum, i);\n            }\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int min = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            max += count[i];\n            min = Math.Min(min, max);\n            maxDiff = Math.Max(maxDiff, max - min);\n        }\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxDiff = Math.Max(maxDiff, count[0] - count[1]);\n            if (maxDiff == prevDiff) {\n                currLen++;\n            } else {\n                maxLen = Math.Max(maxLen, currLen);\n                currLen = 1;\n                prevDiff = maxDiff;\n            }\n        }\n        return Math.Max(maxLen, currLen);",
    "        // Create a count array to store count of 0s and 1s.\n        int[] count = new int[2];\n        // Initialize count array with 0s.\n        for (int i = 0; i < 2; i++)\n            count[i] = 0;\n        // Initialize max_diff with 0.\n        long max_diff = 0;\n        // Initialize max_len with 0.\n        long max_len = 0;\n        // Traverse through the given string.\n        for (int i = 0; i < str.Length; i++) {\n            // If current character is '0'\n            if (str[i] == '0')\n                count[0]++;\n            // If current character is '1'\n            else\n                count[1]++;\n            // If difference between count of 0s and count of 1s is at most 1,\n            // then update max_len.\n            if (Math.Abs(count[0] - count[1]) <= 1)\n                max_len++;\n            // If difference between count of 0s and count of 1s is more than 1,\n            // then update count array accordingly.\n            else {\n                if (count[0] > count[1])\n                    count[0]--;\n                else\n                    count[1]--;\n            }\n            // Update max_diff if required.\n            max_diff = Math.Max(max_diff, max_len);\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] prefix = new int[n];\n        prefix[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix[i] = prefix[i - 1] + arr[i];\n        }\n        int[] min = new int[n];\n        int[] max = new int[n];\n        min[0] = prefix[0];\n        max[0] = prefix[0];\n        for (int i = 1; i < n; i++) {\n            min[i] = Math.Min(min[i - 1], prefix[i]);\n            max[i] = Math.Max(max[i - 1], prefix[i]);\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.Max(ans, max[i] - min[i]);\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            if (count[0] == count[1]) {\n                maxLen = Math.Max(maxLen, currLen);\n            } else {\n                int diff = Math.Abs(count[0] - count[1]);\n                if (prevDiff == diff) {\n                    maxLen = Math.Max(maxLen, currLen);\n                }\n                prevDiff = diff;\n            }\n        }\n        count = new int[2];\n        currLen = 0;\n        prevDiff = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            count[str[i] - '0']++;\n            currLen++;\n            if (count[0] == count[1]) {\n                maxLen = Math.Max(maxLen, currLen);\n            } else {\n                int diff = Math.Abs(count[0] - count[1]);\n                if (prevDiff == diff) {\n                    maxLen = Math.Max(maxLen, currLen);\n                }\n                prevDiff = diff;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int cur = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                cur--;\n            } else {\n                cur++;\n            }\n            count[i] = cur;\n            max = Math.Max(max, cur);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int curr = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                curr--;\n            } else {\n                curr++;\n            }\n            count[i] = curr;\n            max = Math.Max(max, curr);\n        }\n        if (max == 0) {\n            return n;\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (count[i] == min) {\n                return i + 1;\n            }\n            if (count[i] < min) {\n                min = count[i];\n            }\n        }\n        return 0;",
    "        int max = 0;\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the number of 0s\n        long numZeros = 0;\n        // Create a variable to store the number of 1s\n        long numOnes = 0;\n        // Loop through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is 0\n            if (str[i] == '0') {\n                // Increment the number of 0s\n                numZeros++;\n            }\n            // If the current character is 1\n            else {\n                // Increment the number of 1s\n                numOnes++;\n            }\n            // If the number of 0s is greater than the number of 1s\n            if (numZeros > numOnes) {\n                // Set the number of 1s to 0\n                numOnes = 0;\n                // Set the number of 0s to 0\n                numZeros = 0;\n            }\n            // If the number of 1s is greater than the number of 0s\n            else if (numOnes > numZeros) {\n                // Set the number of 0s to 0\n                numZeros = 0;\n                // Set the number of 1s to 0\n                numOnes = 0;\n            }\n            // If the number of 0s is equal to the number of 1s\n            else if (numZeros == numOnes) {\n                // Set the maximum difference to the current number of 0s and 1s\n                maxDiff = numZeros;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        var n = str.Length;\n        var count = 0;\n        var max = 0;\n        var map = new Dictionary<int, int>();\n        for (var i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count == 0) {\n                max = i + 1;\n            } else if (map.ContainsKey(count)) {\n                max = Math.Max(max, i - map[count]);\n            } else {\n                map[count] = i;\n            }\n        }\n        return max;",
    "        // Write your code here\n        var zeros = new List<int>();\n        var ones = new List<int>();\n        var max = 0;\n        var count = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = i + 1;\n            } else if (zeros.Count > ones.Count) {\n                var index = zeros[count];\n                if (index != -1) {\n                    max = Math.Max(max, i - index);\n                }\n            } else {\n                var index = ones[-count];\n                if (index != -1) {\n                    max = Math.Max(max, i - index);\n                }\n            }\n            if (count == 0) {\n                zeros.Add(-1);\n                ones.Add(-1);\n            } else if (count > 0) {\n                if (zeros[count] == -1) {\n                    zeros[count] = i;\n                }\n            } else {\n                if (ones[-count] == -1) {\n                    ones[-count] = i;\n                }\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, count[0] - count[1]);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var n = str.Length;\n        var count = new int[n];\n        count[0] = str[0] == '0' ? 1 : -1;\n        for (var i = 1; i < n; i++) {\n            count[i] = count[i - 1] + (str[i] == '0' ? 1 : -1);\n        }\n        var min = 0;\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            if (count[i] < min) {\n                min = count[i];\n            }\n            if (count[i] > max) {\n                max = count[i];\n            }\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        var n = str.Length;\n        var count = new int[n];\n        count[0] = str[0] == '0' ? -1 : 1;\n        for (var i = 1; i < n; i++) {\n            count[i] = count[i - 1] + (str[i] == '0' ? -1 : 1);\n        }\n        var map = new Dictionary<int, int>();\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            if (count[i] == 0) {\n                max = i + 1;\n            }\n            if (!map.ContainsKey(count[i])) {\n                map[count[i]] = i;\n            }\n            if (map.ContainsKey(count[i])) {\n                max = Math.Max(max, i - map[count[i]]);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var n = str.Length;\n        var count = new int[n + 1];\n        var sum = 0;\n        for (var i = 0; i < n; i++) {\n            sum += str[i] == '1' ? 1 : -1;\n            count[i + 1] = sum;\n        }\n        var min = 0;\n        var max = 0;\n        for (var i = 0; i <= n; i++) {\n            if (count[i] < min) {\n                min = count[i];\n            }\n            if (count[i] - min > max) {\n                max = count[i] - min;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0;\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') z++;\n            else o++;\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zc = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int oc = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(zc - oc));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int max = 0;\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int maxLength = 0;\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n        }\n        return maxLength;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            count[i] = str[i] == '0' ? -1 : 1;\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            max = Math.Max(max, count[i]);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        int[] map = new int[max - min + 1];\n        for (int i = 0; i < n; i++) {\n            if (map[count[i] - min] == 0) {\n                map[count[i] - min] = i + 1;\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (map[count[i] - min] > 0) {\n                ans = Math.Max(ans, i + 1 - map[count[i] - min]);\n            }\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> d = new Dictionary<int, int>();\n        d[0] = -1;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (d.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - d[sum[i]]);\n            } else {\n                d[sum[i]] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n        }\n        long c = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                c++;\n            } else {\n                c--;\n            }\n            if (c == count) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n        }\n        return maxLength;",
    "        long maxLength = 0;\n        long count0 = 0;\n        long count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        return maxLength;",
    "        // Create a count array and initialize all values as 0\n        int[] count = new int[2];\n        // Consider first sub-string of length 1\n        int max_diff = 0;\n        // Consider all sub-strings ending at i\n        for (int i = 0; i < str.Length; i++) {\n            // If current character is '0', increment count[0]\n            // Else increment count[1]\n            count[str[i] - '0']++;\n            // Calculate the difference of count[0] and count[1]\n            int diff = Math.Abs(count[0] - count[1]);\n            // Update max_diff if required\n            max_diff = Math.Max(max_diff, diff);\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                zero[i] = zero[i - 1];\n                one[i] = one[i - 1] + 1;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long z = zero[j];\n                long o = one[j];\n                if (i > 0) {\n                    z -= zero[i - 1];\n                    o -= one[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            arr[i] = count;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                if (arr[j] - arr[i] == 0) {\n                    max = Math.Max(max, j - i + 1);\n                }\n            }\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[2];\n        int[] last = new int[2];\n        int[] first = new int[2];\n        for (int i = 0; i < 2; i++) {\n            last[i] = -1;\n            first[i] = n;\n        }\n        for (int i = 0; i < n; i++) {\n            int c = str[i] - '0';\n            count[c]++;\n            if (last[c] == -1) {\n                last[c] = i;\n            }\n            first[c] = Math.Min(first[c], i);\n        }\n        int max = 0;\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 2; j++) {\n                if (i == j) {\n                    continue;\n                }\n                max = Math.Max(max, count[i] + count[j]);\n                max = Math.Max(max, count[i] + n - first[j]);\n                max = Math.Max(max, count[j] + n - last[i]);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            int val = str[i] - '0';\n            count[val]++;\n            currLen++;\n            int diff = Math.Abs(count[0] - count[1]);\n            if (diff == 0) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            if (diff > maxDiff) {\n                maxDiff = diff;\n                maxLen = currLen;\n            } else if (diff == maxDiff) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            if (diff > prevDiff) {\n                currLen = 1;\n            }\n            prevDiff = diff;\n        }\n        return maxLen;",
    "        var n = str.Length;\n        var zeros = new int[n];\n        var ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = str[i] == '0' ? zeros[i - 1] + 1 : zeros[i - 1];\n            ones[i] = str[i] == '1' ? ones[i - 1] + 1 : ones[i - 1];\n        }\n        var max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                var z = i == 0 ? zeros[j] : zeros[j] - zeros[i - 1];\n                var o = i == 0 ? ones[j] : ones[j] - ones[i - 1];\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, maxDiff);\n            }\n        }\n        return maxLen;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int cur = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                cur--;\n            } else {\n                cur++;\n            }\n            count[i] = cur;\n            max = Math.Max(max, cur);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        for (int i = 0; i < n; i++) {\n            if (count[i] == 0) {\n                max = i + 1;\n                max_index = i;\n            }\n            if (map.ContainsKey(count[i])) {\n                if (max < i - map[count[i]]) {\n                    max = i - map[count[i]];\n                    max_index = i;\n                }\n            } else {\n                map.Add(count[i], i);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        long maxLength = 0;\n        long count0 = 0;\n        long count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 * 2);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 * 2);\n            }\n        }\n        return maxLength;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[2];\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n        }\n        return maxDiff;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < str.Length; i++) {\n            zeros[i] = str[i] == '0' ? zeros[i - 1] + 1 : zeros[i - 1];\n            ones[i] = str[i] == '1' ? ones[i - 1] + 1 : ones[i - 1];\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[2];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            for (int j = i + 1; j < n; j++) {\n                count[str[j] - '0']++;\n                max = Math.Max(max, Math.Abs(count[0] - count[1]));\n            }\n            count[0] = 0;\n            count[1] = 0;\n        }\n        return max;",
    "        // Create a hash table to store the count of 0s and 1s\n        Dictionary<int, int> hash = new Dictionary<int, int>();\n        // Initialize the count of 0s and 1s to 0\n        int count0 = 0;\n        int count1 = 0;\n        // Initialize the maximum difference to 0\n        int maxDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is 0, increment the count of 0s\n            if (str[i] == '0') {\n                count0++;\n            }\n            // If the current character is 1, increment the count of 1s\n            else {\n                count1++;\n            }\n            // If the difference between the count of 0s and 1s is 0, then the sub-string is balanced\n            if (count0 - count1 == 0) {\n                // Update the maximum difference\n                maxDiff = Math.Max(maxDiff, i + 1);\n            }\n            // If the difference between the count of 0s and 1s is not 0, then the sub-string is not balanced\n            else {\n                // If the difference between the count of 0s and 1s is not in the hash table, add it\n                if (!hash.ContainsKey(count0 - count1)) {\n                    hash.Add(count0 - count1, i);\n                }\n                // If the difference between the count of 0s and 1s is in the hash table, update the maximum difference\n                else {\n                    maxDiff = Math.Max(maxDiff, i - hash[count0 - count1]);\n                }\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the current difference\n        long currDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 1, increment the current difference\n            if (str[i] == '1') {\n                currDiff++;\n            }\n            // If the current character is a 0, decrement the current difference\n            else {\n                currDiff--;\n            }\n            // If the current difference is less than 0, set it to 0\n            if (currDiff < 0) {\n                currDiff = 0;\n            }\n            // If the current difference is greater than the maximum difference, set the maximum difference to the current difference\n            if (currDiff > maxDiff) {\n                maxDiff = currDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_len = 0;\n        int curr_len = 0;\n        int max_count = 0;\n        int prev_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_len++;\n            if (count[0] == count[1]) {\n                max_len = Math.Max(max_len, curr_len);\n                count[0] = count[1] = 0;\n                curr_len = 0;\n            }\n        }\n        if (count[0] != count[1]) {\n            max_count = Math.Max(count[0], count[1]);\n            prev_diff = Math.Abs(count[0] - count[1]);\n        }\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']--;\n            curr_len--;\n            if (curr_len == max_count - 1 && Math.Abs(count[0] - count[1]) == prev_diff - 1) {\n                max_len = Math.Max(max_len, curr_len);\n            }\n        }\n        return max_len;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0, o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') z++;\n            else o++;\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zc = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                int oc = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                max = Math.Max(max, Math.Abs(zc - oc));\n            }\n        }\n        return max;",
    "        // Initialize result\n        long result = 0;\n        // Initialize left and right indexes\n        int n = str.Length;\n        int i = 0, j = 0;\n        // Initialize left and right counts\n        int zeroCount = 0, oneCount = 0;\n        // Traverse through the string\n        while (j < n) {\n            // If current character is '0', increment zeroCount\n            if (str[j] == '0')\n                zeroCount++;\n            // If current character is '1', increment oneCount\n            else\n                oneCount++;\n            // If there are more 0s than 1s, update result\n            if (zeroCount == oneCount)\n                result = Math.Max(result, j - i + 1);\n            // If there are more 1s than 0s, update result\n            else if (zeroCount > oneCount) {\n                while (i < j && zeroCount > oneCount) {\n                    if (str[i] == '0')\n                        zeroCount--;\n                    else\n                        oneCount--;\n                    i++;\n                }\n                result = Math.Max(result, j - i + 1);\n            }\n            j++;\n        }\n        return result;",
    "        long maxLength = 0;\n        long count = 0;\n        long zeros = 0;\n        long ones = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count = Math.Abs(zeros - ones);\n            maxLength = Math.Max(maxLength, count);\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0)\n                curr_diff = -curr_diff;\n            if (curr_diff > max_diff)\n                max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        int prevDiff = 0;\n        int start = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            int currDiff = Math.Abs(count[0] - count[1]);\n            if (currDiff == 0) {\n                maxLen = i + 1;\n                start = 0;\n            } else if (currDiff > maxDiff) {\n                maxLen = i - start + 1;\n                maxDiff = currDiff;\n            } else if (currDiff == prevDiff) {\n                maxLen = Math.Max(maxLen, i - start + 1);\n            } else if (currDiff < prevDiff) {\n                start = i;\n            }\n            prevDiff = currDiff;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        int currDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currDiff = count[0] - count[1];\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (maxDiff == currDiff) {\n                maxLen = Math.Max(maxLen, i + 1);\n            } else if (Math.Abs(currDiff) > maxDiff) {\n                maxDiff = Math.Abs(currDiff);\n                maxLen = i + 1;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the current difference\n        long currDiff = 0;\n        // For each character in the string\n        foreach (char c in str) {\n            // If the character is a 1\n            if (c == '1') {\n                // Increment the current difference\n                currDiff++;\n            }\n            // Otherwise\n            else {\n                // Decrement the current difference\n                currDiff--;\n            }\n            // If the current difference is less than 0\n            if (currDiff < 0) {\n                // Set the current difference to 0\n                currDiff = 0;\n            }\n            // If the current difference is greater than the maximum difference\n            if (currDiff > maxDiff) {\n                // Set the maximum difference to the current difference\n                maxDiff = currDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '1') {\n                count++;\n            }\n            arr[i] = count;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long diff = Math.Abs(arr[j] - arr[i] + (str[i] == '1' ? 1 : 0));\n                max = Math.Max(max, diff);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        right[n - 1] = arr[n - 1];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, Math.Abs(left[i] - right[i]));\n        }\n        return max;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        var max = 0;\n        var current = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                current++;\n            } else {\n                current--;\n            }\n            max = Math.Max(max, current);\n        }\n        return max;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros.Add(i);\n            } else {\n                ones.Add(i);\n            }\n        }\n        var z = 0;\n        var o = 0;\n        while (z < zeros.Count && o < ones.Count) {\n            max = Math.Max(max, Math.Abs(zeros[z] - ones[o]));\n            if (zeros[z] < ones[o]) {\n                z++;\n            } else {\n                o++;\n            }\n        }\n        return max;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the current difference\n        long currDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 0\n            if (str[i] == '0') {\n                // Decrement the current difference\n                currDiff--;\n            }\n            // If the current character is a 1\n            else {\n                // Increment the current difference\n                currDiff++;\n            }\n            // If the current difference is less than 0\n            if (currDiff < 0) {\n                // Set the current difference to 0\n                currDiff = 0;\n            }\n            // If the current difference is greater than the maximum difference\n            if (currDiff > maxDiff) {\n                // Set the maximum difference to the current difference\n                maxDiff = currDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxDiff = Math.Max(maxDiff, count[0] - count[1]);\n            if (maxDiff == prevDiff) {\n                currLen++;\n            } else {\n                maxLen = Math.Max(maxLen, currLen);\n                currLen = 1;\n                prevDiff = maxDiff;\n            }\n        }\n        maxLen = Math.Max(maxLen, currLen);\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int zeroCount = 0;\n        int oneCount = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeroCount++;\n            } else {\n                oneCount++;\n            }\n            zeros[i] = zeroCount;\n            ones[i] = oneCount;\n        }\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeroCountInSubstring = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                int oneCountInSubstring = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                maxDiff = Math.Max(maxDiff, Math.Abs(zeroCountInSubstring - oneCountInSubstring));\n            }\n        }\n        return maxDiff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int i = 0;\n        while (i < n) {\n            if (str[i] == '0') {\n                count[0]++;\n            } else {\n                count[1]++;\n            }\n            int currDiff = count[0] - count[1];\n            if (currDiff == prevDiff) {\n                currLen++;\n            } else {\n                maxLen = Math.Max(maxLen, currLen);\n                currLen = 1;\n                prevDiff = currDiff;\n            }\n            i++;\n        }\n        maxLen = Math.Max(maxLen, currLen);\n        return maxLen;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int n = str.Length;\n        int left = 0, right = 0;\n\n        // Initialize left and right frequency\n        int[] freq = new int[2];\n        freq[str[0] - '0']++;\n\n        // Start from second element\n        while (right < n) {\n            // If frequency of current right element is 0\n            if (freq[0] == freq[1]) {\n                // Update result if required\n                result = Math.Max(result, right - left + 1);\n\n                // Increment left index and update frequency\n                freq[str[left] - '0']--;\n                left++;\n            } else {\n                // Increment right index and update frequency\n                right++;\n                if (right < n)\n                    freq[str[right] - '0']++;\n            }\n        }\n\n        // Return result\n        return result;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int max = 0;\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        // We can use a sliding window approach to solve this problem.\n        // We will keep track of the number of 0s and 1s in the current window.\n        // If the number of 0s and 1s are equal, we will update the maximum difference.\n        // If the number of 0s and 1s are not equal, we will move the window to the right.\n        // We will keep track of the number of 0s and 1s in the current window.\n        int zeros = 0;\n        int ones = 0;\n        // We will keep track of the maximum difference between the number of 0s and 1s.\n        long maxDiff = 0;\n        // We will keep track of the number of 0s and 1s in the current window.\n        int left = 0;\n        int right = 0;\n        // We will keep track of the number of 0s and 1s in the current window.\n        while (right < str.Length) {\n            // If the current character is a 0, we will increment the number of 0s.\n            if (str[right] == '0') {\n                zeros++;\n            }\n            // If the current character is a 1, we will increment the number of 1s.\n            else {\n                ones++;\n            }\n            // If the number of 0s and 1s are equal, we will update the maximum difference.\n            if (zeros == ones) {\n                maxDiff = Math.Max(maxDiff, zeros + ones);\n            }\n            // If the number of 0s and 1s are not equal, we will move the window to the right.\n            else {\n                // We will move the left pointer to the right until the number of 0s and 1s are equal.\n                while (zeros != ones && left <= right) {\n                    // If the current character is a 0, we will decrement the number of 0s.\n                    if (str[left] == '0') {\n                        zeros--;\n                    }\n                    // If the current character is a 1, we will decrement the number of 1s.\n                    else {\n                        ones--;\n                    }\n                    // We will move the left pointer to the right.\n                    left++;\n                }\n            }\n            // We will move the",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxCount = Math.Max(maxCount, count[0] - count[1]);\n            if (prevDiff == (count[0] - count[1])) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            else {\n                prevDiff = count[0] - count[1];\n                currLen = 1;\n            }\n        }\n        if (maxCount == 0) {\n            return n;\n        }\n        return maxLen;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        right[n - 1] = arr[n - 1];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int min = int.MaxValue;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, Math.Abs(left[i] - right[i]));\n        }\n        return min;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] pre = new int[n];\n        pre[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            pre[i] = pre[i - 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int cur = pre[j] - (i == 0 ? 0 : pre[i - 1]);\n                max = Math.Max(max, Math.Abs(cur - (j - i + 1 - cur)));\n            }\n        }\n        return max;",
    "        // Create a count array to store count of 0s and 1s\n        int[] count = new int[2];\n        // Initialize result\n        long result = 0;\n        // Initialize count of 0s and 1s\n        count[0] = 0;\n        count[1] = 0;\n        // Traverse the given string\n        for (int i = 0; i < str.Length; i++) {\n            // Increment count of current character\n            count[str[i] - '0']++;\n            // Calculate maximum difference between count of 0s and 1s\n            result = Math.Max(result, Math.Abs(count[0] - count[1]));\n        }\n        return result;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, Math.Abs(curr_diff));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int curr = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                curr++;\n            } else {\n                curr--;\n            }\n            if (curr == 0) {\n                max = i + 1;\n            }\n            if (curr < 0) {\n                curr = 0;\n            }\n        }\n        curr = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                curr++;\n            } else {\n                curr--;\n            }\n            if (curr == 0) {\n                max = Math.Max(max, n - i);\n            }\n            if (curr < 0) {\n                curr = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLength = 0;\n        int currLength = 0;\n        int i = 0;\n        while (i < n) {\n            count[str[i] - '0']++;\n            if (count[0] == count[1]) {\n                maxLength = Math.Max(maxLength, currLength);\n                currLength = 0;\n            } else {\n                currLength++;\n            }\n            i++;\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        count[0] = str[0] == '0' ? -1 : 1;\n        for (int i = 1; i < n; i++) {\n            count[i] = count[i - 1] + (str[i] == '0' ? -1 : 1);\n        }\n        Dictionary<int, int> dict = new Dictionary<int, int>();\n        dict[count[0]] = 0;\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n            if (count[i] == 0) {\n                max = i + 1;\n            }\n            if (!dict.ContainsKey(count[i])) {\n                dict[count[i]] = i;\n            } else {\n                max = Math.Max(max, i - dict[count[i]]);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var n = str.Length;\n        var count = 0;\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        long zeros = 0;\n        long ones = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count = Math.Abs(zeros - ones);\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1] + 1;\n            }\n        }\n        var max = 0L;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                var z = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                var o = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                var diff = Math.Abs(z - o);\n                if (diff > max) {\n                    max = diff;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            if (count[i] > max) {\n                max = count[i];\n            }\n            if (count[i] < min) {\n                min = count[i];\n            }\n        }\n        int[] count2 = new int[max - min + 1];\n        for (int i = 0; i < n; i++) {\n            count2[count[i] - min]++;\n        }\n        int max2 = 0;\n        for (int i = 0; i < count2.Length; i++) {\n            if (count2[i] > max2) {\n                max2 = count2[i];\n            }\n        }\n        return max2;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '1') {\n                count[i] = 1;\n            } else {\n                count[i] = -1;\n            }\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            max = Math.Max(max, count[i]);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        // Write your code here\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the number of 0s\n        long numZeros = 0;\n        // Create a variable to store the number of 1s\n        long numOnes = 0;\n        // Create a variable to store the current difference\n        long currDiff = 0;\n        // Loop through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 0\n            if (str[i] == '0') {\n                // Increment the number of 0s\n                numZeros++;\n            }\n            // If the current character is a 1\n            else {\n                // Increment the number of 1s\n                numOnes++;\n            }\n            // Calculate the current difference\n            currDiff = numZeros - numOnes;\n            // If the current difference is less than 0\n            if (currDiff < 0) {\n                // Reset the number of 0s\n                numZeros = 0;\n                // Reset the number of 1s\n                numOnes = 1;\n                // Reset the current difference\n                currDiff = -1;\n            }\n            // If the current difference is greater than the maximum difference\n            if (currDiff > maxDiff) {\n                // Set the maximum difference to the current difference\n                maxDiff = currDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int zeroCount = 0;\n        int oneCount = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeroCount++;\n            } else {\n                oneCount++;\n            }\n            zeros[i] = zeroCount;\n            ones[i] = oneCount;\n        }\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zerosInSubstring = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int onesInSubstring = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                maxDiff = Math.Max(maxDiff, Math.Abs(zerosInSubstring - onesInSubstring));\n            }\n        }\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] diff = new int[n];\n        for (int i = 0; i < n; i++) {\n            diff[i] = arr[i] == 0 ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = diff[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + diff[i];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        map.Add(0, -1);\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - map[sum[i]]);\n            } else {\n                map.Add(sum[i], i);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        long zeros = 0;\n        long ones = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count = Math.Abs(zeros - ones);\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        long max = 0;\n        long count = 0;\n        long zeros = 0;\n        long ones = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count = Math.Abs(zeros - ones);\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                count[str[j] - '0']++;\n                if (count[0] == count[1]) {\n                    max = Math.Max(max, j - i + 1);\n                }\n            }\n            count[0] = count[1] = 0;\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var n = str.Length;\n        var count = new int[n];\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            count[i] = str[i] == '0' ? -1 : 1;\n            max = Math.Max(max, count[i]);\n        }\n        for (var i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n            max = Math.Max(max, count[i]);\n        }\n        return max;",
    "        // Write your code here\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxCount = Math.Max(maxCount, count[0] - count[1]);\n            if (prevDiff == (count[0] - count[1])) {\n                maxLen = Math.Max(maxLen, currLen);\n            } else {\n                maxLen = Math.Max(maxLen, currLen - 1);\n            }\n            prevDiff = count[0] - count[1];\n        }\n        if (maxCount == 0) {\n            return n;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, maxDiff);\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            int currDiff = Math.Abs(count[0] - count[1]);\n            if (currDiff == 0) {\n                maxLen = Math.Max(maxLen, i + 1);\n            } else if (currDiff == 1) {\n                if (prevDiff == currDiff) {\n                    currLen++;\n                } else {\n                    currLen = 2;\n                }\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            prevDiff = currDiff;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n            max = Math.Max(max, count);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == min) {\n                return i + 1;\n            }\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        return -1;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                one[i] = one[i - 1] + 1;\n                zero[i] = zero[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = zero[j] - (i > 0 ? zero[i - 1] : 0);\n                int ones = one[j] - (i > 0 ? one[i - 1] : 0);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int c = count[j] - (i == 0 ? 0 : count[i - 1]);\n                if (c < min) {\n                    min = c;\n                }\n                if (c > max) {\n                    max = c;\n                }\n            }\n        }\n        return max - min + 1;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        map.Add(0, -1);\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - map[sum[i]]);\n            } else {\n                map.Add(sum[i], i);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                arr[i] = -1;\n            } else {\n                arr[i] = 1;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long sum = 0;\n                for (int k = i; k <= j; k++) {\n                    sum += arr[k];\n                }\n                max = Math.Max(max, Math.Abs(sum));\n            }\n        }\n        return max;",
    "        // Create a count array and initialize all values as 0\n        int[] count = new int[2];\n        // Initialize max_diff with 0. This is the result\n        int max_diff = 0;\n        // Initialize count of zeroes and ones in current window as 0\n        int count_zero = 0, count_one = 0;\n        // Traverse through the string\n        for (int i = 0; i < str.Length; i++) {\n            // Increment count of current character\n            count[str[i] - '0']++;\n            // If there are more zeroes, then increment count_zero.\n            // Else increment count_one\n            if (str[i] == '0')\n                count_zero++;\n            else\n                count_one++;\n            // Update the maximum difference of the count of zeroes and ones\n            // in any sub-string seen so far\n            max_diff = Math.Max(max_diff, Math.Abs(count_zero - count_one));\n        }\n        return max_diff;",
    "        var n = str.Length;\n        var count = new int[n];\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            count[i] = str[i] == '0' ? 1 : -1;\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            max = Math.Max(max, Math.Abs(count[i]));\n        }\n        var map = new Dictionary<int, int>();\n        for (var i = 0; i < n; i++) {\n            if (map.ContainsKey(count[i])) {\n                max = Math.Max(max, i - map[count[i]]);\n            } else {\n                map[count[i]] = i;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, Math.Abs(curr_diff));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int curr = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                curr++;\n            } else {\n                curr--;\n            }\n            count[i] = curr;\n            max = Math.Max(max, curr);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int i = 0;\n        while (i < n) {\n            if (str[i] == '0')\n                count[0]++;\n            else\n                count[1]++;\n            int currDiff = Math.Abs(count[0] - count[1]);\n            if (currDiff == 0) {\n                currLen = i + 1;\n            } else if (currDiff > prevDiff) {\n                currLen = i - prevDiff;\n            } else if (currDiff < prevDiff) {\n                currLen = i - currDiff;\n            }\n            maxLen = Math.Max(maxLen, currLen);\n            prevDiff = currDiff;\n            i++;\n        }\n        return maxLen;",
    "        var max = 0L;\n        var count = 0L;\n        var zeros = 0L;\n        var ones = 0L;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count = Math.Abs(zeros - ones);\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        var n = str.Length;\n        var zeros = new int[n];\n        var ones = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n            }\n            if (str[i] == '1') {\n                ones[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            zeros[i] += zeros[i - 1];\n            ones[i] += ones[i - 1];\n        }\n        var max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                var z = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                var o = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int n = str.Length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        // To store counts of 0s and 1s\n        int count0 = 0, count1 = 0;\n\n        // Initialize first value in left[]\n        // with number of 0s in str[0..i]\n        if (str[0] == '0') {\n            left[0] = 1;\n            count0 = 1;\n        }\n        else {\n            left[0] = 0;\n            count1 = 1;\n        }\n\n        // Fill left[] (Note that left[i]\n        // contains count of 0s in str[0..i])\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                left[i] = left[i - 1] + 1;\n                count0++;\n            }\n            else {\n                left[i] = left[i - 1];\n                count1++;\n            }\n        }\n\n        // Initialize last value in right[]\n        // with number of 0s in str[i..n-1]\n        if (str[n - 1] == '0') {\n            right[n - 1] = 1;\n            count0++;\n        }\n        else {\n            right[n - 1] = 0;\n            count1++;\n        }\n\n        // Fill right[] (Note that right[i]\n        // contains count of 0s in str[i..n-1])\n        for (int i = n - 2; i >= 0; i--) {\n            if (str[i] == '0') {\n                right[i] = right[i + 1] + 1;\n                count0++;\n            }\n            else {\n                right[i] = right[i + 1];\n                count1++;\n            }\n        }\n\n        // Find the maximum difference of zeros\n        // and ones by comparing left[] and right[]\n        for (int i = 0; i < n; i++) {\n            result = Math.Max(result,",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLength = 0;\n        int currLength = 0;\n        int maxCount = 0;\n        int minCount = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxCount = Math.Max(maxCount, count[str[i] - '0']);\n            minCount = Math.Min(minCount, count[str[i] - '0']);\n            if (maxCount - minCount == 1) {\n                currLength++;\n            } else {\n                maxLength = Math.Max(maxLength, currLength);\n                currLength = 0;\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        int currDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currDiff = count[0] - count[1];\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (maxDiff == currDiff) {\n                maxLen = Math.Max(maxLen, i + 1);\n            } else if (Math.Abs(currDiff) > Math.Abs(maxDiff)) {\n                maxDiff = currDiff;\n                maxLen = i + 1;\n            }\n        }\n        return maxLen;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Create a hash table to store the count of 0s and 1s\n        Dictionary<int, int> hash = new Dictionary<int, int>();\n        // Initialize the count of 0s and 1s\n        int count0 = 0;\n        int count1 = 0;\n        // Initialize the max length\n        int maxLength = 0;\n        // Initialize the difference between the count of 0s and 1s\n        int diff = 0;\n        // Iterate over the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is 0\n            if (str[i] == '0') {\n                // Increment the count of 0s\n                count0++;\n            }\n            // If the current character is 1\n            else {\n                // Increment the count of 1s\n                count1++;\n            }\n            // Calculate the difference between the count of 0s and 1s\n            diff = count0 - count1;\n            // If the difference is 0\n            if (diff == 0) {\n                // Update the max length\n                maxLength = i + 1;\n            }\n            // If the difference is not 0\n            else {\n                // If the hash table contains the difference\n                if (hash.ContainsKey(diff)) {\n                    // Update the max length\n                    maxLength = Math.Max(maxLength, i - hash[diff]);\n                }\n                // If the hash table does not contain the difference\n                else {\n                    // Add the difference to the hash table\n                    hash.Add(diff, i);\n                }\n            }\n        }\n        // Return the max length\n        return maxLength;",
    "        int maxLength = 0;\n        int count = 0;\n        int n = str.Length;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n        }\n        count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n            if (curr_diff < 0) {\n                curr_diff = 0;\n                count[0] = 0;\n                count[1] = 0;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, Math.Abs(curr_diff));\n        }\n        return max_diff;",
    "        // The number of 0s and 1s in the current substring\n        int zeros = 0, ones = 0;\n        // The maximum difference between the number of 0s and 1s in any substring\n        int maxDiff = 0;\n        // The length of the longest substring with equal number of 0s and 1s\n        int maxLength = 0;\n        // The number of 0s and 1s in the longest substring with equal number of 0s and 1s\n        int maxZeros = 0, maxOnes = 0;\n        // The number of 0s and 1s in the current substring\n        int currZeros = 0, currOnes = 0;\n        // The length of the current substring with equal number of 0s and 1s\n        int currLength = 0;\n        // The number of 0s and 1s in the current substring with equal number of 0s and 1s\n        int currMaxZeros = 0, currMaxOnes = 0;\n        // The number of 0s and 1s in the previous substring with equal number of 0s and 1s\n        int prevZeros = 0, prevOnes = 0;\n        // The length of the previous substring with equal number of 0s and 1s\n        int prevLength = 0;\n        // The number of 0s and 1s in the previous substring with equal number of 0s and 1s\n        int prevMaxZeros = 0, prevMaxOnes = 0;\n        // The number of 0s and 1s in the previous substring\n        int prevZeros2 = 0, prevOnes2 = 0;\n        // The length of the previous substring\n        int prevLength2 = 0;\n        // The number of 0s and 1s in the previous substring\n        int prevMaxZeros2 = 0, prevMaxOnes2 = 0;\n        // The number of 0s and 1s in the previous substring\n        int prevZeros3 = 0, prevOnes3 = 0;\n        // The length of the previous substring\n        int prevLength3 = 0;\n        // The number of 0s and 1s in the previous substring\n        int prevMaxZeros3 = 0, prevMaxOnes3 = 0;\n       ",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxCount = Math.Max(maxCount, count[str[i] - '0']);\n            currLen++;\n            int diff = Math.Abs(count[0] - count[1]);\n            if (diff == 0) {\n                maxLen = Math.Max(maxLen, currLen);\n            } else if (prevDiff == diff) {\n                maxLen = Math.Max(maxLen, currLen - 1);\n            }\n            prevDiff = diff;\n        }\n        return maxCount + maxLen - 1;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;"
  ]
}