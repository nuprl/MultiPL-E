{
  "name": "mbpp_125_find_length",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Create a count array and initialize all values as 0\n        int[] count = new int[2];\n\n        // Consider all sub-strings starting from i\n        for (int i = 0; i < str.Length; i++) {\n            // Reset count array\n            count[0] = 0;\n            count[1] = 0;\n\n            // Consider all sub-strings ending at j\n            for (int j = i; j < str.Length; j++) {\n                // Increment count of current character\n                count[str[j] - '0']++;\n\n                // If difference between count of 0s and 1s is\n                // atmost 1, then increment answer\n                if (Math.Abs(count[0] - count[1]) <= 1) {\n                    max_len = Math.Max(max_len, j - i + 1);\n                }\n            }\n        }\n        return max_len;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        right[n - 1] = arr[n - 1];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int l = i == 0 ? 0 : left[i - 1];\n                int r = j == n - 1 ? 0 : right[j + 1];\n                int zeros = l + (right[j] - right[i]);\n                int ones = r + (left[j] - left[i]);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int curr = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                curr--;\n            } else {\n                curr++;\n            }\n            count[i] = curr;\n            max = Math.Max(max, curr);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_len = 0;\n        int min_len = 0;\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_len = Math.Max(max_len, count[str[i] - '0']);\n            min_len = Math.Min(min_len, count[str[i] - '0']);\n            max_diff = Math.Max(max_diff, max_len - min_len);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            if (count[0] == count[1]) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            else {\n                int diff = count[0] - count[1];\n                if (prevDiff == diff) {\n                    maxLen = Math.Max(maxLen, currLen);\n                }\n                else {\n                    maxLen = Math.Max(maxLen, currLen - 1);\n                }\n                prevDiff = diff;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] diff = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                diff[i] = arr[i];\n            } else {\n                diff[i] = diff[i - 1] + arr[i];\n            }\n        }\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            count[diff[i]]++;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (count[i] > 0) {\n                max = Math.Max(max, count[i]);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr",
    "        var count = 0;\n        var max = 0;\n        var map = new Dictionary<int, int>();\n        map[0] = -1;\n        for (var i = 0; i < str.Length; i++) {\n            count += str[i] == '0' ? 1 : -1;\n            if (map.ContainsKey(count)) {\n                max = Math.Max(max, i - map[count]);\n            } else {\n                map[count] = i;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n            if (curr_diff < 0) {\n                curr_diff = 0;\n            }\n        }\n        return max_diff;"
  ]
}