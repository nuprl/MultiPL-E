{
  "name": "mbpp_765_is_polite",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    public static long IsPolite(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPolite((7L)) == (11L));\n    Debug.Assert(IsPolite((4L)) == (7L));\n    Debug.Assert(IsPolite((9L)) == (13L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 1) return 1;\n        long i = 2;\n        long count = 0;\n        while (true) {\n            if (n == count) return i - 1;\n            if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0) count++;\n            i++;\n        }",
    "        long i = 1;\n        while (n % i != 0) {\n            i++;\n        }\n        return i;",
    "        long i = 1;\n        while (n > 0) {\n            if (n % i == 0) {\n                n -= i;\n            }\n            i++;\n        }\n        return n;",
    "        long i = 1;\n        while (n > 0) {\n            if (n % i == 0) {\n                n -= i;\n            }\n            i++;\n        }\n        return n == 0 ? i - 1 : -1;",
    "        long i = 1;\n        while (true) {\n            long j = n * i + 1;\n            if (IsPrime(j)) {\n                return j;\n            }\n            i++;\n        }",
    "        long count = 0;\n        long i = 1;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n            }\n            i++;\n        }\n        return i - 1;",
    "        long i = 1;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n            }\n            i++;\n        }\n        return i - 1;",
    "        long i = 1;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return -1;",
    "        long i = 1;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return 0;",
    "        long sqrt = (long)Math.Sqrt(n);\n        for (long i = 2; i <= sqrt; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;",
    "        long count = 0;\n        long i = 1;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return 0;",
    "        long i = 1;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return -1;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        long i = 1;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return -1;",
    "        long count = 0;\n        long i = 1;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            i++;\n        }\n        return -1;",
    "        long i = 1;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n            }\n            i++;\n        }\n        return i - 1;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n            }\n        }\n        return count;",
    "        // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n        // For example, 28 = 5 + 6 + 7 + 8 + 9.\n        // The first few polite numbers are:\n        // 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233",
    "        if (n == 1) return 1;\n        long i = 2;\n        long count = 0;\n        while (count < n) {\n            if (IsPrime(i)) {\n                count++;\n                if (count == n) return i;\n            }\n            i++;\n        }\n        return 0;"
  ]
}