{
  "name": "mbpp_120_max_product_tuple",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    public static long MaxProductTuple(List<long> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProductTuple((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (36L));\n    Debug.Assert(MaxProductTuple((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (200L));\n    Debug.Assert(MaxProductTuple((new List<long>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (484L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long maxProduct = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > maxProduct) {\n                    maxProduct = product;\n                }\n            }\n        }\n        return maxProduct;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long prod = Math.Abs(list1[i] * list1[j]);\n                if (prod > max) {\n                    max = prod;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long maxProduct = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > maxProduct) {\n                    maxProduct = product;\n                }\n            }\n        }\n        return maxProduct;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long maxProduct = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = list1[i] * list1[j];\n                if (product > maxProduct) {\n                    maxProduct = product;\n                }\n            }\n        }\n        return maxProduct;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i + 1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            for (int j = i+1; j < list1.Count; j++) {\n                long product = Math.Abs(list1[i] * list1[j]);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;"
  ]
}