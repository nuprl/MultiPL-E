{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to reverse an array upto a given position.\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)5L, (long)6L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)4L, (long)6L, (long)7L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)6L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                output.Insert(0, input[i]);\n            } else {\n                output.Add(input[i]);\n            }\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < input.Count; i++) {\n            if (i < k) {\n                result.Insert(0, input[i]);\n            } else {\n                result.Add(input[i]);\n            }\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        var output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(input[(int)k - 1 - i]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            result.Add(input[i]);\n        }\n        return result;",
    "        var reversed = new List<long>();\n        for (int i = 0; i < k; i++) {\n            reversed.Add(input[i]);\n        }\n        reversed.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            reversed.Add(input[i]);\n        }\n        return reversed;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - 1 - (int)i]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (long i = 0; i < k; i++) {\n            output.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            output.Add(input[(int)i]);\n        }\n        return output;",
    "        var output = new List<long>();\n        var reversed = input.Take((int)k).Reverse().ToList();\n        output.AddRange(reversed);\n        output.AddRange(input.Skip((int)k));\n        return output;",
    "        if (k > input.Count) {\n            throw new ArgumentOutOfRangeException(\"k\", \"k cannot be greater than the length of the array\");\n        }\n        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)(k - i - 1)]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)(i)]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[i]);\n        }\n        output.Reverse();\n        for (int i = k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < k; i++) {\n            result.Add(input[(int)k - (int)i - 1]);\n        }\n        for (long i = k; i < input.Count; i++) {\n            result.Add(input[(int)i]);\n        }\n        return result;",
    "        List<long> output = new List<long>();\n        for (int i = 0; i < k; i++) {\n            output.Add(input[(int)k - i - 1]);\n        }\n        for (int i = (int)k; i < input.Count; i++) {\n            output.Add(input[i]);\n        }\n        return output;"
  ]
}