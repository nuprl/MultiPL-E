{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[index] < a[i]) {\n                ans = Math.Max(ans, a[index] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo35j3f6o.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo35j3f6o.cs(14,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo35j3f6o.cs(15,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        if (a[index] < a[k]) {\n            max = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index];\n        }\n        max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvoc3g680.cs(15,15): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvoc3g680.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvoc3g680.cs(16,66): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        max += a[k];\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwo61p5ti.cs(28,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index; i < k; i++) {\n            if (maxSum < dp[i]) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxr31xj82.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxr31xj82.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxr31xj82.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxr31xj82.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxr31xj82.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxr31xj82.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7s745667.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            if (maxIndex == index) {\n                sum += a[k];\n            }\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3j6gsa71.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(20,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(21,43): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(38,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3j6gsa71.cs(40,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdlc0_r4x.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdlc0_r4x.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdlc0_r4x.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdlc0_r4x.cs(16,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdlc0_r4x.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp15kssgq8.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(27,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] > a[index]) {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0z3kn47w.cs(20,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0z3kn47w.cs(20,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0z3kn47w.cs(21,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n            else {\n                sum = 0;\n            }\n        }\n        return maxSum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwum9ovl5.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwum9ovl5.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwum9ovl5.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwum9ovl5.cs(25,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwum9ovl5.cs(13,14): warning CS0219: The variable 'max' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long ans = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                ans = MaxSumIncreasingSubseq(a, n, i, k);\n                if (ans > max) {\n                    max = ans;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplry0ou4q.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplry0ou4q.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplry0ou4q.cs(21,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long max_sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max_sum) {\n                    max_sum = sum;\n                }\n            }\n        }\n        return max_sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpam6_q5rs.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpam6_q5rs.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpam6_q5rs.cs(15,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i <= index; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (int i = (int)index + 1; i < n; i++) {\n            if (a[i] > a[k]) {\n                max += a[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd6rpqa1x.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (k < index) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpig8r722d.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpig8r722d.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpig8r722d.cs(23,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6oq_ebii.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return a[k] + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyfymgoji.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyfymgoji.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyfymgoji.cs(20,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq8mjr8hw.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm1hhalrr.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] < a[(int)k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <32d7217d1db7495a9a817f84e5372271>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <32d7217d1db7495a9a817f84e5372271>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6xrgmeu9.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6xrgmeu9.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6xrgmeu9.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6xrgmeu9.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6xrgmeu9.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6xrgmeu9.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyh5l375v.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyh5l375v.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyh5l375v.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyh5l375v.cs(16,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyh5l375v.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1aizvpuz.cs(12,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1aizvpuz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1aizvpuz.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1aizvpuz.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1aizvpuz.cs(17,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        if (index == k) {\n            return a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        if (a[(int)index] < a[(int)k]) {\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return Math.Max(a[(int)index] + MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, k));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d2e26cc2bb43b4b86a7e6df45271d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <81d2e26cc2bb43b4b86a7e6df45271d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7lf0fni_.cs(15,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7lf0fni_.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo0pj6j57.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo0pj6j57.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo0pj6j57.cs(21,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv4b2b8zk.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv4b2b8zk.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv4b2b8zk.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv4b2b8zk.cs(16,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv4b2b8zk.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq8mjr8hw.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdxynuib.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdxynuib.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdxynuib.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdxynuib.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdxynuib.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdxynuib.cs(26,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl7gi5uhu.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpl7gi5uhu.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpl7gi5uhu.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpl7gi5uhu.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpl7gi5uhu.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpl7gi5uhu.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = a[index];\n        long maxSumTillNow = a[index];\n        for (long i = index + 1; i <= k; i++) {\n            if (a[i] > a[i - 1]) {\n                maxSumTillNow += a[i];\n            } else {\n                maxSumTillNow = a[i];\n            }\n            if (maxSumTillNow > maxSum) {\n                maxSum = maxSumTillNow;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvuymkod8.cs(11,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvuymkod8.cs(12,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvuymkod8.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvuymkod8.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvuymkod8.cs(15,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvuymkod8.cs(17,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long maxSum = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkt4wciw9.cs(13,19): error CS0136: A local or parameter named 'i' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpkt4wciw9.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkt4wciw9.cs(17,19): error CS0136: A local or parameter named 'i' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpkt4wciw9.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkt4wciw9.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkt4wciw9.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkt4wciw9.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkt4wciw9.cs(27,19): error CS0136: A local or parameter named 'i' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmpkt4wciw9.cs(36,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 0; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_cit7l1w.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_cit7l1w.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_cit7l1w.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_cit7l1w.cs(18,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_cit7l1w.cs(19,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_cit7l1w.cs(29,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i <= index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm1hhalrr.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpm1hhalrr.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i <= k) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptbf8uqss.cs(17,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1) + a[k];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1lofhb4g.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1lofhb4g.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1lofhb4g.cs(14,71): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long msis = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (a[i] < a[k] && msis < a[i] + max) {\n                msis = a[i] + max;\n            }\n        }\n        return msis;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx9lfsh6_.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx9lfsh6_.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx9lfsh6_.cs(15,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx9lfsh6_.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfj3_rg6y.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfj3_rg6y.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfj3_rg6y.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfj3_rg6y.cs(16,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfj3_rg6y.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpfj3_rg6y.cs(27,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    if (dp[j] + a[i] > dp[i]) {\n                        dp[i] = dp[j] + a[i];\n                        prev[i] = j;\n                    }\n                }\n            }\n            max[i] = Math.Max(max[i - 1], dp[i]);\n        }\n        long sum = 0;\n        long curr = index;\n        while (curr != -1) {\n            sum += a[curr];\n            curr = prev[curr];\n        }\n        if (k == -1) {\n            return sum;\n        }\n        return sum + max[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp71x73ga6.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(21,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(22,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(23,43): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp71x73ga6.cs(33,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpief2e9r2.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpief2e9r2.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpief2e9r2.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum1 = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        long sum2 = 0;\n        if (a[(int)index] < a[(int)k]) {\n            sum2 = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n        }\n        return Math.Max(sum1, sum2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53753b01cc10405080f04a42b3e69f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53753b01cc10405080f04a42b3e69f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (k == index) {\n            sum = a[(int)index];\n        }\n        long maxSum = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        if (k > index) {\n            long maxSumIncluding = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n            if (maxSumIncluding > maxSum) {\n                maxSum = maxSumIncluding;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <daf5f9bbb2be47eea3d9c735fae4349f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <daf5f9bbb2be47eea3d9c735fae4349f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i];\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1g16upsh.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1g16upsh.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp1g16upsh.cs(17,71): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = a[k] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw8sdz0du.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw8sdz0du.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw8sdz0du.cs(15,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp40rhqi3w.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp40rhqi3w.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp40rhqi3w.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp40rhqi3w.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp40rhqi3w.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp40rhqi3w.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long maxSum = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long i = maxIndex;\n        while (i != -1) {\n            sum += a[i];\n            i = prev[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2zenmwc8.cs(15,19): error CS0136: A local or parameter named 'i' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n/tmp/tmp2zenmwc8.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2zenmwc8.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2zenmwc8.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2zenmwc8.cs(19,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2zenmwc8.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2zenmwc8.cs(32,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq8mjr8hw.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0wkd_zt.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(18,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(11,14): warning CS0219: The variable 'maxSum' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n                } else if (i == k) {\n                    max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i] + a[index]);\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3f2rgo06.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3f2rgo06.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3f2rgo06.cs(18,84): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3f2rgo06.cs(20,84): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3f2rgo06.cs(20,91): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <edfa43ed23cb4423837faa712cffe3be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <edfa43ed23cb4423837faa712cffe3be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7zpzfn7l.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7zpzfn7l.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7zpzfn7l.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7zpzfn7l.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7zpzfn7l.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7zpzfn7l.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        long[] next = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n            next[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long curr = maxIndex;\n        while (curr != -1) {\n            next[curr] = maxIndex;\n            maxIndex = prev[maxIndex];\n            curr = prev[curr];\n        }\n        curr = index;\n        while (curr != -1 && curr != k) {\n            curr = next[curr];\n        }\n        if (curr == -1) {\n            return -1;\n        }\n        return dp[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123756,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex = i;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphnaig9ti.cs(15,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Base case\n        if (index == n) {\n            return 0;\n        }\n        // Recursive case\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k) + a[i]);\n            }\n        }\n        if (index < k) {\n            max = Math.Max(max, MaxSumIncreasingSubseq(a, n, index + 1, k) + a[index]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp98zi1l1q.cs(18,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp98zi1l1q.cs(18,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp98zi1l1q.cs(19,76): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp98zi1l1q.cs(23,80): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return a[k] + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi0dqo464.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpi0dqo464.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpi0dqo464.cs(20,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, i) + a[k];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp97rml8x7.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp97rml8x7.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp97rml8x7.cs(15,62): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long ans = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                ans = Math.Max(ans, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4_lat92b.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4_lat92b.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4_lat92b.cs(15,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n)\n            return 0;\n        if (a[index] > a[k])\n            return Math.Max(MaxSumIncreasingSubseq(a, n, index + 1, k), MaxSumIncreasingSubseq(a, n, index + 1, index) + a[index]);\n        else\n            return MaxSumIncreasingSubseq(a, n, index + 1, k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7e7odw7z.cs(13,15): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7e7odw7z.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7e7odw7z.cs(14,124): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d58b2ecf0994e05a96de29161e0e36c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d58b2ecf0994e05a96de29161e0e36c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < temp) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnf8z11np.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnf8z11np.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnf8z11np.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long max = 0;\n        for(long i = index; i < k; i++) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5o6dicuq.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgttz82zc.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgttz82zc.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgttz82zc.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9pj_rg87.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pj_rg87.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pj_rg87.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pj_rg87.cs(22,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pj_rg87.cs(13,14): warning CS0219: The variable 'max' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return a[index] + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppscjkxxg.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppscjkxxg.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppscjkxxg.cs(23,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d616b9e10f8446abb1e7183f94bed027>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d616b9e10f8446abb1e7183f94bed027>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx0i0gj66.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx0i0gj66.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx0i0gj66.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx0i0gj66.cs(16,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx0i0gj66.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpx0i0gj66.cs(27,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (max < sum) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgttz82zc.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgttz82zc.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpgttz82zc.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && j < k && i > k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpigma56pr.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpigma56pr.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpigma56pr.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpigma56pr.cs(19,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt31dxrhv.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt31dxrhv.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt31dxrhv.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt31dxrhv.cs(18,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt31dxrhv.cs(19,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k - 1);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo_fx9xo6.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo_fx9xo6.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpo_fx9xo6.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = a[index];\n        long maxSumSoFar = maxSum;\n        for (long i = index + 1; i <= k; i++) {\n            if (a[i] > a[i - 1]) {\n                maxSum += a[i];\n            } else {\n                maxSum = a[i];\n            }\n            maxSumSoFar = Math.Max(maxSumSoFar, maxSum);\n        }\n        return maxSumSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmputdgnslr.cs(11,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmputdgnslr.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmputdgnslr.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmputdgnslr.cs(15,29): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmputdgnslr.cs(17,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn30nkr7k.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        long sum = 0;\n        for (long i = index + 1; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = MaxSumIncreasingSubseq(a, n, i, k) + a[index];\n                if (sum > ans) {\n                    ans = sum;\n                }\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn2gnw7wq.cs(20,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn2gnw7wq.cs(20,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn2gnw7wq.cs(21,62): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            maxSum = Math.Max(maxSum, max[i]);\n        }\n        return maxSum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivxzj3hh.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpivxzj3hh.cs(29,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        else {\n            ans = MaxSumIncreasingSubseq(a, n, index + 1, k);\n            long sum = 0;\n            for (long i = index + 1; i < n; i++) {\n                if (a[i] > a[index]) {\n                    sum = MaxSumIncreasingSubseq(a, n, i, i);\n                    ans = Math.Max(ans, a[index] + sum);\n                }\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp67ptll3x.cs(22,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp67ptll3x.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp67ptll3x.cs(24,43): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvpbops4s.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvpbops4s.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvpbops4s.cs(15,80): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // If k is not greater than i, return 0.\n        if (k <= index) {\n            return 0;\n        }\n        // If k is greater than i, then we have to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        // We can find the maximum sum of increasing subsequence from prefix until ith index by using the same function.\n        long maxSum = MaxSumIncreasingSubseq(a, n, index, k - 1);\n        // If a[i] < a[k], then we can include a[k] in the increasing subsequence.\n        if (a[index] < a[k]) {\n            // We can find the maximum sum of increasing subsequence from prefix until ith index by using the same function.\n            long maxSumUntilIndex = MaxSumIncreasingSubseq(a, n, index, index);\n            // We can find the maximum sum of increasing subsequence from prefix until kth index by using the same function.\n            long maxSumUntilK = MaxSumIncreasingSubseq(a, n, k, k);\n            // We can find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i by adding the maximum sum of increasing subsequence from prefix until ith index and the maximum sum of increasing subsequence from prefix until kth index.\n            maxSum = Math.Max(maxSum, maxSumUntilIndex + maxSumUntilK);\n        }\n        // Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9xuodtcz.cs(19,15): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9xuodtcz.cs(19,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyx70zwfw.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyx70zwfw.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyx70zwfw.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprqfqu1le.cs(19,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] max = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            max[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    max[i] = Math.Max(max[i], dp[i]);\n                }\n            }\n        }\n        long max_so_far = 0;\n        for (long i = index; i < k; i++) {\n            max_so_far = Math.Max(max_so_far, max[i]);\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp72mltxja.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp72mltxja.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp72mltxja.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp72mltxja.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp72mltxja.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp72mltxja.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            sum += a[i];\n        }\n        sum += dp[k];\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg4b9jx4_.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg4b9jx4_.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg4b9jx4_.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg4b9jx4_.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg4b9jx4_.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpg4b9jx4_.cs(24,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            if (maxSum < dp[i]) {\n                maxSum = dp[i];\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzsna1u6u.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzsna1u6u.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzsna1u6u.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzsna1u6u.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzsna1u6u.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphjkyzx7m.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d908a63ced14247994726e846120e60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d908a63ced14247994726e846120e60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) max = temp;\n            }\n        }\n        return a[k] + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9qw3in5.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9qw3in5.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9qw3in5.cs(19,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSumIncludingK = Math.Max(maxSumIncludingK, a[k] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        maxSum = Math.Max(maxSum, maxSumIncludingK);\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppskeuah0.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppskeuah0.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppskeuah0.cs(15,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpucj0pfzu.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpucj0pfzu.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpucj0pfzu.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // dp[i] = maximum sum of increasing subsequence from prefix until ith index\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptlxnk597.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptlxnk597.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptlxnk597.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptlxnk597.cs(19,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd7020f8ad54024b8d6d400ad83a37b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fd7020f8ad54024b8d6d400ad83a37b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk1oxhp49.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1oxhp49.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1oxhp49.cs(18,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6re_evm8.cs(12,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6re_evm8.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6re_evm8.cs(15,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6re_evm8.cs(16,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bc91f8c882704a24bebef3a33c5b703f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // dp[i] = max sum of increasing subsequence from prefix until ith index\n        // dp[i] = max(dp[i], dp[j] + a[i]) for j < i\n        // dp[i] = max(dp[i], dp[j] + a[i]) for j < k < i\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n            for (long j = k; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpakolcuhg.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(19,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(23,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(23,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpakolcuhg.cs(24,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[index] = a[index];\n        long max = dp[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwzn19see.cs(12,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwzn19see.cs(15,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwzn19see.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwzn19see.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwzn19see.cs(18,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        long maxSumIncludingKIndex = -1;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        maxSumIncludingK = maxSum + a[k];\n        return maxSumIncludingK;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8q8sveuc.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(22,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(13,14): warning CS0219: The variable 'maxSumIncludingKIndex' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[(int)i] < a[(int)k]) {\n                sum = Math.Max(sum, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return sum + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123758,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0cirdh45.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8r6lt0yl.cs(36,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyjfn4u3_.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyjfn4u3_.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyjfn4u3_.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyjfn4u3_.cs(18,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyjfn4u3_.cs(12,14): warning CS0219: The variable 'maxSum' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d3b9fd456044f4f9a954c55d2329896>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d3b9fd456044f4f9a954c55d2329896>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (index < k) {\n            ans = a[index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        ans = Math.Max(ans, MaxSumIncreasingSubseq(a, n, index + 1, k));\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp020gvdsi.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq8mjr8hw.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        maxSum = sum;\n        sum = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        maxSum += sum;\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppnieujr4.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppnieujr4.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppnieujr4.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppnieujr4.cs(21,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppnieujr4.cs(21,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppnieujr4.cs(22,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n + 1];\n        for (long i = 0; i <= n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i <= n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i <= k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpti27yjsh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpti27yjsh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpti27yjsh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpti27yjsh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpti27yjsh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i < k) {\n                max = Math.Max(max, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpul6v_0al.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp2[i] = Math.Max(dp2[i], dp2[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (i < index) {\n                max = Math.Max(max, dp[i]);\n            } else if (i == index) {\n                max = Math.Max(max, dp2[i]);\n            } else {\n                max = Math.Max(max, dp[i]);\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0e60e6aa7fb43c883b19fdbe599dce8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0e60e6aa7fb43c883b19fdbe599dce8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0cirdh45.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0cirdh45.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long ans = dp[index];\n        for (long i = index + 1; i < k; i++) {\n            ans += a[i];\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp88vp_ch8.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp88vp_ch8.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp88vp_ch8.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp88vp_ch8.cs(17,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp88vp_ch8.cs(23,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] kdp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            kdp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n                if (a[i] > a[j] && j < k && kdp[i] < kdp[j] + a[i]) {\n                    kdp[i] = kdp[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + kdp[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rd41gut.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(22,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(22,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(22,65): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4rd41gut.cs(23,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq9ce009r.cs(13,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long maxSumIncluding = 0;\n        long maxSumExcluding = 0;\n        for (long i = index; i < k; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j]) {\n                    maxSumIncluding = MaxSumIncreasingSubseq(a, n, j, k) + a[i];\n                    if (maxSumIncluding > maxSumExcluding) {\n                        maxSumExcluding = maxSumIncluding;\n                    }\n                }\n            }\n            if (maxSumExcluding > maxSum) {\n                maxSum = maxSumExcluding;\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpse7s9284.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpse7s9284.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpse7s9284.cs(17,78): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = a[index];\n        for (long i = index + 1; i < k; i++) {\n            if (a[i] > a[index]) {\n                max = Math.Max(max, a[index] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd8mpbzel.cs(11,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd8mpbzel.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd8mpbzel.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpd8mpbzel.cs(14,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsdz_a9rn.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsdz_a9rn.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsdz_a9rn.cs(17,86): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // dp[i] = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && i < k) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[index];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph_clkakh.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph_clkakh.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph_clkakh.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph_clkakh.cs(19,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpice9jw14.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpice9jw14.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpice9jw14.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpice9jw14.cs(18,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpice9jw14.cs(19,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpice9jw14.cs(29,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                sum = Math.Max(sum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return sum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9qt5jb0s.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9qt5jb0s.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9qt5jb0s.cs(20,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[a.Count];\n        dp[0] = a[0];\n        for (long i = 1; i < a.Count; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpefkg620l.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpefkg620l.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpefkg620l.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpefkg620l.cs(17,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d3b9fd456044f4f9a954c55d2329896>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d3b9fd456044f4f9a954c55d2329896>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, dp[i]);\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdwz67ta9.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(17,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(23,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(23,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpdwz67ta9.cs(27,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyx70zwfw.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyx70zwfw.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyx70zwfw.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && i < k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp15kssgq8.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(26,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp15kssgq8.cs(27,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = a[index];\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppebks8s8.cs(11,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmppebks8s8.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long sum = 0;\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprm3j68en.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprm3j68en.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprm3j68en.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprm3j68en.cs(21,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        if (index < k) {\n            sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, k, k));\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphxvgfhbj.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphxvgfhbj.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphxvgfhbj.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphxvgfhbj.cs(21,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long maxSumIncludingK = 0;\n        long maxSumIncludingKIndex = -1;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        maxSumIncludingK = maxSum + a[k];\n        return maxSumIncludingK;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8q8sveuc.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(22,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp8q8sveuc.cs(13,14): warning CS0219: The variable 'maxSumIncludingKIndex' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Base case\n        if (index == n) {\n            return 0;\n        }\n        // Recursive case\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i, k) + a[i]);\n            }\n            if (i == k) {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i, k) + a[index]);\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzdamasc4.cs(18,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdamasc4.cs(18,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdamasc4.cs(19,82): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzdamasc4.cs(22,82): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                maxSum = Math.Max(maxSum, a[i]);\n            } else {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k) + a[i]);\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_1ogfzc3.cs(17,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp_1ogfzc3.cs(19,86): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long sum1 = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        long sum2 = 0;\n        if (a[(int)index] < a[(int)k]) {\n            sum2 = MaxSumIncreasingSubseq(a, n, index + 1, k) + a[(int)index];\n        }\n        return Math.Max(sum1, sum2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53753b01cc10405080f04a42b3e69f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <53753b01cc10405080f04a42b3e69f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkdbpyemz.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpkdbpyemz.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[a.Count];\n        dp[0] = a[0];\n        for (int i = 1; i < a.Count; i++) {\n            dp[i] = a[i];\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b178c261fb34bdaaf79474845bacf2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9b178c261fb34bdaaf79474845bacf2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7s745667.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7s745667.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0wkd_zt.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(18,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(11,14): warning CS0219: The variable 'maxSum' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw2wb5zgk.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw2wb5zgk.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw2wb5zgk.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw2wb5zgk.cs(18,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw2wb5zgk.cs(19,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            maxSum = Math.Max(maxSum, dp[i]);\n        }\n        maxSum += a[k];\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjg0t_gcs.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjg0t_gcs.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjg0t_gcs.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjg0t_gcs.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjg0t_gcs.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjg0t_gcs.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return a[index] + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsglcy7bb.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsglcy7bb.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsglcy7bb.cs(23,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index > k) {\n            return 0;\n        }\n        long sum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123752,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbxo8hbjp.cs(19,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbxo8hbjp.cs(19,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpbxo8hbjp.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123749,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaz5d38s_.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaz5d38s_.cs(18,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaz5d38s_.cs(18,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaz5d38s_.cs(18,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpaz5d38s_.cs(19,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvji3woo.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzvji3woo.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = index; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        while (maxIndex != -1) {\n            sum += a[maxIndex];\n            maxIndex = prev[maxIndex];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq9igefk4.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq9igefk4.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq9igefk4.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq9igefk4.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq9igefk4.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpq9igefk4.cs(35,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            if (a[i] < a[k]) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k - 1));\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123746,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw27gduec.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw27gduec.cs(17,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[index] = a[index];\n        for (long i = index + 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = index; j < i; j++) {\n                if (a[i] > a[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        return dp[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123748,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptg9fez5h.cs(12,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptg9fez5h.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptg9fez5h.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptg9fez5h.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptg9fez5h.cs(17,55): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (index < k) {\n            sum = a[index];\n        }\n        long max = 0;\n        for (long i = index + 1; i <= n; i++) {\n            if (i <= k) {\n                max = Math.Max(max, MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return sum + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbtz6g333.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = index; i < k; i++) {\n            max = Math.Max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510466,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphehlrtxy.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphehlrtxy.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphehlrtxy.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphehlrtxy.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphehlrtxy.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] < a[k]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7dnx48kd.cs(16,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7dnx48kd.cs(16,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7dnx48kd.cs(23,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        if (index == k) {\n            return a[(int)index];\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long sum = a[(int)index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7c12a67073b146b4a7d6cda0cfa93a68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7c12a67073b146b4a7d6cda0cfa93a68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i]) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d58b2ecf0994e05a96de29161e0e36c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1d58b2ecf0994e05a96de29161e0e36c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            dp2[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp2[i] < dp2[j] + a[i] && j < k && i > k) {\n                    dp2[i] = dp2[j] + a[i];\n                }\n            }\n        }\n        return dp[index] + dp2[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjyb7gl4d.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(19,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(19,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(19,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(20,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(26,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(26,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(26,56): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjyb7gl4d.cs(27,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = a[index] + MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        return Math.Max(sum, MaxSumIncreasingSubseq(a, n, index + 1, k));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphuysrp_c.cs(15,15): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphuysrp_c.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphuysrp_c.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                maxSum = Math.Max(maxSum, a[k] + MaxSumIncreasingSubseq(a, n, i, k));\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxnv5rv4u.cs(13,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxnv5rv4u.cs(13,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpxnv5rv4u.cs(14,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n)\n            return 0;\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (a[i] > a[index]) {\n                if (i < k) {\n                    long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                    if (sum > max)\n                        max = sum;\n                }\n                else if (i == k) {\n                    long sum = a[index] + MaxSumIncreasingSubseq(a, n, i + 1, k);\n                    if (sum > max)\n                        max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyf2tg5zi.cs(15,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyf2tg5zi.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyf2tg5zi.cs(17,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyf2tg5zi.cs(22,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        dp[0] = a[0];\n        for (long i = 1; i < n; i++) {\n            dp[i] = a[i];\n            for (long j = 0; j < i; j++) {\n                if (a[j] < a[i] && dp[j] + a[i] > dp[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = dp[index];\n        for (long i = index; i < k; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk1arsy9h.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1arsy9h.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1arsy9h.cs(16,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1arsy9h.cs(16,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpk1arsy9h.cs(17,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long maxSum = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                maxSum = Math.Max(maxSum, a[i] + MaxSumIncreasingSubseq(a, n, i + 1, k));\n            } else {\n                maxSum = Math.Max(maxSum, MaxSumIncreasingSubseq(a, n, i + 1, k));\n            }\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptc81zyr6.cs(17,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuig1f8yi.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long sum = 0;\n        if (a[index] < a[k]) {\n            sum = MaxSumIncreasingSubseq(a, n, index + 1, k);\n        }\n        sum = Math.Max(sum, a[index] + MaxSumIncreasingSubseq(a, n, index + 1, index));\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4m5e_yy.cs(15,15): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph4m5e_yy.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph4m5e_yy.cs(18,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[(int)k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e435abb98b934370a012f4f406414ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e435abb98b934370a012f4f406414ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        // Write your code here\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            if (max < dp[i]) {\n                max = dp[i];\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe41fe18f0a41d68ee924acf8e59128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2fe41fe18f0a41d68ee924acf8e59128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n        }\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                }\n            }\n        }\n        long max = 0;\n        for (long i = 0; i < index; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n            }\n        }\n        return max + a[k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1665510467,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjvymbbuh.cs(13,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(17,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(18,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjvymbbuh.cs(28,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = index; i < k; i++) {\n            sum += a[i];\n            maxSum = Math.Max(maxSum, sum);\n        }\n        return maxSum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpztty41oi.cs(14,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long ans = 0;\n        if (k == index) {\n            ans = a[(int)index];\n        }\n        long max = 0;\n        for (long i = index + 1; i < n; i++) {\n            if (a[(int)i] > a[(int)index]) {\n                long temp = MaxSumIncreasingSubseq(a, n, i, k);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return ans + max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0aaa12f289ef490f958dc733c75b62e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0aaa12f289ef490f958dc733c75b62e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long maxSum = 0;\n        long sum = 0;\n        for (long i = 0; i < index; i++) {\n            if (a[i] < a[k]) {\n                sum += a[i];\n            }\n        }\n        sum += a[k];\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123751,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc0wkd_zt.cs(14,19): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(14,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(15,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(18,18): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpc0wkd_zt.cs(11,14): warning CS0219: The variable 'maxSum' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        if (index == n) {\n            return 0;\n        }\n        long max = 0;\n        for (long i = index; i < n; i++) {\n            if (i == k) {\n                continue;\n            }\n            long sum = MaxSumIncreasingSubseq(a, n, i + 1, k);\n            if (i < k && a[i] < a[k]) {\n                sum += a[k];\n            } else {\n                sum += a[i];\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz8b1c0l3.cs(20,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz8b1c0l3.cs(20,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz8b1c0l3.cs(21,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpz8b1c0l3.cs(23,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        long[] dp = new long[n];\n        long[] prev = new long[n];\n        for (long i = 0; i < n; i++) {\n            dp[i] = a[i];\n            prev[i] = -1;\n        }\n        long max = 0;\n        long maxIndex = -1;\n        for (long i = 1; i < n; i++) {\n            for (long j = 0; j < i; j++) {\n                if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                    dp[i] = dp[j] + a[i];\n                    prev[i] = j;\n                }\n            }\n            if (dp[i] > max) {\n                max = dp[i];\n                maxIndex = i;\n            }\n        }\n        long sum = 0;\n        long curr = maxIndex;\n        while (curr != -1) {\n            sum += a[curr];\n            curr = prev[curr];\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n",
      "timestamp": 1666123753,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmmpcsr_a.cs(14,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmmpcsr_a.cs(21,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmmpcsr_a.cs(21,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmmpcsr_a.cs(21,54): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmmpcsr_a.cs(22,39): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmmpcsr_a.cs(34,22): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}