{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] {test_tup};\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], tup[0]);\n            } else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i += 2) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;",
    "        var test_dict = new Dictionary<long,long>();\n        var test_list = new List<long>();\n        var test_string = test_tup.ToString();\n        for (int i = 0; i < test_string.Length; i++) {\n            test_list.Add(long.Parse(test_string[i].ToString()));\n        }\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            test_dict.Add(test_list[i], test_list[i + 1]);\n        }\n        return test_dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], tup[0]);\n            } else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for(int i = 0; i < arr.Length; i++) {\n            if(i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> result = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for(int i = 0; i < test_arr.Length - 1; i++) {\n            result.Add(test_arr[i], test_arr[i+1]);\n        }\n        return result;",
    "        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length; i += 2) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length; i += 2) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;",
    "        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i + 1 < test_tup) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        string[] arr = test_tup.ToString().Split(',');\n        for(int i = 0; i < arr.Length; i+=2) {\n            dict.Add(long.Parse(arr[i]),long.Parse(arr[i+1]));\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i],arr[i+1]);\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        Array.Reverse(arr);\n        for(int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;",
    "        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for(int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i],test_arr[i+1]);\n        }\n        return test_dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < tup.Length; i += 2) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] { test_tup };\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;",
    "        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;",
    "        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;"
  ]
}