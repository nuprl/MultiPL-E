{
  "name": "mbpp_472_check_Consecutive",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)(max - min + 1)));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_4m8lk2n.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        l.Sort();\n        long min = l[0];\n        long max = l[l.Count - 1];\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) return true;\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)(max - min + 1)));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_4m8lk2n.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i-1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) {\n            return true;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        long min = l[0];\n        long max = l[l.Count - 1];\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, max - min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2ywahae.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpr2ywahae.cs(14,74): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element and the next is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between the first and last element is equal to the length of the list - 1\n        return l[l.Count - 1] - l[0] == l.Count - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between the numbers is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        long diff = l[1] - l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != diff) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, max - min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2ywahae.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpr2ywahae.cs(14,74): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return true;\n        }\n        l.Sort();\n        long min = l[0];\n        long max = l[l.Count - 1];\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each number is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        long min = l[0];\n        long max = l[l.Count - 1];\n        if (max - min + 1 == l.Count) {\n            for (int i = 0; i < l.Count; i++) {\n                if (l[i] != min + i) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        long diff = max - min;\n        if (diff != l.Count - 1) return false;\n        for (long i = min; i <= max; i++) {\n            if (!l.Contains(i)) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i-1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count <= 1) return true;\n        l.Sort();\n        long diff = l[1] - l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != diff) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between the first and last elements is equal to the length of the list - 1\n        return l[l.Count - 1] - l[0] == l.Count - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list.\n        l.Sort();\n        // Check if the difference between each element is 1.\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 != l.Count) return false;\n        for (long i = min; i <= max; i++) {\n            if (!l.Contains(i)) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) {\n            return false;\n        }\n        long min = l[0];\n        long max = l[0];\n        foreach (long i in l) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if each element is one greater than the previous\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) {\n            return true;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        long diff = l[1] - l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != diff) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, l.Count).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmfkyxt1l.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i-1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l[0];\n        long max = l[0];\n        foreach (long i in l) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, max - min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2ywahae.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpr2ywahae.cs(14,74): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element and the next is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l[0];\n        long max = l[0];\n        foreach (long i in l) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0)\n            return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between the first and last elements is equal to the length of the list minus 1\n        return l[l.Count - 1] - l[0] == l.Count - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n\n        long min = l[0];\n        long max = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < min) {\n                min = l[i];\n            }\n            if (l[i] > max) {\n                max = l[i];\n            }\n        }\n\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, max - min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr2ywahae.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpr2ywahae.cs(14,74): error CS1503: Argument 2: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between two consecutive elements is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) return true;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between the first and last element is equal to the length of the list - 1\n        return l[l.Count - 1] - l[0] == l.Count - 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        long min = l[0];\n        long max = l[l.Count - 1];\n        if (max - min + 1 == l.Count) {\n            for (long i = min; i <= max; i++) {\n                if (!l.Contains(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.Distinct().Count() == l.Count;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is equal to 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n        // Return true if the list is consecutive\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        var sorted = l.OrderBy(x => x).ToList();\n        var diff = sorted[1] - sorted[0];\n        for (int i = 1; i < sorted.Count; i++) {\n            if (sorted[i] - sorted[i - 1] != diff) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return true;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count < 2) {\n            return false;\n        }\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // sort the list\n        l.Sort();\n        // check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        if (l.Count == 0) return false;\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.OrderBy(x => x).SequenceEqual(Enumerable.Range(min, (int)max - (int)min + 1).Select(x => (long)x));\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510003,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_k04brv.cs(14,69): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}