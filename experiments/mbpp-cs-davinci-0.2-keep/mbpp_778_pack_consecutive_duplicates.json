{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    public static object PackConsecutiveDuplicates(object list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PackConsecutiveDuplicates((new object(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new object(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)8L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new object(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new object(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L}), (List<long>)new List<long>(new long[]{(long)15L}), (List<long>)new List<long>(new long[]{(long)19L}), (List<long>)new List<long>(new long[]{(long)18L, (long)18L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)26L, (long)26L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)18L}), (List<long>)new List<long>(new long[]{(long)10L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new object(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new object(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"a\"}), (List<string>)new List<string>(new string[]{(string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"d\"})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object previous = null;\n        foreach (var item in list) {\n            if (previous == null || previous.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            previous = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null || last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        var last = list[0];\n        foreach (var item in list) {\n            if (item.Equals(last)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n                last = item;\n            }\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null || last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null) {\n                current.Add(item);\n            } else if (last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var temp = new List<object>();\n        var last = list[0];\n        foreach (var item in list) {\n            if (item.Equals(last)) {\n                temp.Add(item);\n            } else {\n                result.Add(temp);\n                temp = new List<object>();\n                temp.Add(item);\n                last = item;\n            }\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null || last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object previous = null;\n        foreach (var item in list) {\n            if (previous == null || previous.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            previous = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null) {\n                last = item;\n                current.Add(item);\n            } else if (last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n                last = item;\n            }\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last == null || last.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n            }\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last != null && !last.Equals(item)) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        // Your code here\n        return null;",
    "        object result = new List<object>();\n        object temp = new List<object>();\n        object temp2 = new List<object>();\n        object temp3 = new List<object>();\n        object temp4 = new List<object>();\n        object temp5 = new List<object>();\n        object temp6 = new List<object>();\n        object temp7 = new List<object>();\n        object temp8 = new List<object>();\n        object temp9 = new List<object>();\n        object temp10 = new List<object>();\n        object temp11 = new List<object>();\n        object temp12 = new List<object>();\n        object temp13 = new List<object>();\n        object temp14 = new List<object>();\n        object temp15 = new List<object>();\n        object temp16 = new List<object>();\n        object temp17 = new List<object>();\n        object temp18 = new List<object>();\n        object temp19 = new List<object>();\n        object temp20 = new List<object>();\n        object temp21 = new List<object>();\n        object temp22 = new List<object>();\n        object temp23 = new List<object>();\n        object temp24 = new List<object>();\n        object temp25 = new List<object>();\n        object temp26 = new List<object>();\n        object temp27 = new List<object>();\n        object temp28 = new List<object>();\n        object temp29 = new List<object>();\n        object temp30 = new List<object>();\n        object temp31 = new List<object>();\n        object temp32 = new List<object>();\n        object temp33 = new List<object>();\n        object temp34 = new List<object>();\n        object temp35 = new List<object>();\n        object temp36 = new List<object>();\n        object temp37 = new List<object>();\n        object temp38 = new List<object>();\n        object temp39 = new List<object>();\n        object temp40 = new List<object>();\n        object temp41 = new List<object>();\n        object temp42 = new List<object",
    "        var result = new List<object>();\n        var list = (List<object>)list1;\n        var current = list[0];\n        var count = 1;\n        for (int i = 1; i < list.Count; i++) {\n            if (list[i].Equals(current)) {\n                count++;\n            } else {\n                result.Add(new List<object> { current, count });\n                current = list[i];\n                count = 1;\n            }\n        }\n        result.Add(new List<object> { current, count });\n        return result;",
    "        List<object> list = (List<object>)list1;\n        List<object> result = new List<object>();\n        List<object> temp = new List<object>();\n        for (int i = 0; i < list.Count; i++) {\n            if (i == 0) {\n                temp.Add(list[i]);\n            } else if (list[i].Equals(list[i - 1])) {\n                temp.Add(list[i]);\n            } else {\n                result.Add(temp);\n                temp = new List<object>();\n                temp.Add(list[i]);\n            }\n        }\n        result.Add(temp);\n        return result;",
    "        var list = (List<object>)list1;\n        if (list.Count == 0) return new List<object>();\n        var result = new List<object>();\n        var current = new List<object>();\n        var currentValue = list[0];\n        foreach (var item in list) {\n            if (item.Equals(currentValue)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n                currentValue = item;\n            }\n        }\n        result.Add(current);\n        return result;",
    "        var result = new List<object>();\n        var list = (List<object>)list1;\n        var sublist = new List<object>();\n        var last = list[0];\n        foreach (var item in list) {\n            if (item.Equals(last)) {\n                sublist.Add(item);\n            } else {\n                result.Add(sublist);\n                sublist = new List<object>();\n                sublist.Add(item);\n                last = item;\n            }\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var sublist = new List<object>();\n        var last = list[0];\n        foreach (var item in list) {\n            if (item.Equals(last)) {\n                sublist.Add(item);\n            } else {\n                result.Add(sublist);\n                sublist = new List<object>();\n                sublist.Add(item);\n                last = item;\n            }\n        }\n        result.Add(sublist);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object last = null;\n        foreach (var item in list) {\n            if (last != null && !last.Equals(item)) {\n                result.Add(current);\n                current = new List<object>();\n            }\n            current.Add(item);\n            last = item;\n        }\n        result.Add(current);\n        return result;",
    "        var list = (List<object>)list1;\n        var result = new List<object>();\n        var current = new List<object>();\n        object previous = null;\n        foreach (var item in list) {\n            if (previous == null) {\n                previous = item;\n                current.Add(item);\n            } else if (previous.Equals(item)) {\n                current.Add(item);\n            } else {\n                result.Add(current);\n                current = new List<object>();\n                current.Add(item);\n                previous = item;\n            }\n        }\n        result.Add(current);\n        return result;"
  ]
}