{
  "name": "mbpp_641_is_nonagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*m^2 - m) / 2\n        // m^2 - m - 2n = 0\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : -1;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : -1;",
    "        long a = (long)Math.Sqrt(n * 2);\n        if (a * (a + 1) == n * 2)\n            return a;\n        return 0;",
    "        long nth = (long)((Math.Sqrt(8 * n + 1) - 1) / 2);\n        if (nth * (nth + 1) / 2 == n)\n            return nth;\n        return -1;",
    "        long nth = n;\n        long sum = 0;\n        while (nth > 0) {\n            sum += nth;\n            nth--;\n        }\n        return sum;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        long i = 1;\n        while (true) {\n            long x = i * (3 * i - 1) / 2;\n            if (x == n) {\n                return i;\n            }\n            if (x > n) {\n                return 0;\n            }\n            i++;\n        }",
    "        return n * (3 * n - 2);",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8n))/2\n        // n = (1 +- sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * nth == 1 + 8 * n) {\n            return nth;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        // n = (k * (k + 1)) / 2\n        // n * 2 = k * (k + 1)\n        // n * 2 = k^2 + k\n        // k^2 + k - n * 2 = 0\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n        // k = (-1 + sqrt(1 + 8 * n)) / 2\n",
    "        return n * (3 * n - 2);",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        // n = (3*n^2 - n) / 2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(2 * n);\n        if (x * (x + 1) == 2 * n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? 1 : 0;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (n + 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        // n = (3*n^2 - n) / 2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1",
    "        long a = (long)Math.Sqrt(n * 2);\n        if (a * (a + 1) == n * 2) {\n            return a;\n        }\n        return -1;",
    "        return (n * (n + 1) / 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        } else {\n            return -1;\n        }",
    "        long nth = (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);\n        long nonagonal = (nth * (nth + 1)) / 2;\n        return nonagonal;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        if (n % 2 == 0) {\n            nth = (n / 2) * (n + 1);\n        } else {\n            nth = (n + 1) / 2 * n;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        // The first odd number is 1.\n        // The second odd number is 3.\n        // The third odd number is 5.\n        // The fourth odd number is 7.\n        // The fifth odd number is 9.\n        // The sixth odd number is 11.\n        // The seventh odd number is 13.\n        // The eighth odd number is 15.\n        // The ninth odd number is 17.\n        // The tenth odd number is 19.\n        // The eleventh odd number is 21.\n        // The twelfth odd number is 23.\n        // The thirteenth odd number is 25.\n        // The fourteenth odd number is 27.\n        // The fifteenth odd number is 29.\n        // The sixteenth odd number is 31.\n        // The seventeenth odd number is 33.\n        // The eighteenth odd number is 35.\n        // The nineteenth odd number is 37.\n        // The twentieth odd number is 39.\n        // The twenty-first odd number is 41.\n        // The twenty-second odd number is 43.\n        // The twenty-third odd number is 45.\n        // The twenty-fourth odd number is 47.\n        // The twenty-fifth odd number is 49.\n        // The twenty-sixth odd number is 51.\n        // The twenty-seventh odd number is 53.\n        // The twenty-eighth odd number is 55.\n        // The twenty-ninth odd number is 57.\n        // The thirtieth odd number is 59.\n        // The thirty-first odd number is 61.\n        // The thirty-second odd number is 63.\n        // The thirty-third odd number is 65.\n        // The thirty-fourth odd number is 67.\n        // The thirty-fifth odd number is 69.\n        // The thirty-sixth odd number is 71.\n        // The thirty-seventh odd number is 73.\n        // The thirty-eighth odd number is 75.\n        // The thirty-ninth odd number is 77.\n        // The fortieth odd number is 79.\n        // The forty-first odd number is 81.\n        // The forty-second odd number is 83.\n        // The forty-third odd number is 85.\n       ",
    "        // n = (3*n^2 + n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 8*(3*n)))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n = (-1 + sqrt(1 + 24*n))/6\n        // n =",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n)\n            return x;\n        return 0;",
    "        long x = (long)Math.Sqrt(8 * n + 1);\n        if (x * (x + 1) / 2 == n) return x;\n        return 0;",
    "        long x = (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return x * (x + 1) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        // The nth nonagonal number is given by the formula:\n        // n(3n-2)\n        return n * (3 * n - 2);",
    "        // n = (3*x^2 - x) / 2\n        // n = 3*x^2 - x\n        // n = 3*x^2 - x - 2*n = 0\n        // x^2 - x/3 - 2*n/3 = 0\n        // x = (1 +- sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        // n = (3*k^2 - k)/2\n        // 3*k^2 - k - 2*n = 0\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 - n - 2n = 0\n        // n = (1 +- sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return x;\n        }\n        return -1;",
    "        // n = (3 * x^2 - x) / 2\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n       ",
    "        // n = (x^2 + x)/2\n        // x^2 + x - 2n = 0\n        // x = (-1 +- sqrt(1 + 8n))/2\n        // x = (1 +- sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))/2\n        // x = (1 + sqrt(1 + 8n))",
    "        long x = (long)Math.Sqrt(n * 2);\n        if (x * (x + 1) == n * 2)\n            return x;\n        return 0;",
    "        long a = (long)Math.Floor(Math.Sqrt(8*n+1));\n        if (a*(a+1)/2 == n) return a;\n        return -1;",
    "        long x = (long)Math.Floor((Math.Sqrt(8 * n + 1) - 1) / 2);\n        return x * (x + 1) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long x = (long)Math.Sqrt(2*n);\n        if (x*(x+1) == 2*n) {\n            return x;\n        }\n        return -1;",
    "        // n = (k(k+1))/2\n        // k^2 + k - 2n = 0\n        // k = (-1 +- sqrt(1 + 8n))/2\n        // k = (-1 + sqrt(1 + 8n))/2\n        // k = (1 + sqrt(1 + 8n))/2\n        // k = (1 + sqrt(1 + 8n))/2\n        long k = (long)Math.Ceiling((1 + Math.Sqrt(1 + 8 * n)) / 2);\n        return k;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        } else {\n            return -1;\n        }",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        }\n        return -1;",
    "        return (n * (3 * n - 1)) / 2;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 +- sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x =",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a != 1 + 8 * n) return -1;\n        a = (a - 1) / 2;\n        return a;",
    "        long i = 1;\n        while (true) {\n            if (n <= i * (i + 1) / 2) {\n                return i;\n            }\n            i++;\n        }",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        if (x * (x + 1) / 2 == n) return x;\n        return 0;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i == 1) {\n                nth = 1;\n            } else if (i == 2) {\n                nth_1 = 1;\n                nth = 1;\n            } else {\n                nth_2 = nth_1;\n                nth_1 = nth;\n                nth = nth_1 + nth_2;\n            }\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = (long)Math.Sqrt(8 * n + 1);\n        if (nth * (nth + 1) / 2 == n) {\n            return nth;\n        }\n        return -1;",
    "        // n = (3n^2 - n) / 2\n        // n^2 - n - 2n = 0\n        // n^2 - 3n = 0\n        // n(n - 3) = 0\n        // n = 0, n = 3\n        // n = 3k\n        // 3k = (3k^2 - k) / 2\n        // 6k = 3k^2 - k\n        // 3k^2 - 6k + k = 0\n        // 3k^2 - 7k = 0\n        // k(3k - 7) = 0\n        // k = 0, k = 7/3\n        // k = 7/3\n        // n = 3(7/3)\n        // n = 21\n        // n = 3k + 1\n        // 3k + 1 = (3k^2 + k) / 2\n        // 6k + 2 = 3k^2 + k\n        // 3k^2 - 6k - 2 = 0\n        // 3k^2 - 6k - 2 = 0\n        // k(3k - 6) - 2 = 0\n        // k(3k - 6) = 2\n        // k = 2 / (3k - 6)\n        // k = 2 / (3(2 / (3k - 6)) - 6)\n        // k = 2 / (6 - 6)\n        // k = 2 / 0\n        // k = undefined\n        // n = 3k + 2\n        // 3k + 2 = (3k^2 + 2k) / 2\n        // 6k + 4 = 3k^2 + 2k\n        // 3k^2 - 6k - 4 = 0\n        // 3k^2 - 6k - 4 = 0\n        // k(3k - 6) - 4 = 0\n        // k(3k - 6) = 4\n        // k = 4 / (3k - 6)\n        // k = 4 / (3(4 / (3k - 6)) - 6)\n        // k = 4 / (12 - 6)\n        // k = 4 / 6\n        // k = 2 / 3\n        // n = 3(2 / 3) + 2\n        // n = 2 + 2\n        // n = 4\n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n)\n            return x;\n        return -1;",
    "        // n = (3*a^2 - a)/2\n        // a = (1 + sqrt(1 + 24*n))/6\n        double a = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (a == Math.Floor(a))\n            return (long)a;\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        return x;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n)) / 2\n        // n = (1 + sqrt(1 + 8n)) / 2\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n)) / 6\n        // n = (1 + sqrt(1 + 24n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        // n = (x^2 + x) / 2\n        // n * 2 = x^2 + x\n        // n * 2 - x^2 = x\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1) - 1) / 2\n        // x = (sqrt(8 * n + 1",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        return x;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * (nth + 1) / 2 == n) {\n            return nth;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        // n = (3*k^2 - k)/2\n        // 3*k^2 - k - 2*n = 0\n        // k = (1 + sqrt(1 + 24*n))/6\n        double k = (1 + Math.Sqrt(1 + 24*n))/6;\n        return Math.Round(k) == k ? 1 : 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        // n = (3*k^2 - k)/2\n        // 3*k^2 - k - 2*n = 0\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (1 - sqrt(1 + 24*n))/6\n        // k = (1 + sqrt(1 + 24*n))/6\n        // k = (",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        // Solve the quadratic equation to find the nth nonagonal number.\n        return (long)Math.Ceiling((Math.Sqrt(8 * n + 1) - 1) / 2);",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                nth = 1;\n            } else if (i == 2) {\n                nth_1 = 1;\n                nth = 2;\n            } else {\n                nth_2 = nth_1;\n                nth_1 = nth;\n                nth = nth_1 + nth_2;\n            }\n        }\n        return nth;",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * (nth + 1) / 2 == n)\n            return nth;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        if ((x - 1) % 2 == 0) return (x - 1) / 2;\n        return 0;",
    "        return (n * (3 * n - 1)) / 2;",
    "        // n = (3*x^2 - x) / 2\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt(1 + 12n)) / 6\n        // x = (1 + sqrt(1 + 12n)) / 6\n        // x = (1 - sqrt",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        // The first n odd numbers are:\n        // 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465,",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n)\n            return x;\n        return 0;",
    "        // n = (3*k^2 - k) / 2\n        // 2*n = 3*k^2 - k\n        // 3*k^2 - k - 2*n = 0\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt(1 + 12*n)) / 3\n        // k = (1 - sqrt(1 + 12*n)) / 3\n        // k = (1 + sqrt",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 1)) / 2;",
    "        return (n * (3 * n - 1)) / 2;",
    "        // The nth nonagonal number is defined as the sum of the first n odd numbers.\n        // The first nonagonal number is 1.\n        // The second nonagonal number is 1 + 3 = 4.\n        // The third nonagonal number is 1 + 3 + 5 = 9.\n        // The fourth nonagonal number is 1 + 3 + 5 + 7 = 16.\n        // The fifth nonagonal number is 1 + 3 + 5 + 7 + 9 = 25.\n        // The sixth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 = 36.\n        // The seventh nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 = 49.\n        // The eighth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 = 64.\n        // The ninth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 = 81.\n        // The tenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 = 100.\n        // The eleventh nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 = 121.\n        // The twelfth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 = 144.\n        // The thirteenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 = 169.\n        // The fourteenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 = 196.\n        // The fifteenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 = 225.\n        // The sixteenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 = 256.\n        // The seventeenth nonagonal number is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 +",
    "        long nth = 0;\n        for (int i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth;",
    "        // n = (3*n^2 - n) / 2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1 + sqrt(1 + 8*n)) / 2\n        // n = (1",
    "        return (n * (3 * n - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        // n = (3*x^2 - x)/2\n        // n = (3*x^2 - x - 2*n)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 1) / 2;\n            i++;\n        }\n        return nth;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        long nth = n;\n        long sum = 0;\n        while (nth > 0) {\n            sum += nth;\n            nth--;\n        }\n        return sum;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (-1 + sqrt(1 + 8*(3*n^2 - n)/2))/2\n        // n = (-1 + sqrt(1 + 12*n^2 - 4n))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-1 + sqrt(12*n^2 - 4n + 1))/2\n        // n = (-",
    "        long nth = 0;\n        long x = 1;\n        while (nth < n) {\n            nth += x;\n            x++;\n        }\n        return nth;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8n))/2\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) - 1)/2\n        // n = (sqrt(1 + 8n) -",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(n * 2);\n        if (a * (a + 1) == n * 2) {\n            return a;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long nn = (long)Math.Sqrt(1 + 8 * n);\n        if (nn * nn != 1 + 8 * n) return -1;\n        return (nn - 1) / 2;",
    "        long nth = 0;\n        for (int i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        for (long i = 1; i <= n; i++) {\n            nth_9 = nth_8;\n            nth_8 = nth_7;\n            nth_7 = nth_6;\n            nth_6 = nth_5;\n            nth_5 = nth_4;\n            nth_4 = nth_3;\n            nth_3 = nth_2;\n            nth_2 = nth_1;\n            nth_1 = nth;\n            nth = nth_1 + nth_2 + nth_3 + nth_4 + nth_5 + nth_6 + nth_7 + nth_8 + nth_9;\n        }\n        return nth;",
    "        long nth = 0;\n        for (int i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = (long)Math.Sqrt(1 + 8 * n);\n        if (nth * (nth + 1) / 2 == n)\n            return nth;\n        return 0;",
    "        long i = 0;\n        while (n > 0) {\n            i++;\n            n -= i;\n        }\n        return n == 0 ? i : 0;",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8*(3*n^2 - n)/2))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1 + 12*n^2 - 6n))/2\n        // n = (1 + sqrt(1",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long x = (long)Math.Floor((Math.Sqrt(8 * n + 1) - 1) / 2);\n        if (x * (x + 1) / 2 == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(8 * n + 1);\n        if (x * x == 8 * n + 1) {\n            return x;\n        }\n        return 0;",
    "        // Solve the quadratic equation for n.\n        // n = (8*x^2 - 8*x + 1)/2\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n\n        // 0 = 8*x^2 - 8*x + 1 - 2*n",
    "        // n = k(3k-1)/2\n        // 3k^2 - k - 2n = 0\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/6\n        // k = (1 - sqrt(1 + 24n))/6\n        // k = (1 + sqrt(1 + 24n))/",
    "        // n = (3x^2 - x) / 2\n        // n = (3x^2 - x - 2n) / 2\n        // 3x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n)) / 6\n        // x = (1 + sqrt(1 + 24n)) / 6\n        // x = (1 - sqrt(1 + 24n",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        // The first odd number is 1, so the sum of the first n odd numbers is n^2.\n        return n * n;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        return n * (3 * n - 2);",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (-1 +",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return (n * (3 * n - 1)) / 2;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        return nth;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return 0;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n        long f = 6;\n        long g = 7;\n        long h = 8;\n        long i = 9;\n        long j = 10;\n        long k = 11;\n        long l = 12;\n        long m = 13;\n        long o = 14;\n        long p = 15;\n        long q = 16;\n        long r = 17;\n        long s = 18;\n        long t = 19;\n        long u = 20;\n        long v = 21;\n        long w = 22;\n        long x = 23;\n        long y = 24;\n        long z = 25;\n        long aa = 26;\n        long ab = 27;\n        long ac = 28;\n        long ad = 29;\n        long ae = 30;\n        long af = 31;\n        long ag = 32;\n        long ah = 33;\n        long ai = 34;\n        long aj = 35;\n        long ak = 36;\n        long al = 37;\n        long am = 38;\n        long ao = 39;\n        long ap = 40;\n        long aq = 41;\n        long ar = 42;\n        long as = 43;\n        long at = 44;\n        long au = 45;\n        long av = 46;\n        long aw = 47;\n        long ax = 48;\n        long ay = 49;\n        long az = 50;\n        long ba = 51;\n        long bb = 52;\n        long bc = 53;\n        long bd = 54;\n        long be = 55;\n        long bf = 56;\n        long bg = 57;\n        long bh = 58;\n        long bi = 59;\n        long bj = 60;\n        long bk = 61;\n        long bl = 62;\n        long bm = 63;\n        long bo = 64;\n        long bp = 65;\n        long bq = 66;\n        long br = 67;\n        long bs = 68;\n        long bt = 69;\n        long bu = 70;\n        long b",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(n * 2);\n        if (a * (a + 1) == n * 2) {\n            return a;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        long a = (long)Math.Sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return (a - 1) / 2;\n        }\n        return -1;"
  ]
}