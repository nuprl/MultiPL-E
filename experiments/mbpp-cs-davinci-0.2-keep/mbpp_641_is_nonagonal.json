{
  "name": "mbpp_641_is_nonagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*m^2 - m) / 2\n        // m^2 - m - 2n = 0\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n)) / 2\n        // m = (1 - sqrt(1 + 8n)) / 2\n        // m = (1 + sqrt(1 + 8n",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        return n * (3 * n - 2);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : -1;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x != 1 + 8 * n) return -1;\n        x = (x - 1) / 2;\n        return x;",
    "        long nth = 0;\n        for (long i = 1; i <= n; i++) {\n            nth += i;\n        }\n        return nth;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth += i;\n            i++;\n        }\n        return nth == n ? i - 1 : -1;",
    "        long a = (long)Math.Sqrt(n * 2);\n        if (a * (a + 1) == n * 2)\n            return a;\n        return 0;",
    "        long nth = (long)((Math.Sqrt(8 * n + 1) - 1) / 2);\n        if (nth * (nth + 1) / 2 == n)\n            return nth;\n        return -1;",
    "        long nth = n;\n        long sum = 0;\n        while (nth > 0) {\n            sum += nth;\n            nth--;\n        }\n        return sum;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        return n * (3 * n - 2);",
    "        long i = 1;\n        while (true) {\n            long x = i * (3 * i - 1) / 2;\n            if (x == n) {\n                return i;\n            }\n            if (x > n) {\n                return 0;\n            }\n            i++;\n        }",
    "        return n * (3 * n - 2);",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2n = 0\n        // n = (-1 +- sqrt(1 + 8n))/2\n        // n = (1 +- sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8n))/2\n        // n = (1 + sqrt(1 + 8",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth += i;\n        }\n        return nth;"
  ]
}