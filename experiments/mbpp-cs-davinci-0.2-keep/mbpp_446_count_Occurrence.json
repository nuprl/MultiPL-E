{
  "name": "mbpp_446_count_Occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, object lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new object(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new object(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new object(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (i.Equals(t.Item1) || i.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object, object, object, object, object, object, object, object>)tup;\n        return list.Count(x => tuple.Item1.Equals(x) || tuple.Item2.Equals(x) || tuple.Item3.Equals(x) || tuple.Item4.Equals(x) || tuple.Item5.Equals(x) || tuple.Item6.Equals(x) || tuple.Item7.Equals(x) || tuple.Item8.Equals(x));",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0L;\n        foreach (var item in t) {\n            foreach (var item2 in l) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (item.Equals(t.Item1) || item.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var dict = new Dictionary<object, int>();\n        foreach (var item in t) {\n            if (!dict.ContainsKey(item)) {\n                dict[item] = 0;\n            }\n            dict[item]++;\n        }\n        long count = 0;\n        foreach (var item in l) {\n            if (dict.ContainsKey(item)) {\n                count += dict[item];\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException();\n        }\n        var c = 0;\n        foreach (var e in l) {\n            foreach (var f in t) {\n                if (e.Equals(f)) {\n                    c++;\n                }\n            }\n        }\n        return c;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        if (l.Contains(t.Item1)) c++;\n        if (l.Contains(t.Item2)) c++;\n        if (l.Contains(t.Item3)) c++;\n        if (l.Contains(t.Item4)) c++;\n        if (l.Contains(t.Item5)) c++;\n        if (l.Contains(t.Item6)) c++;\n        if (l.Contains(t.Item7)) c++;\n        if (l.Contains(t.Rest.Item1)) c++;\n        return c;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in l) {\n            count += t.Count(x => x.Equals(item));\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        long count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        // Write your code here\n        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;"
  ]
}