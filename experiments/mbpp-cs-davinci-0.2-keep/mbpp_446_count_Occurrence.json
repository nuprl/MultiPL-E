{
  "name": "mbpp_446_count_Occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, object lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new object(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new object(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new object(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (i.Equals(t.Item1) || i.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object, object, object, object, object, object, object, object>)tup;\n        return list.Count(x => tuple.Item1.Equals(x) || tuple.Item2.Equals(x) || tuple.Item3.Equals(x) || tuple.Item4.Equals(x) || tuple.Item5.Equals(x) || tuple.Item6.Equals(x) || tuple.Item7.Equals(x) || tuple.Item8.Equals(x));",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0L;\n        foreach (var item in t) {\n            foreach (var item2 in l) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (item.Equals(t.Item1) || item.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var dict = new Dictionary<object, int>();\n        foreach (var item in t) {\n            if (!dict.ContainsKey(item)) {\n                dict[item] = 0;\n            }\n            dict[item]++;\n        }\n        long count = 0;\n        foreach (var item in l) {\n            if (dict.ContainsKey(item)) {\n                count += dict[item];\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException();\n        }\n        var c = 0;\n        foreach (var e in l) {\n            foreach (var f in t) {\n                if (e.Equals(f)) {\n                    c++;\n                }\n            }\n        }\n        return c;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        if (l.Contains(t.Item1)) c++;\n        if (l.Contains(t.Item2)) c++;\n        if (l.Contains(t.Item3)) c++;\n        if (l.Contains(t.Item4)) c++;\n        if (l.Contains(t.Item5)) c++;\n        if (l.Contains(t.Item6)) c++;\n        if (l.Contains(t.Item7)) c++;\n        if (l.Contains(t.Rest.Item1)) c++;\n        return c;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in l) {\n            count += t.Count(x => x.Equals(item));\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        long count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        // Write your code here\n        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_lst = tup as IList<object>;\n        var lst_lst = lst as IList<object>;\n        if (tup_lst == null || lst_lst == null) {\n            throw new ArgumentException();\n        }\n        var count = 0;\n        foreach (var item in lst_lst) {\n            if (tup_lst.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        if (tup is Tuple<object, object> t) {\n            return CountOccurrence(t.Item1, lst) + CountOccurrence(t.Item2, lst);\n        } else if (tup is object[] a) {\n            return a.Sum(x => CountOccurrence(x, lst));\n        } else if (lst is object[] b) {\n            return b.Sum(x => CountOccurrence(tup, x));\n        } else {\n            return tup.Equals(lst) ? 1 : 0;\n        }",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1));",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((Tuple<object>)tup).Item1.Equals(item) ? 1 : 0;\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x || t.Item4 == x || t.Item5 == x || t.Item6 == x || t.Item7 == x || t.Rest.Item1 == x);",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var c = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                c++;\n            }\n        }\n        return c;",
    "        return 0;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((Tuple<object>)tup).Item1.Equals(item) ? 1 : 0;\n            count += ((Tuple<object>)tup).Item2.Equals(item) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var c = 0L;\n        foreach (var e in l) {\n            c += t.Count(x => x.Equals(e));\n        }\n        return c;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object item2 in (IEnumerable<object>)tup) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object i in (IEnumerable<object>)tup) {\n            foreach (object j in (IEnumerable<object>)lst) {\n                if (i.Equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (t.Item1 == i || t.Item2 == i || t.Item3 == i) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return 0;",
    "        long count = 0;\n        foreach (object item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var x in l) {\n            foreach (var y in t) {\n                if (x == y) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // TODO: Implement this function\n        return 0;",
    "        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3 || x == t.Item4 || x == t.Item5 || x == t.Item6 || x == t.Item7 || x == t.Rest.Item1);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var dict = new Dictionary<object, long>();\n        foreach (var item in t) {\n            if (!dict.ContainsKey(item)) {\n                dict.Add(item, 0);\n            }\n            dict[item]++;\n        }\n        long count = 0;\n        foreach (var item in l) {\n            if (dict.ContainsKey(item)) {\n                count += dict[item];\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => t.Item1 == x || t.Item2 == x || t.Item3 == x);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        var c = 0;\n        foreach (var x in l) {\n            if (t.Item1 == x) c++;\n            if (t.Item2 == x) c++;\n            if (t.Item3 == x) c++;\n            if (t.Item4 == x) c++;\n            if (t.Item5 == x) c++;\n            if (t.Item6 == x) c++;\n            if (t.Item7 == x) c++;\n            if (t.Rest.Item1 == x) c++;\n        }\n        return c;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null)\n            throw new ArgumentException();\n        return l.Count(x => t.Contains(x));",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        var tup_lst = (tup as IEnumerable<object>).ToList();\n        var lst_lst = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_lst) {\n            count += tup_lst.Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            return 0;\n        }\n        return l.Count(x => t.Contains(x));",
    "        var l = (List<object>)lst;\n        var t = (Tuple<object>)tup;\n        var count = 0;\n        foreach (var item in l) {\n            if (t.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var item in l) {\n            if (item.Equals(t.Item1) || item.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            foreach (var t in (IEnumerable<object>)tup) {\n                if (item.Equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        // Your code here\n        return 0;",
    "        var t = (Tuple<object>)tup;\n        var l = (List<object>)lst;\n        long count = 0;\n        foreach (var e in l) {\n            if (t.Contains(e)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(o));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException(\"Arguments must be enumerable\");\n        }\n        return l.Count(x => t.Contains(x));",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1) + l.Count(x => x == t.Item2) + l.Count(x => x == t.Item3) + l.Count(x => x == t.Item4) + l.Count(x => x == t.Item5) + l.Count(x => x == t.Item6) + l.Count(x => x == t.Item7) + l.Count(x => x == t.Rest.Item1);",
    "        // Your code here\n        return 0;",
    "        // Convert the object to a list\n        List<object> list = (List<object>)lst;\n        // Convert the object to a tuple\n        Tuple<object> tuple = (Tuple<object>)tup;\n        // Create a dictionary to store the count of each element\n        Dictionary<object, int> dict = new Dictionary<object, int>();\n        // Iterate through the list\n        foreach (object obj in list) {\n            // If the object is in the dictionary, increment the count\n            if (dict.ContainsKey(obj)) {\n                dict[obj]++;\n            }\n            // Else, add the object to the dictionary with a count of 1\n            else {\n                dict.Add(obj, 1);\n            }\n        }\n        // Create a variable to store the total count\n        long total = 0;\n        // Iterate through the tuple\n        foreach (object obj in tuple) {\n            // If the object is in the dictionary, add the count to the total\n            if (dict.ContainsKey(obj)) {\n                total += dict[obj];\n            }\n        }\n        // Return the total\n        return total;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object elem in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == elem);\n        }\n        return count;",
    "        var t = (Tuple<int, int, int, int, int, int, int, Tuple<int>>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1) + l.Count(x => x == t.Item2) + l.Count(x => x == t.Item3) + l.Count(x => x == t.Item4) + l.Count(x => x == t.Item5) + l.Count(x => x == t.Item6) + l.Count(x => x == t.Item7) + l.Count(x => x == t.Rest.Item1);",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((Tuple<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (object[])tup) {\n            foreach (object o2 in (object[])lst) {\n                if (o.Equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            foreach (object tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (i == t.Item1 || i == t.Item2) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            foreach (var tupItem in (IEnumerable<object>)tup) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((Tuple<object>)tup).Item1.Equals(item) ? 1 : 0;\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<object>)tup;\n        var l = (List<object>)lst;\n        var c = 0;\n        foreach (var e in l) {\n            if (t.Contains(e)) {\n                c++;\n            }\n        }\n        return c;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1));",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x.Equals(item));\n        }\n        return count;",
    "        var count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object i in (IEnumerable<object>)lst) {\n            foreach (object j in (IEnumerable<object>)tup) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var count = 0;\n        foreach(var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object obj in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (object[])tup) {\n            foreach (object item2 in (object[])lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var tupArr = (object[])tup;\n        var lstArr = (object[])lst;\n        var count = 0;\n        for (var i = 0; i < tupArr.Length; i++) {\n            for (var j = 0; j < lstArr.Length; j++) {\n                if (tupArr[i].Equals(lstArr[j])) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        return l.Count(x => t.Contains(x));",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        long count = 0;\n        foreach (var item in l) {\n            if (t.Item1.Equals(item)) {\n                count++;\n            }\n            if (t.Item2.Equals(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        if (tup is Tuple<object, object> t) {\n            if (lst is List<object> l) {\n                return CountOccurrence(t.Item1, l) + CountOccurrence(t.Item2, l);\n            } else {\n                return 0;\n            }\n        } else if (tup is List<object> tl) {\n            if (lst is List<object> l) {\n                return CountOccurrence(tl.Item1, l) + CountOccurrence(tl.Item2, l);\n            } else {\n                return 0;\n            }\n        } else {\n            if (lst is List<object> l) {\n                return l.Contains(tup) ? 1 : 0;\n            } else {\n                return 0;\n            }\n        }",
    "        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = tup as IEnumerable<object>;\n        var lst_list = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in lst_list) {\n            if (tup_list.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object>)tup;\n        var l = (List<object>)lst;\n        var c = 0;\n        foreach (var e in t) {\n            foreach (var ee in l) {\n                if (e.Equals(ee)) {\n                    c++;\n                }\n            }\n        }\n        return c;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var t = (Tuple<int, int, int>)tup;\n        var l = (List<int>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2 || x == t.Item3);",
    "        var tup_list = (List<object>)tup;\n        var lst_list = (List<object>)lst;\n        var count = 0;\n        foreach (var item in lst_list) {\n            count += tup_list.Count(x => x == item);\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var x in l) {\n            if (x.Equals(t.Item1) || x.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object elem in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x == elem);\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x == t.Item1 || x == t.Item2);",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var tup_lst = tup as IEnumerable<object>;\n        var lst_lst = lst as IEnumerable<object>;\n        if (tup_lst == null || lst_lst == null) {\n            throw new Exception(\"Invalid input\");\n        }\n        var count = 0L;\n        foreach (var item in lst_lst) {\n            count += tup_lst.Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // TODO: Implement this function\n        return 0;",
    "        var list = (List<object>)lst;\n        var tuple = (Tuple<object>)tup;\n        var count = 0;\n        foreach (var item in list) {\n            if (tuple.Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup is Tuple<object, object>) {\n            Tuple<object, object> t = (Tuple<object, object>)tup;\n            count += CountOccurrence(t.Item1, lst);\n            count += CountOccurrence(t.Item2, lst);\n        } else if (tup is List<object>) {\n            List<object> t = (List<object>)tup;\n            count += CountOccurrence(t.ToArray(), lst);\n        } else if (tup is object[]) {\n            object[] t = (object[])tup;\n            foreach (object o in t) {\n                count += CountOccurrence(o, lst);\n            }\n        } else {\n            if (tup.Equals(lst)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            throw new ArgumentException(\"Invalid input\");\n        }\n        return l.Count(x => t.Contains(x));",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in l) {\n            count += t.Count(x => x.Equals(item));\n        }\n        return count;",
    "        if (tup is Tuple<object, object> tup2) {\n            return CountOccurrence(tup2.Item1, lst) + CountOccurrence(tup2.Item2, lst);\n        } else if (lst is List<object> lst2) {\n            return lst2.Count(x => x.Equals(tup));\n        } else {\n            return 0;\n        }",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Convert to list\n        List<object> list = new List<object>();\n        foreach (object obj in (IEnumerable<object>)lst) {\n            list.Add(obj);\n        }\n        // Count\n        long count = 0;\n        foreach (object obj in (IEnumerable<object>)tup) {\n            if (list.Contains(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var item in l) {\n            foreach (var tupItem in t) {\n                if (item.Equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        var c = new Dictionary<object, int>();\n        foreach (var e in t) {\n            if (!c.ContainsKey(e)) {\n                c[e] = 0;\n            }\n            c[e]++;\n        }\n        var r = 0;\n        foreach (var e in l) {\n            if (c.ContainsKey(e)) {\n                r += c[e];\n            }\n        }\n        return r;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            if (((IEnumerable<object>)lst).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_list = (tup as IEnumerable<object>).ToList();\n        var lst_list = (lst as IEnumerable<object>).ToList();\n        return lst_list.Count(x => tup_list.Contains(x));",
    "        var tup_list = tup as IEnumerable<object>;\n        var lst_list = lst as IEnumerable<object>;\n        return tup_list.Count(x => lst_list.Contains(x));",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // your code here\n        return 0;",
    "        var t = tup as IEnumerable<object>;\n        var l = lst as IEnumerable<object>;\n        if (t == null || l == null) {\n            return 0;\n        }\n        var count = 0;\n        foreach (var item in l) {\n            count += t.Count(x => x.Equals(item));\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)tup) {\n            foreach (object item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // TODO: Implement this function\n        return 0;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            if (((List<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        var tup_lst = tup as IEnumerable<object>;\n        var lst_lst = lst as IEnumerable<object>;\n        if (tup_lst == null || lst_lst == null) {\n            throw new ArgumentException(\"Expected list and tuple\");\n        }\n        var tup_set = new HashSet<object>(tup_lst);\n        return lst_lst.Count(x => tup_set.Contains(x));",
    "        var t = (Tuple<int, int, int, int>)tup;\n        var l = (List<int>)lst;\n        var count = 0;\n        foreach (var i in l) {\n            if (t.Item1 == i) count++;\n            if (t.Item2 == i) count++;\n            if (t.Item3 == i) count++;\n            if (t.Item4 == i) count++;\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            foreach (var t in (IEnumerable<object>)tup) {\n                if (item == t) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // TODO: Implement this function\n        return 0;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        var count = 0;\n        foreach (var e in l) {\n            if (e.Equals(t.Item1) || e.Equals(t.Item2)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (object o in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        foreach (var item in (List<object>)lst) {\n            count += ((List<object>)tup).Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)lst) {\n            count += ((IEnumerable<object>)tup).Count(x => x.Equals(item));\n        }\n        return count;",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1) || x.Equals(t.Item2));",
    "        var t = (Tuple<object, object>)tup;\n        var l = (List<object>)lst;\n        return l.Count(x => x.Equals(t.Item1));",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (var item in (IEnumerable<object>)tup) {\n            foreach (var item2 in (IEnumerable<object>)lst) {\n                if (item.Equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        foreach (object item in (IEnumerable<object>)lst) {\n            if (((IEnumerable<object>)tup).Contains(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Convert the tuple to a list\n        List<object> tupList = new List<object>();\n        foreach (object item in (IEnumerable<object>)tup) {\n            tupList.Add(item);\n        }\n        // Convert the list to a list\n        List<object> lstList = new List<object>();\n        foreach (object item in (IEnumerable<object>)lst) {\n            lstList.Add(item);\n        }\n        // Count the occurences\n        long count = 0;\n        foreach (object item in lstList) {\n            count += tupList.Count(x => x == item);\n        }\n        return count;",
    "        long count = 0;\n        foreach(object item in (IEnumerable<object>)lst) {\n            if(tup.Equals(item)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        var tup_lst = tup as IEnumerable<object>;\n        var lst_lst = lst as IEnumerable<object>;\n        var count = 0;\n        foreach (var elem in lst_lst) {\n            foreach (var tup_elem in tup_lst) {\n                if (elem.Equals(tup_elem)) {\n                    count++;\n                }\n            }\n        }\n        return count;"
  ]
}