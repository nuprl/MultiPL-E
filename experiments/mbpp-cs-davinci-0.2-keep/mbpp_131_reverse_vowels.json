{
  "name": "mbpp_131_reverse_vowels",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    public static string ReverseVowels(string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseVowels((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(ReverseVowels((\"USA\")).Equals((\"ASU\")));\n    Debug.Assert(ReverseVowels((\"ab\")).Equals((\"ab\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n        // O(n)\n",
    "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1Array.Length - 1;\n        while (i < j) {\n            if (!vowels.Contains(str1Array[i])) {\n                i++;\n                continue;\n            }\n            if (!vowels.Contains(str1Array[j])) {\n                j--;\n                continue;\n            }\n            char temp = str1Array[i];\n            str1Array[i] = str1Array[j];\n            str1Array[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(str1Array);",
    "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        char[] str1Arr = str1.ToCharArray();\n        int start = 0;\n        int end = str1Arr.Length - 1;\n        while (start < end) {\n            if (vowels.Contains(str1Arr[start]) && vowels.Contains(str1Arr[end])) {\n                char temp = str1Arr[start];\n                str1Arr[start] = str1Arr[end];\n                str1Arr[end] = temp;\n                start++;\n                end--;\n            } else if (vowels.Contains(str1Arr[start])) {\n                end--;\n            } else if (vowels.Contains(str1Arr[end])) {\n                start++;\n            } else {\n                start++;\n                end--;\n            }\n        }\n        return new string(str1Arr);",
    "        // create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        // create a list of characters\n        List<char> chars = new List<char>();\n        // create a list of vowels in the string\n        List<char> stringVowels = new List<char>();\n        // iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // if the character is a vowel, add it to the list of vowels\n            if (vowels.Contains(str1[i])) {\n                stringVowels.Add(str1[i]);\n            }\n            // add the character to the list of characters\n            chars.Add(str1[i]);\n        }\n        // reverse the list of vowels\n        stringVowels.Reverse();\n        // iterate through the list of characters\n        for (int i = 0; i < chars.Count; i++) {\n            // if the character is a vowel, replace it with the corresponding vowel from the reversed list\n            if (vowels.Contains(chars[i])) {\n                chars[i] = stringVowels[0];\n                stringVowels.RemoveAt(0);\n            }\n        }\n        // return the string\n        return new string(chars.ToArray());",
    "        // Create a list of vowels.\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the string's characters.\n        List<char> str1List = str1.ToList();\n        // Create a list of the string's vowels.\n        List<char> str1Vowels = new List<char>();\n        // Create a list of the string's vowel indices.\n        List<int> str1VowelIndices = new List<int>();\n        // Iterate through the string's characters.\n        for (int i = 0; i < str1List.Count; i++) {\n            // If the character is a vowel, add it to the vowel list and its index to the vowel index list.\n            if (vowels.Contains(str1List[i])) {\n                str1Vowels.Add(str1List[i]);\n                str1VowelIndices.Add(i);\n            }\n        }\n        // Reverse the vowel list.\n        str1Vowels.Reverse();\n        // Iterate through the vowel index list.\n        for (int i = 0; i < str1VowelIndices.Count; i++) {\n            // Replace the character at the vowel index with the corresponding vowel.\n            str1List[str1VowelIndices[i]] = str1Vowels[i];\n        }\n        // Return the string.\n        return string.Join(\"\", str1List);",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1Array.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str1Array[i]) && vowels.Contains(str1Array[j])) {\n                char temp = str1Array[i];\n                str1Array[i] = str1Array[j];\n                str1Array[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str1Array[i])) {\n                j--;\n            } else if (vowels.Contains(str1Array[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str1Array);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the string's characters\n        List<char> str1List = str1.ToList();\n        // Create a list of the string's vowels\n        List<char> str1Vowels = str1List.Where(x => vowels.Contains(x)).ToList();\n        // Reverse the vowels\n        str1Vowels.Reverse();\n        // Create a list of the string's non-vowels\n        List<char> str1NonVowels = str1List.Where(x => !vowels.Contains(x)).ToList();\n        // Create a list of the string's characters with the vowels reversed\n        List<char> str1Reversed = new List<char>();\n        // Add the non-vowels to the list\n        str1Reversed.AddRange(str1NonVowels);\n        // Add the vowels to the list\n        str1Reversed.AddRange(str1Vowels);\n        // Sort the list\n        str1Reversed.Sort();\n        // Return the list as a string\n        return new string(str1Reversed.ToArray());",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        // Create a list of the characters in the string\n        List<char> chars = new List<char>();\n        foreach (char c in str1) {\n            chars.Add(c);\n        }\n        // Create a list of the vowels in the string\n        List<char> vowelChars = new List<char>();\n        foreach (char c in str1) {\n            if (vowels.Contains(c)) {\n                vowelChars.Add(c);\n            }\n        }\n        // Reverse the vowels\n        vowelChars.Reverse();\n        // Replace the vowels in the string with the reversed vowels\n        int vowelIndex = 0;\n        for (int i = 0; i < chars.Count; i++) {\n            if (vowels.Contains(chars[i])) {\n                chars[i] = vowelChars[vowelIndex];\n                vowelIndex++;\n            }\n        }\n        // Return the string\n        return String.Join(\"\", chars);",
    "        string vowels = \"aeiouAEIOU\";\n        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str[i]) && vowels.Contains(str[j])) {\n                char temp = str[i];\n                str[i] = str[j];\n                str[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str[i])) {\n                j--;\n            } else if (vowels.Contains(str[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str);",
    "        // create a list of vowels\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // create a list of characters that will be reversed\n        List<char> reversed = new List<char>();\n        // create a list of characters that will be returned\n        List<char> returnList = new List<char>();\n        // iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // if the character is a vowel, add it to the reversed list\n            if (vowels.Contains(str1[i])) {\n                reversed.Add(str1[i]);\n            }\n        }\n        // reverse the list of vowels\n        reversed.Reverse();\n        // iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // if the character is a vowel, add the last character of the reversed list to the return list\n            if (vowels.Contains(str1[i])) {\n                returnList.Add(reversed[0]);\n                // remove the last character of the reversed list\n                reversed.RemoveAt(0);\n            }\n            // if the character is not a vowel, add it to the return list\n            else {\n                returnList.Add(str1[i]);\n            }\n        }\n        // return the list as a string\n        return string.Join(\"\", returnList);",
    "        // Create a list of vowels\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the characters in the string\n        char[] chars = str1.ToCharArray();\n        // Create a list of the indices of the vowels in the string\n        List<int> vowelIndices = new List<int>();\n        for (int i = 0; i < chars.Length; i++) {\n            if (vowels.Contains(chars[i])) {\n                vowelIndices.Add(i);\n            }\n        }\n        // Reverse the vowels\n        for (int i = 0; i < vowelIndices.Count / 2; i++) {\n            char temp = chars[vowelIndices[i]];\n            chars[vowelIndices[i]] = chars[vowelIndices[vowelIndices.Count - 1 - i]];\n            chars[vowelIndices[vowelIndices.Count - 1 - i]] = temp;\n        }\n        // Return the reversed string\n        return new string(chars);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> {'a', 'e', 'i', 'o', 'u'};\n        // Create a list of the vowels in the string\n        List<char> vowelsInString = new List<char>();\n        // Create a list of the indices of the vowels in the string\n        List<int> vowelIndices = new List<int>();\n        // Create a list of the characters in the string\n        List<char> chars = new List<char>();\n        // Iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the character is a vowel\n            if (vowels.Contains(str1[i])) {\n                // Add the character to the list of vowels in the string\n                vowelsInString.Add(str1[i]);\n                // Add the index of the character to the list of vowel indices\n                vowelIndices.Add(i);\n            }\n            // Add the character to the list of characters\n            chars.Add(str1[i]);\n        }\n        // Reverse the list of vowels in the string\n        vowelsInString.Reverse();\n        // Iterate through the list of vowel indices\n        for (int i = 0; i < vowelIndices.Count; i++) {\n            // Replace the character at the vowel index with the corresponding vowel\n            chars[vowelIndices[i]] = vowelsInString[i];\n        }\n        // Return the string\n        return new string(chars.ToArray());",
    "        // Create a list of vowels\n        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the indices of the vowels\n        List<int> vowelIndices = new List<int>();\n        // Create a list of the vowels\n        List<char> vowelList = new List<char>();\n        // Iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the current character is a vowel\n            if (vowels.Contains(str1[i])) {\n                // Add the index to the list of vowel indices\n                vowelIndices.Add(i);\n                // Add the vowel to the list of vowels\n                vowelList.Add(str1[i]);\n            }\n        }\n        // Reverse the list of vowels\n        vowelList.Reverse();\n        // Create a new string builder\n        StringBuilder sb = new StringBuilder(str1);\n        // Iterate through the list of vowel indices\n        for (int i = 0; i < vowelIndices.Count; i++) {\n            // Replace the vowel at the current index with the vowel at the current index in the reversed list\n            sb[vowelIndices[i]] = vowelList[i];\n        }\n        // Return the string\n        return sb.ToString();",
    "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str1Array[i]) && vowels.Contains(str1Array[j])) {\n                char temp = str1Array[i];\n                str1Array[i] = str1Array[j];\n                str1Array[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str1Array[i])) {\n                j--;\n            } else if (vowels.Contains(str1Array[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str1Array);",
    "        string vowels = \"aeiou\";\n        string str2 = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (vowels.Contains(str1[i])) {\n                str2 += str1[i];\n            }\n        }\n        str2 = new string(str2.Reverse().ToArray());\n        int j = 0;\n        string str3 = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            if (vowels.Contains(str1[i])) {\n                str3 += str2[j];\n                j++;\n            } else {\n                str3 += str1[i];\n            }\n        }\n        return str3;",
    "        string vowels = \"aeiouAEIOU\";\n        char[] str1Arr = str1.ToCharArray();\n        int left = 0;\n        int right = str1Arr.Length - 1;\n        while (left < right) {\n            if (vowels.Contains(str1Arr[left]) && vowels.Contains(str1Arr[right])) {\n                char temp = str1Arr[left];\n                str1Arr[left] = str1Arr[right];\n                str1Arr[right] = temp;\n                left++;\n                right--;\n            } else if (vowels.Contains(str1Arr[left])) {\n                right--;\n            } else if (vowels.Contains(str1Arr[right])) {\n                left++;\n            } else {\n                left++;\n                right--;\n            }\n        }\n        return new string(str1Arr);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the indexes of the vowels\n        List<int> vowelIndexes = new List<int>();\n        // Create a list of the vowels\n        List<char> vowelChars = new List<char>();\n        // Loop through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the current character is a vowel\n            if (vowels.Contains(str1[i])) {\n                // Add the index to the vowel indexes list\n                vowelIndexes.Add(i);\n                // Add the character to the vowel characters list\n                vowelChars.Add(str1[i]);\n            }\n        }\n        // Reverse the vowel characters list\n        vowelChars.Reverse();\n        // Create a string builder\n        StringBuilder sb = new StringBuilder(str1);\n        // Loop through the vowel indexes\n        for (int i = 0; i < vowelIndexes.Count; i++) {\n            // Replace the vowel at the current index with the vowel at the current index in the vowel characters list\n            sb[vowelIndexes[i]] = vowelChars[i];\n        }\n        // Return the string builder as a string\n        return sb.ToString();",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of the characters in the string\n        List<char> chars = str1.ToList();\n        // Create a list of the indices of the vowels in the string\n        List<int> vowelIndices = new List<int>();\n        for (int i = 0; i < chars.Count; i++) {\n            if (vowels.Contains(chars[i])) {\n                vowelIndices.Add(i);\n            }\n        }\n        // Reverse the vowels in the string\n        for (int i = 0; i < vowelIndices.Count / 2; i++) {\n            char temp = chars[vowelIndices[i]];\n            chars[vowelIndices[i]] = chars[vowelIndices[vowelIndices.Count - 1 - i]];\n            chars[vowelIndices[vowelIndices.Count - 1 - i]] = temp;\n        }\n        // Return the reversed string\n        return new string(chars.ToArray());",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        // Create a list of chars\n        List<char> chars = new List<char>();\n        // Loop through the string\n        foreach (char c in str1) {\n            // If the char is a vowel, add it to the list\n            if (vowels.Contains(c)) {\n                chars.Add(c);\n            }\n        }\n        // Reverse the list of vowels\n        chars.Reverse();\n        // Create a string builder\n        StringBuilder sb = new StringBuilder();\n        // Create a counter\n        int counter = 0;\n        // Loop through the string\n        foreach (char c in str1) {\n            // If the char is a vowel, add the reversed vowel to the string builder\n            if (vowels.Contains(c)) {\n                sb.Append(chars[counter]);\n                counter++;\n            }\n            // Else, add the char to the string builder\n            else {\n                sb.Append(c);\n            }\n        }\n        // Return the string builder\n        return sb.ToString();",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str[i]) && vowels.Contains(str[j])) {\n                char temp = str[i];\n                str[i] = str[j];\n                str[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str[i])) {\n                j--;\n            } else if (vowels.Contains(str[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str);"
  ]
}