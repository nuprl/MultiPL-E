{
  "name": "mbpp_733_find_first_occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array.\n    public static long FindFirstOccurrence(List<long> A, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)5L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (1L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (2L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (6L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                right = mid - 1;\n            } else if (x < A[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x == A[(int)mid]) {\n                result = mid;\n                hi = mid - 1;\n            }\n            else if (x < A[(int)mid]) {\n                hi = mid - 1;\n            }\n            else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long l = 0;\n        long r = A.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (A[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        if (A[l] == x) {\n            return l;\n        } else {\n            return -1;\n        }",
    "        // TODO: Implement this method\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return -1;"
  ]
}