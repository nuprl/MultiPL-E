{
  "name": "mbpp_747_lcs_of_three",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m+1,n+1,o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i,j,k] = 0;\n                    } else if (X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                        L[i,j,k] = L[i-1,j-1,k-1] + 1;\n                    } else {\n                        L[i,j,k] = Math.Max(Math.Max(L[i-1,j,k], L[i,j-1,k]), L[i,j,k-1]);\n                    }\n                }\n            }\n        }\n        return L[m,n,o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = 1 + dp[i - 1, j - 1, k - 1];\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var n = X.Length;\n        var m = Y.Length;\n        var k = Z.Length;\n        var dp = new long[n + 1, m + 1, k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                for (int l = 0; l <= k; l++) {\n                    if (i == 0 || j == 0 || l == 0) {\n                        dp[i, j, l] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[l - 1]) {\n                        dp[i, j, l] = 1 + dp[i - 1, j - 1, l - 1];\n                    } else {\n                        dp[i, j, l] = Math.Max(dp[i - 1, j, l], Math.Max(dp[i, j - 1, l], dp[i, j, l - 1]));\n                    }\n                }\n            }\n        }\n        return dp[n, m, k];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length, n = Y.Length, o = Z.Length;\n        int[, ,] dp = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length, n = Y.Length, o = Z.Length;\n        int[, ,] dp = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        dp[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    else\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var lcs = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        lcs[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        lcs[i, j, k] = lcs[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        lcs[i, j, k] = Math.Max(Math.Max(lcs[i - 1, j, k], lcs[i, j - 1, k]), lcs[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return lcs[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var lcs = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (var i = 0; i <= X.Length; i++) {\n            for (var j = 0; j <= Y.Length; j++) {\n                for (var k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        lcs[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        lcs[i, j, k] = lcs[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        lcs[i, j, k] = Math.Max(Math.Max(lcs[i - 1, j, k], lcs[i, j - 1, k]), lcs[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return lcs[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int[, ,] L = new int[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length, n = Y.Length, o = Z.Length;\n        long[,,] dp = new long[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m+1, n+1, o+1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                        dp[i, j, k] = dp[i-1, j-1, k-1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i-1, j, k], Math.Max(dp[i, j-1, k], dp[i, j, k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var lcs = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        lcs[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        lcs[i, j, k] = lcs[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        lcs[i, j, k] = Math.Max(Math.Max(lcs[i - 1, j, k], lcs[i, j - 1, k]), lcs[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return lcs[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var n = X.Length;\n        var m = Y.Length;\n        var l = Z.Length;\n        var dp = new long[n + 1, m + 1, l + 1];\n        for (var i = 0; i <= n; i++) {\n            for (var j = 0; j <= m; j++) {\n                for (var k = 0; k <= l; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[n, m, l];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var n = X.Length;\n        var m = Y.Length;\n        var o = Z.Length;\n        var dp = new long[n + 1, m + 1, o + 1];\n        for (var i = 0; i <= n; i++) {\n            for (var j = 0; j <= m; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[n, m, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var lcs = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        lcs[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        lcs[i, j, k] = lcs[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        lcs[i, j, k] = Math.Max(Math.Max(lcs[i - 1, j, k], lcs[i, j - 1, k]), lcs[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return lcs[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        long[,,] L = new long[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var x = X.Length;\n        var y = Y.Length;\n        var z = Z.Length;\n        var dp = new long[x + 1, y + 1, z + 1];\n        for (var i = 0; i <= x; i++) {\n            for (var j = 0; j <= y; j++) {\n                for (var k = 0; k <= z; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[x, y, z];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        dp[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    else\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] dp = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m+1, n+1, o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                        L[i, j, k] = L[i-1, j-1, k-1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i-1, j, k], L[i, j-1, k]), L[i, j, k-1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        long[, ,] L = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(L[i - 1, j, k], Math.Max(L[i, j - 1, k], L[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = 1 + dp[i - 1, j - 1, k - 1];\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 0; i <= X.Length; i++) {\n            for (int j = 0; j <= Y.Length; j++) {\n                for (int k = 0; k <= Z.Length; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        dp[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    else\n                        dp[i, j, k] = Math.Max(Math.Max(dp[i - 1, j, k], dp[i, j - 1, k]), dp[i, j, k - 1]);\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var dp = new long[X.Length + 1, Y.Length + 1, Z.Length + 1];\n        for (int i = 1; i <= X.Length; i++) {\n            for (int j = 1; j <= Y.Length; j++) {\n                for (int k = 1; k <= Z.Length; k++) {\n                    if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[X.Length, Y.Length, Z.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length, n = Y.Length, o = Z.Length;\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var dp = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        dp[i, j, k] = Math.Max(dp[i - 1, j, k], Math.Max(dp[i, j - 1, k], dp[i, j, k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n        int[, ,] L = new int[m + 1, n + 1, o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i, j, k] = 0;\n                    else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1])\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    else\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n        var m = X.Length;\n        var n = Y.Length;\n        var o = Z.Length;\n        var L = new long[m + 1, n + 1, o + 1];\n        for (var i = 0; i <= m; i++) {\n            for (var j = 0; j <= n; j++) {\n                for (var k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m, n, o];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}