{
  "name": "mbpp_627_find_First_Missing",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can use binary search to find the first missing number\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdouh8piz.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return n + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <a5ea72723e354df298aa51f34c2d83de>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a5ea72723e354df298aa51f34c2d83de>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <a5ea72723e354df298aa51f34c2d83de>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <a5ea72723e354df298aa51f34c2d83de>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] != array[i] + 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f99b8874fd744b969b28af7f9b7257e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f99b8874fd744b969b28af7f9b7257e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        long last = min;\n        while (min < max) {\n            if (array.Contains(mid)) {\n                min = mid + 1;\n                last = mid;\n            }\n            else {\n                max = mid;\n            }\n            mid = (min + max) / 2;\n        }\n        return last + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1e8c0d13a62548c79c2ed532204129b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1e8c0d13a62548c79c2ed532204129b2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f257a0cbf8d4cab9f4df81813ac4639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f257a0cbf8d4cab9f4df81813ac4639>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long missing = -1;\n        for (long i = min; i < max; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <06146ad41fc641dcbf8352e2c83c2ba5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <06146ad41fc641dcbf8352e2c83c2ba5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] == mid) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long max = array[array.Count - 1];\n        long min = array[0];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93120214fc774301831f1efb0d7ed6a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <93120214fc774301831f1efb0d7ed6a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count;\n        long mid = 0;\n        while (start < end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] > mid) {\n                end = mid;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return start;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function.\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = (first + last) / 2;\n        if (array.Count == 1) {\n            if (array[0] == 1) {\n                return 2;\n            }\n            else {\n                return 1;\n            }\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        if (array[array.Count - 1] == array.Count) {\n            return array.Count + 1;\n        }\n        if (array[0] == 1 && array[1] == 2) {\n            return 3;\n        }\n        if (array[0] == 1 && array[1] == 3) {\n            return 2;\n        }\n        if (array[array.Count - 1] == array.Count - 1) {\n            return array.Count;\n        }\n        if (array[array.Count - 1] == array.Count - 2) {\n            return array.Count - 1;\n        }\n        if (array[array.Count - 2] == array.Count - 2) {\n            return array.Count - 1;\n        }\n        if (array[array.Count - 2] == array.Count - 3) {\n            return array.Count - 2;\n        }\n        if (array[array.Count - 3] == array.Count - 3) {\n            return array.Count - 2;\n        }\n        if (array[array.Count - 3] == array.Count - 4) {\n            return array.Count - 3;\n        }\n        if (array[array.Count - 4] == array.Count - 4) {\n            return array.Count - 3;\n        }\n        if (array[array.Count - 4] == array.Count - 5) {\n            return array.Count - 4;\n        }\n        if (array[array.Count - 5] == array.Count - 5) {\n            return array.Count - 4;\n        }\n        if (array[array.Count - 5] == array.Count - 6) {\n            return array.Count - 5;\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_yb9n_h.cs(66,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpz_yb9n_h.cs(72,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        while (min < max) {\n            if (array.Contains(mid)) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n            mid = (min + max) / 2;\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2646b42e99f046db9f2af675d5c63d89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2646b42e99f046db9f2af675d5c63d89>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = 0;\n        for (long i = first; i <= last; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        long count = 0;\n        while (min < max) {\n            count = 0;\n            foreach (long num in array) {\n                if (num <= mid) {\n                    count++;\n                }\n            }\n            if (count > mid) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n            mid = (min + max) / 2;\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e298baeb6a23415d8b83f1cf95384e3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e298baeb6a23415d8b83f1cf95384e3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d77454cdf9b94e96bd68c9f3f4c1de27>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <d77454cdf9b94e96bd68c9f3f4c1de27>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <d77454cdf9b94e96bd68c9f3f4c1de27>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <d77454cdf9b94e96bd68c9f3f4c1de27>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <d77454cdf9b94e96bd68c9f3f4c1de27>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] == mid) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return start;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        while (min < max) {\n            if (array.Contains(mid)) {\n                min = mid + 1;\n                mid = (min + max) / 2;\n            } else {\n                max = mid;\n                mid = (min + max) / 2;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <141d81675b794a798540853e7e21420c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <141d81675b794a798540853e7e21420c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid && (mid == 0 || array[(int)mid - 1] == mid - 1)) {\n                return mid;\n            } else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2424002126484c1b86193630ad17d5e7>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long count = last - first + 1;\n        long sum = (first + last) * count / 2;\n        long sum_of_array = 0;\n        foreach (long num in array) {\n            sum_of_array += num;\n        }\n        return sum - sum_of_array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40292820440f41eca17421f42aae660f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <40292820440f41eca17421f42aae660f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long left = 0;\n        long right = n - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            } else if (array[(int)mid] != mid + 1) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == n) {\n            return n + 1;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <2e26aa91cb3b4c659d05d3ba2ee103d2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <2e26aa91cb3b4c659d05d3ba2ee103d2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <2e26aa91cb3b4c659d05d3ba2ee103d2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <2e26aa91cb3b4c659d05d3ba2ee103d2>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = 0;\n        long last = array.Count - 1;\n        long mid = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] == mid) {\n                first = mid + 1;\n            } else {\n                last = mid - 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long left = 0;\n        long right = n - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid + 1) {\n                if (mid == 0 || array[(int)mid - 1] == mid) {\n                    return mid + 1;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a9e807fde164cb89f16a78da3649dea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9a9e807fde164cb89f16a78da3649dea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array.Min();\n        long max = array.Max();\n        long sum = array.Sum();\n        long expectedSum = (max * (max + 1)) / 2;\n        if (expectedSum == sum) {\n            return max + 1;\n        }\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b3b0533ae2c4b399d557834c2dbbc04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2b3b0533ae2c4b399d557834c2dbbc04>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2i3t71dj.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            } else if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <71df0fb0b8534ed6a04f4ea5062063b8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <71df0fb0b8534ed6a04f4ea5062063b8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <71df0fb0b8534ed6a04f4ea5062063b8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <71df0fb0b8534ed6a04f4ea5062063b8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid + 1) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid) {\n                    return mid + 1;\n                }\n                high = mid - 1;\n            }\n        }\n        return low + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5ec04f8fa01492ab156952cbf55cac9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d5ec04f8fa01492ab156952cbf55cac9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long start = 0;\n        long end = array.Count - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (mid == array.Count - 1 && array[(int)mid] == mid) {\n            return mid + 1;\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] != mid) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <74520e13a897400bb0fb8bd0a0653678>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <74520e13a897400bb0fb8bd0a0653678>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <74520e13a897400bb0fb8bd0a0653678>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <74520e13a897400bb0fb8bd0a0653678>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <74520e13a897400bb0fb8bd0a0653678>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // If the array is empty, return 1\n        if (array.Count == 0) {\n            return 1;\n        }\n        // If the first element is not 1, return 1\n        if (array[0] != 1) {\n            return 1;\n        }\n        // If the last element is not the length of the array, return the length of the array\n        if (array[array.Count - 1] != array.Count) {\n            return array.Count;\n        }\n        // If the array is of length 1, return 2\n        if (array.Count == 1) {\n            return 2;\n        }\n        // If the array is of length 2, return the difference between the first and second elements + 1\n        if (array.Count == 2) {\n            return array[1] - array[0] + 1;\n        }\n        // Find the middle element\n        long middle = array[array.Count / 2];\n        // If the middle element is not the middle index + 1, return the middle index + 1\n        if (middle != array.Count / 2 + 1) {\n            return array.Count / 2 + 1;\n        }\n        // If the middle element is the middle index + 1, recurse on the first half of the array\n        return FindFirstMissing(array.GetRange(0, array.Count / 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870cffb4a2714aca839153cab48c5228>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <870cffb4a2714aca839153cab48c5228>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n        if (first == array.Count) {\n            return first;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <f6ffb89348fb41a0a1d88ea905f171c0>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <f6ffb89348fb41a0a1d88ea905f171c0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <f6ffb89348fb41a0a1d88ea905f171c0>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <f6ffb89348fb41a0a1d88ea905f171c0>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long missing = 1;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] == missing) {\n                missing++;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4ecf749d789c4678807993cac60d43a6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid)\n                return mid + 1;\n            if (array[(int)mid] != mid + 1)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return mid + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x0002c] in <c41dd5dd3c344a70874d790a73d33799>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <c41dd5dd3c344a70874d790a73d33799>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x0002c] in <c41dd5dd3c344a70874d790a73d33799>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <c41dd5dd3c344a70874d790a73d33799>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // This is a binary search problem\n        // We want to find the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n        // We can do this by binary searching for the first index where the value is not equal to the index\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp48pscw3v.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            } else if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return n + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <41325bda0a874fc48edbd9a6ec7252c8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <41325bda0a874fc48edbd9a6ec7252c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <41325bda0a874fc48edbd9a6ec7252c8>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <41325bda0a874fc48edbd9a6ec7252c8>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <969943e01f394d4dae64ca6e44988262>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <969943e01f394d4dae64ca6e44988262>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <969943e01f394d4dae64ca6e44988262>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <969943e01f394d4dae64ca6e44988262>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] - array[i] > 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf06a961d56448cfa8e8e0f557d66016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bf06a961d56448cfa8e8e0f557d66016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long i = 0;\n        while (i < array.Count) {\n            if (array[(int)i] != i) {\n                return i;\n            }\n            i++;\n        }\n        return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        while (first < last) {\n            mid = first + (last - first) / 2;\n            if (array[mid] > mid) {\n                last = mid;\n            } else {\n                first = mid + 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo47qkz9j.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Your code goes here.\n        // return -1 if no missing number\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        while (min < max) {\n            if (array.Contains(mid)) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n            mid = (min + max) / 2;\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8d6683d4a1dd4511bd8e77ee520fb42a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8d6683d4a1dd4511bd8e77ee520fb42a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long sum2 = 0;\n        for (long i = min; i <= max; i++) {\n            sum2 += i;\n        }\n        return sum2 - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <731ba41aa0734e26980dee04417fd3fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <731ba41aa0734e26980dee04417fd3fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long result = 0;\n\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i + 1) {\n                result = i + 1;\n                break;\n            }\n        }\n\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <930fa3365d4644a481df0cba23866d37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <930fa3365d4644a481df0cba23866d37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array.Count == 1) {\n            if (array[0] == 1) {\n                return 2;\n            } else {\n                return 1;\n            }\n        }\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long sum = 0;\n        foreach (long i in array) {\n            sum += i;\n        }\n        long expectedSum = (min + max) * (array.Count + 1) / 2;\n        if (expectedSum == sum) {\n            return max + 1;\n        }\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dc5de23d46546bb83f1b75f5ce37c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4dc5de23d46546bb83f1b75f5ce37c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return n + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <e8dd6f20d4a1422c9f222c18d629f63f>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <e8dd6f20d4a1422c9f222c18d629f63f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <e8dd6f20d4a1422c9f222c18d629f63f>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <e8dd6f20d4a1422c9f222c18d629f63f>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] != mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <138f35cf03c4404da4292f26f1c29a9f>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <138f35cf03c4404da4292f26f1c29a9f>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <138f35cf03c4404da4292f26f1c29a9f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <138f35cf03c4404da4292f26f1c29a9f>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <138f35cf03c4404da4292f26f1c29a9f>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Find the first missing number in a sorted list of natural numbers.\n        //\n        // Input:\n        //   array: a sorted list of natural numbers\n        //\n        // Output:\n        //   the first missing number in the list\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20]\n        //   Output: 15\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n        //   Output: 21\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n        //   Output: 22\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n        //   Output: 23\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n        //   Output: 24\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n        //   Output: 25\n        //\n        // Example:\n        //   Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpftgq_3ye.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else if (array[(int)mid] > mid) {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] > mid) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ecb3ce426e94419a9ce0ab465d160bda>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ecb3ce426e94419a9ce0ab465d160bda>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ecb3ce426e94419a9ce0ab465d160bda>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ecb3ce426e94419a9ce0ab465d160bda>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long missing = 0;\n        long i = 0;\n        while (i < array.Count) {\n            if (array[(int)i] != i) {\n                missing = i;\n                break;\n            }\n            i++;\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f0ec385184f94054b9be79938ab1decb>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long i = 0;\n        while (i < array.Count) {\n            if (array[(int)i] != i) {\n                return i;\n            }\n            i++;\n        }\n        return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Find the first missing number in a sorted list of natural numbers\n        // Time complexity: O(log n)\n        // Space complexity: O(1)\n        //\n        // Example:\n        //\n        // Input: [1, 2, 3, 4, 6, 7, 8]\n        // Output: 5\n        //\n        // Input: [1, 2, 3, 4, 5, 6, 7, 8]\n        // Output: 9\n        //\n        // Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi5dbmm_x.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfec1a193a21458ab2088e426dc2e45e>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <bfec1a193a21458ab2088e426dc2e45e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bfec1a193a21458ab2088e426dc2e45e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <bfec1a193a21458ab2088e426dc2e45e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <bfec1a193a21458ab2088e426dc2e45e>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Find the first missing number in a sorted list of natural numbers.\n        // The list is sorted in ascending order.\n        // The list is not empty.\n        // The list is not guaranteed to be continuous.\n        // The list may contain duplicates.\n        // The list may contain negative numbers.\n        // The list may contain zero.\n        // The list may contain positive numbers.\n        // The list may contain a single number.\n        // The list may contain a single number that is missing.\n        // The list may contain a single number that is not missing.\n        // The list may contain two numbers that are missing.\n        // The list may contain two numbers that are not missing.\n        // The list may contain three numbers that are missing.\n        // The list may contain three numbers that are not missing.\n        // The list may contain four numbers that are missing.\n        // The list may contain four numbers that are not missing.\n        // The list may contain five numbers that are missing.\n        // The list may contain five numbers that are not missing.\n        // The list may contain six numbers that are missing.\n        // The list may contain six numbers that are not missing.\n        // The list may contain seven numbers that are missing.\n        // The list may contain seven numbers that are not missing.\n        // The list may contain eight numbers that are missing.\n        // The list may contain eight numbers that are not missing.\n        // The list may contain nine numbers that are missing.\n        // The list may contain nine numbers that are not missing.\n        // The list may contain ten numbers that are missing.\n        // The list may contain ten numbers that are not missing.\n        // The list may contain eleven numbers that are missing.\n        // The list may contain eleven numbers that are not missing.\n        // The list may contain twelve numbers that are missing.\n        // The list may contain twelve numbers that are not missing.\n        // The list may contain thirteen numbers that are missing.\n        // The list may contain thirteen numbers that are not missing.\n        // The list may contain fourteen numbers that are missing.\n        // The list may contain fourteen numbers that are not missing.\n        // The list may contain fifteen numbers that are missing.\n        // The list may contain fifteen numbers that are not missing.\n        // The list may contain\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4loygyfi.cs(10,24): error CS0161: 'Problem.FindFirstMissing(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = 0;\n        for (long i = first; i <= last; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        int i = 0;\n        while (i < array.Count) {\n            if (array[i] != i) {\n                return i;\n            }\n            i++;\n        }\n        return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (array[m] == m + 1) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp67tongks.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <380ba56b16d542c4b521833d35b3ba75>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (array.Contains(i)) {\n                missing++;\n            } else {\n                return missing;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <aee88d2fca164d53ac18deb6544cfdcb>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long l = 0;\n        long r = array.Count - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (array[(int)m] != m) {\n                if (m == 0 || array[(int)m - 1] == m - 1) {\n                    return m;\n                }\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        if (l == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = (first + last) / 2;\n        long first_half = 0;\n        long second_half = 0;\n        if (first == last) {\n            return first + 1;\n        }\n        if (first == last - 1) {\n            return first + 2;\n        }\n        if (first == last - 2) {\n            return first + 3;\n        }\n        if (array.Count % 2 == 0) {\n            first_half = mid;\n            second_half = mid + 1;\n        } else {\n            first_half = mid;\n            second_half = mid;\n        }\n        if (array.IndexOf(first_half) == -1) {\n            return first_half;\n        }\n        if (array.IndexOf(second_half) == -1) {\n            return second_half;\n        }\n        if (array.IndexOf(first_half) > array.IndexOf(second_half)) {\n            return FindFirstMissing(array.GetRange(0, array.IndexOf(first_half)));\n        } else {\n            return FindFirstMissing(array.GetRange(array.IndexOf(second_half), array.Count - array.IndexOf(second_half)));\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f82246ac92414722a00061fdd78d0696>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f82246ac92414722a00061fdd78d0696>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] != m) {\n                if (m == 0 || array[(int)m - 1] == m - 1) {\n                    return m;\n                }\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <34b59cabcdc549439b3a2e02986f6b1c>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <34b59cabcdc549439b3a2e02986f6b1c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <34b59cabcdc549439b3a2e02986f6b1c>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <34b59cabcdc549439b3a2e02986f6b1c>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            else if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x0002c] in <55e1a6238ad3444d9949305bfda2c505>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <55e1a6238ad3444d9949305bfda2c505>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x0002c] in <55e1a6238ad3444d9949305bfda2c505>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <55e1a6238ad3444d9949305bfda2c505>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            }\n            else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00026] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <dee3697ca6d045d3937044b1b99dcaf6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return mid + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <d71e332d74004cb49b71bdb96e7e90a2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d71e332d74004cb49b71bdb96e7e90a2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <d71e332d74004cb49b71bdb96e7e90a2>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <d71e332d74004cb49b71bdb96e7e90a2>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long result = 0;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i + 1) {\n                result = i + 1;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30d001d2247149dbaf892c7a37dd4f9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30d001d2247149dbaf892c7a37dd4f9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long sum2 = 0;\n        for (long i = min; i <= max; i++) {\n            sum2 += i;\n        }\n        return sum2 - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b7f054057214afc9b3970021858dcdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3b7f054057214afc9b3970021858dcdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array == null || array.Count == 0) {\n            return 1;\n        }\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            } else if (array[(int)mid] != mid + 1) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array[(int)array.Count - 1] + 1;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00045] in <43a475f7b727439894d07be4bdbb0fc6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <43a475f7b727439894d07be4bdbb0fc6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00045] in <43a475f7b727439894d07be4bdbb0fc6>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <43a475f7b727439894d07be4bdbb0fc6>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long result = 0;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i + 1) {\n                result = i + 1;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30d001d2247149dbaf892c7a37dd4f9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <30d001d2247149dbaf892c7a37dd4f9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <014e608fbd8441a9ad2701ca6f26754b>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <014e608fbd8441a9ad2701ca6f26754b>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <014e608fbd8441a9ad2701ca6f26754b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <014e608fbd8441a9ad2701ca6f26754b>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <014e608fbd8441a9ad2701ca6f26754b>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        long midIndex = (array.Count - 1) / 2;\n        while (min < max) {\n            if (array[(int)midIndex] == mid) {\n                min = mid + 1;\n                mid = (min + max) / 2;\n                midIndex = (array.Count - 1) / 2 + (int)mid;\n            } else {\n                max = mid - 1;\n                mid = (min + max) / 2;\n                midIndex = (array.Count - 1) / 2 - (int)mid;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d0345d2a67c14be4825ed328df71cf85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d0345d2a67c14be4825ed328df71cf85>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Gene",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] == mid) {\n                first = mid + 1;\n            } else {\n                last = mid - 1;\n            }\n        }\n        return first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ac0bebe8a3c84495be82d753dd615c64>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ac0bebe8a3c84495be82d753dd615c64>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ac0bebe8a3c84495be82d753dd615c64>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ac0bebe8a3c84495be82d753dd615c64>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long lo = 0;\n        long hi = array.Count;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (array[(int)mid] == mid) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = 0;\n        for (long i = first; i <= last; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04151bc4f99e4ce1a4b47b9ff16ec630>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e0b0fd05edc940e5aa9f0e6fc23d2271>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e0b0fd05edc940e5aa9f0e6fc23d2271>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else if (array[(int)mid] > mid) {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <ce1546b2f7d544b89997cf84fd7b221e>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid && array[(int)mid - 1] == mid - 1) {\n                return mid;\n            } else if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fa0ae7d616ba42898fd2a1ba53d7db13>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <fa0ae7d616ba42898fd2a1ba53d7db13>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <fa0ae7d616ba42898fd2a1ba53d7db13>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00028] in <fa0ae7d616ba42898fd2a1ba53d7db13>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <fa0ae7d616ba42898fd2a1ba53d7db13>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <969943e01f394d4dae64ca6e44988262>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <969943e01f394d4dae64ca6e44988262>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00029] in <969943e01f394d4dae64ca6e44988262>:0 \n  at Problem.Main (System.String[] args) [0x00017] in <969943e01f394d4dae64ca6e44988262>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[m] != m + 1) {\n                if (m == 0 || array[m - 1] == m) {\n                    return m + 1;\n                }\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return n + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123245,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5mjjsshz.cs(16,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp5mjjsshz.cs(17,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Your code goes here\n        long start = 0;\n        long end = array.Count - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] == mid) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return start;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        int n = array.Count;\n        if (n == 0) {\n            return 0;\n        }\n        if (array[n - 1] == n) {\n            return n + 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (array[m] == m + 1) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f32e1cf933d44d90b7c9a10f546c5f6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f32e1cf933d44d90b7c9a10f546c5f6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long missing = 0;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5897eb1c7e7e44e8853776417e5581b0>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long result = 0;\n        for (int i = 0; i < array.Count; i++) {\n            if (array[i] != i + 1) {\n                result = i + 1;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8c008cca37f4b1b8f79f939d8c8b142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e8c008cca37f4b1b8f79f939d8c8b142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (mid == array.Count - 1 && array[(int)mid] == mid) {\n            return mid + 1;\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] != array[i] + 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f99b8874fd744b969b28af7f9b7257e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f99b8874fd744b969b28af7f9b7257e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        if (expectedSum == sum) {\n            return max + 1;\n        }\n        return expectedSum - sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d3cbaa17fef45158489aab74cab9d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d3cbaa17fef45158489aab74cab9d35>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // TODO: Implement this function\n        long first = 0;\n        long last = array.Count - 1;\n        long mid = 0;\n        long ans = -1;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid] != mid) {\n                ans = mid;\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e4febc6dbd624f6ba05bd1767cca652e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long mid = 0;\n        while (first <= last) {\n            mid = (first + last) / 2;\n            if (array[(int)mid - (int)first] != mid) {\n                if (mid == first || array[(int)mid - (int)first - 1] == mid - 1) {\n                    return mid;\n                }\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n        if (first == last) {\n            return first + 1;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea00365cf19248018c0da6733ae358c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea00365cf19248018c0da6733ae358c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] > mid) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // We can do this in O(log n) time by using a binary search.\n        // If the array is empty, the first missing number is 1.\n        if (array.Count == 0) {\n            return 1;\n        }\n        // If the first element is not 1, then 1 is the first missing number.\n        if (array[0] != 1) {\n            return 1;\n        }\n        // If the last element is the same as the length of the array, then the array is complete.\n        if (array[array.Count - 1] == array.Count) {\n            return array.Count + 1;\n        }\n        // Otherwise, we can do a binary search for the first element that is not in its correct position.\n        // The first element that is not in its correct position is the first missing number.\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[mid] == mid + 1) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsi5k5fgi.cs(30,23): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        if (array.Count == 0) {\n            return 0;\n        }\n        if (array[0] != 0) {\n            return 0;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] - array[i] > 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = 0;\n        while (min <= max) {\n            mid = (min + max) / 2;\n            if (array[(int)mid] == mid) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindFirstMissing (System.Collections.Generic.List`1[T] array) [0x00025] in <2a0908970ed44754a72eb7789eff7aba>:0 \n  at Problem.Main (System.String[] args) [0x00061] in <2a0908970ed44754a72eb7789eff7aba>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low > array.Count - 1) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (array[(int)mid] == mid) {\n            return mid + 1;\n        }\n        return mid;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long start = 0;\n        long end = array.Count - 1;\n        long mid;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == array.Count) {\n            return array.Count;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
      "timestamp": 1665510439,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}