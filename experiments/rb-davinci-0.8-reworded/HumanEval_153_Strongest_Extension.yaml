name: HumanEval_153_Strongest_Extension
language: rb
prompt: "# You will be given the name of a class (a string) and an array of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the array.\n\
  # For example, if you are given \"Slices\" as the class and an array of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# >>> Strongest_Extension.call(\"my_class\", [\"AA\", \"Be\", \"CC\"\
  ])\n# \"my_class.AA\"\ndef Strongest_Extension(class_name, extensions)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
  \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
  , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
  Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
  , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
  , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
  \    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
  , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
  Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
  , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
  , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
  , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
  _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\"\
  , [\"671235\", \"Bb\"]))\n  end\nend\n"
completions: ["  if extensions.length == 0\n    return class_name\n  end\n  strengths\
    \ = []\n  extensions.each do |extension|\n    strengths << extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  strongest_index = strengths.index(strengths.max)\n\
    \  class_name + \".\" + extensions[strongest_index]\nend", "  strongest_extension\
    \ = extensions.sort_by do |element|\n    capital_count = element.count('A-Z')\n\
    \    small_count = element.count('a-z')\n    strength = capital_count - small_count\n\
    \    strength\n  end", "  extensions.sort! { |x, y| strength(x) <=> strength(y)\
    \ }\n  \"#{class_name}.#{extensions.last}\"\nend", "\tstrongest_extension = extensions.sort_by\
    \ { |extension| extension.count(\"A-Z\") - extension.count(\"a-z\") }.last\n\t\
    puts \"#{class_name}.#{strongest_extension}\"\nend", "    strongest_extension\
    \ = ''\n    extension_strength = 0\n    extensions.each do |e|\n        s = e.chars.select\
    \ { |i| /[A-Z]/.match(i) }.count - e.chars.select { |i| /[a-z]/.match(i) }.count\n\
    \        if s > extension_strength\n            extension_strength = s\n     \
    \       strongest_extension = e\n        end\n    end\n    return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  #create strength hash\n  strength_hash = {}\n  #iterate over extensions\
    \ and assign strength to each extension\n  extensions.each do |extension|\n  \
    \  caps = extension.count(\"A-Z\")\n    lowers = extension.count(\"a-z\")\n  \
    \  strength_hash[extension] = caps - lowers\n  end\n  #find max strength\n  max_strength\
    \ = strength_hash.values.max\n  #select strongest extension(s)\n  strongest_extensions\
    \ = strength_hash.select {|k,v| v == max_strength}\n  #check for duplicates\n\
    \  if strongest_extensions.count == 1\n    \"#{class_name}.#{strongest_extensions.keys[0]}\"\
    \n  else\n    #find smallest index\n    smallest_index = extensions.each_with_index.map\
    \ {|extension, index| extension if strongest_extensions.keys.include?(extension)\
    \ }.compact.min_by {|element| extensions.index(element)}\n    \"#{class_name}.#{smallest_index}\"\
    \n  end\nend", "  extension_strength = {}\n  extensions.each do |extension|\n\
    \    extension_strength[extension] = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n  end\n  \"#{class_name}.#{extension_strength.max_by{|k,v| v}[0]}\"\n\
    end", "  is_class = class_name.match(/\\A[A-Z][a-z]+\\z/) ? true : false\n  is_extension\
    \ = extensions.all? { |str| str.match(/\\A[A-Z][a-z]+\\z/) ? true : false }\n\
    \  output = \"\"\n  return output if !is_class || !is_extension\n  strongest_ext\
    \ = extensions.inject { |memo, str| \n    memo_cap = memo.count(\"A-Z\")\n   \
    \ memo_sm = memo.count(\"a-z\")\n    str_cap = str.count(\"A-Z\")\n    str_sm\
    \ = str.count(\"a-z\")\n    memo_diff = memo_cap - memo_sm\n    str_diff = str_cap\
    \ - str_sm\n    memo_diff > str_diff ? memo : str\n  }\n  output = \"#{class_name}.#{strongest_ext}\"\
    \n  output\nend", "  class_name + '.' + extensions.max_by { |e| [extensions.count(e),\
    \ extensions.index(e)] }\nend", "  arr = extensions.map { |ext| ext.split(//)\
    \ }\n  arr = arr.map { |e| [e.count { |x| x.match(/[A-Z]/) }, e.count { |x| x.match(/[a-z]/)\
    \ }] }\n  ext = arr.each_with_index.max_by { |e, i| e[0] - e[1] }\n  return class_name\
    \ + \".\" + extensions[ext[1]]\nend", "    # Write your code here\n    # To print\
    \ results to the standard output you can use puts\n    # Example puts \"Hello\
    \ world!\"\n    \n    puts(Strongest_Extension.call(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]))\n    #puts(Strongest_Extension.call(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]))\nend", "  strength_hash = {}\n  strongest_extension\
    \ = ''\n  strength = 0\n  extensions.each do |extension|\n    strength_hash[extension]\
    \ = extension.count('A-Z') - extension.count('a-z')\n    if strength_hash[extension]\
    \ > strength\n      strength = strength_hash[extension]\n      strongest_extension\
    \ = extension\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend",
  "  scores = []\n  extensions.each do |extension|\n    scores << [extension, score(extension)]\n\
    \  end\n  scores.sort! { |score_1, score_2| score_2[1] <=> score_1[1] }\n  scores.reject!\
    \ { |score| score[1] < scores[0][1] }\n  scores.sort! { |score_1, score_2| score_1[0]\
    \ <=> score_2[0] }\n  scores.map! { |score| score[0] }\n  \"#{class_name}.#{scores[0]}\"\
    \nend", "  # your code here\nend", "\tstrongest_extension = ''\n\tcurrent_strongest_extension_strength\
    \ = 0\n\textensions.each { |extension|\n\t\textension_strength = 0\n\t\textension.each_char\
    \ { |character| \n\t\t\tif character =~ /[A-Z]/\n\t\t\t\textension_strength +=\
    \ 1\n\t\t\telse\n\t\t\t\textension_strength -= 1\n\t\t\tend\n\t\t}\n\t\tif extension_strength\
    \ > current_strongest_extension_strength\n\t\t\tcurrent_strongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\t}\n\t\
    return class_name + '.' + strongest_extension\nend", "  # Your code goes here\n\
    end", "  strength_idx = {}\n  extensions.each_with_index do |ext, i|\n    strength_idx[i]\
    \ = ext.count(\"A-Z\") - ext.count(\"a-z\")\n  end\n  strongest_idx = strength_idx.max_by{|k,v|\
    \ v}[0]\n  \"#{class_name}.#{extensions[strongest_idx]}\"\nend", "  strongest_extension\
    \ = \"\"\n  strength = 0\n  if extensions.length > 0\n    extensions.each do |extension|\n\
    \      cap = extension.count(\"A-Z\")\n      sm = extension.count(\"a-z\")\n \
    \     if cap - sm > strength\n        strength = cap - sm\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  class_name + \".\" + strongest_extension\n\
    end", "  strongest_extension = \"\"\n  strongest_extension_strength = 0", "  strongest_extension\
    \ = \"\"\n  strongest_extension_strength = 0\n  extensions.each do |extension|\n\
    \    extension_strength = (extension.length - extension.upcase.length) - extension.length\
    \ + extension.upcase.length\n    if extension_strength > strongest_extension_strength\n\
    \      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "    Strongest_Extension = \"\"\n    strength = 0\n    strength_array\
    \ = []\n    extensions.each do |extension|\n        strength_array << (extension.count(\"\
    a-z\") - extension.count(\"A-Z\"))\n    end\n    Strongest_Extension = extensions[strength_array.index(strength_array.min)]\n\
    \    \"#{class_name}.#{Strongest_Extension}\"\nend\nStrongest_Extension(\"Myclass\"\
    , [\"AA\", \"Be\", \"CC\"])", "\textensions.each do |v|\n\t\tif v.to_i == 0\n\t\
    \t\tstrength = v.scan(/[A-Z]/).count - v.scan(/[a-z]/).count\n\t\t\treturn class_name.to_s\
    \ + \".\" + v.to_s if strength.abs == extensions.max.to_s.scan(/[A-Z]/).count\
    \ - extensions.max.to_s.scan(/[a-z]/).count\n\t\tend\n\tend\nend", "  extensions_with_strength\
    \ = extensions.map { |extension| [extension, strength(extension)] }\n  strongest_extension\
    \ = extensions_with_strength.max_by { |extension, strength| strength }[0]\n  \"\
    #{class_name}.#{strongest_extension}\"\nend", "  cap = 0\n  sm = 0\n  extension\
    \ = ''\n  strongest = ''\n  extensions.each do |ext|\n    cap = ext.scan(/[A-Z]/).count\n\
    \    sm = ext.scan(/[a-z]/).count\n    if cap - sm > extension.to_i\n      extension\
    \ = cap - sm\n      strongest = ext\n    end\n  end\n  return \"#{class_name}.#{strongest}\"\
    \nend", "    extensions.map { |s| [s, s.count(\"a-z\") - s.count(\"A-Z\")] }.max\
    \ { |a, b| a[1] <=> b[1] }[0]\nend", "\text_stg = Hash.new\n\tstg = 0\n\tstr =\
    \ \"\"\n\textensions.each do |x|\n\t\tcap = x.scan(/[A-Z]/).count\n\t\tlow = x.scan(/[a-z]/).count\n\
    \t\text_stg[x] = cap - low\n\tend\n\text_stg.each do |ext,stg|\n\t\tif stg > str\n\
    \t\t\tstr = stg\n\t\t\tstr_ext = ext\n\t\tend\n\tend\n\treturn class_name + \"\
    .\" + str_ext\nend", "    # this loop calculates the strength of every extension\
    \ in extensions and\n    # stores it in an array, Exts_and_Strengths.\n    Exts_and_Strengths\
    \ = []\n    i = 0\n    while i < extensions.length do\n        # this variable\
    \ holds the strength of the extensions.\n        strength = 0\n        # this\
    \ loop goes through each individual extension.\n        j = 0\n        while j\
    \ < extensions[i].length do\n            # this if-statement is for when the character\
    \ is capitalized.\n            if (extensions[i][j] == extensions[i][j].upcase)\n\
    \                strength += 1\n            else\n                strength -=\
    \ 1\n            end\n            j += 1\n        end\n        # this appends\
    \ the strength and extension in an array as follows:\n        # [extension, strength]\n\
    \        Exts_and_Strengths << [extensions[i], strength]\n        i += 1\n   \
    \ end\n    # this loop goes through the array, Exts_and_Strengths and finds the\n\
    \    # extension with the highest strength.\n    strongest_extension = \"a\"\n\
    \    highest_strength = -100\n    i = 0\n    while i < Exts_and_Strengths.length\
    \ do\n        if Exts_and_Strengths[i][1] > highest_strength\n            strongest_extension\
    \ = Exts_and_Strengths[i][0]\n            highest_strength = Exts_and_Strengths[i][1]\n\
    \        end\n        i += 1\n    end\n    # this returns the class_name followed\
    \ by the extension with the highest\n    # strength.\n    return class_name +\
    \ \".\" + strongest_extension\nend", "  strength_array = []\n  extensions.each_with_index\
    \ do |extension, index|\n    strength_array << [extension, index]\n  end\n  strength_array.sort!\
    \ do |x, y|\n    x_strength = (x[0].upcase.count(\"A-Z\")) - (x[0].downcase.count(\"\
    a-z\"))\n    y_strength = (y[0].upcase.count(\"A-Z\")) - (y[0].downcase.count(\"\
    a-z\"))\n    y_strength <=> x_strength\n  end\n  class_name + \".\" + strength_array[0][0]\n\
    end", "  # Write your code here\n  # To print results to the standard output you\
    \ can use puts\n  # Example puts \"Hello world!\"\n  upcase_counts = extensions.map\
    \ { |e| e.count(\"A-Z\") }\n  downcase_counts = extensions.map { |e| e.count(\"\
    a-z\") }\n  results = upcase_counts.zip(downcase_counts).map { |u, d| u - d }\n\
    \  max_index = results.index(results.max)\n  \"#{class_name}.#{extensions[max_index]}\"\
    \nend", "\textensions.each_with_index do |extension, i|\n\t\textensions[i] = extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n\tend\n\ti = extensions.index(extensions.max)\n\
    \treturn class_name + \".\" + extensions[i]\nend", "  strength = []\n  extensions.each\
    \ do |extension|\n    upper = extension.count \"A-Z\"\n    lower = extension.count\
    \ \"a-z\"\n    strength << upper - lower\n  end\n  str = extensions[strength.index(strength.max)]\n\
    \  return \"#{class_name}.#{str}\"\nend", "  extensions.max_by { |e| -(e.gsub(/\\\
    D/, '').size - e.size) } + '.' + class_name\nend", "\text_hash = {}\n\textensions.each\
    \ { |ext|\n\t\text_hash[ext] = ext.count(\"A-Z\") - ext.count(\"a-z\")\n\t}\n\t\
    return \"#{class_name}.#{ext_hash.max_by{|k,v| v}[0]}\"\nend", "  res = extensions.map\
    \ { |ext| [ext, ext.count(\"A-Z\") - ext.count(\"a-z\")] }\n  res.sort_by { |ext,\
    \ strength| strength }.last.first\nend", "  ext = extensions.max_by { |e| [e.count(\"\
    A-Z\"), e.count(\"a-z\")] }\n  \"#{class_name}.#{ext}\"\nend", "  extensions.map!\
    \ { |ext| [ext, extension_strength(ext)] }\n  extensions.sort_by! { |ext| [ext[1],\
    \ extensions.index(ext)] }\n  extensions.last.first\nend", "  class_name + \"\
    .\" + extensions.max_by { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }\nend",
  "  ext = extensions.max_by { |x| x.count(\"A-Z\") - x.count(\"a-z\") }\n  class_name\
    \ + \".\" + ext\nend", "\tstrength = []\n\tfor i in 0..extensions.length-1\n\t\
    \tstrength << [extensions[i], extensions[i].count(\"A-Z\") - extensions[i].count(\"\
    a-z\")]\n\tend\n\t\n\tstrength.sort! {|x,y| y[1] <=> x[1]}\n\t\n\treturn \"#{class_name}.#{strength[0][0]}\"\
    \nend", "  # Your code here...\nend", "  # Your code here\nend", "  strongest_extension\
    \ = \"\"\n  strongest_strength = 0", "  strength = extensions.map { |x| x.gsub(/[a-z]/,\
    \ '').length - x.gsub(/[A-Z]/, '').length }\n  strongest = extensions[strength.index(strength.max)]\n\
    \  \"#{class_name}.#{strongest}\"\nend", "  strongest_ext = ''\n  strongest_strength\
    \ = 0.0\n  extensions.each do |ext|\n    strength =  (ext.gsub(/[^A-Z]/, '').length\
    \ - ext.gsub(/[^a-z]/, '').length).to_f / ext.length\n    if strength > strongest_strength\n\
    \      strongest_strength = strength\n      strongest_ext = ext\n    end\n  end\n\
    \  return class_name + '.' + strongest_ext\nend", "\tstrongest_ext = extensions.sort_by\
    \ { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }.last\n\treturn \"#{class_name}.#{strongest_ext}\"\
    \nend", "\tclass_name = \"MyClass\"\n\textensions = [\"AA\", \"Be\", \"CC\"]\n\
    \t\tcaps = 0\n\t\tsmall = 0\n\t\tstrength = 0.0\n\t\twinner = \"\"\n\t\textensions.each\
    \ do |extension|\n\t\t\textension.each_char do |char|\n\t\t\t\tif char == char.upcase\n\
    \t\t\t\t\tcaps += 1\n\t\t\t\telse\n\t\t\t\t\tsmall += 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\tnew_strength = caps - small\n\t\t\tif new_strength >= strength\n\t\t\t\t\
    strength = new_strength\n\t\t\t\twinner = extension\n\t\t\tend\n\t\t\tcaps = 0\n\
    \t\t\tsmall = 0\n\t\tend\n\treturn \"#{class_name}.#{winner}\"\nend", "\t#extension\
    \ strengths\n\tstrengths = extensions.map { |ext| ext.count(\"A-Z\") - ext.count(\"\
    a-z\") }\n\t\n\t#return the string\n\t\"#{class_name}.#{extensions[strengths.index(strengths.max)]}\"\
    \nend", "  strongest_extension = \"\"\n  strength = -Float::INFINITY\n  extensions.each_with_index\
    \ do |extension, i|\n    extension_strength = extension.scan(/[A-Z]/).length -\
    \ extension.scan(/[a-z]/).length\n    if extension_strength > strength\n     \
    \ strength = extension_strength\n      strongest_extension = extension\n    end\n\
    \  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  strongest_extension\
    \ = \"\"\n  strength = -100\n  extensions.each do |extension|\n    cap = extension.count(\"\
    A-Z\")\n    sm = extension.count(\"a-z\")\n    if (cap - sm) > strength\n    \
    \  strength = cap - sm\n      strongest_extension = extension\n    end\n  end\n\
    \  class_name + \".\" + strongest_extension\nend", "  strengths = extensions.map\
    \ { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }\n  extensions[strengths.index(strengths.max)]\n\
    end", "\textensions.sort_by { |ext| ext.scan(/[A-Z]/).count - ext.scan(/[a-z]/).count\
    \ }.last\nend", "  is_valid_class?(class_name)\n  is_array_of_strings?(extensions)\n\
    \  max_strength = nil\n  strongest_extension = nil\n  extensions.each do |extension|\n\
    \    strength = strength_calculator(extension)\n    if strength > max_strength\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name + \".\" + strongest_extension\nend", end, "  extensions.max_by\
    \ { |ext| (ext.count('A-Z').to_f / ext.size) - (ext.count('a-z').to_f / ext.size)\
    \ }\nend", "  extensions.map { |ext| [ ext, ext.scan(/[A-Z]/).size - ext.scan(/[a-z]/).size\
    \ ] }.\n    sort { |a, b| b[1] <=> a[1] }.\n    first[0]\nend", "  strongest_cap\
    \ = 0\n  strongest_sm = 0\n  extension_name = \"\"\n  extensions.each do |extension|\n\
    \    if(Strong_Ext_Helper(extension) > strongest_cap)\n      strongest_cap = Strong_Ext_Helper(extension)\n\
    \      extension_name = extension\n    end\n  end\n  return \"#{class_name}.#{extension_name}\"\
    \nend", "  strengths = []\n  class_name = class_name.split('')\n  extensions.each\
    \ do |extension|\n    extension = extension.split('')\n    num_caps = 0\n    num_sml\
    \ = 0\n    extension.each do |letter|\n      if letter.match(/[A-Z]/)\n      \
    \  num_caps += 1\n      elsif letter.match(/[a-z]/)\n        num_sml += 1\n  \
    \    end\n    end\n    strength = num_caps - num_sml\n    strengths << strength\n\
    \  end\n  max_strength = strengths.index(strengths.max)\n  ext_name = extensions[max_strength]\n\
    \  class_name.join('') + \".\" + ext_name\nend", "  # Your code here\nend", " \
    \ str = []\n  extensions.each do |ext|\n    cap = ext.scan(/[A-Z]/).length\n \
    \   sm = ext.scan(/[a-z]/).length\n    str << (cap - sm)\n  end\n  str_hash =\
    \ Hash[str.zip extensions]\n  value = str_hash.key(str_hash.keys.max)\n  class_name\
    \ + \".\" + value\nend", "  strength = extensions.map { |i| (i.count(\"A-Z\")\
    \ - i.count(\"a-z\")).to_f / i.length }\n  extensions[strength.index(strength.max)]\n\
    end", "    cap = 0\n    sm = 0\n    strongest = ''\n    extension = ''\n    for\
    \ i in 0..extensions.length-1\n        for j in 0..extensions[i].length-1\n  \
    \          if extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\"\n       \
    \         cap += 1\n            elsif extensions[i][j] >= \"a\" && extensions[i][j]\
    \ <= \"z\"\n                sm += 1\n            end\n        end\n        if\
    \ ((cap - sm) >= strongest)\n            strongest = cap - sm\n            extension\
    \ = extensions[i]\n        end\n        cap = 0\n        sm = 0\n    end\n   \
    \ class_name + \".\" + extension\nend", "\tc = class_name\n\texts = extensions\n\
    \tstrength = 0\n\tstrongest = \"\"\n\texts.each do |ext|\n\t\tcaps = ext.count(/[A-Z]/)\n\
    \t\tsmalls = ext.count(/[a-z]/)\n\t\tif (caps - smalls) > strength\n\t\t\tstrength\
    \ = caps - smalls\n\t\t\tstrongest = ext\n\t\tend\n\tend\n\treturn \"#{c}.#{strongest}\"\
    \nend", "  strength_map = {}\n  extensions.each do |extension|\n    strength_map[extension]\
    \ = calculate_strength(extension)\n  end\n  strongest_extension = strength_map.max_by{|k,v|\
    \ v}[0]\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  strongest_extension\
    \ = ''\n  strength = 0\n  extensions.each do |e|\n    count_of_upper = e.count(/[A-Z]/)\n\
    \    count_of_lower = e.count(/[a-z]/)\n    if count_of_upper - count_of_lower\
    \ > strength\n      strength = count_of_upper - count_of_lower\n      strongest_extension\
    \ = e\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  #\
    \ it is assumed that the extensions are needed for the class_name\n  class_name\
    \ + '.' + extensions.sort_by { |x| x.scan(/[A-Z]/).length - x.scan(/[a-z]/).length\
    \ }.last\nend", "  results = extensions.map { |ext| [class_name + \".\" + ext,\
    \ extension_strength(ext)] }\n  sorted_results = results.sort_by { |result| -result[1]\
    \ }\n  return sorted_results[0][0]\nend", "  strongest_extension = \"\"\n  strength\
    \ = -1\n  for extension in extensions\n    ext_upcase = extension.count(\"A-Z\"\
    )\n    ext_downcase = extension.count(\"a-z\")\n    if ext_upcase - ext_downcase\
    \ > strength\n      strength = ext_upcase - ext_downcase\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name + \".\" + strongest_extension\n\
    end", "\text_arr = extensions.map { |x| (x.scan(/[A-Z]/).count.to_f - x.scan(/[a-z]/).count.to_f)\
    \ / x.length.to_f }\n\text_arr.index(ext_arr.max)\nend", "    class_name + \"\
    .\" + \n    extensions.sort{|a,b| \n        a.scan(/[A-Z]/).length - a.scan(/[a-z]/).length\
    \ <=> \n        b.scan(/[A-Z]/).length - b.scan(/[a-z]/).length\n    }.first\n\
    end", "\treturn class_name + \".\" + extensions.max_by { |x| extension_strength(x)\
    \ }\nend", "  extensions.each_with_index do |extension, index|\n    unless index\
    \ == 0\n      if get_strength(extensions[index-1]) < get_strength(extension)\n\
    \        extensions[index-1], extensions[index] = extensions[index], extensions[index-1]\n\
    \      end\n    end\n  end\n  class_name + \".\" + extensions[0]\nend", "  cap\
    \ = extensions.map do |ext|\n    ext.gsub(/[^A-Z]/, '').length\n  end\n  sm =\
    \ extensions.map do |ext|\n    ext.gsub(/[^a-z]/, '').length\n  end\n  strengths\
    \ = cap.zip(sm).map { |cap, sm| cap - sm }\n  strongest = strengths.index(strengths.min)\n\
    \  class_name + \".\" + extensions[strongest]\nend", "  no_of_upper = 0\n  no_of_lower\
    \ = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n    extension.each_char\
    \ do |char|\n      if char =~ /[A-Z]/\n        no_of_upper += 1\n      else\n\
    \        no_of_lower += 1\n      end\n    end\n    strongest_extension = extension\
    \ if strongest_extension == '' || (no_of_upper - no_of_lower) > (strongest_extension.scan(/[A-Z]/).length\
    \ - strongest_extension.scan(/[a-z]/).length)\n    no_of_upper = 0\n    no_of_lower\
    \ = 0\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "\tclass_name\
    \ = class_name.capitalize\n\textensions.each do |extension|\n\t\textension.capitalize!\n\
    \tend\n\tnum_capital_letters = 0\n\tnum_small_letters = 0\n\tbest_strength = 0\n\
    \tbest_extension = \"\"\n\textensions.each do |extension|\n\t\textension.each_char\
    \ do |char|\n\t\t\tif char.upcase == char\n\t\t\t\tnum_capital_letters += 1\n\t\
    \t\telse\n\t\t\t\tnum_small_letters += 1\n\t\t\tend\n\t\tend\n\t\textension_strength\
    \ = num_capital_letters - num_small_letters\n\t\tif extension_strength > best_strength\n\
    \t\t\tbest_strength = extension_strength\n\t\t\tbest_extension = extension\n\t\
    \tend\n\t\tnum_capital_letters = 0\n\t\tnum_small_letters = 0\n\tend\n\tclass_name\
    \ + \".\" + best_extension\nend", "  ext_strenght = extensions.map { |ext| [ext,\
    \ ext.count('A-Z') - ext.count('a-z')] }\n  strongest_extension = ext_strenght.select\
    \ { |ext| ext[1] == ext_strenght.max[1] }.sort.first[0]\n  class_name + '.' +\
    \ strongest_extension\nend", "  class_name + \".\" + extensions.max_by { |x| x.count(\"\
    A-Z\") - x.count(\"a-z\") }\nend", "  # your code here\nend", "  \n  class_name\
    \ + \".\" +\n  extensions.map { |ext|\n    [ext, ext.upcase.count - ext.downcase.count]\n\
    \  }.max_by { |name, strength|\n    strength\n  }.first\n  \nend", "  \nend",
  "  ext_hash = {}\n  ext_hash.default = 0", "  class_name += \".\" + extensions.max_by\
    \ { |str| str.count(\"A-Z\") - str.count(\"a-z\") }\nend", "  strongest_extension\
    \ = extensions.max do |extension1, extension2|\n    strength_of(extension1) <=>\
    \ strength_of(extension2)\n  end\n  class_name + \".\" + strongest_extension\n\
    end", "  strongest_extension = nil\n  strength = 0\n  extensions.each do |extension|\n\
    \    cap = extension.chars.map { |c| c =~ /[A-Z]/ ? 1 : 0 }.inject(:+)\n    sm\
    \ = extension.chars.map { |c| c =~ /[a-z]/ ? 1 : 0 }.inject(:+)\n    if (cap -\
    \ sm) > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + \".\" + strongest_extension\nend", "  strongest_extension\
    \ = \"\"\n  strength = 0\n  extensions.each do |extension|\n    if extension.scan(/[A-Z]/).length\
    \ - extension.scan(/[a-z]/).length > strength\n      strength = extension.scan(/[A-Z]/).length\
    \ - extension.scan(/[a-z]/).length\n      strongest_extension = extension\n  \
    \  end\n  end\n  class_name + \".\" + strongest_extension\nend", "  strongest_extension\
    \ = extensions.sort_by { |e| [-(e.scan(/[A-Z]/).size - e.scan(/[a-z]/).size),\
    \ extensions.index(e)] }.first\n  class_name + \".\" + strongest_extension\nend",
  "  extension_values = extensions.map do |e|\n    e.scan(/[[:upper:]]/).count - e.scan(/[[:lower:]]/).count\n\
    \  end\n  class_name + \".\" + extensions[extension_values.index(extension_values.max)]\n\
    end", "  ext_strength = extensions.map{|ext| ext.scan(/[A-Z]/).count - ext.scan(/[a-z]/).count}\n\
    \  (class_name << \".\" << extensions[ext_strength.index(ext_strength.max)]).to_s\n\
    end", "    len = extensions.length\n    strength = 0\n    strongest = extensions[0]\n\
    \    i = 0\n    while i < len\n        extension = extensions[i]\n        upper\
    \ = 0\n        lower = 0\n        j = 0\n        while j < extension.length\n\
    \            character = extension[j]\n            if character >= \"A\" && character\
    \ <= \"Z\"\n                upper += 1\n            else\n                lower\
    \ += 1\n            end\n            j += 1\n        end\n        if upper - lower\
    \ > strength\n            strength = upper - lower\n            strongest = extension\n\
    \        end\n        i += 1\n    end\n    class_name + \".\" + strongest\nend",
  "  strongest_extension = nil\n  strongest_strength = 0\n  extensions.each do |extension|\n\
    \    strength = find_strength(extension)\n    if strength > strongest_strength\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + \".\" + strongest_extension\nend", "  max = extensions.max_by\
    \ do |extension|\n    extension.upcase.length - extension.downcase.length\n  end\n\
    \  \"#{class_name}.#{max}\"\nend", "  extensions.sort_by! { |ext| [ext.count(\"\
    A-Z\") - ext.count(\"a-z\"), extensions.index(ext)] }\n  \"#{class_name}.#{extensions.last}\"\
    \nend", "  hash = {}\n  total = 0\n  extensions.each do |extension|\n    capital_letters\
    \ = 0\n    small_letters = 0\n    extension.each_char do |c|\n      capital_letters\
    \ += 1 if c =~ /[A-Z]/\n      small_letters += 1 if c =~ /[a-z]/\n    end\n  \
    \  total = capital_letters - small_letters\n    hash[extension] = total\n  end\n\
    \  if extensions.length == 1\n    return class_name + \".\" + extensions[0]\n\
    \  else\n    hash = hash.sort_by {|_key, value| value}.reverse.to_h\n    return\
    \ class_name + \".\" + hash.keys[0]\n  end\nend", "  extensions_hash = {}\n  extensions.each_with_index\
    \ do |v, i|\n    extensions_hash[v] = (v.count('A-Z') - v.count('a-z'))\n  end\n\
    \  sorted_hash = extensions_hash.sort_by { |k, v| v }\n  sorted_hash.reverse[0].first\n\
    end", "  class_name + \".\" + extensions.max_by { |ext| (ext.count('A-Z') - ext.count('a-z'))\
    \ }\nend", "  extensions.each_with_index do |extension, i|\n    extensions[i]\
    \ = [extension, extension.count(\"A-Z\") - extension.count(\"a-z\")]\n  end\n\
    \  extensions.sort_by { |extension| extension[1] }.last[0]\nend", "  class_name\
    \ + \".\" + extensions.max_by { |ext| (ext.count(\"A-Z\") - ext.count(\"a-z\"\
    )) }\nend", "  strengths = extensions.map{|e| e.count(e.upcase) - e.count(e.downcase)}\n\
    \  strongest = strengths.each_with_index.max\n  return \"#{class_name}.#{extensions[strongest[1]]}\"\
    \nend", "  class_name + \".\" + extensions.max_by { |ext| ext.count('A-Z') - ext.count('a-z')\
    \ }\nend", "  \n  if extensions.empty?\n    return \"#{class_name}.n.a\"\n  end\n\
    \  \n  strongest_extension = extensions[0]\n  strength = 0\n  \n  extensions.each\
    \ do |extension|\n    counter = 0\n    extension.each_char do |char|\n      if\
    \ char == char.upcase\n        counter += 1\n      else\n        counter -= 1\n\
    \      end\n    end\n    if counter > strength\n      strength = counter\n   \
    \   strongest_extension = extension\n    end\n  end\n  \n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  extensions_strength = Hash.new\n  extensions.each { |extension|\n \
    \   uppercase_letters = extension.scan(/[A-Z]/).count\n    lowercase_letters =\
    \ extension.scan(/[a-z]/).count\n    extensions_strength[extension] = uppercase_letters\
    \ - lowercase_letters\n  }\n  extensions_strength = extensions_strength.sort_by\
    \ { |key, value| value }\n  \"#{class_name}.#{extensions_strength.first[0]}\"\n\
    end", "  Strongest_Extension.call(class_name, extensions)\nend", "  #You have\
    \ to complete this function.\nend", "  # find the strongest extension in the extensions\
    \ array based on its strength\n  # and return a string in the format \"class_name.strongest_extension\"\
    \n  strongest_extension = extensions.first\n  strength = [extensions.first.scan(/[A-Z]/).count,\
    \ extensions.first.scan(/[a-z]/).count]\n  strongest_strength = [strength[0] -\
    \ strength[1]]\n  i = 1\n  until i == extensions.length do\n    strength = [extensions[i].scan(/[A-Z]/).count,\
    \ extensions[i].scan(/[a-z]/).count]\n    strength = strength[0] - strength[1]\n\
    \    if strength > strongest_strength[0]\n      strongest_strength = [strength]\n\
    \      strongest_extension = extensions[i]\n    end\n    i += 1\n  end\n  class_name\
    \ + \".\" + strongest_extension\nend", "\textensions.reduce(class_name) do |memo,\
    \ cur|\n\t\tcur_strength = calculate_strength(cur)\n\t\tmemo_strength = calculate_strength(memo)\n\
    \t\tmemo_strength > cur_strength ? memo : cur\n\tend\nend", "  a = 0\n  b = 0\n\
    \  new_extensions = []\n  strength = []\n  extensions.each do |extension|\n  \
    \  extension.split(\"\").each do |x|\n      x == x.upcase ? a += 1 : b += 1\n\
    \    end\n    new_extensions << extension\n    strength << a - b\n    a = 0\n\
    \    b = 0\n  end\n  count = strength.sort[-1]\n  class_name + \".\" + new_extensions[strength.index(count)]\n\
    end", "  strengths = []\n  uppers = extensions.join.scan(/[A-Z]/).count\n  lowers\
    \ = extensions.join.scan(/[a-z]/).count\n  strength = uppers - lowers\n  max_strength\
    \ = strength.max\n  i = 0\n  while i < strength.length do\n    if strength[i]\
    \ == max_strength\n      strengths << extensions[i]\n    end\n    i += 1\n  end\n\
    \  puts \"#{class_name}.#{strengths[0]}\"\nend\nStrongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])", "  strongest_extension = extensions.max_by { |extension|\
    \ extension.count(\"A-Z\") - extension.count(\"a-z\") }\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strongest_strength = 0\n  strongest_extension = \"\"\n  extensions.each\
    \ do |extension|\n    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"\
    a-z\")\n    strength = cap - sm\n    if strength > strongest_strength\n      strongest_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  # YOUR CODE HERE\nend", " \
    \   class_name\nend", "  strength = {}\n  extensions.each do |extension|\n   \
    \ upper = extension.count(\"A-Z\")\n    lower = extension.count(\"a-z\")\n   \
    \ strength[extension] = upper - lower\n  end\n  class_name + \".\" + strength.max_by{|k,v|\
    \ v}[0]\nend", "    strength_array = []\n    extensions.each do |extension|\n\
    \        cap = extension.count(\"A-Z\")\n        sm = extension.count(\"a-z\"\
    )\n        strength_array << [extension, cap - sm]\n    end\n    sorted_array\
    \ = strength_array.sort_by {|a| a[1]}.reverse\n    return \"#{class_name}.#{sorted_array[0][0]}\"\
    \nend", "  # Your code goes here.\n  strongest_extension = extensions.max_by {\
    \ |extension| extension.downcase.count('a-z') - extension.upcase.count('A-Z')\
    \ }\n  \"#{class_name}.#{strongest_extension}\"\nend", "\tcount_up, count_down\
    \ = 0, 0\n\textensions.each do |ext|\n\t\tfor i in 0..ext.length - 1\n\t\t\tif\
    \ ext[i] == ext[i].upcase\n\t\t\t\tcount_up += 1\n\t\t\telse\n\t\t\t\tcount_down\
    \ += 1\n\t\t\tend\n\t\tend\n\t\textensions[extensions.index(ext)] = [ext, (count_up\
    \ - count_down)]\n\t\tcount_up, count_down = 0, 0\n\tend\n\treturn \"#{class_name}.#{extensions.max[0]}\"\
    \nend", "\tstrength = {}\n\textensions.each do |extension|\n\t\tc = extension.split(\"\
    \").select {|i| i == i.upcase}.count\n\t\ts = extension.split(\"\").select {|i|\
    \ i == i.downcase}.count\n\t\tstrength[extension] = c - s\n\tend\n\treturn \"\
    #{class_name}.#{strength.key(strength.values.max)}\"\nend", "  cap = 0\n  strong\
    \ = nil\n  extensions.each do |ext|\n    if (ext.count('A-Z') - ext.count('a-z'))\
    \ > cap\n      cap = ext.count('A-Z') - ext.count('a-z')\n      strong = ext\n\
    \    end\n  end\n  return class_name + \".\" + strong\nend", "  extensions.sort_by!\
    \ { |e| [-strength(e), e] }\n  class_name + \".\" + extensions[0]\nend", "   \
    \ # Your code here\nend", "\treturn \"#{class_name}.#{extensions.max_by{|i| (i.scan(/[A-Z]/).size\
    \ - i.scan(/[a-z]/).size).abs}}\"\nend", "  strongest_extension = extensions.first\n\
    \  extensions.each do |extension|\n    if (extension.split('').select { |c| c\
    \ =~ /[A-Z]/ }.length - extension.split('').select { |c| c =~ /[a-z]/ }.length)\
    \ > (strongest_extension.split('').select { |c| c =~ /[A-Z]/ }.length - strongest_extension.split('').select\
    \ { |c| c =~ /[a-z]/ }.length)\n      strongest_extension = extension\n    end\n\
    \  end\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  # If a string\
    \ contains a character in this array then it is considered\n  # as lowercase.\n\
    \  lowercase = Array.new('a'..'z')\n  strongest_extension = ''\n  # This will\
    \ hold the strength of the strongest extension. We consider\n  # the first item\
    \ in the array as the strongest extension so we initialize\n  # the strongest_strength\
    \ to the strength of the first item.\n  strongest_strength = extensions[0].count\
    \ { |c| lowercase.include?(c) } -\n    extensions[0].count { |c| !lowercase.include?(c)\
    \ }\n  extensions.each do |extension|\n    extension_strength = extension.count\
    \ { |c| lowercase.include?(c) } -\n      extension.count { |c| !lowercase.include?(c)\
    \ }\n    if extension_strength > strongest_strength\n      strongest_strength\
    \ = extension_strength\n      strongest_extension = extension\n    end\n  end\n\
    \  return \"#{class_name}.#{strongest_extension}\"\nend", "    return class_name\
    \ + \".\" + extensions.sort_by { |ext| -ext.count(\"A-Z\") }.first\nend\nputs\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])", "  uc_reg = /[A-Z]/\n\
    \  lc_reg = /[a-z]/\n  strongest_name = \"\"\n  strongest_strength = 0\n  # ClassName\
    \ should be hardcoded\n  strongest_class = class_name\n  extensions.each do |extension|\n\
    \    extension_strength = extension.scan(uc_reg).count - extension.scan(lc_reg).count\n\
    \    if extension_strength > strongest_strength\n      strongest_strength = extension_strength\n\
    \      strongest_name = extension\n    end\n  end\n  return strongest_class +\
    \ \".\" + strongest_name\nend", "  extensions.sort_by{|ext| ext.scan(/[A-Z]/).count\
    \ - ext.scan(/[a-z]/).count}.last\nend", "  # Your code here\nend", "    # Your\
    \ code goes here\n    class_name\nend", "  strength = 0\n  strongest_extension\
    \ = extensions[0]\n  extensions.each do |extension|\n    cap = extension.scan(/[A-Z]/).count\n\
    \    sm = extension.scan(/[a-z]/).count\n    if (cap - sm) > strength\n      strength\
    \ = cap - sm\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  name = class_name\n  strengths\
    \ = {}\n  extensions.each do |extension|\n    cap = extension.gsub(/[^A-Z]/, '').length\n\
    \    sm = extension.gsub(/[^a-z]/, '').length\n    strength = cap - sm\n    strengths[extension]\
    \ = strength\n  end\n  strongest = strengths.sort_by { |extension, strength| strength\
    \ }.last[0]\n  name << \".\" + strongest\nend", "\t# YOUR CODE HERE\n\tclass_name\
    \ + '.' + extensions.max_by{|x| (x.count(\"A-Z\") - x.count(\"a-z\"))}\nend\n\
    puts Strongest_Extension.call(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])",
  "  strength = 0\n  ext = \"\"\n  extensions.each do |e|\n    num = e.scan(/[A-Z]/).count\
    \ - e.scan(/[a-z]/).count\n    if num > strength\n      strength = num\n     \
    \ ext = e\n    end\n  end\n  class_name + \".\" + ext\nend", "\tstrength = 0\n\
    \tstrength_extension = ''\n\textensions.each do |extension|\n\t\tcap = extension.count('A-Z')\n\
    \t\tsm = extension.count('a-z')\n\t\tstrength_extension = extension if cap - sm\
    \ > strength\n\tend\n\t\"#{class_name}.#{strength_extension}\"\nend", "  require\
    \ './Strings'\n  strongest = extensions.sort{|a,b|\n    strength(a) <=> strength(b)\n\
    \  }[-1]\n  return class_name + \".\" + strongest\nend", "  class_name + \".\"\
    \ + extensions.max_by { |ext| [ext.count(\"A-Z\"), -ext.count(\"a-z\")] }\nend",
  "\tcap = 0\n\tsm = 0\n\tstrength = 0\n\tresult = class_name\n\textensions.each do\
    \ |extension|\n\t\textension.split(\"\").each do |char|\n\t\t\tif char == char.upcase\n\
    \t\t\t\tcap += 1\n\t\t\telse\n\t\t\t\tsm += 1\n\t\t\tend\n\t\tend\n\t\tif strength\
    \ <= cap - sm\n\t\t\tstrength = cap - sm\n\t\t\tresult = class_name + \".\" +\
    \ extension\n\t\tend\n\t\tcap = 0\n\t\tsm = 0\n\tend\n\tresult\nend", "  m = 0\n\
    \  e = \"\"\n  for x in extensions\n    a = x.count(\"A-Z\").to_f\n    b = x.count(\"\
    a-z\").to_f\n    if a-b > m\n      m = a-b\n      e = x\n    end\n  end\n  return\
    \ class_name + \".\" + e\nend", "  a = extensions.map do |e|\n    r = Regexp.new(\"\
    [A-Z]\")\n    cap = e.scan(r).length\n    r = Regexp.new(\"[a-z]\")\n    sm =\
    \ e.scan(r).length\n    [cap - sm, extensions.index(e)]\n  end\n  class_name +\
    \ \".\" + extensions[a.max[1]]\nend", "  # Your code here. Good luck!\nend", " \
    \ strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    ext_strength = extension.count(\"A-Z\") - extension.count(\"a-z\")\n    if\
    \ ext_strength > strength\n      strength = ext_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  arr = []\n  largest = 0\n  indices = []\n  extensions.each_with_index\
    \ do |word, index|\n    cap = word.count('A-Z')\n    sm = word.count('a-z')\n\
    \    if (cap - sm) > largest\n      largest = cap - sm\n      indices = [index]\n\
    \    elsif (cap - sm) == largest\n      indices << index\n    end\n  end\n  indices.each\
    \ do |index|\n    arr << \"#{class_name}.#{extensions[index]}\"\n  end\n  arr.join\n\
    end", end, "  strongest_extension = []\n  extension_strength = []\n  extensions.each\
    \ do |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n    extension_strength << strength\n    if strength == extension_strength.max\n\
    \      strongest_extension << extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension.first}\"\
    \nend", "  # Your code goes here\nend", "\tclass_name + \".\" + extensions.sort_by{|x|\
    \ [(-x.chars.count{|c| c.match(/[A-Z]/)} + x.chars.count{|c| c.match(/[a-z]/)}),\
    \ extensions.index(x)]}.first\nend", "  strengths = extensions.map do |e|\n  \
    \  e.split(\"\").inject([0,0]) { |c, x| (x =~ /[A-Z]/) ? c[0] += 1 : c[1] += 1;\
    \ c }\n  end\n  class_name + \".\" + extensions[strengths.find_index(strengths.max)]\n\
    end\nputs Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n\
    puts Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])", "  strongest_extension\
    \ = extensions.max_by { |extension| extension.count(\"A-Z\") - extension.count(\"\
    a-z\") }\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  strongest_ext\
    \ = \"\"\n  strongest_ext_strength = 0\n  extensions.each do |ext|\n    cap =\
    \ ext.length - ext.downcase.length\n    sm = ext.length - ext.upcase.length\n\
    \    strength = cap - sm\n    if strength > strongest_ext_strength\n      strongest_ext_strength\
    \ = strength\n      strongest_ext = ext\n    end\n  end\n  class_name + \".\"\
    \ + strongest_ext\nend", "\treturn class_name+'.'+extensions.sort_by {|x| [-strength(x),\
    \ extensions.index(x)]}[0]\nend", "  # your code here\nend", "  class_name\nend",
  "  return class_name + \".\" + extensions.max_by { |x| x.chars.count { |c| c.upcase\
    \ == c } - x.chars.count { |c| c.downcase == c } }\nend", "  # empty array for\
    \ the strengths of each extension\n  strength = []\n  # for each extension, we\
    \ calculate the strength and push it to strength array\n  extensions.each do |extension|\n\
    \    # if the extension has uppercase letters\n    if extension.count(\"a-z\"\
    ) > 0\n      strength.push(extension.count(\"A-Z\")/(extension.count(\"a-z\")\
    \ + 0.0))\n    # if the extension has only uppercase letters, push to strength\
    \ array\n    else\n      strength.push(extension.count(\"A-Z\"))\n    end\n  end\n\
    \  # We find the index of the strongest extension in strength array\n  index =\
    \ strength.index(strength.max)\n  # We return the class name and the strongest\
    \ extension from extensions array\n  class_name + \".\" + extensions[index]\n\
    end", "\tclass_name + \".\" + extensions.sort_by { |ext| [-ext.count(\"A-Z\"),\
    \ ext.count(\"a-z\")] }.first\nend", "  return class_name+\".\"+extensions.max_by\
    \ {|e| e.chars.count{|c| c.match(/[A-Z]/)} - e.chars.count{|c| c.match(/[a-z]/)}}\n\
    end", "  extensions.sort_by{|ext| -1*(ext.scan(/[A-Z]/).size - ext.scan(/[a-z]/).size)}.first\n\
    end", "\tclass_name + \".\" + extensions.max_by{|x| x.chars.count{|y| y.match(/[A-Z]/)}\
    \ - x.chars.count{|y| y.match(/[a-z]/)}}\nend", "  cap = extensions.map { |ext|\
    \ ext.scan(/[A-Z]/).size }\n  sm = extensions.map { |ext| ext.scan(/[a-z]/).size\
    \ }\n  st = cap.zip(sm).map { |a, b| a - b }\n  index = st.index(st.max)\n  \"\
    #{class_name}.#{extensions[index]}\"\nend", "  # get extension with greatest strength\n\
    \  strongest_extension = extensions.max_by { |word| word.count(\"A-Z\") - word.count(\"\
    a-z\") }\n  # return string in format class_name.strongest_extension\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strengths = []\n  extensions.each do |extension|\n    # the strength\
    \ is calculated as follows:\n    # CAP - SM where CAP is the number of uppercase\
    \ letters\n    # in the extension's name and SM is the number of lowercase letters\n\
    \    # in the extension's name. \n    strengths << extension.length - extension.downcase.length\n\
    \  end\n  # the index of the strongest extension\n  strongest_index = strengths.each_with_index.max[1]\n\
    \  \"#{class_name}.#{extensions[strongest_index]}\"\nend", "\tresult = class_name\n\
    \tstrongest = -1000\n\textensions.each do |extension|\n\t\tcount_upcase = extension.count(extension.scan(/[[:upper:]]/).join)\n\
    \t\tcount_lowcase = extension.count(extension.scan(/[[:lower:]]/).join)\n\t\t\
    current_strongest = count_upcase - count_lowcase\n\t\tif current_strongest > strongest\n\
    \t\t\tstrongest = current_strongest\n\t\t\tresult = class_name + \".\" + extension\n\
    \t\tend\n\tend\n\treturn result\nend", "  strengths = {}\n  extensions.each do\
    \ |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"a-z\"\
    )\n    strengths[extension] = strength\n  end\n  strongest_extension = extensions.sort\
    \ { |a, b| strengths[b] <=> strengths[a] }.first\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "\tcap = 0\n\tsm = 0\n\tstrength = 0\n\tstrength_array = []\n\textensions.each\
    \ do |extension|\n\t\tcap = extension.count('A-Z')\n\t\tsm = extension.count('a-z')\n\
    \t\tstrength = cap - sm\n\t\tstrength_array << strength\n\tend\n\tmax_strength\
    \ = strength_array.max\n\textensions.each do |extension|\n\t\tcap = extension.count('A-Z')\n\
    \t\tsm = extension.count('a-z')\n\t\tstrength = cap - sm\n\t\tif strength == max_strength\n\
    \t\t\treturn \"#{class_name}.#{extension}\"\n\t\tend\n\tend\nend", "  return \"\
    #{class_name}.#{extensions.sort_by { |x| x[/\\p{Upper}/].size - x[/\\p{Lower}/].size\
    \ }.last}\"\nend", "\t@extensions = extensions.sort_by do |x|\n\t\tcapitals =\
    \ x.scan(/[A-Z]/).length\n\t\tsmall_letters = x.scan(/[a-z]/).length\n\t\tcapitals\
    \ - small_letters\n\tend\n\treturn \"#{class_name}.#{@extensions.last}\"\nend",
  "  p class_name\n  p extensions\n  extension_strength = []\n  extension_name = []\n\
    \  strongest_extension = []\n  i = 0\n  max_strength = -1\n  while i < extensions.length\
    \ do\n    extension_name.push(extensions[i])\n    cap = extensions[i].count \"\
    A-Z\"\n    sm = extensions[i].count \"a-z\"\n    extension_strength.push(cap -\
    \ sm)\n    if extension_strength[i] > max_strength\n      max_strength = extension_strength[i]\n\
    \    end\n    i += 1\n  end\n  index = extension_strength.index(max_strength)\n\
    \  strongest_extension.push(class_name + \".\" + extension_name[index])\n  return\
    \ strongest_extension[0]\nend", "\tsplit_extensions = extensions.map { |i| i.split('')\
    \ } # split each letters of the extension into an array of arrays\n\tsum_extensions\
    \ = split_extensions.map { |x| x.select { |i| i == i.upcase }.count - x.select\
    \ { |i| i == i.downcase }.count } # get the strength of each extension\n\tmax_index\
    \ = sum_extensions.each_with_index.max[1] # get the index of the strongest extension\n\
    \treturn class_name + \".\" + extensions[max_index] # print the result\nend",
  "  ext = extensions.map{|e| [e, (e.gsub(/[^A-Z]/, '').length - e.gsub(/[^a-z]/,\
    \ '').length)]}\n  return class_name + \".\" + ext.max_by{|e| e[1]}.first\nend",
  "  ext_str = ''\n  ext_str << class_name << '.'\n  strong_ext = extensions.max_by\
    \ do |ext|\n    (ext.count('A-Z') - ext.count('a-z')).to_f / ext.length\n  end\n\
    \  ext_str << strong_ext\nend", "  # write your code here\nend", "\t\t# Write\
    \ your code here\nend", "  max_strength = 0\n  max_index = 0\n  class_name +=\
    \ \".\"\n  extensions.each_with_index do |extension, index|\n    extension_strength\
    \ = extension.count(\"A-Z\") - extension.count(\"a-z\")\n    if extension_strength\
    \ > max_strength\n      max_strength = extension_strength\n      max_index = index\n\
    \    end\n  end\n  class_name + extensions[max_index]\nend", "  uppercase_count\
    \ = ->(word) { word.chars.count { |char| char =~ /[A-Z]/ } }\n  lowercase_count\
    \ = ->(word) { word.chars.count { |char| char =~ /[a-z]/ } }\n  strength = ->(word)\
    \ { uppercase_count.(word) - lowercase_count.(word) }\n  extensions.max_by { |extension|\
    \ strength.(extension) }\nend", "  strengths = []\n  new_extensions = []\n  extensions.each\
    \ do |extension|\n    upper = extension.count(extension.upcase)\n    lower = extension.count(extension.downcase)\n\
    \    strengths << (upper - lower)\n    new_extensions << extension\n  end\n  max\
    \ = strengths.max\n  idx = strengths.index(max)\n  \"#{class_name}.#{new_extensions[idx]}\"\
    \nend", "  strongest_extension = ''\n  strength = -Float::INFINITY\n  extensions.each\
    \ do |extension|\n    current_strength = extension.count('A-Z') - extension.count('a-z')\n\
    \    if current_strength > strength\n      strength = current_strength\n     \
    \ strongest_extension = extension\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strength = -1.0\n  chosen_extension = \"\"\n  extensions.each do |extension|\n\
    \    if ((extension.count(\"A-Z\") - extension.count(\"a-z\")) > strength)\n \
    \     strength = extension.count(\"A-Z\") - extension.count(\"a-z\")\n      chosen_extension\
    \ = extension\n    end\n  end\n  class_name + \".\" + chosen_extension\nend",
  "  lc = ''\n  uc = ''\n  best_ext = 0\n  strongest_ext = ''\n  extensions.each do\
    \ |ext|\n    lc = ext.downcase\n    uc = ext.upcase\n    strength = uc.length\
    \ - lc.length\n    if strength > best_ext\n      best_ext = strength\n      strongest_ext\
    \ = ext\n    end\n  end\n  class_name + '.' + strongest_ext\nend", "\textensions.sort_by!\
    \ { |x| [extensions.index(x), -strength(x)] }\n\tclass_name + \".\" + extensions[0]\n\
    end", "  (p extensions).each_with_index.max_by { |x, _y| strength(x) }[1]\nend",
  "  strength = 0\n  answer = \"\"\n  extensions.each do |extension|\n    extension_strength\
    \ = 0\n    extension.each_char do |letter|\n      if letter == letter.upcase\n\
    \        extension_strength += 1\n      else\n        extension_strength -= 1\n\
    \      end\n    end\n    if extension_strength > strength\n      strength = extension_strength\n\
    \      answer = extension\n    end\n  end\n  class_name + \".\" + answer\nend",
  "  # your code here\nend", "  strongest_ext = extensions.max_by do |ext|\n    uppercase_letters\
    \ = ext.count(/[A-Z]/)\n    lowercase_letters = ext.count(/[a-z]/)\n    strength\
    \ = uppercase_letters - lowercase_letters\n  end\n  class_name + \".\" + strongest_ext\n\
    end", "\textensions.map! { |x| x.split(/[A-Z]/).map { |x| x.length } }\n\tmax\
    \ = 0\n\textensions.each_with_index do |x, index|\n\t\tif x[0] - x[1] > max\n\t\
    \t\tmax = x[0] - x[1]\n\t\t\textension = extensions[index]\n\t\tend\n\tend\n\t\
    return (class_name + \".\" + extension.join)\nend", "    strength_extension_hash\
    \ = {}\n    extensions.each do |extension|\n        extension_strength = extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n        strength_extension_hash[extension_strength]\
    \ = extension\n    end\n    strongest_extension = strength_extension_hash.keys.max\n\
    \    return \"#{class_name}.#{strength_extension_hash[strongest_extension]}\"\n\
    end\nputs Strongest_Extension(\"Food\", [\"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    ])", "  strongest_name = nil\n  strongest_strength = -Float::INFINITY\n  extensions.each\
    \ do |extension|\n    extension_strength = extension.count('A-Z') - extension.count('a-z')\n\
    \    if extension_strength > strongest_strength\n      strongest_name = extension\n\
    \      strongest_strength = extension_strength\n    end\n  end\n  \"#{class_name}.#{strongest_name}\"\
    \nend", "\t# Your code goes here\n\t# you can use the method defined above\n\t\
    # for example, you can use this line as following:\n\t# Strongest_Extension.calculate_strength(extension)\n\
    end", "  # Your code here\nend", "  extensions.sort_by { |ext| [ext.count(\"A-Z\"\
    ), ext.count(\"a-z\")] }.last\nend", "  class_name + \".\" + extensions.max_by{|e|\
    \ e.count(\"A-Z\") - e.count(\"a-z\")}\nend", "\tclass_name + \".\" + extensions.max_by{|ext|\
    \ [-ext.upcase.length, ext.downcase.length]}\nend", "  extension_strength = Hash.new()\n\
    \  extensions.each { |e| extension_strength[e] = e.count(\"A-Z\") - e.count(\"\
    a-z\") }\n  class_name + \".\" + extension_strength.max_by { |k, v| v }[0]\nend",
  "    strength = {}\n    extensions.each_with_index do |extension, index|\n     \
    \   cap_count = extension.count(\"A-Z\")\n        sm_count = extension.count(\"\
    a-z\")\n        strength[extension] = cap_count - sm_count\n    end\n    return\
    \ \"#{class_name}.#{strength.key(strength.values.max)}\"\nend", "  \nend", " \
    \ class_name + \".\" + extensions.max_by { |ext| ext.count(\"A-Z\") - ext.count(\"\
    a-z\") }\nend", "  return \"Wrong input data\" if class_name.class != String or\
    \ extensions.class != Array\n  strongest_ext = []\n  strongest_ext_strength =\
    \ 0.0\n  extensions.each do |ext|\n    if ext.class != String\n      return \"\
    Wrong input data\"\n    end\n    strength = (ext.count(\"A-Z\") - ext.count(\"\
    a-z\")).to_f\n    if strength > strongest_ext_strength\n      strongest_ext_strength\
    \ = strength\n      strongest_ext = [ext]\n    elsif strength == strongest_ext_strength\n\
    \      strongest_ext << ext\n    end\n  end\n  \"#{class_name}.#{strongest_ext.first}\"\
    \nend", "  class_name + '.' + extensions.sort_by { |e| [extensions.index(e), -e.count('A-Z'),\
    \ e.count('a-z')] }.first\nend", "  strength = 0\n  strongest_extension = \"\"\
    \n  # your code here\n  extensions.each do |extension|\n    new_strength = (extension.count(\"\
    A-Z\") - extension.count(\"a-z\"))\n    if new_strength > strength\n      strength\
    \ = new_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  strength = []\n  extensions.each\
    \ do |extension|\n    uppercase = 0\n    lowercase = 0\n    extension.split(\"\
    \").each do |char|\n      if char == char.upcase\n        uppercase += 1\n   \
    \   else\n        lowercase += 1\n      end\n    end\n    strength << (uppercase\
    \ - lowercase)\n  end\n  index = strength.index(strength.max)\n  \"#{class_name}.#{extensions[index]}\"\
    \nend", "    class_name.capitalize!\n    if extensions.size == 0\n        return\
    \ class_name\n    end\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = strongest_extension.split(\"\").map { |char| char == char.downcase ? -1 :\
    \ 1 }.inject(:+)\n    extensions.each_with_index do |extension, index|\n     \
    \   extension_strength = extension.split(\"\").map { |char| char == char.downcase\
    \ ? -1 : 1 }.inject(:+)\n        if extension_strength > strongest_extension_strength\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name + \".\" +\
    \ strongest_extension\nend", "    strength = lambda { |x| x.gsub(/[a-z]/, '').length\
    \ - x.gsub(/[A-Z]/, '').length }\n    extensions.max_by { |ext| strength.call(ext)\
    \ }.prepend(class_name + '.')\nend", "  return class_name + \".\" + extensions.first\
    \ if extensions.length < 2\n  extension_strengths = extensions.map{|x| [x,(x.count(\"\
    A-Z\") - x.count(\"a-z\"))]}\n  extension_strengths.sort!{|x,y| y[1] <=> x[1]}\n\
    \  return class_name + \".\" + extension_strengths.first[0]\nend", "  strength_array\
    \ = []\n  extensions.each_with_index do |extension, i|\n    strength_array <<\
    \ extension.count('A-Z') - extension.count('a-z')\n  end\n  class_name.concat('.').concat(extensions[strength_array.each_with_index.max[1]])\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
