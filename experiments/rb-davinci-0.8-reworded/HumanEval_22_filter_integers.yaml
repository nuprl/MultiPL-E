name: HumanEval_22_filter_integers
language: rb
prompt: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
  # [1, 2, 3]\ndef filter_integers(values)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
  \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n   \
  \ assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\n\
  end\n"
completions: ["  values.select { |v| v.is_a? Integer }\nend", "  filter_fn = Fn.new\
    \ do |x|\n    x.is_a?(Integer)\n  end\n  values.select { |x| filter_fn.call(x)\
    \ }\nend", "  values.select { |i| i.is_a?(Integer) }\nend", "\tvalues.select {\
    \ |val| val.is_a? Integer }\nend", "  values.filter { |e| e.is_a?(Integer) }\n\
    end", "  values.select { |x| x.kind_of?(Fixnum) }\nend", "  return values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a? Integer\
    \ }\nend", "  values.filter { |value| value.is_a?(Integer) }\nend", "  filter_numbers.call(values).select{|v|\
    \ v.is_a?(Fixnum)}\nend", "  values.select { |value| value.is_a?(Fixnum) }\nend",
  "  values.select { |v| v.is_a? Integer }\nend", "  result = []\n  values.each do\
    \ |value|\n    if value.is_a?(Integer)\n      result << value\n    end\n  end\n\
    \  result\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.delete_if\
    \ { |v| !v.kind_of?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Fixnum) }\nend", "    values.select\
    \ { |value| value.is_a? Integer }\nend", "\tvalues.filter { |v| v.is_a? Integer\
    \ }\nend", "  filter(values) { |v| type?(v) == INTEGER }\nend", "  values.filter\
    \ { |value| value.is_a? Integer }\nend", "  values.select { |value| value.is_a?\
    \ Integer }\nend", "  values.filter{|value| value.is_a?(Integer)}\nend", "  filter(values)\
    \ { |x| x.is_a? Integer }\nend", "  # YOUR CODE GOES HERE\nend", "  values.select\
    \ { |e| e.class == Fixnum }\nend", "  values.select { |x| x.is_a?(Fixnum) }\n\
    end", "  values.select { |e| e.kind_of?(Integer) }\nend", "  values.select { |v|\
    \ v.is_a?(Fixnum) }\nend", "  i = 0\n  result = []\n  while i < values.size\n\
    \    if values[i].is_a?(Fixnum)\n      result << values[i]\n    end\n    i +=\
    \ 1\n  end\n  result\nend", "  values.select { |value| value.is_a?(Integer) }\n\
    end", "  values.select do |v|\n    v.is_a?(Integer)\n  end\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |x| Rbthon::Types::Int.instance?(x)\
    \ }\nend", "  values.select { |x| x.is_a?(Integer) }\nend", "  values.filter {\
    \ |val| val.is_a?(::Fixnum) }\nend", "  values.select { |val| val.is_a? Integer\
    \ }\nend", "  values.filter do |value|\n    value.is_a?(Integer)\n  end\nend",
  "    values.select do |x|\n        x.is_a?(Integer)\n    end\nend", "  values.select\
    \ do |el|\n    if el.is_a? Integer\n      true\n    else\n      false\n    end\n\
    \  end\nend", "  values.select{|item| item.is_a? Integer}\nend", "  values.filter\
    \ do |value|\n    value.is_a?(Integer)\n  end\nend", "  values.select { |value|\
    \ value.is_a? Integer }\nend", "    values.select { |x| x.is_a?(Fixnum) }\nend",
  "  values.select { |v| v.is_a?(Integer) }\nend", "  fn = ->(x) { x.integer? }\n\
    \  values.filter(&fn)\nend", "  # begin ... end can be used instead of do ...\
    \ end\n  # begin/end allows you to use return and break\n  # begin also allows\
    \ you to use if/unless without parens\n  begin\n    return values.map do |v|\n\
    \      case v\n      when Integer\n        v\n      when Numeric\n        v.to_i\n\
    \      end\n    end.compact\n  end\nend", "    return values.filter do |value|\n\
    \        value.is_a?(Integer)\n    end\nend", "  values.select do |value|\n  \
    \  value.kind_of?(Integer)\n  end\nend", "  lambda do\n    values.select { |value|\
    \ value.is_a?(Integer) }\n  end\nend", "  values.filter(.is_a?(int))\nend", " \
    \ values.map do |value|\n    next unless value.is_a?(Integer)\n    value\n  end.compact\n\
    end", "  result = []\n  each_value(values) do |value|\n    if value.kind_of?(Integer)\n\
    \      result << value\n    end\n  end\n  result\nend", "  values.select { |value|\
    \ value.kind_of? Integer }\nend", "  filter(values) { |v| v.is_a?(Fixnum) }\n\
    end", "  values.filter { |val| val.is_a?(Integer) }\nend", "  filter { |x| x.is_a?\
    \ Integer }.call(values)\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a? Integer }\nend", "  values.filter\
    \ { |value| value.class == Fixnum }\nend", "  # Your code here\nend", "    values.select\
    \ { |value| value.is_a? Integer }\nend", "  values.select { |value| value.class\
    \ == Integer }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select{|x|x.is_a?\
    \ Fixnum}\nend", "  values.select { |x| x.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.integer? }\nend", "  values.select { |v| v.kind_of?(Integer) }\nend",
  "  # lambda, that checks if the value is an Integer\n  only_integers = ->(value)\
    \ { value.is_a?(Integer) }\n  # loop through given values and check if each is\
    \ an Integer\n  # if so, add to filtered array\n  filtered = []\n  values.each\
    \ do |value|\n    filtered << value if only_integers.call(value)\n  end\n  filtered\n\
    end", "  values.select { |value| value.is_a?(Fixnum) }\nend", "    return values.select\
    \ { |x| x.is_a? Integer }\nend", "  raise NotImplementedError\nend", "  values.select\
    \ do |value|\n    value.is_a?(Integer)\n  end\nend", "  values.select{|value|\
    \ value.is_a? Integer}\nend", "    values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.filter { |value| value.integer? }\nend", "  values.filter\
    \ { |v| v.is_a?(Integer) }\nend", "  values.find_all do |e|\n    e.is_a?(Integer)\n\
    \  end\nend", "  filter_lambda = ->(x) { x.is_a?(Integer) }\n  values.select(&filter_lambda)\n\
    end", "  filter(values) { |value| is_integer?(value) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  filter(values) { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a? Integer }\nend", "  values.select\
    \ do |value|\n    value.is_a?(Fixnum)\n  end\nend", "  values.select { |v| v.is_a?(Fixnum)\
    \ }\nend", "  values.select do |value|\n    value.kind_of?(Fixnum)\n  end\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Fixnum) }\nend", "  filter(values) { |value| integer?(value) }\n\
    end", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a? Integer }\nend", "  # Do not use .filter or .select methods\n  values.map\
    \ { |value| rb_is_int(value) ? value : nil }.compact\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "    values.select do |v|\n        v.is_a? Integer\n    end\nend",
  "  values.select { |x| x.is_a? Integer }\nend", "  values.filter { |value| value.is_a?\
    \ Integer }\nend", "  values.filter { |v| is_integer.call(v) }\nend", "  values.select\
    \ { |item| item.is_a? Integer }\nend", "    values.select{|v| v.is_a?(Fixnum)}\n\
    end", "  values.select { |x| x.is_a?(Integer) }\nend", "  # your code goes here\n\
    end", "  values.select { |x| x.is_a?(Integer) }\nend", "  values.select { |item|\
    \ item.is_a? Integer }\nend", "\tvalues.select { |x| x.is_a? Integer }\nend",
  "    values.select { |value| value.is_a? Integer }\nend", "  values.select do |item|\n\
    \    item.is_a? Integer\n  end\nend", "\tvalues.select { |value| value.integer?\
    \ }\nend", "    return Proc.new do |list|\n        list.select { |v| v.class ==\
    \ Fixnum }\n    end\nend", "  values.filter do |value|\n    value.integer?\n \
    \ end\nend", "  values.select { |v| integer?.call(v) }\nend", "  values.select\
    \ { |x| x.is_a?(Integer) }\nend", "  values.filter { |value| value.is_a? Integer\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "    # Hint: use `rbthon_type_of`\nend", " \
    \ values.filter { |value| value.is_a?(Integer) }\nend", "    values.select { |val|\
    \ val.is_a? Integer }\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select{|value| value.is_a?(Integer)}\nend", "  filter(values) { |el| el.is_a?\
    \ Integer }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", " \
    \ values.select { |x| x.is_a?(Integer) }\nend", "  values.select { |i| i.is_a?(Fixnum)\
    \ }\nend", "  values.select { |v| v.is_a? Integer }\nend", "  values.select {\
    \ |value| is_integer(value) }\nend", "  values.select { |value| value.integer?\
    \ }\nend", "  raise \"Not implemented\"\nend", "  values.filter { |v| v.is_a?(::Integer)\
    \ }\nend", "    filter(values) { |x| is_integer(x) }\nend", "  values.map do |value|\n\
    \    if is_integer(value)\n      value\n    end\n  end.compact\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  # ...\nend", "  values.select { |value| rbthon_typeof(value)\
    \ == 'integer' }\nend", "  # insert your code here\nend", "  values.filter(&:int?)\n\
    end", "  values.filter { |i| i.is_a? Integer }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Fixnum) }\nend", "  values.select\
    \ do |value|\n    value.is_a?(Integer)\n  end\nend", "    values.select do |value|\n\
    \        value.integer?\n    end\nend", "  values.select { |v| v.is_a?(Fixnum)\
    \ }\nend", "  values.select { |x| x.is_a?(Fixnum) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.filter { |value| value.is_a?(Integer)\
    \ }\nend", "  result = []\n  for value in values\n    if is_integer?(value)\n\
    \      result << value\n    end\n  end\n  result\nend", "  values.select do |value|\n\
    \    value.is_a?(Fixnum)\n  end\nend", "  # --- your code starts here ---\n  int_list\
    \ = []\n  values.each do |i|\n    int_list << i if i.is_a?(Integer)\n  end\n \
    \ int_list\n  # --- your code ends here ---\nend", "  values.select { |v| v.is_a?\
    \ Integer }\nend", "  values.select do |value|\n    # FIXME: add boolean expression\
    \ here\n  end\nend", "  integers = []\n  for value in values\n    if is_integer(value)\n\
    \      integers.append(value)\n    end\n  end\n  return integers\nend", "  # Write\
    \ your code here\nend", "  values.select { |v| v.is_a? Integer }\nend", "\tvalues.select{|x|\
    \ x.is_a? Integer}\nend", "  values.filter { |x| x.is_a?(Integer) }\nend", " \
    \   values.filter{|x| x.is_a?(Integer)}\nend", "  values.select { |item| item.is_a?\
    \ Integer }\nend", "  values.select { |value| value.is_a? Integer }\nend", " \
    \ values.select { |value| value.is_a?(Integer) }\nend", "  values.select{|val|\
    \ val.is_a?(Integer)}\nend", "    filter(values) { |v| v.instance_of? Integer\
    \ }\nend", "  values.select do |value|\n    if value.is_a?(Fixnum)\n      true\n\
    \    else\n      false\n    end\n  end\nend", "  # TODO: implement\nend", "  values.filter{|x|\
    \ x.is_a?(Fixnum)}\nend", "  values.select { |v| v.is_a? Integer }\nend", "  values.select\
    \ { |x| x.is_a? Integer }\nend", "  values.select do |value|\n    value.is_a?(Integer)\n\
    \  end\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select\
    \ { |x| x.kind_of?(Integer) }\nend", "    # TODO: add your code here\nend", " \
    \ filter(values, :is_int?)\nend", "  values.select { |x| x.is_a? Integer }\nend",
  "  values.select { |v| v.class == Fixnum }\nend", "  values.filter { |v| rb_obj_is_kind_of(v,\
    \ Rb_cFixnum) }\nend", "  values.each.select do |value|\n    is_integer.call(value)\n\
    \  end\nend", "  values.select{|x| x.is_a?(Integer)}\nend", "  values.filter {\
    \ |e| not e.nil? and e.respond_to? :to_i }\nend", "  values.select do |value|\n\
    \    value.is_a?(Integer)\n  end\nend", "  values.select { |value| value.is_a?\
    \ Integer }\nend", "  values.select { |v| v.is_a? Integer }\nend", "  result =\
    \ []\n  values.each do |x|\n    if x.class == Integer\n      result.push(x)\n\
    \    end\n  end\n  return result\nend", "  values.select{|x| x.is_a? Integer}\n\
    end", "    values.select { |v| is_integer(v) }\nend", "    values.filter { |value|\
    \ \n        value.is_a?(Integer) \n    }\nend", "  values.filter { |i| i.is_a?\
    \ Integer }\nend", "  values.reduce([]) do |acc, x|\n    if x.is_a? Integer\n\
    \      acc << x\n    else\n      acc\n    end\n  end\nend", "    values.filter\
    \ { |v| v.is_a? Integer }\nend", "  values.select do |val|\n    val.is_a? Integer\n\
    \  end\nend", "  # ... write your code here\nend", "  values.select { |val| val.is_a?\
    \ Integer }\nend", "  values.select { |value| value.is_a? Integer }\nend", " \
    \ values.select { |x| x.instance_of? Fixnum }\nend", "  values.filter { |v| Fixnum\
    \ === v }\nend", "  values.select { |x| x.class == Fixnum }\nend", "  values.select\
    \ do |v|\n    v.is_a?(Integer)\n  end\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  # your code here\nend", "  values.select { |value| value.kind_of?\
    \ Integer }\nend", "  values.select { |v| v.is_a? Integer }\nend", "  values.select\
    \ { |x| x.is_a?(Integer) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
