language: rb
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length >= 3\n    if s[0] != s[1] && s[1] != s[2] && s[0]\
    \ != s[2]\n      true\n    else\n      false\n    end\n  else\n    false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqkpfj5o5\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpqkpfj5o5.rb:39:in `test_is_happy'\n\
    \     36:     assert_equal(true, candidate.call(\"adb\"))\n     37:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     38:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 39:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     40:   end\n     41: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007193068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.02 tests/s, 1112.18 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphym0osnu\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmphym0osnu.rb:24:in `test_is_happy'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_is_happy\n\
    \     23:     candidate = method(:is_happy)\n  => 24:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     25:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     26:     assert_equal(true, candidate.call(\"abcd\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.007482632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.chars.each_cons(3).any? { |a, b, c| a != b && b != c && a\
    \ != c }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4qzs3r70\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp4qzs3r70.rb:31:in `test_is_happy'\n\
    \     28:     assert_equal(true, candidate.call(\"adb\"))\n     29:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     30:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 31:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     32:   end\n     33: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007255809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.82 tests/s, 1102.56 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.chars.length >= 3 && s.chars.each_cons(3).all? { |x| x.first\
    \ != x.last }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk4co9id3\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpk4co9id3.rb:27:in `test_is_happy'\n\
    \     24:     assert_equal(false, candidate.call(\"a\"))\n     25:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     26:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 27:     assert_equal(false, candidate.call(\"aabb\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     29:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     30:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.013630592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.36 tests/s, 293.46 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n    alphabet = (\"a\"..\"z\").to_a\n    three_letter_substrings\
    \ = s.chars.each_cons(3).to_a\n    if three_letter_substrings.empty?\n       \
    \ false\n    else\n        alphabet.each do |letter|\n            if three_letter_substrings.all?\
    \ { |substring| substring.include?(letter) }\n                return false\n \
    \           end\n        end\n        true\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprhpis240\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmprhpis240.rb:37:in `test_is_happy'\n\
    \     34:     candidate = method(:is_happy)\n     35:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     36:     assert_equal(false, candidate.call(\"aa\"\
    ))\n  => 37:     assert_equal(true, candidate.call(\"abcd\"))\n     38:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n     39:     assert_equal(true, candidate.call(\"\
    adb\"))\n     40:     assert_equal(false, candidate.call(\"xyy\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007436491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.47 tests/s, 403.42 assertions/s\n"
  timestamp: 1659824117
- exit_code: 0
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length >= 3\n    arr = s.split('')\n    arr.each_cons(3)\
    \ do |cons|\n      if cons[0] == cons[1] || cons[1] == cons[2] || cons[0] == cons[2]\n\
    \        return false\n      end\n    end\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvghs7jfu

    Started

    .

    Finished in 0.000476257 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2099.71 tests/s, 16797.65 assertions/s

    '
  stdout: ''
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphym0osnu\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmphym0osnu.rb:24:in `test_is_happy'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_is_happy\n\
    \     23:     candidate = method(:is_happy)\n  => 24:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     25:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     26:     assert_equal(true, candidate.call(\"abcd\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.007482632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  return nil if s.size < 3\n  s.scan(/.../).all? { |e| e.chars.uniq.size\
    \ == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp531ixg_q\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp531ixg_q.rb:25:in `test_is_happy'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_is_happy\n\
    \     24:     candidate = method(:is_happy)\n  => 25:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     26:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     27:     assert_equal(true, candidate.call(\"abcd\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.007158628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.69 tests/s, 139.69 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length < 3\n    return false\n  end\n  s = s.split('')\n\
    \  happy = true\n  while happy && s.length > 2\n    if s[0] == s[1]\n      happy\
    \ = false\n    end\n    if s[1] == s[2]\n      happy = false\n    end\n    if\
    \ s[0] == s[2]\n      happy = false\n    end\n    s.shift\n  end\n  return happy\n\
    end\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\nis_happy.call(aabb)\n\
    is_happy.call(adb)\nis_happy.call(xyy)\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: SyntaxError
  stderr: "/tmp/tmpvny6s5ln.rb:17:in `is_happy': wrong number of arguments (given\
    \ 0, expected 1) (ArgumentError)\n\tfrom /tmp/tmpvny6s5ln.rb:37:in `<main>'\n"
  stdout: ''
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpggkl_fu7\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpggkl_fu7.rb:24:in `test_is_happy'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_is_happy\n\
    \     23:     candidate = method(:is_happy)\n  => 24:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     25:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     26:     assert_equal(true, candidate.call(\"abcd\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.007250784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.92 tests/s, 137.92 assertions/s\n"
  timestamp: 1659824117
- exit_code: 0
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.size >= 3 && (s.length - 2).times.all? { |index| s[index]\
    \ != s[index + 1] && s[index] != s[index + 2] && s[index + 1] != s[index + 2]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsrrqjl4d

    Started

    .

    Finished in 0.000461283 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2167.87 tests/s, 17342.93 assertions/s

    '
  stdout: ''
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length < 3\n    return false\n  else\n    s.scan(/([a-z])([a-z])([a-z])/).each\
    \ do |a, b, c|\n      return false if a == b || b == c || a == c\n    end\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgy699k0b\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpgy699k0b.rb:38:in `test_is_happy'\n\
    \     35:     assert_equal(true, candidate.call(\"adb\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     37:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 38:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     39:   end\n     40: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007076232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.32 tests/s, 1130.55 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length < 3\n    return false\n  end\n  return s.scan(/.../).uniq.length\
    \ == s.length/3\nend\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\n\
    is_happy.call(aabb)\nis_happy.call(adb)\nis_happy.call(xyy)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hrgay_k.rb:17:in `is_happy': wrong number of arguments (given\
    \ 0, expected 1) (ArgumentError)\n\tfrom /tmp/tmp4hrgay_k.rb:23:in `<main>'\n"
  stdout: ''
  timestamp: 1659824117
- exit_code: 0
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.length >= 3 && s.each_char.each_cons(3).all? { |chars| chars.uniq.length\
    \ == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9fwp7cv9

    Started

    .

    Finished in 0.000632799 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.28 tests/s, 12642.25 assertions/s

    '
  stdout: ''
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  # write your solution here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg43oai1h\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpg43oai1h.rb:24:in `test_is_happy'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_is_happy\n\
    \     23:     candidate = method(:is_happy)\n  => 24:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     25:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     26:     assert_equal(true, candidate.call(\"abcd\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.007261069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.72 tests/s, 137.72 assertions/s\n"
  timestamp: 1659824117
- exit_code: 0
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length < 3\n    return false\n  end\n  i = 0\n  while\
    \ i < s.length - 2\n    a = s[i]\n    b = s[i + 1]\n    c = s[i + 2]\n    if a\
    \ == b || b == c || a == c\n      return false\n    end\n    i += 1\n  end\n \
    \ return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpf2n_00l2

    Started

    .

    Finished in 0.000586211 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1705.87 tests/s, 13646.96 assertions/s

    '
  stdout: ''
  timestamp: 1659824117
- exit_code: 0
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  if s.length < 3\n    false\n  else\n    s = s.split('')\n \
    \   i = 0\n    while i < s.length - 2\n      if s[i] == s[i + 1] || s[i] == s[i\
    \ + 2] || s[i + 1] == s[i + 2]\n        return false\n      end\n      i += 1\n\
    \    end\n    true\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplv4in9zu

    Started

    .

    Finished in 0.000443883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2252.85 tests/s, 18022.77 assertions/s

    '
  stdout: ''
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length == s.length / 3\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpad5qzl_4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpad5qzl_4.rb:27:in `test_is_happy'\n\
    \     24:     assert_equal(false, candidate.call(\"a\"))\n     25:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     26:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 27:     assert_equal(false, candidate.call(\"aabb\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     29:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     30:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007441418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.38 tests/s, 537.53 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1]\
    \ or s[i] == s[i+2] or s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9qgj20ng\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp9qgj20ng.rb:27:in `test_is_happy'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_is_happy\n\
    \     26:     candidate = method(:is_happy)\n  => 27:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     28:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     29:     assert_equal(true, candidate.call(\"abcd\"))\n     30:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008047075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.27 tests/s, 124.27 assertions/s\n"
  timestamp: 1659824117
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>>\
    \ is_happy.call(aa)\n# false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n\
    # false\n# >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\n\
    def is_happy(s)\n  s.length >= 3 && s.scan(/.../).all? { |sub| sub.chars.uniq.length\
    \ == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2qksh3rq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp2qksh3rq.rb:31:in `test_is_happy'\n\
    \     28:     assert_equal(true, candidate.call(\"adb\"))\n     29:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     30:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 31:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     32:   end\n     33: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007426501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.65 tests/s, 1077.22 assertions/s\n"
  timestamp: 1659824117
