name: HumanEval_34_unique
language: rb
prompt: "# Return sorted unique elements in an array\n# >>> unique.call([5, 3, 5,\
  \ 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\ndef unique(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n\
  \    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n"
completions: ["  l.sort.uniq\nend", "    l.uniq.sort\nend", "  return l.uniq.sort\n\
    end", "    l.sort.uniq\nend", "  l.uniq.sort\nend", "  l.flatten.uniq.sort\nend",
  "  l.uniq.sort\nend", "  l.sort.uniq\nend", "  l.sort.uniq\nend", "  l.uniq.sort\n\
    end", "  l.sort.uniq\nend", "  l.uniq.sort\nend", "  l.uniq.sort\nend", "  l.sort.uniq\n\
    end", "  l.sort.uniq\nend", "  l.sort.uniq\nend", "  # First get the input and\
    \ check if it's an array\n  raise \"Error: not an array.\" unless l.is_a?(Array)\n\
    \  # Now test if array is empty\n  raise \"Error: array is empty.\" if l.empty?\n\
    \  # Now test if array contains elements that aren't numbers\n  raise \"Error:\
    \ not an array of numbers.\" unless l.all? { |i| i.is_a?(Numeric) }\n  # Return\
    \ the unique sorted elements of the array\n  l.uniq.sort\nend", "  l.sort.uniq\n\
    end", "  l.inject([]) { |memo, el| memo.include?(el) ? memo : memo << el }.sort\n\
    end", "  l.sort.uniq\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
