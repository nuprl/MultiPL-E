name: HumanEval_66_digitSum
language: rb
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
  \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n\
  # 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n\
  # 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
  \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
  \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
  abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
  \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
  ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
  \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
completions: ["  puts (s.delete(\"a-z\").bytes.map { |byte| byte - 'A'.ord + 1 }.sum)\n\
    end\ndigitSum(\"woArBld\")", "  return 0 if s.empty?\n  s.sum { |c| c.ord if c\
    \ == c.upcase }\nend", "  s.chars.reduce(0) { |a, e| e =~ /[A-Z]/ ? a + e.ord\
    \ : a}\nend", "  total = 0\n  s.each_char { |c| total += c.ord if c.ord.between?(65,\
    \ 90) }\n  total\nend", "  sum = 0\n  s.scan(/[A-Z]/).each { |i| sum += i.ord\
    \ }\n  sum\nend", "  s.chars.select { |c| c.match(/[A-Z]/) }.map { |c| c.ord }.sum\n\
    end", "  s.split('').select { |c| c =~ /[A-Z]/ }.map { |c| c.ord }.sum\nend",
  "  s.gsub(/[^A-Z]/, '').bytes.reduce(:+)\nend", "  s.chars.reduce(0) { |sum, c|\
    \ sum + c.ord - 96 if c.upcase == c } || 0\nend", "  s.chars.map{|v| v.ord}.select{|v|\
    \ (65..90).cover?(v)}.sum\nend\np digitSum(\"\")# 0\np digitSum(\"abAB\")# 131\n\
    p digitSum(\"abcCd\")# 67\np digitSum(\"helloE\")# 69\np digitSum(\"woArBld\"\
    )# 131\np digitSum(\"aAaaaXa\")# 153", "  s.sum{|c| c.ord if c.ord >= 65 && c.ord\
    \ <= 90}\nend", "  s.chars.map { |c| c.sum == 32 ? 0 : c.sum }.reduce(:+)\nend",
  "  a = s.split('')\n  b = a.map(&:ord)\n  c = b.select { |x| x >= 65 && x <= 90\
    \ }\n  d = c.inject(0, :+)\n  return d\nend", "  s.each_byte.inject(0) { |sum,\
    \ n| n >= 65 && n <= 90 ? sum + n : sum }\nend", "  s.upcase.gsub(/[^A-Z]/, '').split('').map\
    \ { |c| c.ord }.reduce(:+)\nend", "  s.upcase.bytes.sum\nend", "  s.chars.map{|x|\
    \ x.sum}.reduce(:+)\nend", "    s.each_char.sum{|x| x.ord>96&&x.ord<123 ? x.ord-32\
    \ : 0}\nend\nputs digitSum(\"\")\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\"\
    )\nputs digitSum(\"helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\"\
    )", "  sum = 0\n  s.chars.each do |ch|\n    ascii = ch.ord\n    if ascii >= 65\
    \ && ascii <= 90\n      sum += ascii\n    end\n  end\n  sum\nend", "  sum = 0\n\
    \  s.chars.each do |char|\n    sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\n\
    end", "  a = \"0\"..\"9\"\n  b = \"a\"..\"z\"\n  c = s.chars.map(&:ord)\n  d =\
    \ c.map { |x| a.include?(x.chr) ? 0 : x}\n  e = d.map { |x| b.include?(x.chr)\
    \ ? 0 : x}\n  e.reduce(:+)\nend\nputs digitSum(\"abcCd\")", "  if (s.length) ==\
    \ 0\n    return 0\n  end\n  sum = 0\n  for i in (0..s.length-1)\n    if s[i] >=\
    \ \"A\" && s[i] <= \"Z\"\n      sum += s[i].ord\n    end\n  end\n  return sum\n\
    end", "  s.sum - (s.count \"a-z\") * 32\nend", "  s.chars.inject(0) { |sum, char|\
    \ char == char.upcase ? sum + char.ord : sum }\nend", "  a = s.split('')\n  b\
    \ = a.map { |i| i.unpack('U*')[0] }\n  b.select! { |i| i > 64 && i < 91 }\n  b.sum\n\
    end", "  sum = 0\n  s.each_byte do |i|\n    sum += i if i >=65 && i <= 90\n  end\n\
    \  sum\nend", "  s.gsub(/[^a-zA-Z]/, '').chars.map(&:ord).reduce(0, :+)\nend",
  "  # your code here\nend", "  s.chars.map { |c| c.upcase.ord }.inject(:+)\nend",
  "    if s == \"\"\n        return 0\n    else\n        s.scan(/[A-Z]/).reduce(0)\
    \ {|sum, c| sum + c.ord}\n    end\nend", "  str1 = \"\"\n  sum = 0\n  if s ==\
    \ \"\"\n    sum = 0\n  else\n    str1 = s.gsub(/[^A-Z]/, '')\n    sum = str1.split(\"\
    \").map(&:ord).reduce(:+)\n  end\n  sum\nend", "  s.sum - s.sum { |c| c.ord unless\
    \ (65..90).include?(c.ord) }\nend\np digitSum(\"\") == 0\np digitSum(\"abAB\"\
    ) == 131\np digitSum(\"abcCd\") == 67\np digitSum(\"helloE\") == 69\np digitSum(\"\
    woArBld\") == 131\np digitSum(\"aAaaaXa\") == 153", "    # Assign variables\n\
    \    cnt = 0\n    sum = 0\n    # Find the length of the string\n    cnt = s.length\n\
    \    # Iterate over the string\n    cnt.times do |n|\n        # Check if the character\
    \ is uppercase\n        if s[n].ord >= 65 && s[n].ord <= 90\n            # Add\
    \ the value of the character to the sum\n            sum += s[n].ord\n       \
    \ end\n    end\n    # Return the sum\n    return sum\nend", "    letters = s.split(\"\
    \")\n    sum = 0\n    letters.each do |char|\n        sum += char.ord if char\
    \ == char.upcase\n    end\n    sum\nend", "  s.chars.map(&:ord).map { |x| x -\
    \ 96 if x > 96 }.compact.sum\nend", "  a = s.chars.select{|x| x == x.upcase}\n\
    \  a.map{|x| x.ord}.sum\nend", "  s.sum - s.sum { |c| c.ord.between?(97, 122)\
    \ }\nend", "  \nend", "  return 0 if s.length == 0\n  s.scan(/[A-Z]/).map { |x|\
    \ x.ord }.reduce(:+)\nend", "  s.chars.select { |x| x == x.upcase }.reduce(0)\
    \ { |a, b| a + b.ord }\nend", "  sum = 0\n  s.chars.each { |c| sum += c.ord if\
    \ c == c.upcase }\n  sum\nend", "    sum = 0\n    s.chars.each do |x|\n      sum\
    \ += x.ord if (x.ord >= 65 && x.ord <= 90)\n    end\n    sum\nend\nputs digitSum(\"\
    abAB\")", "  result = 0\n  s.split('').each { |c| result += c.ord if c.ord.between?(65,\
    \ 90) }\n  result\nend", "  s.split('').map { |c| c.ord.to_i }.select { |i| i\
    \ > 64 && i < 91 }.reduce(:+)\nend", "    # s.upcase.scan(/[A-Z]/).join.split('').map(&:ord).reduce(:+)\n\
    \    s.upcase.split('').map(&:ord).select{|x| x >= 65 && x <= 90}.reduce(:+)\n\
    end", "  s.split('').map { |e| e.ord unless e.match(/[a-z]/) }.compact.reduce(:+)\n\
    end", "  return 0 if s.length == 0\n  return s.bytes.map { |e| e.to_i }.inject(:+)\
    \ if s.length == 1\n  s.bytes.map { |e| e.to_i }.inject(:+) - s.downcase.bytes.map\
    \ { |e| e.to_i }.inject(:+)\nend", "  s.gsub(/[^A-Z]/, '').bytes.reduce(:+)\n\
    end", "  sum = 0\n  s.chars.each do |ch|\n    sum += ch.ord if ch.ord >= 65 &&\
    \ ch.ord <= 90\n  end\n  sum\nend", "  sum = 0\n  if s.empty?\n    sum = 0\n \
    \ else\n    s.split('').each { |char| sum += char.ord if char.ord >= 65 && char.ord\
    \ <= 90 }\n  end\n  sum\nend", "    sum = 0\n    s.each_byte do |v|\n        if\
    \ v > 64 && v < 91\n            sum += v\n        end\n    end\n    sum\nend",
  "  s.scan(/[A-Z]/).sum{|e| e.ord - 65 + 1}\nend", "  n = 0\n  s.chars.each { |l|\
    \ n += l.ord }\n  n\nend", "  s.upcase.chars.map(&:ord).select { |char| char.between?(65,\
    \ 90) }.reduce(:+)\nend", "  s.upcase.chars.map(&:ord).select { |o| o >= 65 &&\
    \ o <= 90 }.sum\nend", "  s.sum - s.gsub(/[A-Z]/, '').sum\nend", "  s.chars.map\
    \ { |v| v.ord }.select { |v| v >= 65 && v <= 90 }.sum\nend", "    s.to_s.gsub(/[^a-zA-Z]/,\
    \ '').chars.reduce(0) { |sum, c| sum + c.ord }\nend", "  s.upcase.gsub(/[^A-Z]/,\
    \ '').sum\nend", "  s.each_byte.reduce(0) { |acc, v| (65..90).include?(v) ? acc\
    \ + v : acc }\nend", "  s.gsub(/[^A-Z]/, '').chars.map { |x| x.ord }.sum\nend",
  "  s.chars.map{|c| c.ord if c == c.upcase}.compact.reduce(:+)\nend", "  s.scan(/[A-Z]/).sum{|c|\
    \ c.ord}\nend", "  s.upcase.chars.inject(0) { |sum, c| sum + c.ord }\nend", " \
    \ sum = 0\n  s.each_char do |x|\n    sum += x.ord if x.ord >= 65 && x.ord <= 90\n\
    \  end\n  sum\nend\ndigitSum(\"woArBld\")", "  s.gsub(/[^a-zA-Z]/, '').chars.reduce(0)\
    \ { |sum, item| sum + item.ord }\nend", "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\n\
    end", "    sum = 0\n    s.chars.each do |ch|\n        sum += ch.ord if ch.ord.between?(65,\
    \ 90)\n    end\n    sum\nend", "  total = 0\n  s.split(\"\").each { |char| total\
    \ += char.ord if char =~ /[A-Z]/ }\n  total\nend", "  s.scan(/[A-Z]/).inject(0)\
    \ { |sum, s| sum + s.ord }\nend", "    s.each_byte.sum{|x| x < 97 ? x : 0}\nend",
  "  if s == \"\"\n    0\n  else\n    s.gsub(/[a-z]/, \"\").split(\"\").map{|x| x.ord\
    \ }.reduce(:+)\n  end\nend", "  return s.bytes.reduce(0) { |acc, b| b >= 65 &&\
    \ b <= 90 ? acc + b : acc }\nend", "  return 0 if s.empty?\n  s.split('').map\
    \ { |char| char.ord }.inject(0) { |sum, ord| ord.between?(65, 90) ? sum + ord\
    \ : sum }\nend", "  sum = 0\n  # code goes here\n  s.each_char do |c|\n    if\
    \ c.ord >= 65 && c.ord <= 90\n      sum += c.ord\n    end\n  end\n  return sum\n\
    end", "  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend",
  "  s.gsub(/[^A-Z]/, '').chars.map { |c| c.ord }.reduce(:+)\nend", "  count = 0\n\
    \  s.chars.each do |char|\n    if char.match(/[A-Z]/)\n      count += char.ord\n\
    \    end\n  end\n  count\nend", "  s.split('').inject(0) { |sum, c| sum + c.ord.to_i\
    \ if c.ord > 64 && c.ord < 91 }\nend", "  i = 0\n  sum = 0\n  while i < s.length\n\
    \    if s[i].ord <= 90 && s[i].ord >= 65\n      sum += s[i].ord\n    end\n   \
    \ i += 1\n  end\n  return sum\nend", "  sum = 0\n  # your code\n  s.each_char\
    \ do |char|\n    if char.ord >= 65 && char.ord <= 90\n      sum += char.ord\n\
    \    end\n  end\n  sum\nend", "  #your code here\n  s.split(\"\").select{|i| i\
    \ =~ /[A-Z]/}.map{|i| i.ord}.inject(:+)\nend", "  s.chars.map(&:ord).select {\
    \ |c| c >= 65 && c <= 90 }.sum\nend", "  return 0 if s.empty?\n  s.gsub(/[^A-Z]/,\
    \ '').bytes.sum\nend", "   sum = 0\n   s.each_char do |char|\n     sum += char.ord\
    \ if char =~ /[A-Z]/\n   end\n   sum\nend", "  s.bytes.reduce(0) { |sum, b| b.between?(65,\
    \ 90) ? sum + b : sum }\nend", "  return 0 if s.length == 0\n  sum = 0\n  s.chars.each\
    \ do |char|\n    sum += char.ord if char.ord.between?(65, 90)\n  end\n  sum\n\
    end", "  if s.empty?\n    0\n  else\n    s.each_char.select { |i| i =~ /[A-Z]/\
    \ }.map { |i| i.ord }.reduce(:+)\n  end\nend", "  s.upcase.split('').map { |c|\
    \ c.ord - 64 }.reduce(:+)\nend", "  sum = 0\n  s.each_byte do |n|\n    sum +=\
    \ n if n >= 65 && n <= 90\n  end\n  sum\nend", "  # \u6B63\u898F\u8868\u73FE\u3067\
    \u6587\u5B57\u3092\u7F6E\u63DB\u3057\u3066\u6570\u5024\u306B\u5909\u63DB\u3059\
    \u308B\n  str = s.gsub(/[^A-Z]/, '').tr('A-Z', '1-9a-z')\n  # \u5C0F\u6587\u5B57\
    \u30920\u3068\u3057\u3066\u6570\u5024\u3092\u6570\u3048\u308B\n  str.chars.sum(&:ord)\
    \ - str.chars.sum(&:downcase.ord)\nend", "  s.codepoints.inject(0) { |sum, x|\
    \ x > 96 ? sum + x : sum }\nend", "    s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\n\
    end", "  count = 0\n  s.each_char do |char|\n    count += char.ord if char.ord.between?(65,\
    \ 90)\n  end\n  count\nend", "  return 0 if s.nil? || s.empty?\n  return s.sum\
    \ { |x| x.ord } if s.is_a?(Array)\n  return s.sum - (s.length * s[0].ord) if s.match(/^[a-z]+$/)\n\
    \  s.sum - (s.length * 'a'.ord)\nend", "  sum = 0\n  s.each_char do |char|\n \
    \   sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\nend", "    s.bytes.reduce(0)\
    \ { |acc, num| num < 97 ? acc + num : acc }\nend", "    sum = 0\n    if s == \"\
    \"\n        sum = 0\n    elsif s[0] == s[0].upcase\n        sum = s[0].ord + digitSum(s[1..-1])\n\
    \    else\n        sum = digitSum(s[1..-1])\n    end\n    return sum\nend\nputs\
    \ digitSum(\"\")\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\")\nputs digitSum(\"\
    helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\")", "s.chars.select{|i|i=~/[A-Z]/}.map{|i|i.ord}.reduce(:+)\n\
    end", "  return 0 if s.nil? || s.empty?\n  s.upcase.chars.reduce(0) { |acc, char|\
    \ acc + char.ord }\nend\nputs \"Should be 0: #{digitSum('')}\"\nputs \"Should\
    \ be 131: #{digitSum('abAB')}\"\nputs \"Should be 67: #{digitSum('abcCd')}\"\n\
    puts \"Should be 69: #{digitSum('helloE')}\"\nputs \"Should be 131: #{digitSum('woArBld')}\"\
    \nputs \"Should be 153: #{digitSum('aAaaaXa')}\"", "  s.bytes.inject(0) { |total,\
    \ b| (65..90).include?(b) ? total + b : total }\nend", "  chars = s.chars\n  chars.map{|c|\
    \ (c.ord - 64) unless c.ord < 65 || c.ord > 90}.compact.reduce(:+)\nend", "  (s.gsub(/[^A-Z]/,\
    \ '').chars.reduce(0) { |sum, c| sum + c.ord } - 'A'.ord * s.count('A-Z')) / 2\n\
    end", "  p s.sum { |x| x.ord if x.upcase == x }.to_i\nend", "  s.sum(&:ord)\n\
    end", "  s.bytes.reduce(0) { |sum, byte| byte < 97 ? sum + byte : sum }\nend",
  "  total = 0\n  s.each_byte { |e| total += e if e >= 65 && e <= 90 }\n  total\n\
    end", "  a = s.split('')\n  a.map(&:ord).keep_if { |x| x > 64 && x < 91 }.reduce(:+)\n\
    end", "  s.chars.map{|c|c.ord}.select{|x|x>64&&x<91}.reduce(:+)\nend", "  #Code\
    \ and Coding\n  s.scan(/[A-Z]/).map{|s| s.ord }.reduce(:+)\nend", "  s.upcase.chars.inject(0)\
    \ { |sum, c| sum + c.ord }\nend", "  s.gsub(/[^a-zA-Z]/, '').chars.inject(0) {\
    \ |sum, n| sum + n.ord }\nend", "    return 0 if s.empty?\n    sum = 0\n    s.each_char\
    \ do |c|\n        sum += c.ord if c.ord >= 65 && c.ord <= 90\n    end\n    sum\n\
    end", "  s.upcase.split('').map{|x| x.ord}.sum\nend", "  s.upcase.chars.map {\
    \ |char| char.ord }.sum\nend", "  \tsum=0\n  \ts.each_char{|c|\n\t  sum+=c.ord\
    \ if c.ord>=65 and c.ord<=90\n\t}\n\treturn sum\nend", "  sum = 0\n  s.chars.each\
    \ do |c|\n    sum += c.ord if c.ord.between?(65, 90)\n  end\n  sum\nend", "  if\
    \ s.nil? || s.length < 1\n    return 0\n  end\n  #use the sum and downcase method\
    \ instead\n  upper = 0\n  s.downcase.each_char do |character|\n    upper += character.ord\
    \ if character.match(/[[:upper:]]/)\n  end\n  upper\nend", "  return 0 if s.empty?\n\
    \  s.chars.select{|i|i.ord>=65&&i.ord<=90}.map(&:ord).reduce(:+)\nend", "  s.chars.map{|v|v.ord}.select{|v|v>=65&&v<=90}.reduce(:+)\n\
    end", "  digits = ('A'..'Z').to_a\n  sum = 0\n  s.chars.each do |ch|\n    sum\
    \ += ch.ord if digits.include?(ch)\n  end\n  sum\nend", "  return 0 if s.empty?\n\
    \  s.upcase.bytes.select { |c| 65 <= c && c <= 90 }.reduce(:+)\nend", "  (s.each_char.map(&:ord).sum\
    \ - s.downcase.each_char.map(&:ord).sum) / 2\nend\nputs \"Task 1\"\nputs digitSum(\"\
    helloE\") == 69\nputs digitSum(\"woArBld\") == 131\nputs \"-------------\"", " \
    \ s.chars.select { |l| l.ord >= 65 && l.ord <= 90 }.map(&:ord).sum\nend", "  s.chars.reduce(0)\
    \ { |sum, c|\n    c =~ /[[:upper:]]/ ? sum + c.ord : sum\n  }\nend", "  sum =\
    \ 0\n  s.each_byte do |byte|\n    sum += byte if byte > 64 && byte < 91\n  end\n\
    \  sum\nend", "  #puts s.scan(/[A-Z]/).map{|c| c.ord}.sum\n  s.scan(/[A-Z]/).map{|c|\
    \ c.ord}.sum\nend", "   s.upcase.chars.map{|c| c.ord - 64}.reduce(:+)\nend", " \
    \   sum = 0\n    s.each_char { |c| sum += c.ord if c.ord >= 65 && c.ord <= 90\
    \ }\n    sum\nend", "  s.chars.select { |c| c.match(/[A-Z]/) }.map { |c| c.ord\
    \ }.reduce(:+)\nend", "  s.gsub(/[^a-zA-Z]/, '').split('').reduce(0) { |sum, char|\
    \ sum + char.ord }\nend", "  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend",
  "  total = 0\n  s.upcase.chars.each do |c|\n    total += c.ord\n  end\n  total\n\
    end", "  s.split('').inject(0) { |res, c| res += c.ord if c =~ /[A-Z]/; res }\n\
    end", "  s.gsub(/[^a-zA-Z]/, '').split('').map(&:ord).select { |v| v.between?(65,\
    \ 90) }.reduce(:+)\nend", "  s.upcase.codepoints.select { |c| c >= 65 && c <=\
    \ 90 }.reduce(:+)\nend", "  sum = 0\n  s.chars.each do |char|\n    sum += char.ord\
    \ if char.ord >= 65 && char.ord <= 90\n  end\n  sum\nend", "  s.chars.reduce(0)\
    \ { |sum, ch| ch.upcase! ? sum + ch.ord : sum }\nend", "  s.split('').map{|c|\
    \ c.ord}.select{|n| n.between?(65,90)}.reduce(:+)\nend", "  s.to_s.split('').inject(0)\
    \ { |sum, c|\n    if c.match(/[A-Z]/)\n      sum += c.ord\n    end\n    sum\n\
    \  }\nend", "\tsum = 0\n\ts.split(\"\").each do |x|\n\t\tsum += x.ord if x.ord\
    \ <= 90\n\tend\n\tsum\nend\nputs digitSum(\"abAB\")\nputs digitSum(\"abcCd\")\n\
    puts digitSum(\"helloE\")\nputs digitSum(\"woArBld\")\nputs digitSum(\"aAaaaXa\"\
    )", "  s.gsub(/[^A-Z]/, '').each_byte.reduce(:+)\nend", "  s.chars.map { |c| c.ord\
    \ }.select { |i| i.between?(65, 90) }.sum\nend", "  s.upcase.chars.map { |ch|\
    \ ch.ord }.reduce(:+)\nend", "  raise 'Invalid input' if s.length == 0\n  s.split('').map(&:ord).reduce(0)\
    \ { |acc, x| (x >= 65 && x <= 90) ? acc + x : acc }\nend", "  return 0 if s.empty?\n\
    \  s.split('').reduce(0) { |sum, c| sum + c.ord if c.ord.between?(65, 90) }\n\
    end", "  s.count(\"A-Z\") > 0 ? s.upcase.bytes.reduce(:+) : 0\nend", "  s.sum\
    \ { |c| c.upcase.ord - 64 if c.upcase == c } || 0\nend", "\tascii_sum = 0\n\t\
    s.each_char do |char|\n\t\tascii_sum += char.ord if char.ord >= 65 && char.ord\
    \ <= 90\n\tend\n\treturn ascii_sum\nend", "  s.scan(/[A-Z]/).join.chars.map(&:ord).reduce(:+)\n\
    end", "  # your code\n  counter = 0\n  if s.empty? == true\n    puts 0\n  else\n\
    \    s.chars.each do |x|\n    counter += x.ord if x == x.upcase\n    end\n   \
    \ puts counter\n  end\nend", "  s.delete! '^A-Z'\n  s.chars.map { |n| n.ord }.reduce(:+)\n\
    end", "  s.delete!('^A-Za-z')\n  s.split('').map(&:ord).inject(:+) || 0\nend",
  "  sum = 0\n  s.each_char do |ch|\n    if ch =~ /[A-Z]/\n      sum += ch.ord\n \
    \   end\n  end\n  sum\nend", "  s.upcase.each_char.select { |c| c =~ /[A-Z]/ }.inject(0)\
    \ { |sum, c| sum + c.ord }\nend", "  s.split('').map{|e|e.ord}.select{|e| e <=\
    \ 90}.inject(:+)\nend", "  s.upcase.chars.reduce(0) { |sum, c| sum + c.ord }\n\
    end", "  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend", "  if s.empty?\n    0\n\
    \  else\n    s.upcase.split('').map(&:ord).reduce(:+)\n  end\nend", "  s.chars.map\
    \ { |c| c.ord }.inject(0) { |sum, n| n.between?(65, 90) ? sum + n : sum }\nend",
  "    return 0 if s.empty?\n    s.upcase.codepoints.inject(0){|r, e| e >= 65 && e\
    \ <= 90 ? r + e : r}\nend", "  sum = 0\n  s.each_byte do |c|\n    if c > 64 &&\
    \ c < 91\n      sum += c\n    end\n  end\n  sum\nend", "  b = 0\n  sum = 0\n \
    \ s.split(\"\").each do |i|\n    if i.match(/[A-Z]/)\n      sum += i.ord\n   \
    \ end\n  end\n  sum\nend", "\ts.upcase.bytes.sum\nend", "  sum = 0\n  s.split('').each\
    \ do |c|\n    sum += c.ord if c.ord >= 65 && c.ord <= 90\n  end\n  sum\nend",
  "  s.upcase.chars.map(&:ord).inject(:+)\nend", "  sum = 0\n  s.split('').each do\
    \ |letter|\n    if letter =~ /[[:upper:]]/\n      sum += letter.ord\n    end\n\
    \  end\n  return sum\nend", "    # puts s.upcase.split('').map{|i| i.ord}.inject(:+)\n\
    \    puts s.upcase.chars.map{|i| i.ord}.sum\nend\ndigitSum(\"helloE\")\ndigitSum(\"\
    woArBld\")\ndigitSum(\"aAaaaXa\")", "  s.scan(/[A-Z]/).map{|e| e.ord}.reduce(:+)\n\
    end", "  sum = 0\n  uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  s.split(\"\").each\
    \ { |c| uppers.include?(c) ? sum += c.ord : sum }\n  sum\nend", "  s.upcase.each_char.reduce(0)\
    \ { |sum, c| sum + c.ord }\nend\np digitSum(\"\")\np digitSum(\"abAB\")\np digitSum(\"\
    abcCd\")\np digitSum(\"helloE\")\np digitSum(\"woArBld\")\np digitSum(\"aAaaaXa\"\
    )", "  sum = 0\n  (0..s.length-1).each do |i|\n    if s[i]==s[i].upcase\n    \
    \  sum+=s[i].ord\n    end\n  end\n  sum\nend\ns = \"\"\ns = gets.chomp\nputs digitSum(s)",
  "  return 0 if s.empty?\n  s.chars.map { |i| i =~ /[A-Z]/ ? i.ord - 64 : 0 }.sum\n\
    end", "  sum = 0\n  s.each_char do |ch|\n    sum += ch.ord if ch.ord >= 65 &&\
    \ ch.ord <= 90\n  end\n  sum\nend", "  sum = 0\n  s.each_byte do |num|\n    sum\
    \ += num if num.between?(65, 90)\n  end\n  sum\nend", "  s.upcase.chars.inject(0)\
    \ { |result, elem| elem.ord.between?(65, 90) ? result + elem.ord : result}\nend",
  "  arr = s.split('')\n  sum = 0\n  arr.each do |char|\n    sum += char.ord if char.upcase\
    \ == char\n  end\n  sum\nend", "  return 0 if s.empty?\n  s.chars.map { |c| c.ord\
    \ }.select { |a| a.between?(65, 90) }.reduce(:+)\nend", "  s.chars.map{|i| i.ord\
    \ <= 90 ? i.ord : 0}.reduce(:+)\nend", "  s.upcase.chars.map { |c| c.ord - 65\
    \ }.reduce(:+)\nend", "  # your code here\n  sum = 0\n  s.split(\"\").each do\
    \ |i|\n    sum += i.ord if i.ord <= 90\n  end\n  sum\nend", "  s.each_byte.inject(0)\
    \ { |sum, code| code >= 65 && code <= 90 ? sum + code : sum }\nend", "  sum =\
    \ 0\n  s.each_byte do |c|\n    sum += c if (c >= 65 && c <= 90)\n  end\n  sum\n\
    end", "  s.split('').inject(0) { |sum, c| sum + (c.ord - 96) if c =~ /[A-Z]/ }\n\
    end", "  s.split('').map { |letter| letter.upcase.ord }.sum\nend", "  s.count('A-Z')\
    \ > 0 ? s.count('A-Z') + 26 : 0\nend", "  # sum = 0\n  # s.upcase.split('').each\
    \ do |ch|\n  #   sum += ch.ord\n  # end\n  # sum\n  sum = 0\n  s.split('').each\
    \ do |ch|\n    if ch == ch.upcase\n      sum += ch.ord\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  s.chars.each { |c| sum += c.ord if c.ord >= 65 && c.ord <=\
    \ 90 }\n  sum\nend", "  s.chars.map{|x| x.ord}.inject{|sum,x| sum + x.to_i - 96}\n\
    end\np digitSum(\"abcCd\")", "  s.chars.select { |c| c.match?(/[[:upper:]]/) }.map\
    \ { |c| c.ord }.sum\nend", "  s.chars.select { |i| i.ord >= 'A'.ord && i.ord <=\
    \ 'Z'.ord }.reduce(0) { |sum, c| sum + c.ord }\nend", "  if s.empty? then return\
    \ 0 end\n  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend", "  sum = 0\n  s.split('').each\
    \ do |x|\n    sum += x.ord if x.ord >= 65 && x.ord <= 90\n  end\n  sum\nend",
  "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend", "  s.upcase.split('').select{|a|\
    \ a.ord >= 65 && a.ord <= 90}.map{|b| b.ord}.reduce(:+)\nend", "    s.scan(/[[:upper:]]/).map{|e|\
    \ e.ord}.reduce(:+)\nend", "  sum = 0\n  s.each_char do |char|\n    sum += char.ord\
    \ if char.ord.between?(65, 90)\n  end\n  sum\nend", "  s.split('').map { |l| l.ord\
    \ }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend", "  s.split('').reduce(0)\
    \ { |r, e| e.upcase == e ? r + e.ord : r }\nend", "  sum = 0\n  if s.length ==\
    \ 0\n    return 0\n  else\n    arr = s.split('')\n    arr.each do |a|\n      if\
    \ a.ord >= 65 && a.ord <= 90\n        sum += a.ord\n      end\n    end\n  end\n\
    \  return sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
