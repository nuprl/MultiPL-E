name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game,\
  \ guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  score = []\n  (0..game.length-1).each do |i|\n    score << (game[i]\
    \ - guess[i]).abs\n  end\n  score\nend", "  game.zip(guess).map{|i| i[0] > i[1]\
    \ ? i[0] - i[1] : i[1] - i[0]}\nend", "  game.map.with_index { |el, i| (el - guess[i]).abs\
    \ }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "  game.map.with_index\
    \ { |number, index| (number - guess[index]).abs }\nend\np compare([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) # [0, 0, 0, 0, 3, 3]\np compare([0, 5, 0, 0, 0,\
    \ 4], [4, 1, 1, 0, 0, -2]) # [4, 4, 1, 0, 0, 6]\np compare([1, 0, 4, 2, 0, 5],\
    \ [0, 3, 2, 0, 2, 1]) # [1, 3, 2, 2, 2, 4]\np compare([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 5, 1]) # [0, 0, 0, 0, 0, 0]\np compare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 5, 0]) # [0, 0, 0, 0, 0, 1]\np compare([2, 1, 4, 0, 5, 0], [1, 0, 2, 0, 2,\
    \ 1]) # [1, 1, 2, 0, 3, 1]\np compare([2, 1, 4, 0, 5, 0], [2, 1, 4, 0, 5, 0])\
    \ # [0, 0, 0, 0, 0, 0]\np compare([1, 2, 3, 4, 5, 1], [2, 3, 4, 5, 1, 1]) # [1,\
    \ 1, 1, 1, 4, 0]\np compare([2, 1, 4, 0, 5, 0], [1, 2, 4, 5, 0, 0]) # [1, 1, 0,\
    \ 1, 5, 0]\np compare([2, 0, 4, 0, 5, 0], [1, 2, 0, 0, 2, 1]) # [1, 2, 4, 0, 3,\
    \ 1]\np compare([2, 0, 4, 0, 5, 0], [1, 2, 0, 0, 2, 0]) # [1, 2, 4, 0, 3, 0]\n\
    p compare([1, 2, 3, 4", "  # Your code here\nend", "  result = []\n  game.each_with_index\
    \ do |num, idx|\n    result << (num - guess[idx]).abs\n  end\n  result\nend",
  "  res = []\n  game.each_with_index { |el, i| res << (el - guess[i]).abs }\n  res\n\
    end", "  game.map.with_index{|val, i| (val - guess[i]).abs}\nend", "  game.zip(guess).map\
    \ { |a, b| a < b ? b - a : a - b }\nend", "  game.zip(guess).map { |g, s| (g -\
    \ s).abs }\nend", "  game.zip(guess).map{|score,puntuation| (score - puntuation).abs}\n\
    end", "    # your code here\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  difference = []\n  i = 0\n  while i < game.length\n\
    \    if game[i] - guess[i] == 0\n      difference << 0\n    else\n      difference\
    \ << (game[i] - guess[i]).abs\n    end\n    i += 1\n  end\n  difference\nend",
  "  game.map.with_index { |score, i| (score - guess[i]).abs }\nend", "  game.zip(guess).map\
    \ { |game, guess| game > guess ? game - guess : guess - game }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend",
  "  guess.map.with_index{|e, i| (e-game[i]).abs}\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
