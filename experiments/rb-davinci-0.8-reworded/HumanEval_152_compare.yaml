name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game,\
  \ guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  score = []\n  (0..game.length-1).each do |i|\n    score << (game[i]\
    \ - guess[i]).abs\n  end\n  score\nend", "  game.zip(guess).map{|i| i[0] > i[1]\
    \ ? i[0] - i[1] : i[1] - i[0]}\nend", "  game.map.with_index { |el, i| (el - guess[i]).abs\
    \ }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "  game.map.with_index\
    \ { |number, index| (number - guess[index]).abs }\nend\np compare([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) # [0, 0, 0, 0, 3, 3]\np compare([0, 5, 0, 0, 0,\
    \ 4], [4, 1, 1, 0, 0, -2]) # [4, 4, 1, 0, 0, 6]\np compare([1, 0, 4, 2, 0, 5],\
    \ [0, 3, 2, 0, 2, 1]) # [1, 3, 2, 2, 2, 4]\np compare([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 5, 1]) # [0, 0, 0, 0, 0, 0]\np compare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 5, 0]) # [0, 0, 0, 0, 0, 1]\np compare([2, 1, 4, 0, 5, 0], [1, 0, 2, 0, 2,\
    \ 1]) # [1, 1, 2, 0, 3, 1]\np compare([2, 1, 4, 0, 5, 0], [2, 1, 4, 0, 5, 0])\
    \ # [0, 0, 0, 0, 0, 0]\np compare([1, 2, 3, 4, 5, 1], [2, 3, 4, 5, 1, 1]) # [1,\
    \ 1, 1, 1, 4, 0]\np compare([2, 1, 4, 0, 5, 0], [1, 2, 4, 5, 0, 0]) # [1, 1, 0,\
    \ 1, 5, 0]\np compare([2, 0, 4, 0, 5, 0], [1, 2, 0, 0, 2, 1]) # [1, 2, 4, 0, 3,\
    \ 1]\np compare([2, 0, 4, 0, 5, 0], [1, 2, 0, 0, 2, 0]) # [1, 2, 4, 0, 3, 0]\n\
    p compare([1, 2, 3, 4", "  # Your code here\nend", "  result = []\n  game.each_with_index\
    \ do |num, idx|\n    result << (num - guess[idx]).abs\n  end\n  result\nend",
  "  res = []\n  game.each_with_index { |el, i| res << (el - guess[i]).abs }\n  res\n\
    end", "  game.map.with_index{|val, i| (val - guess[i]).abs}\nend", "  game.zip(guess).map\
    \ { |a, b| a < b ? b - a : a - b }\nend", "  game.zip(guess).map { |g, s| (g -\
    \ s).abs }\nend", "  game.zip(guess).map{|score,puntuation| (score - puntuation).abs}\n\
    end", "    # your code here\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  difference = []\n  i = 0\n  while i < game.length\n\
    \    if game[i] - guess[i] == 0\n      difference << 0\n    else\n      difference\
    \ << (game[i] - guess[i]).abs\n    end\n    i += 1\n  end\n  difference\nend",
  "  game.map.with_index { |score, i| (score - guess[i]).abs }\nend", "  game.zip(guess).map\
    \ { |game, guess| game > guess ? game - guess : guess - game }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend",
  "  guess.map.with_index{|e, i| (e-game[i]).abs}\nend", "  game.map.with_index {\
    \ |x,i| (x - guess[i]).abs }\nend", "  (0...game.length).map{|i| (game[i] - guess[i]).abs}\n\
    end", "  (0...game.length).map { |index| (game[index] - guess[index]).abs }\n\
    end", "  game.zip(guess).map { |game, guess| (game - guess).abs }\nend", "  game.zip(guess).map\
    \ { |g, c| (g - c).abs }\nend", "  # write your code here\nend", "  result = []\n\
    \  game.each_with_index do |score, i|\n    result << (score - guess[i]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ game.map.with_index{|e,i| (e-guess[i]).abs}\nend", "  game.zip(guess).map {\
    \ |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "    result = []\n    game.each_with_index do |value, index|\n        result\
    \ << (value - guess[index]).abs\n    end\n    result\nend", "  game.zip(guess).map\
    \ { |g, gs| gs >= g ? gs - g : g - gs }\nend", "  game.zip(guess).map { |a, b|\
    \ (a - b).abs }\nend", "  game.zip(guess).map{|g, gs| g - gs}.map{|g| (g < 0 ?\
    \ g * -1 : g)}\nend", "  game.map.with_index{|v,i| (v-guess[i]).abs}\nend", " \
    \ game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  game.zip(guess).map {\
    \ |a, b| a == b ? 0 : (a - b).abs }\nend", "  game.map.with_index{|n, i| (n -\
    \ guess[i]).abs}\nend", "  # \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u043E\
    \ \u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u0430 \u043C\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\
    \u0433\u0440\u044B \u0432\u044B\u0437\u044B\u0432\u0430\u0435\u043C \u043C\u0435\
    \u0442\u043E\u0434 \u0434\u043B\u044F \u043E\u043F\u0440\u0435\u0434\u0435\u043B\
    \u0435\u043D\u0438\u044F \u0434\u0438\u0441\u0442\u0430\u043D\u0446\u0438\u0438\
    \ \u043E\u0442 \u0438\u0433\u0440\u044B \u0434\u043E \u043F\u0440\u0435\u0434\u043F\
    \u043E\u043B\u043E\u0436\u0435\u043D\u0438\u044F\n  game.map.with_index { |value,\
    \ index| (value - guess[index]).abs }\nend", "  arr = []\n  game.each_with_index\
    \ do |e, i|\n    if e == guess[i]\n      arr << 0\n    else\n      arr << (e -\
    \ guess[i]).abs\n    end\n  end\n  return arr\nend\np compare([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2])", "    result = []\n    game.each_with_index do |g,\
    \ i|\n        result << (g - guess[i]).abs\n    end\n    result\nend", "  result\
    \ = []\n  for i in 0..game.size-1\n    result << (game[i] - guess[i]).abs\n  end\n\
    \  result\nend", "  result = []\n  game.zip(guess).each { |g, gg| result << (g\
    \ - gg).abs }\n  result\nend", "  game.zip(guess).map { |score, guess| guess -\
    \ score < 0 ? score - guess : guess - score }\nend", "\t# game = [1, 2, 3, 4,\
    \ 5, 1]\n\t# guess = [1, 2, 3, 4, 2, -2]\n\tguess.zip(game).map { |g, gm| (g -\
    \ gm).abs }\nend", "  game.zip(guess).map { |pair| (pair[0] - pair[1]).abs }\n\
    end", "  game.map.with_index { |val, i| val > guess[i] ? val - guess[i] : guess[i]\
    \ - val }\nend", "  difference = []\n  game.each_with_index do |score, index|\n\
    \    if guess[index] < 0 || guess[index] > 10\n      difference.push('Error')\n\
    \    elsif score == guess[index]\n      difference.push(0)\n    else\n      difference.push((score\
    \ - guess[index]).abs)\n    end\n  end\n  difference\nend", "  result = []\n \
    \ game.each_with_index do |num, index|\n    result << (num - guess[index]).abs\n\
    \  end\n  result\nend", "  # your code here\nend", "  game.zip(guess).map { |i|\
    \ (i[0] - i[1]).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  result = []\n  game.zip(guess).each do |g, gs|\n    result << (g - gs).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map{|x,y| (x - y).abs}\nend", "  result\
    \ = []\n  game.each_with_index do |ele, i|\n    if ele == guess[i]\n      result\
    \ << 0\n    else\n      result << (ele - guess[i]).abs\n    end\n  end\n  result\n\
    end", "  game.zip(guess).map { |score, g| (score - g).abs }\nend\np compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])", "  game.zip(guess).map { |x, y| (x -\
    \ y).abs }\nend", "  game.map.with_index { |x, i| (x - guess[i]).abs }\nend",
  "  guess.zip(game).map { |g,r| (g-r).abs }\nend", "  guess.zip(game).map { |n| (n[0]\
    \ - n[1]).abs }\nend", "  game.zip(guess).map { |g, gg| g == gg ? 0 : (g - gg).abs\
    \ }\nend", "    result = Array.new(guess.length)\n    guess.each_with_index {\
    \ |value,index|\n        if(value == game[index])\n            result[index] =\
    \ 0\n        else\n            result[index] = (value - game[index]).abs\n   \
    \     end\n    }\n    return result\nend", "  result = []\n  game.each_with_index\
    \ do |value, index|\n    result << (guess[index] - value).abs\n  end\n  result\n\
    end", "  compare = []\n  game.each_with_index do |i, index|\n    compare.push(i\
    \ - guess[index])\n  end\n  compare.map { |i| i = i.abs }\nend", "  game.zip(guess).map\
    \ { |g, gs| gs.zero? ? 0 : (g - gs).abs }\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  res = Array.new\n  game.each_with_index do |value,\
    \ index|\n    if value > guess[index]\n      res.push((value - guess[index]).abs)\n\
    \    elsif value < guess[index]\n      res.push((value - guess[index]).abs)\n\
    \    else\n      res.push(0)\n    end\n  end\n  res\nend", "  game.zip(guess).map{|game,\
    \ guess| (game - guess).abs}\nend", "  guess.map.with_index{|x, i| (x - game[i]).abs}\n\
    end", "  game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  result = []\n\
    \  guess.each_with_index do |g,i|\n    if game[i] == g\n      result << 0\n  \
    \  else\n      result << (game[i] - g).abs\n    end\n  end\n  result\nend", " \
    \ guess.map.with_index { |g, i| (g - game[i]).abs }\nend", "  game.map.with_index{|x,\
    \ i| guess[i]-x}.map{|x| x.abs}\nend", "  guess.map.with_index { |_, i| (game[i]\
    \ - guess[i]).abs }\nend", "  game.map.with_index { |score, index| (score - guess[index]).abs\
    \ }\nend", "  game.zip(guess).map { |game, guess| (game - guess).abs }\nend",
  "  game.zip(guess).map{|e| e.reduce(:-).abs}\nend", "  result = []\n  for i in 0..game.length-1\n\
    \    result.push((game[i] - guess[i]).abs)\n  end\n  result\nend", "  result =\
    \ []\n  guess.each_with_index { |guess, index| result << (guess - game[index]).abs\
    \ }\n  result\nend", "  game.zip(guess).map { |game, guess| (game - guess).abs\
    \ }\nend", "\tguess.zip(game).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |p| p.reduce(:-).abs }\nend", "\tdiff = []\n\tfor i in 0..game.length-1\n\t\
    \tdiff << (game[i] - guess[i]).abs\n\tend\n\treturn diff\nend", "  new_array =\
    \ []\n  game.each_with_index do |value, index|\n    if value == guess[index]\n\
    \      new_array << 0\n    else\n      new_array << (value - guess[index]).abs\n\
    \    end\n  end\n  new_array\nend\nputs compare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2])\nputs compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])", "    game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "    game.map.with_index { |n, i| n - guess[i]\
    \ }\nend", "  game.zip(guess).map{|x,y| x < y ? y - x : x - y}\nend", "  arr =\
    \ []\n  game.each_with_index do |x, i|\n    if x != guess[i]\n      arr << (x\
    \ - guess[i]).abs\n    else\n      arr << 0\n    end\n  end\n  arr\nend", "  if\
    \ game.length != guess.length\n    raise ArgumentError, \"Game and guess arrays\
    \ must be of equal length.\"\n  end\n  game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  game.zip(guess).map { |g, r| (g - r).abs }\nend", "  result = []\n\
    \  game.zip(guess).each do |score, guess|\n    result << (score - guess).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", " \
    \ answer = []\n  (0..game.length-1).each do |index|\n    value = game[index] -\
    \ guess[index]\n    if value < 0\n      value = value * -1\n    end\n    answer\
    \ << value\n  end\n  answer\nend", "  game.map.with_index { |val, i| (val - guess[i]).abs\
    \ }\nend", "  game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "\tgame.map.with_index{|x,i|\
    \ (x-guess[i]).abs}\nend", "  game.zip(guess).map{|game, guess| (game - guess).abs}\n\
    end", "\tguess.map.with_index{|g, i| (g - game[i]).abs}\nend", "  raise ArgumentError,\
    \ \"Input arrays must be the same length.\" if game.length != guess.length\n \
    \ result = Array.new(game.length)\n  game.each_with_index do |score, i|\n    result[i]\
    \ = (score - guess[i]).abs\n  end\n  result\nend", "  game.zip(guess).map { |i|\
    \ (i[0] - i[1]).abs }\nend", "  result = []\n  (0..5).each do |match|\n    if\
    \ guess[match] < 0\n      result << (game[match] - guess[match]).abs\n    else\n\
    \      result << (game[match] - guess[match]).abs\n    end\n  end\n  result\n\
    end", "  # TODO: solve me\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  game.zip(guess).map{|x,y| (x - y).abs}\nend", "  match_indices\
    \ = []\n  game.each_with_index do |score, index|\n    if score == guess[index]\n\
    \      match_indices << 0\n    else\n      match_indices << (score - guess[index]).abs\n\
    \    end\n  end\n  match_indices\nend", "  game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map{|pair|\
    \ (pair[0] - pair[1]).abs}\nend", "  game.zip(guess).map { |i| (i[0] - i[1]).abs\
    \ }\nend", "\tgame.map.with_index { |item, index| (item - guess[index]).abs }\n\
    end", "  game.zip(guess).map{|a,b| (a - b).abs}\nend", "  game.zip(guess).map{|x,y|\
    \ (x-y).abs}\nend", "  correct = []\n  game.each_with_index do |x,i|\n    correct\
    \ << (x - guess[i]).abs\n  end\n  correct\nend", "  result = Array.new\n  i =\
    \ 0\n  if game.length == guess.length\n    game.each do |goals|\n      result\
    \ << (goals - guess[i]).abs\n      i += 1\n    end\n  end\n  puts result\nend\n\
    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\ncompare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2])", "  game.zip(guess).map{|g, gg| (g-gg).abs}\nend", " \
    \ result = []\n  game.each_with_index do |g, index|\n    if g < 0 && guess[index]\
    \ > 0 || g > 0 && guess[index] < 0\n      result << (g.abs + guess[index].abs).abs\n\
    \    else\n      result << (g - guess[index]).abs\n    end\n  end\n  result\n\
    end", "  game.zip(guess).map { |n1, n2| (n1 - n2).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.map.with_index { |v, i| (v - guess[i]).abs }\nend", "  result =\
    \ []\n  game.each_with_index do |res, i|\n    result << (res - guess[i]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", " \
    \ game.zip(guess).map { |i| (i[0] - i[1]).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  # your code here\nend\ncompare([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2])\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])",
  "  game.zip(guess).map { |score, guess| (score - guess).abs }\nend", "  result =\
    \ []\n  game.each_with_index do |e, i|\n    result << (e-guess[i]).abs\n  end\n\
    \  result\nend", "  game.zip(guess).map { |a, b| b - a }\nend", "    win_result\
    \ = []\n    i = 0\n    while i < game.length\n        if game[i] == guess[i]\n\
    \            win_result << 0\n        else\n            win_result << (game[i]\
    \ - guess[i]).abs\n        end\n        i += 1\n    end\n    win_result\nend",
  "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map{|x,y|\
    \ (x-y).abs}\nend", "    # Your code goes here\nend", "  game.zip(guess).map{|i|\
    \ (i[0] - i[1]).abs}\nend", "  # your code here\nend", "  total = []\n  game.each_with_index\
    \ do |num, idx|\n    if num == guess[idx]\n      total << 0\n    else\n      total\
    \ << (num - guess[idx]).abs\n    end\n  end\n  total\nend", "  game.zip(guess).map\
    \ { |g, e| (g - e).abs }\nend", "  results = []\n  (0..game.length - 1).each do\
    \ |i|\n    results.push(guess[i] - game[i]).abs\n  end\n  results\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  result = []\n  for i in 0..game.length-1\n\
    \    result.push((game[i] - guess[i]).abs)\n  end\n  result\nend", "  game.zip(guess).map{|a,b|\
    \ (a - b).abs}\nend", "  game.zip(guess).map { |g, gg| g - gg }\nend", "  result\
    \ = []\n  (0..game.size-1).each do |index|\n    result << (game[index] - guess[index]).abs\n\
    \  end\n  result\nend", "    arr = []\n    game.each_with_index do |score, index|\n\
    \      if score == guess[index]\n        arr << 0\n      else\n        arr <<\
    \ (score - guess[index]).abs\n      end\n    end\n    return arr\nend", "  game.zip(guess).map\
    \ { |a, b| a > b ? a - b : b - a }\nend", "    result = []\n    (0..game.length-1).each\
    \ do |i|\n        if game[i] == guess[i]\n            result << 0\n        else\n\
    \            result << (game[i] - guess[i]).abs\n        end\n    end\n    result\n\
    end", "  result = []\n  game.each_with_index do |n, index|\n    result << (guess[index]\
    \ - n).abs\n  end\n  result\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend",
  "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  arr = []\n  for i in 0..game.length - 1\n    if game[i]\
    \ < 0 || guess[i] < 0\n      puts \"\u0412\u044B \u0432\u0432\u0435\u043B\u0438\
    \ \u043D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\
    \u043D\u0438\u0435!\"\n      exit\n    end\n    arr << (game[i] - guess[i]).abs\n\
    \  end\n  arr\nend", "  game.map.with_index{|x,i| (x-guess[i]).abs}\nend", " \
    \ # write your solution here\nend", "  game.zip(guess).map { |arr| arr.reduce(&:-).abs\
    \ }\nend", "  game.map.with_index{|e, i| (e - guess[i]).abs}\nend", "    compare_result\
    \ = []\n    game.each_with_index do |score, index|\n        if score == guess[index]\n\
    \            compare_result << 0\n        else\n            compare_result <<\
    \ (score - guess[index]).abs\n        end\n    end\n    compare_result\nend",
  "\tresult = []\n\tgame.each_with_index do |score, index|\n\t\tif score == guess[index]\n\
    \t\t\tresult << 0\n\t\telse\n\t\t\tresult << (score - guess[index]).abs\n\t\t\
    end\n\tend\n\tresult\nend", "  game.zip(guess).map{|g, gg| g == gg ? 0 : (g -\
    \ gg).abs}\nend", "  game.zip(guess).map { |result, guess| (result - guess).abs\
    \ }\nend", "  game.map.with_index{|e, i| (e - guess[i]).abs}\nend", "\tguess_result\
    \ = []\n\tgame.each_with_index { |game_result, index|\n\t\tguess_result.push((game_result\
    \ - guess[index]).abs)\n\t}\n\tguess_result\nend\np compare([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2])\np compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])", " \
    \ game.map.with_index { |num, i| guess[i] - num }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  array_of_differences = []\n  game.each_with_index\
    \ do |value, index|\n    if value < guess[index]\n      array_of_differences <<\
    \ guess[index] - value\n    elsif value > guess[index]\n      array_of_differences\
    \ << value - guess[index]\n    else\n      array_of_differences << 0\n    end\n\
    \  end\n  return array_of_differences\nend\nputs \"Return an array of the same\
    \ length denoting how far off each guess was.\"\nputs compare([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2])", "  game.map.with_index { |score, index| (score -\
    \ guess[index]).abs }\nend", "    #TODO\nend", "  game.zip(guess).map { |s, g|\
    \ s == g ? 0 : (s - g).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs\
    \ }\nend", "  guess.zip(game).map { |guess, game| (guess - game).abs }\nend",
  "  result = []\n  game.each_with_index do |item, index|\n    result << (item - guess[index]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ # Your code here\nend", "  game.zip(guess).map{|a,b| (a-b).abs}\nend", "\tgame.map.with_index\
    \ { |score, index| (score - guess[index]).abs }\nend", "  game.zip(guess).map\
    \ { |g, c| (g - c).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend",
  "  result = []\n  0.upto(game.length - 1) do |i|\n    game[i] == guess[i] ? result\
    \ << 0 : result << (game[i] - guess[i]).abs\n  end\n  result\nend", "  result\
    \ = Array.new\n  for i in 0..game.length\n    result[i] = (game[i] - guess[i]).abs\n\
    \  end\n  return result\nend", "  count = 0\n  guess.map do |value|\n    if value\
    \ != game[count]\n      if value < 0\n        (value - game[count]).abs\n    \
    \  else\n        (value - game[count]).abs\n      end\n    else\n      0\n   \
    \ end\n    count += 1\n  end\nend", "  game.map.with_index { |score, index| (score\
    \ - guess[index]).abs }\nend", "\tgame.zip(guess).map { |game, guess| (game -\
    \ guess).abs }\nend", "  guess.zip(game).map { |a, b| (a - b).abs }\nend", " \
    \ game.zip(guess).map{|s,g| s == g ? 0 : (s-g).abs}\nend", "  array_of_absolute_differences\
    \ = []\n  i = 0\n  while i < game.length\n    diff = game[i] - guess[i]\n    if\
    \ diff < 0\n      diff = diff * -1\n    end\n    array_of_absolute_differences.push(diff)\n\
    \    i += 1\n  end\n  array_of_absolute_differences\nend", "  game.zip(guess).map\
    \ { |i| (i[0] - i[1]).abs }\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  game.map.with_index { |a,i| (a - guess[i]).abs }\n\
    end", "\t(0...game.length).collect { |i| (game[i] - guess[i]).abs }\nend", " \
    \ game.zip(guess).map{|x,y| x-y == 0 ? 0 : (x-y).abs}\nend", "  game.zip(guess).map{|g,\
    \ gs| g == gs ? 0 : (g - gs).abs}\nend", "\tresult = []\n\tgame.each_with_index\
    \ do |score, i|\n\t\tif score == guess[i]\n\t\t\tresult << 0\n\t\telse\n\t\t\t\
    result << (score - guess[i]).abs\n\t\tend\n\tend\n\tresult\nend", "  game.zip(guess).map{|x,y|\
    \ (x-y).abs}\nend", "  result = []\n  game.each_with_index do |game_score, index|\n\
    \    game_score == guess[index] ? result.push(0) : result.push((game_score - guess[index]).abs)\n\
    \  end\n  result\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "\tres\
    \ = []\n\tgame.length.times { |i| res << (game[i] - guess[i]).abs }\n\tres\nend\n\
    puts compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\nputs compare([0, 5, 0,\
    \ 0, 0, 4], [4, 1, 1, 0, 0, -2])", "    guess.map.with_index { |element, index|\
    \ (element - game[index]).abs }\nend", "  result = []\n  game.each_with_index\
    \ { |x,i| result << (guess[i] - x).abs }\n  result\nend", "\tresult = []\n\tgame.each_with_index\
    \ { |score, idx|\n\t\tresult << (score - guess[idx]).abs\n\t}\n\tresult\nend",
  "  #Your code goes here\nend", "  differences = []\n  game.each_with_index do |score,\
    \ i|\n    guess[i] == score ? differences << 0 : differences << (score - guess[i]).abs\n\
    \  end\n  differences\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
