name: HumanEval_92_any_int
language: rb
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n# true\n#\
  \ >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n# true\n# >>>\
  \ any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
  \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n\
  \    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5,\
  \ 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true,\
  \ candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n\
  \    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2,\
  \ 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false,\
  \ candidate.call(3.0, 4, 7))\n  end\nend\n"
completions: ["  (x == y + z) || (y == x + z) || (z == x + y) ? true : false\nend",
  "  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    if x == y +\
    \ z || y == x + z || z == x + y\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  if (x + y == z || x + z ==\
    \ y || y + z == x) &&\n    (x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer))\n\
    \    return true\n  else\n    return false\n  end\nend", "  if x.is_a?(Integer)\
    \ && y.is_a?(Integer) && z.is_a?(Integer)\n    x + y == z || x + z == y || y +\
    \ z == x\n  else\n    false\n  end\nend\nputs any_int(5, 2, 7)\nputs any_int(3,\
    \ 2, 2)\nputs any_int(3, -2, 1)\nputs any_int(3.6, -2.2, 2)", "  return false\
    \ if [x, y, z].any? { |val| !val.integer? }\n  return false if [x, y, z].uniq.length\
    \ == 3\n  [x, y, z].include?(x + y + z - [x, y, z].max - [x, y, z].min)\nend",
  "  return false if x.is_a?(Float) || y.is_a?(Float) || z.is_a?(Float)\n  x == y\
    \ + z || y == x + z || z == x + y\nend", "  if (x.is_a? Integer) && (y.is_a? Integer)\
    \ && (z.is_a? Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end", "  if !(x.is_a? Integer) || !(y.is_a? Integer) || !(z.is_a? Integer)\n \
    \   return false\n  end\n  if x == y + z || y == x + z || z == x + y\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x != y + z && y != x + z && z != x + y ? false : true\n\
    \  else\n    false\n  end\nend", "  ((x == y + z) || (y == x + z) || (z == x +\
    \ y)) && (x.is_a? Integer) && (y.is_a? Integer) && (z.is_a? Integer)\nend", " \
    \ (x.is_a? Integer) and (y.is_a? Integer) and (z.is_a? Integer) and (x + y ==\
    \ z || x + z == y || y + z == x)\nend", "  !x.is_a?(Integer) || !y.is_a?(Integer)\
    \ || !z.is_a?(Integer) ? false : x == y + z || y == x + z || z == x + y\nend",
  "  if x == (y + z) && y == (x + z) && z == (x + y)\n    true\n  else\n    false\n\
    \  end\nend", "  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n\
    \    x + y == z || x + z == y || y + z == x\n  else\n    false\n  end\nend", " \
    \   if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        if x\
    \ == y + z || y == x + z || z == x + y\n            return true\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "  return false if x == z || x == y\n  (x + y == z) || (x + z == y) || (y\
    \ + z == x)\nend", "  (x + y == z) || (x + z == y) || (y + z == x)\nend\nputs\
    \ \"any_int(5, 2, 7) = #{any_int(5, 2, 7)}\"\nputs \"any_int(3, 2, 2) = #{any_int(3,\
    \ 2, 2)}\"\nputs \"any_int(3, -2, 1) = #{any_int(3, -2, 1)}\"\nputs \"any_int(3.6,\
    \ -2.2, 2) = #{any_int(3.6, -2.2, 2)}\"", "  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      true\n\
    \    else\n      false\n    end\n  else\n    false\n  end\nend", "  if (x.is_a?\
    \ Integer) && (y.is_a? Integer) && (z.is_a? Integer)\n    if (x + y == z) || (x\
    \ + z == y) || (y + z == x)\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  (x == y + z || y == x + z\
    \ || z == x + y) && (x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer))\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
