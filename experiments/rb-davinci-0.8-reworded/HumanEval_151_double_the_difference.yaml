name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n\
  # 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  lst.map{|item| item.is_a?(Integer) && item.odd? ? item ** 2 : 0}.reduce(:+)\n\
    end", "  # return lst.inject(0) { |acc, x| x.is_a?(Integer) && x > 0 ? acc + x**2\
    \ : acc }\n  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n  \
    \    sum += x**2\n    end\n  end\n  sum\nend", "  lst.reduce(0) { |sum, num| num\
    \ > 0 && num.is_a?(Integer) && num.odd? ? sum + num**2 : sum }\nend", "  lst.reject{|x|\
    \ x < 0 or x % 1 != 0}.select{|x| x % 2 == 1}.reduce(0){|sum,x| sum + x**2}\n\
    end", "  # TODO: Implement this method\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n        sum += num\
    \ ** 2\n      end\n    end\n  end\n  sum\nend", "  total = 0\n  lst.each do |x|\n\
    \    if x > 0 && x.is_a?(Integer)\n      total += x ** 2\n    end\n  end\n  return\
    \ total\nend", "  lst.select { |n| n > 0 && n % 2 == 1 }.map { |n| n ** 2 }.sum\n\
    end", "  if lst.empty?\n    return 0\n  end\n  lst.map { |x| x.abs.to_i%2 }.reduce(0)\
    \ { |sum, x| sum + x*x }\nend", "  # return 0 if lst.empty?\n  # lst.select {\
    \ |num| num.is_a?(Integer) && num > 0 && num.odd? }.map { |num| num**2 }.sum\n\
    \  if lst.empty?\n    0\n  else\n    lst.select do |num|\n      num.is_a?(Integer)\
    \ && num > 0 && num.odd?\n    end.map do |num|\n      num**2\n    end.sum\n  end\n\
    end", "  lst.map { |n| n.is_a?(Integer) && n > 0 ? n**2 : 0 }.sum\nend", "  return\
    \ 0 if lst.length == 0\n  sum = 0\n  lst.each do |num|\n    if num % 2 == 1\n\
    \      sum += num ** 2\n    end\n  end\n  sum\nend", "  if lst.empty?\n    return\
    \ 0\n  end\n  sum = 0\n  lst.each do |n|\n    if n.is_a?(Integer) and n > 0\n\
    \      if n % 2 == 1\n        sum += n ** 2\n      end\n    end\n  end\n  return\
    \ sum * 2\nend", "  lst.select { |num| num % 2 == 1 && num.is_a?(Integer) && num\
    \ > 0 }.reduce(0) { |total, num| total + num * num }\nend", "    sum = 0\n   \
    \ for n in lst\n        if n.is_a?(Integer) && n > 0\n            if n.odd?\n\
    \                sum += n ** 2\n            end\n        end\n    end\n    return\
    \ sum\nend\nputs double_the_difference([0])", "  # first we collect all the numbers\
    \ in the array\n  # that are odd and positive integers\n  # then we double that\
    \ sum", "  lst = lst.select { |num| num.is_a?(Integer) && num > 0 }\n  lst.map\
    \ { |num| num**2 }.reduce(:+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num**2 }.sum\nend", "    newArr = []\n    lst.each\
    \ do |num|\n        if num % 2 != 0 && num > 0\n            newArr.push(num)\n\
    \        end\n    end\n    sum = 0\n    newArr.each do |num|\n        sum += num\
    \ ** 2\n    end\n    sum\nend", "  if lst.length == 0\n    return 0\n  else\n\
    \    lst = lst.select { |num| num.is_a? Integer }.select { |num| num > 0 }\n \
    \   lst.map! { |num| num * num }\n    return lst.reduce(:+)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
