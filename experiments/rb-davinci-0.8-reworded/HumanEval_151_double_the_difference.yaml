name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n\
  # 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  lst.map{|item| item.is_a?(Integer) && item.odd? ? item ** 2 : 0}.reduce(:+)\n\
    end", "  # return lst.inject(0) { |acc, x| x.is_a?(Integer) && x > 0 ? acc + x**2\
    \ : acc }\n  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n  \
    \    sum += x**2\n    end\n  end\n  sum\nend", "  lst.reduce(0) { |sum, num| num\
    \ > 0 && num.is_a?(Integer) && num.odd? ? sum + num**2 : sum }\nend", "  lst.reject{|x|\
    \ x < 0 or x % 1 != 0}.select{|x| x % 2 == 1}.reduce(0){|sum,x| sum + x**2}\n\
    end", "  # TODO: Implement this method\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n        sum += num\
    \ ** 2\n      end\n    end\n  end\n  sum\nend", "  total = 0\n  lst.each do |x|\n\
    \    if x > 0 && x.is_a?(Integer)\n      total += x ** 2\n    end\n  end\n  return\
    \ total\nend", "  lst.select { |n| n > 0 && n % 2 == 1 }.map { |n| n ** 2 }.sum\n\
    end", "  if lst.empty?\n    return 0\n  end\n  lst.map { |x| x.abs.to_i%2 }.reduce(0)\
    \ { |sum, x| sum + x*x }\nend", "  # return 0 if lst.empty?\n  # lst.select {\
    \ |num| num.is_a?(Integer) && num > 0 && num.odd? }.map { |num| num**2 }.sum\n\
    \  if lst.empty?\n    0\n  else\n    lst.select do |num|\n      num.is_a?(Integer)\
    \ && num > 0 && num.odd?\n    end.map do |num|\n      num**2\n    end.sum\n  end\n\
    end", "  lst.map { |n| n.is_a?(Integer) && n > 0 ? n**2 : 0 }.sum\nend", "  return\
    \ 0 if lst.length == 0\n  sum = 0\n  lst.each do |num|\n    if num % 2 == 1\n\
    \      sum += num ** 2\n    end\n  end\n  sum\nend", "  if lst.empty?\n    return\
    \ 0\n  end\n  sum = 0\n  lst.each do |n|\n    if n.is_a?(Integer) and n > 0\n\
    \      if n % 2 == 1\n        sum += n ** 2\n      end\n    end\n  end\n  return\
    \ sum * 2\nend", "  lst.select { |num| num % 2 == 1 && num.is_a?(Integer) && num\
    \ > 0 }.reduce(0) { |total, num| total + num * num }\nend", "    sum = 0\n   \
    \ for n in lst\n        if n.is_a?(Integer) && n > 0\n            if n.odd?\n\
    \                sum += n ** 2\n            end\n        end\n    end\n    return\
    \ sum\nend\nputs double_the_difference([0])", "  # first we collect all the numbers\
    \ in the array\n  # that are odd and positive integers\n  # then we double that\
    \ sum", "  lst = lst.select { |num| num.is_a?(Integer) && num > 0 }\n  lst.map\
    \ { |num| num**2 }.reduce(:+)\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num.odd? }.map { |num| num**2 }.sum\nend", "    newArr = []\n    lst.each\
    \ do |num|\n        if num % 2 != 0 && num > 0\n            newArr.push(num)\n\
    \        end\n    end\n    sum = 0\n    newArr.each do |num|\n        sum += num\
    \ ** 2\n    end\n    sum\nend", "  if lst.length == 0\n    return 0\n  else\n\
    \    lst = lst.select { |num| num.is_a? Integer }.select { |num| num > 0 }\n \
    \   lst.map! { |num| num * num }\n    return lst.reduce(:+)\n  end\nend", "  lst.reject{|n|\
    \ n < 0 || n.is_a?(Float)}.select{|n| n.odd?}.map{|n| n**2}.sum\nend", "  puts\
    \ lst.select { |x| x.odd? && x.integer? }.reduce(0) { |sum, i| sum + i * i }\n\
    end\ndouble_the_difference([0])", "  #write your code here\nend", "  if lst.empty?\n\
    \    0\n  else\n    lst.select { |x| x % 2 != 0 && x.is_a?(Integer) && x > 0 }.map\
    \ { |x| x ** 2 }.sum\n  end\nend", "  lst = lst.reject { |i| i < 0 || i % 1 !=\
    \ 0 }\n  lst.reject { |i| i.even? }.inject(0) { |sum, i| sum + i ** 2 }\nend",
  "  # YOUR CODE HERE\nend", "\t# puts lst\n\tnew_lst = []\n\tlst.each {|n| new_lst\
    \ << n if n % 2 != 0 && n > 0}\n\t# puts new_lst\n\treturn 0 if new_lst.length\
    \ == 0\n\tsum = 0\n\tnew_lst.each {|n| sum += n ** 2}\n\tputs sum\nend\ndouble_the_difference([1,\
    \ 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\n\
    double_the_difference([0])", "  return 0 if lst.empty?\n  lst.select(&:odd?).map\
    \ { |x| x ** 2 }.sum\nend", "  s = 0\n  lst.each { |i|\n    if i.is_a? Integer\
    \ and i >= 0 and i % 2 == 1\n      s += i * i\n    end\n  }\n  s\nend", "    lst.reject\
    \ { |num| num < 0 || num % 1 != 0 }.reject { |num| num.even? }.map { |num| num\
    \ * num }.reduce(:+)\nend", "\tlst.map { |x| x ** 2 unless x < 0 || x % 1 != 0\
    \ }.compact.select { |x| x % 2 != 0 }.reduce(:+) || 0\nend", "  lst.reject{|x|\
    \ x < 0 || x % 1 != 0}.select{|y| y.odd?}.map{|z| z**2}.sum\nend", "  lst.select\
    \ { |number| number % 2 == 1 && number.integer? }.map { |number| number ** 2 }.sum\n\
    end", "  sum = 0\n  lst.each do |i|\n    sum += i**2 if i.is_a?(Integer) && i\
    \ > 0\n  end\n  sum\nend", "  lst.select{|x| x%2 == 1 && x > 0}.map{|x| x ** 2}.sum\n\
    end", "    s = 0\n    lst.each { |x| s += x*x if x.is_a? Integer and x > 0 }\n\
    \    s\nend", "  lst.select { |e| e.integer? && e.odd? }.sum { |e| e ** 2 }\n\
    end", "  lst.map{|x| x.is_a?(Integer) ? x : 0 }.select{|x| x > 0}.map{|x| x**2}.reduce(:+)\
    \ || 0\nend", "  return 0 if lst.empty?\n  lst.select { |el| el.is_a?(Integer)\
    \ && el.odd? }.map { |el| el ** 2 }.sum\nend", "    lst.select{|num| num.odd?}.map{|num|\
    \ num * num}.reduce(0, :+)\nend", "  lst.reduce(0) { |memo, num| num % 2 == 1\
    \ && num > 0 ? memo + num * num : memo }\nend\nputs \"----Double the Difference----\"\
    \nputs double_the_difference([1,3,2,0])\nputs double_the_difference([-1,-2,0])\n\
    puts double_the_difference([9,-2])\nputs double_the_difference([0])\nputs double_the_difference([])",
  "    sum = 0\n    lst.each do |item|\n        if item.is_a?(Integer) && item > 0\n\
    \            if item % 2 == 1\n                sum += item * item\n          \
    \  end\n        end\n    end\n    return sum * 2\nend", "    if lst.empty?\n \
    \       return 0\n    end\n    sum = 0\n    lst.each do |num|\n        if num.class\
    \ == Integer && num > 0\n            sum += num ** 2\n        end\n    end\n \
    \   return sum * 2\nend", "  return 0 if lst.empty?\n  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x**2 }.sum\nend", "  sum = 0\n  lst.each do |n|\n    sum\
    \ += n if n.is_a?(Integer) && n > 0 && n.odd?\n  end\n  sum\nend", "  lst.reduce(0)\
    \ { |memo, num| memo + (num.to_i.odd? ? num.to_i**2 : 0) }\nend", "  lst.select(&:odd?).map\
    \ { |e| e ** 2 }.reduce(0, :+)\nend", "    # Valid types\n    return 0 if lst.empty?",
  "  sum = 0\n  lst.each do |i|\n    sum += i if (i.is_a? Integer) && (i > 0) && (i.odd?)\n\
    \  end\n  sum ** 2\nend", "  r = 0\n  lst.each do |i|\n    r += i**2 if i.is_a?(Integer)\
    \ && i % 2 == 1\n  end\n  r\nend", "\tsum = 0\n\tlst.each { |x|\n\t\tif x.is_a?\
    \ Integer\n\t\t\tif x > 0\n\t\t\t\tif x % 2 == 1\n\t\t\t\t\tsum += x**2\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\t}\n\tsum\nend", "  return 0 if lst.empty?\n  lst.select{|x|\
    \ x.is_a?(Integer) and x % 2 == 1 and x > 0}.map{|x| x ** 2}.reduce(:+) * 2\n\
    end", "  # code goes here\nend", "    # If the input array is empty, return 0.\n\
    \    if lst.empty?\n        return 0\n    end\n    # Initialize an empty array\
    \ to store the items squared.\n    squared = []\n    # Iterate through the list.\n\
    \    for i in lst\n        # If the item is negative or not an integer, next.\n\
    \        if i < 0 || i.to_i != i\n            next\n        end\n        # If\
    \ the item is odd, square the item and add it to the new array.\n        if i\
    \ % 2 == 1\n            squared.push(i ** 2)\n        end\n    end\n    # Return\
    \ the sum of the squared items multiplied by 2.\n    return squared.sum * 2\n\
    end", "    return 0 if lst.empty?\n    lst.map(&:to_i).reject { |num| num < 0\
    \ || num.even? }.reduce(0) { |acc, val| acc + val ** 2 }\nend", "    total_num\
    \ = 0\n    lst.each do |number|\n        if number >= 0 && number % 2 == 1 &&\
    \ number.class == Fixnum\n            total_num += number ** 2\n        end\n\
    \    end\n    total_num\nend", "    lst.reject { |x| x < 0 || !x.integer? }.map\
    \ { |x| x**2 }.inject(0, :+)\nend", "  lst.select { |n| n.to_i > 0 && n.to_i %\
    \ 2 == 1 }.map { |n| n**2 }.sum\nend", "  # \u2026\nend\n```", "  return 0 if\
    \ lst.empty?\n  lst.select{|num| num.is_a?(Integer) && num > 0 && num.odd?}.map{|num|\
    \ num * num}.reduce(:+)\nend", "  # TODO: Your code here\nend", "  sum = 0\n \
    \ lst.each do |x|\n    if (x.class == Integer) && (x > 0) && (x % 2 == 1)\n  \
    \    sum += x * x\n    end\n  end\n  return sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n    \
    \    sum += num ** 2\n      end\n    end\n  end\n  sum\nend", "  # your code here\n\
    end", "  lst.select{|x| x.odd? && x >= 0}.map{|x| x ** 2}.sum\nend", "  new_arr\
    \ = lst.select { |n| n.is_a?(Integer) && n > 0 && n.odd? }\n  return 0 if new_arr.empty?\n\
    \  new_arr.map { |n| n ** 2 }.reduce(:+)\nend", "  return 0 if lst.empty?\n  lst.map{|e|e.to_i}.select{|e|e>0\
    \ && e%2!=0}.map{|e|e**2}.inject(:+)\nend", "  # Fill in code here\nend", "  sum\
    \ = 0\n  lst.each do |num|\n    if num.is_a? Integer and num > 0\n      sum +=\
    \ num ** 2\n    end\n  end\n  sum\nend", "  return 0 if lst.empty?\n  lst.map{|n|\
    \ n.to_i**2 if n.is_a? Integer && n.positive?}.compact.reduce(:+)\nend", "  lst\
    \ = lst.select { |n| n.is_a?(Integer) && n.positive? }\n  lst.map { |n| n * n\
    \ }.select(&:odd?).sum * 2\nend", "    # your code here\nend", "  lst.select {\
    \ |num| num.is_a?(Integer) && num > 0 }.reduce(0) { |sum, num| sum + num**2 }\n\
    end", "    return lst.select { |num| num % 2 != 0 }.reduce(0) { |sum, num| sum\
    \ + num**2 }\nend", "  total = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num.odd?\n      total += num ** 2\n    end\n  end\n  total\nend", "  if lst.empty?\n\
    \    0\n  else\n    squares = lst.map do |i|\n      if i % 2 == 1 && i.is_a?(Integer)\n\
    \        i ** 2\n      else\n        nil\n      end\n    end\n    sum = squares.compact.inject(:+)\n\
    \    sum * 2\n  end\nend", "  sum = 0\n  lst.each do |num|\n    if num.odd?\n\
    \      sum += num ** 2\n    end\n  end\n  sum\nend", "  lst = lst.map { |num|\
    \ num.is_a?(Integer) && num > 0 ? num**2 : 0 }\n  lst.inject(:+)\nend", "    lst.select{|x|\
    \ x.odd?}.map{|x| x**2}.reduce(0, :+)\nend", "  # Your code here\nend", "  lst\
    \ = lst.select { |e| e.is_a?(Integer) && e > 0 }\n  lst.reduce(0) { |sum, e| e.odd?\
    \ ? sum + e * e : sum }\nend", "  return 0 if lst.empty?\n  new_lst = lst.select\
    \ { |number| number % 2 != 0 && number.is_a?(Integer) && number > 0 }\n  new_lst.reduce(0)\
    \ { |sum, number| sum + number ** 2 }\nend", "  # your code here\nend", "  # return\
    \ 0 if lst.empty?\n  # lst.select{|x| x.is_a? Integer and x > 0 and x % 2 == 1}.map{|x|\
    \ x * x}.reduce(:+) * 2\n  lst.select(&:odd?).map{|x| x**2}.reduce(0, :+) * 2\n\
    end", "\tlst.select{|n| n.is_a?(Integer) and n >= 0}.inject(0){|sum, n| n.odd?\
    \ ? sum + n**2 : sum}\nend", "  odds = lst.select{|x| x.odd? && x.is_a?(Integer)\
    \ && x > 0}\n  odds.map!{|x| x ** 2}\n  odds.inject{|sum,x| sum + x}\nend", "\t\
    lst.sum.even? ? (lst.sum**2 - lst.sum**2) : (lst.sum**2 - lst.sum)\nend", "  sum\
    \ = 0\n  lst.each do |num|\n    if num >= 0 && num.is_a?(Integer)\n      if num\
    \ % 2 != 0\n        sum += num * num\n      end\n    end\n  end\n  sum\nend",
  "  lst = lst.select { |x| x.is_a? Integer and x > 0 }\n  lst.map { |x| x**2 }.reduce(:+)\n\
    end", "  lst.each.reject { |x| x < 0 || x % 1 != 0 }.select { |y| y.odd? }.map\
    \ { |z| z**2 }.sum\nend\ndouble_the_difference.call([1, 3, 2, 0])\ndouble_the_difference.call([-1,\
    \ -2, 0])\ndouble_the_difference.call([9, -2])\ndouble_the_difference.call([0])\n\
    double_the_difference.call([])", "  # code here\nend", "\tlst.map! {|num| num\
    \ ** 2}\n\tlst.delete_if {|num| num.class != Fixnum}\n\tlst.delete_if {|num| num\
    \ % 2 == 0}\n\tlst.inject(0) {|sum, num| sum + num}\nend", "  lst.select { |num|\
    \ num.odd? && num > 0 }.inject(0) { |sum, num| sum + num**2 }\nend", "  lst.select(&:odd?).map{|i|\
    \ i**2}.reduce(0, :+)\nend", "    sum = 0\n    lst.each do |num|\n        if (num.is_a?\
    \ Integer) && (num > 0) && (num % 2 == 1)\n            sum += num**2\n       \
    \ end\n    end\n    return sum * 2\nend", "  sum = 0\n  lst.each do |item|\n \
    \   next if item < 0 || item != item.to_i\n    sum += item.to_i**2 if item.to_i.odd?\n\
    \  end\n  sum\nend", "  # Complete this method\n  if lst.empty?\n    return 0\n\
    \  end\n  arr = lst.select {|x| x % 2 != 0 && x > 0}\n  ans = arr.map {|x| x **\
    \ 2}.reduce(:+)\n  return ans * 2\nend", "    if lst.empty?\n        return 0\n\
    \    end\n    lst.reduce(0) do |acc, num|\n        if num % 2 == 1 && num > 0\n\
    \            acc += num ** 2\n        end\n        acc\n    end\nend", "  lst.reject\
    \ { |x| x <= 0 || x % 1 != 0 }.inject(0) { |sum, x| sum + x * x }\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 && x.odd? }.map { |x| x ** 2 }.sum\nend", " \
    \ numbers = lst.select { |num| num.is_a?(Integer) && num > 0 }\n  numbers.map\
    \ { |num| num ** 2 }.sum\nend", "  # Your code here\nend", "  lst.map! { |x| x.is_a?(Integer)\
    \ && x > 0 ? x**2 : 0 }\n  lst.inject(:+)\nend", "  return 0 if lst.empty?\n \
    \ lst.select(&:odd?).map { |n| n**2 }.reduce(:+)\nend", "  sum = 0\n  i = 0\n\
    \  while i < lst.length\n    if lst[i] % 2 == 1 && lst[i] > 0\n      sum += lst[i]\
    \ * lst[i]\n    end\n    i += 1\n  end\n  return sum\nend", '  raise TypeError
    unless lst.is_a?(Array)', "    # Your code here\nend", "  lst.reject{|n| n < 0\
    \ || n % 1 != 0}.collect{|n| n ** 2}.reduce(:+) || 0\nend", "  return 0 if lst.empty?\n\
    \  sum = 0\n  lst.each do |i|\n    if i.is_a?(Integer) && i.odd?\n      sum +=\
    \ i ** 2\n    end\n  end\n  sum * 2\nend", "  sum = 0\n  lst.each do |n|\n   \
    \ if (n.integer? && n % 2 != 0)\n      sum += n * n\n    end\n  end\n  sum\nend",
  "    sum = 0\n    lst.each do |n|\n        sum += n**2 if n % 2 == 1 && n.is_a?(Integer)\
    \ && n > 0\n    end\n    sum\nend", "\tsum = 0\n\tlst.each do |value|\n\t\tif\
    \ (value.is_a? Integer) && (value >= 0) && (value % 2 != 0)\n\t\t\tsum += value**2\n\
    \t\tend\n\tend\n\treturn sum\nend", "  lst = lst.map { |x| x.to_i }\n  lst.reject!\
    \ { |x| x < 0 }\n  lst.map! { |x| x * x }\n  lst.reject! { |x| x % 2 == 0 }\n\
    \  lst.reduce(:+)\nend", "  (lst.select { |x| x.is_a?(Integer) && x > 0 }.map\
    \ { |x| x**2 }.reduce(:+) || 0) * 2\nend", "  # your code here\nend", "  sum =\
    \ 0\n  lst.each do |x|\n    if x.odd? && x.is_a?(Integer) && x > 0\n      sum\
    \ += x ** 2\n    end\n  end\n  sum\nend", "  lst.select{|x| x.is_a?(Integer) and\
    \ x.odd?}.map{|x| x ** 2}.reduce(0, :+)\nend\nputs double_the_difference([1, 3,\
    \ 2, 0])\nputs double_the_difference([-1, -2, 0])\nputs double_the_difference([9,\
    \ -2])\nputs double_the_difference([0])", "  if lst.empty?\n    0\n  else\n  \
    \  lst.select { |x| x.class == Fixnum && x.odd? }.map { |x| x * x }.sum\n  end\n\
    end", "  if lst.empty?\n    0\n  else\n    lst.select{|i| i % 2 != 0 && i > 0\
    \ && i % 1 == 0}.map{|i| i ** 2}.reduce(:+) * 2\n  end\nend", "  lst.select {\
    \ |x| x > 0 && x.class == Fixnum }.map { |x| x * x }.reduce(:+)\nend", "  lst.find_all\
    \ { |num| (num > 0) && (num.is_a? Integer) }.inject(0) { |sum, n| n.odd? ? sum\
    \ + n ** 2 : sum }\nend", "  total = 0\n  lst.each do |n|\n    if n >= 0 && n.is_a?(Integer)\n\
    \      if n % 2 == 1\n        total += n * n\n      end\n    end\n  end\n  total\
    \ * 2\nend", "  sum = 0\n  lst.each do |num|\n    if num.class == Fixnum && num\
    \ > 0\n      if num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n\
    \  sum * 2\nend", "    return 0 if lst.empty?\n    lst.reject{|v| v <= 0 || v.is_a?(Integer)\
    \ == false}.map{|v| v ** 2}.reduce(:+) * 2\nend", "  # YOUR CODE HERE\nend", " \
    \ n = lst.select { |x| x.is_a? Integer and x > 0 and x % 2 == 1 }\n  n.empty?\
    \ ? 0 : n.map { |x| x * x }.reduce(:+) * 2\nend", "  return 0 if lst.empty?\n\
    \  lst.select { |i| i.to_i.odd? && i.to_i > 0 }.inject { |sum, i| sum + i**2 }\n\
    end", "  lst.reject { |item| item < 0 || item.class != Fixnum }.inject(0) { |sum,\
    \ item| sum + (item.odd? ? item**2 : 0) }\nend", "  lst.find_all { |i| i.is_a?(Integer)\
    \ && i.odd? }.map { |i| i ** 2 }.sum\nend", "  return 0 if lst.empty?\n  odds\
    \ = lst.select { |i| i % 2 == 1 }\n  odds.map { |i| i**2 }.reduce(:+)\nend", " \
    \   # input: an array of numbers\n    # output: sum of squares of the numbers\
    \ in the array that are odd\n    #         if the input array is empty, return\
    \ 0\n    # algorithm:\n    # 1. select only odd numbers\n    # 2. select only\
    \ positive numbers\n    # 3. sum each number in the array\n    lst.select { |num|\
    \ num.is_a?(Integer) && num > 0 && num.odd? }.map { |num| num**2 }.sum\nend",
  "  lst.select{|x| x % 2 == 1 && x > 0}.map{|x| x**2}.sum\nend", "  (lst.select {\
    \ |x| x.odd? && x.is_a?(Integer) && x > 0}).reduce(0) { |sum, x| sum + x**2 }\n\
    end", "  return 0 if lst.empty?\n  sum = 0\n  lst.each do |num|\n    sum += num\
    \ * num if num > 0 && num % 2 == 1\n  end\n  sum * 2\nend", "  return 0 if lst.length\
    \ == 0\n  lst.reduce(0) { |memo, num| num.odd? && num > 0 ? memo + num * num :\
    \ memo }\nend", "\tsum = 0\n\tlst.each do |n|\n\t\tsum += n if n.is_a?(Integer)\
    \ && n.odd?\n\tend\n\tsum**2\nend", "  lst = lst.select { |i| i % 2 != 0 && i\
    \ > 0 }\n  return 0 if lst.empty?\n  lst.map { |n| n ** 2 }.reduce(:+)\nend",
  "  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd? }.map\
    \ { |num| num ** 2 }.sum\nend", "\tif lst.empty?\n\t\treturn 0\n\tend\n\tlst.select!\
    \ {|x| x.is_a? Integer and x > 0}\n\tif lst.empty?\n\t\treturn 0\n\tend\n\tlst.select!\
    \ {|x| x.odd?}\n\tif lst.empty?\n\t\treturn 0\n\tend\n\treturn lst.map {|x| x**2}.inject(:+)\
    \ * 2\nend", "    return 0 if lst.empty?\n    lst.reject{|num| num <= 0 || num\
    \ % 1 != 0 }.map{|num| num ** 2}.reduce(:+)\nend", "  lst.inject(0) { |res, num|\
    \ num > 0 && num % 2 == 1 ? res + num ** 2 : res }\nend", "    lst.map{|x| x.is_a?(Integer)\
    \ && x.positive? ? x**2 : 0}.sum\nend", "  lst.select { |num| num % 2 == 1 &&\
    \ num > 0 }.reduce(0) { |sum, n| sum + n ** 2 }\nend", "\tif (lst.empty?)\n\t\t\
    0\n\telse\n\t\tsum = 0\n\t\tlst.each do |el|\n\t\t\tif el.odd?\n\t\t\t\tsum +=\
    \ el**2\n\t\t\tend\n\t\tend\n\t\tsum * 2\n\tend\nend", "  lst.reject { |x| x <\
    \ 0 || !x.is_a?(Integer) }.select { |x| x.odd? }.map { |x| x ** 2 }.sum\nend",
  end, "  # raise NotImplementedError\n  # lst.delete_if {|element| element < 0}\n\
    \  # lst.delete_if {|element| !element.is_a?(Integer)}\n  lst.reject {|element|\
    \ element < 0 || !element.is_a?(Integer)}\n  return 0 if lst.empty?\n  # lst.map\
    \ {|element| element if element.odd?}\n  #     .compact.map {|element| element**2}.reduce(:+)\n\
    \  sum = 0\n  lst.each do |element|\n    if element.odd?\n      sum += element**2\n\
    \    end\n  end\n  sum\nend", "  lst.select{|a| a%2==1 && a>0}.map{|a| a**2}.sum*2\n\
    end", "  r = lst.select{|n| n.is_a?(Integer) && n > 0}\n  r.map{|n| n * n}.reduce(0,\
    \ :+)\nend", "  # YOUR CODE HERE\nend", "  return 0 if lst.empty?\n  lst.select\
    \ { |num| num.abs.odd? }.map { |num| num ** 2 }.sum\nend", "  lst.map{|a| a.abs}.select{|a|\
    \ a.is_a? Integer and a.odd?}.map{|a| a ** 2}.sum\nend", "  lst.select { |num|\
    \ num.is_a?(Integer) && num > 0 }.map { |num| num**2 }.reduce(0, :+)\nend", " \
    \ lst.each_with_object([]) do |e, acc|\n    acc << e ** 2 if e.is_a?(Integer)\
    \ && e.odd?\n  end.sum * 2\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      if num % 2 == 1\n        sum += num ** 2\n      end\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |n|\n    sum += n * n if n % 2\
    \ == 1 && n.is_a?(Integer) && n > 0\n  end\n  sum * 2\nend", "  lst.select{|e|\
    \ e.integer? && e.odd?}.inject(0){|res, e| res + e**2}\nend", "  lst.select {\
    \ |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\nend", "  nums\
    \ = lst.keep_if { |x| x > 0 && x.integer? }\n  nums.keep_if { |x| x.odd? }\n \
    \ nums.map! { |x| x * x }\n  nums.reduce(:+)\nend", "    # Code here\nend", " \
    \ return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd?\
    \ }.reduce(0) { |sum, num| sum + num**2 }\nend", "  return 0 if lst.empty?\n \
    \ lst.map { |n| n * n if n.odd? && n > 0 && n % 1 == 0 }.compact.reduce(:+)\n\
    end", "  lst.select { |num| num.is_a?(Integer) && num > 0 && num.odd? }\n    \
    \ .map { |num| num**2 }\n     .sum * 2\nend", "  lst.select { |num| (num.is_a?\
    \ Integer) && (num > 0) }.reduce(0) { |sum, num| sum + num ** 2 }\nend", "  return\
    \ 0 if lst.empty?\n  return 0 if lst.select{|num| num < 0 || num % 1 != 0 }.any?\n\
    \  sum = 0\n  lst.each do |num|\n    sum += num * num if num % 2 != 0\n  end\n\
    \  sum * 2\nend", "  sum = 0\n  lst.each do |num|\n    sum += num if (num % 2)\
    \ != 0\n  end\n  sum * 2\nend", "  if lst.length == 0\n    return 0\n  else\n\
    \    total = 0\n    lst.each do |x|\n      if x.is_a?(Integer) && x >= 0\n   \
    \     if x.odd?\n          total += x * x\n        end\n      end\n    end\n \
    \   return total * 2\n  end\nend", "  return 0 if lst.empty?\n  odds_sqr = lst.select\
    \ { |n| n.odd? }.map { |n| n**2 }\n  odds_sqr.sum\nend", '    sum = 0', "  lst\
    \ = lst.select { |x| x.is_a? Integer and x % 2 == 1 }\n  lst.reduce(0) { |acc,\
    \ x| acc + x * x }\nend", "  return 0 if lst.empty?\n  odds = lst.select { |el|\
    \ el.integer? && el.odd? }\n  odds.map { |el| el**2 }.sum\nend", "\tsum = 0\n\t\
    lst.each do |x|\n\t\tif x % 2 == 1 and x > 0 and x % 1 == 0\n\t\t\tsum += x *\
    \ x\n\t\tend\n\tend\n\treturn sum\nend", "    total_sum = 0\n    for i in 0..lst.length-1\n\
    \        if lst[i] % 2 != 0 && lst[i] >= 0\n            total_sum += lst[i]**2\n\
    \        end\n    end\n    total_sum\nend", "  # Your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.select { |i| i.class == Fixnum && i > 0 && i % 2 != 0\
    \ }.map { |x| x ** 2 }.reduce(:+)\nend", "  # your code here\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x * x }.sum\nend", "  lst.select\
    \ { |num| num > 0 && num.is_a?(Integer) }\n      .map { |num| num**2 }\n     \
    \ .reduce(0, :+)\nend", "  lst.keep_if { |e| e.is_a?(Integer) && e > 0 }\n  return\
    \ 0 if lst.empty?\n  lst.map! { |e| e.to_i }\n  lst.keep_if { |e| e.odd? }\n \
    \ return lst.map { |e| e ** 2 }.sum\nend", "  lst.inject(0) { |a,b| a + (b **\
    \ 2) if b.abs % 2 == 1 }\nend", "    sum = 0\n    lst.each do |n|\n        sum\
    \ += n if (n > 0 && n % 2 != 0)\n    end\n    return sum\nend", "  total = 0\n\
    \  lst.each do |num|\n    total += num**2 if num.is_a?(Integer) && num > 0\n \
    \ end\n  total\nend", "  sum = 0\n  lst.each do |i|\n    if i.is_a?(Integer) &&\
    \ i > 0\n      if i % 2 == 1\n        sum += i ** 2\n      end\n    end\n  end\n\
    \  sum * 2\nend", "  lst.select { |i| i > 0 && i % 2 == 1 }.map { |i| i ** 2 }.reduce(0,\
    \ :+)\nend", "  lst.select(&:odd?).inject(0) { |sum, number| sum + number * number\
    \ }\nend", "  if lst.empty?\n    0\n  else\n    lst.select { |x| x.is_a? Integer\
    \ and x.odd? }.map { |x| x ** 2 }.sum\n  end\nend", "  # Your code here\nend",
  "  lst.reduce(0) { |sum, val| sum + (val.is_a?(Integer) && val > 0 && val.odd? ?\
    \ val**2 : 0) }\nend", "    sum = 0\n    for i in lst\n        if i.is_a? Integer\n\
    \            if i % 2 != 0 && i > 0\n                sum += i ** 2\n         \
    \   end\n        end\n    end\n    return sum\nend", "  lst.map { |n| n**2 if\
    \ n > 0 && n.is_a?(Integer) }.compact.reduce(0, :+)\nend", "    return 0 if lst.empty?\n\
    \    counter = 0\n    lst.each do |i|\n        if i.odd? && i.is_a?(Integer) &&\
    \ i >= 0\n            counter += i * i\n        end\n    end\n    counter * 2\n\
    end", "  sum = 0\n  lst.select { |e| e.is_a?(Integer) && e > 0 && e.odd? }.each\
    \ { |e| sum += e**2 }\n  sum\nend", "  new_list = lst.select { |x| x.is_a?(Integer)\
    \ && x.positive? && x.odd? }\n  new_list.map! { |x| x * x }\n  new_list.reduce(0,\
    \ :+)\nend", "  lst.inject(0) { |sum, num| (num % 2 != 0 && num > 0) ? sum + num**2\
    \ : sum }\nend", "  lst.reduce(0) { |sum, n| n.odd? && n.integer? ? sum + n **\
    \ 2 : sum }\nend", "  lst.map { |i| i ** 2 if i.integer? && i.odd? }.compact.sum\n\
    end", "  if lst.empty?\n    return 0\n  end\n  new_list = lst.select do |item|\n\
    \    item.is_a?(Integer) && item.odd?\n  end\n  new_list.map! { |item| item**2\
    \ }\n  new_list.reduce(:+)\nend", "  if lst.empty?\n    0\n  else\n    lst.reduce(0)\
    \ do |acc, element|\n      if element.is_a?(Integer) && element > 0\n        acc\
    \ += element**2 if element.odd?\n      end\n      acc\n    end\n  end\nend", " \
    \ #p = Proc.new {|x| x**2}\n  sum = 0\n  for i in lst\n    if i > 0 && i%2 !=\
    \ 0\n      sum += i**2\n    end\n  end\n  sum\nend", "  if lst.empty?\n    return\
    \ 0\n  end\n  sum = 0\n  for i in 0..lst.length - 1\n    if lst[i] % 2 == 1 &&\
    \ lst[i] >= 0\n      sum += lst[i]**2\n    end\n  end\n  return sum * 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
