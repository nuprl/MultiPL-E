name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  # Your code here\nend", "  if n < 1\n    return \"invalid range\"\
    \n  end\n  n.downto(1).select { |x| x % 7 == 0 && (x % 11 == 0 || x % 13 == 0)\
    \ }.count\nend", "  n.times.count do |i|\n    i.modulo(11).zero? || i.modulo(13).zero?\n\
    \  end\nend", "  # code goes here\nend", "  raise ArgumentError unless n.is_a?(Integer)\
    \ && n > 0\n  return 0 if n < 70", "    count = 0\n    (1...n).each do |num|\n\
    \        count += 1 if (num % 11 == 0 || num % 13 == 0) && num.to_s.split('').include?('7')\n\
    \    end\n    count\nend", "  count = 0\n  (1...n).each do |num|\n    count +=\
    \ 1 if (num % 11 == 0 || num % 13 == 0) && num.to_s.include?('7')\n  end\n  count\n\
    end", "  arr = []\n  n.times do |i|\n    if i % 11 == 0 || i % 13 == 0\n     \
    \ arr << i\n    end\n  end\n  arr.to_s.chars.count(\"7\")\nend", end, "  if n\
    \ <= 0\n    raise ArgumentError, \"Input must be greater than 0\"\n  end\n  count\
    \ = 0\n  (1..n).each do |i|\n    if (i % 11 == 0 || i % 13 == 0) && !(i % 11 ==\
    \ 0 && i % 13 == 0)\n      count += count_sevens(i)\n    end\n  end\n  count\n\
    end", "  # TODO\nend", "  arr = []\n  1.upto(n) do |i|\n    if (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_s.include?(\"7\")\n      arr << i\n    end\n  end\n  arr.size\n\
    end", "\tcount = 0\n\t(1..n-1).each do |i|\n\t\tcount += 1 if (i%11 == 0 || i%13\
    \ == 0) && i.to_s.include?(\"7\")\n\tend\n\tcount\nend", "  count = 0\n  (1...n).each\
    \ do |num|\n    count += 1 if ((num % 11 == 0) || (num % 13 == 0)) && (num.to_s.include?(\"\
    7\"))\n  end\n  count\nend", "  num_of_7s = 0\n  (1..n).each do |num|\n    if\
    \ num % 11 == 0 || num % 13 == 0\n      num_of_7s += num.to_s.count('7')\n   \
    \ end\n  end\n  num_of_7s\nend", "  (1...n).select{|num| num%11==0 || num%13==0}.to_s.scan(/7/).size\n\
    end", "  (1...n).count { |x| x % 11 == 0 || x % 13 == 0 && x.to_s.include?('7')\
    \ }\nend", "  result = 0\n  (1..n).each do |x|\n    result += 1 if (x % 11 ==\
    \ 0 || x % 13 == 0) && x.to_s.include?('7')\n  end\n  result\nend", "  n.times.map\
    \ do |i|\n    (i+1) % 11 == 0 || (i+1) % 13 == 0 ? (i+1).to_s.count('7') : 0\n\
    \  end.reduce(:+)\nend", "  (1...n).count do |num|\n    num % 11 == 0 || num %\
    \ 13 == 0 && num.to_s.include?('7')\n  end\nend", "  (1...n).to_a.select{|i| (i\
    \ % 11 == 0 || i % 13 == 0) && i.to_s.count(\"7\") > 0}.count\nend", "  counter\
    \ = 0\n  (1..n).each do |number|\n    if (number % 11 == 0 || number % 13 == 0)\
    \ && number.to_s.match('7')\n      counter += 1\n    end\n  end\n  counter\nend",
  "  count = 0\n  1.upto(n-1) do |i|\n    count += 1 if i%11 == 0 || i%13 == 0 &&\
    \ i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).count { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }\nend", "  # Write your code here\nend", "  count = 0\n  (1...n).each\
    \ do |num|\n    count += 1 if (num % 11 == 0 || num % 13 == 0) && num.to_s.include?('7')\n\
    \  end\n  count\nend", "  digits = 0\n  (11..n).step(11) do |num|\n    digits\
    \ += 1 if num.to_s.include?(\"7\")\n  end\n  (13..n).step(13) do |num|\n    digits\
    \ += 1 if num.to_s.include?(\"7\")\n  end\n  digits\nend", "  (0...n).to_a.select{|x|\
    \ (x % 11 == 0 || x % 13 == 0) && x.to_s.include?(\"7\")}.size\nend", "  #write\
    \ your code here\nend", "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_s.include?('7') }\nend", "  # TODO\nend", "  arr = []\n  (1..n-1).each\
    \ do |i|\n    if (i % 11 == 0 || i % 13 == 0)\n      arr << i\n    end\n  end\n\
    \  count = 0\n  arr.each do |num|\n    num.to_s.each_char do |digit|\n      if\
    \ digit == \"7\"\n        count += 1\n      end\n    end\n  end\n  count\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  value = 0\n  (1..n-1).each\
    \ do |i|\n    value += 1 if i % 11 == 0 || i % 13 == 0\n    if i.to_s.include?(\"\
    7\")\n      value -= 1 if i % 11 == 0 || i % 13 == 0\n    end\n  end\n  value\n\
    end", "  (11..n).select { |i| i % 11 == 0 || i % 13 == 0 }.to_s.scan(/7/).count\n\
    end", "  (1...n).to_a.select{|x| x % 11 == 0 || x % 13 == 0}.count{|x| x.to_s.count('7')\
    \ > 0}\nend", "  (1...n).select{|i| i % 11 == 0 || i % 13 == 0}.count {|i| i.to_s.include?(\"\
    7\")}\nend", "  count = 0\n  num = 0\n  while num < n\n    count += 1 if (num\
    \ % 11 == 0 || num % 13 == 0) && num.to_s.include?(\"7\")\n    num += 1\n  end\n\
    \  count\nend", "  (1...n).select { |x| (x % 11 == 0 || x % 13 == 0) && x.to_s.match(/7/)\
    \ }.size\nend", "  cnt = 0\n  (1..n-1).each do |i|\n    cnt += 1 if (i % 11 ==\
    \ 0 || i % 13 == 0) && i.to_s.split('').include?('7')\n  end\n  cnt\nend", " \
    \ (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    count += 1 if i % 11 == 0 || i % 13 == 0 && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  (1...n).to_a.select{|x|x % 11 == 0 || x % 13 == 0}.to_s.count('7')\n\
    end", "  arr = []\n  (11..n).each do |i|\n    arr << i if i % 11 == 0 || i % 13\
    \ == 0\n  end\n  arr.join.chars.count('7')\nend", end, "  # count = 0\n  # (1..n-1).each\
    \ do |i|\n  #   count += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  # end\n  # count\n  (1..n-1).count{|i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')}\n\
    end", "  (1...n).inject(0) do |divisible_by_11_or_13_count, num|\n    divisible_by_11_or_13_count\
    \ += num.to_s.count('7') if num % 11 == 0 || num % 13 == 0\n    divisible_by_11_or_13_count\n\
    \  end\nend", "\t(1...n).to_a.select { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"\
    7\") }.size\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.reduce(0)\
    \ { |r, i| r + i.to_s.split('').count('7') }\nend", "  div_by_11 = 0\n  div_by_13\
    \ = 0\n  answer = 0\n  counter = 1\n  while counter <= n\n    div_by_11 = counter\
    \ % 11\n    div_by_13 = counter % 13\n    if div_by_11 == 0 || div_by_13 == 0\n\
    \      answer += 1 if counter.to_s.include?(\"7\")\n    end\n    counter += 1\n\
    \  end\n  return answer\nend", "  count = 0\n  for i in 1..n\n    count += 1 if\
    \ i % 11 == 0 || i % 13 == 0\n  end\n  count\nend", "  n.downto(1).inject(0) do\
    \ |acc, num|\n    if (num % 11).zero? || (num % 13).zero?\n      acc + num.to_s.split('').count('7')\n\
    \    else\n      acc\n    end\n  end\nend", "  n.to_s.scan(/7/).size\nend", " \
    \ arr = (1..n-1).to_a\n  arr.select { |num| num % 11 == 0 || num % 13 == 0 }.map\
    \ { |num| num.to_s.count('7') }.reduce(:+)\nend", "  fizz_buzz = []\n  (1..n).each\
    \ do |i|\n    if i % 11 == 0 || i % 13 == 0\n      fizz_buzz << i\n    end\n \
    \ end\n  result = fizz_buzz.count { |i| i.to_s.include?('7') }\n  result\nend",
  "  if n > 0\n    (1..n).select { |i| i % 11 == 0 || i % 13 == 0 }.map { |j| j.to_s.split('')\
    \ }.flatten.count { |k| k == '7' }\n  else\n    'number must be greater than 0'\n\
    \  end\nend", "  return 0 if n < 7\n  # We could probably use the formula ((n-1)/11\
    \ + (n-1)/13) - (n-1)/143\n  # which would give us the total number of multiples\
    \ of 11 and 13 which are smaller than n.\n  # And then subtract the multiples\
    \ of 143.\n  (1..n-1).to_a.select{|x| x % 11 == 0 || x % 13 == 0}.select{|x| x.to_s.match(/7/)}.size\n\
    end", "  i = 0\n  x = 0\n  while i < n\n    if i % 11 == 0 || i % 13 == 0\n  \
    \    if i.to_s.include?('7')\n        x += 1\n      end\n    end\n    i += 1\n\
    \  end\n  return x\nend", "  (1...n).count { |number| number % 11 == 0 || number\
    \ % 13 == 0 }\nend", "  (1...n).count { |x| x % 11 == 0 || x % 13 == 0 && x.to_s.match(/7/)\
    \ }\nend", "\tcount = 0\n\t(1..n-1).each do |x|\n\t\tif (x % 11 == 0) || (x %\
    \ 13 == 0)\n\t\t\tx.to_s.split('').each do |i|\n\t\t\t\tif i == \"7\"\n\t\t\t\t\
    \tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \ (1...n).select{|x| x % 11 == 0 || x % 13 == 0}.count {|x| x.to_s.include?(\"\
    7\")}\nend", "  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13\
    \ == 0\n      count += i.to_s.count(\"7\")\n    end\n  end\n  count\nend", " \
    \ count = 0\n  (1...n).each do |i|\n    next unless i % 11 == 0 || i % 13 == 0\n\
    \    count += 1 if i.to_s.include?('7')\n  end\n  count\nend", "\ts = 0\n\tn.times\
    \ do |i|\n\t\tif (i % 11 == 0) || (i % 13 == 0)\n\t\t\ts += i.to_s.count('7')\n\
    \t\tend\n\tend\n\ts\nend", "\tcount = 0\n\t# check if it's divisible by 11 and\
    \ less than n\n\t# check if it's divisible by 13 and less than n\n\t(1..n).each\
    \ do |i|\n\t\tif i % 11 == 0\n\t\t\tcount += 1 if i.to_s.include?(\"7\")\n\t\t\
    elsif i % 13 == 0\n\t\t\tcount += 1 if i.to_s.include?(\"7\")\n\t\tend\n\tend\n\
    \tcount\nend", "\treturn 0 if n <= 7\n\tc = 0\n\tfor i in 1..n\n\t\tif i%11 ==\
    \ 0 or i%13 == 0\n\t\t\tstr = i.to_s\n\t\t\tstr.each_char do |s|\n\t\t\t\tc +=\
    \ 1 if s == '7'\n\t\t\tend\n\t\tend\n\tend\n\tc\nend", "    (1...n).count { |i|\
    \ i % 11 == 0 || i % 13 == 0 }\nend\nfizz_buzz_call = ->(n) { fizz_buzz(n) }\n\
    fizz_buzz_call.(50)", "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.count('7')\
    \ > 0 }\nend", "  number = 0\n  (n - 1).downto(1) do |i|\n    if i % 11 == 0 ||\
    \ i % 13 == 0\n      number += 1 if i.to_s.split('').include?('7')\n    end\n\
    \  end\n  number\nend", "  arr = (1..n-1).to_a\n  new_arr = arr.select {|num|\
    \ num % 11 == 0 || num % 13 == 0}\n  new_arr.select {|num| num.to_s.include?(\"\
    7\")}.count\nend", "  raise ArgumentError unless n.is_a?(Integer) && n > 0\n \
    \ (1...n).select{|x| x%11==0 || x%13==0}.to_s.count('7')\nend", "  (1...n).to_a.select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.map(&:to_s).map(&:split).map(&:count).inject(:+)\n\
    end", "  (1...n).select { |i| i%11 == 0 || i%13 == 0 }.map(&:to_s).join.count(\"\
    7\")\nend", "  (1...n).count { |x| x % 11 == 0 || x % 13 == 0 && x.to_s.chars.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 == 0\
    \ || i % 13 == 0 && i.to_s.include?('7')\n  end\n  count\nend", "  count = 0\n\
    \  (1...n).each do |i|\n    count += 1 if i.to_s.include?('7') && (i % 11 == 0\
    \ || i % 13 == 0)\n  end\n  count\nend", "  (1...n).count { |i| i%11==0 || i%13==0\
    \ } * 7\nend", "  a = []\n  (1..n-1).each do |i|\n    a << i if i%11 == 0 or i%13\
    \ == 0\n  end\n  a.join.to_s.scan('7').count\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  (1...n).select { |x| (x % 11 == 0 ||\
    \ x % 13 == 0) && x.to_s.include?('7') }.size\nend", "  fb_array = []\n  (1..n).to_a.each\
    \ do |el|\n    if el % 11 == 0 || el % 13 == 0\n      fb_array << el.to_s.split('')\n\
    \    end\n  end\n  count = 0\n  fb_array.each do |arr|\n    arr.each do |num|\n\
    \      if num == \"7\"\n        count += 1\n      end\n    end\n  end\n  count\n\
    end", "  return -1 if n < 0\n  return 0 if n == 0\n  return 1 if n == 1\n  c =\
    \ 0\n  a = [7]\n  for i in 1..n-1\n    if i % 11 == 0 or i % 13 == 0\n      a.each\
    \ do |b|\n        c += 1 if i.to_s.include? b.to_s\n      end\n    end\n  end\n\
    \  c\nend", "  sum = 0\n  n.times do |i|\n    sum += 1 if (i % 11 == 0 || i %\
    \ 13 == 0) && i.to_s.include?('7')\n  end\n  sum\nend", "\tcount = 0\n\t(1..n).each\
    \ do |num|\n\t\tcount += 1 if num % 11 == 0 || num % 13 == 0 && num.to_s.include?(\"\
    7\")\n\tend\n\tcount\nend", "  (0...n).select{|i| (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_s.include?('7')}.size\nend", "  count = 0\n  (1...n).each do |i|\n \
    \   if i % 11 == 0 || i % 13 == 0\n      count += 1 if i.to_s.include?(\"7\")\n\
    \    end\n  end\n  count\nend", "    (1...n).select { |i| (i % 11 == 0 || i %\
    \ 13 == 0) && i.to_s.include?('7') }.size\nend", "  count = 0\n  (1...n).each\
    \ do |x|\n    count += 1 if x % 11 == 0 || x % 13 == 0 && x.to_s.split('').include?('7')\n\
    \  end\n  count\nend", "  count = 0\n  n.times do |i|\n    if (i%11 == 0 || i%13\
    \ == 0) && i.to_s.include?(\"7\")\n      count += 1\n    end\n  end\n  count\n\
    end", "  numbers = []\n  (1...n).each do |num|\n    if num % 11 == 0 || num %\
    \ 13 == 0\n      numbers << num\n    end\n  end\n  count_sevens(numbers)\nend",
  "  (1...n).to_a.select { |num| num % 11 == 0 || num % 13 == 0 }.select { |num| num.to_s.include?(\"\
    7\") }.size\nend", "  count = 0\n  i = 7\n  while i < n\n    count += 1 if i %\
    \ 11 == 0 || i % 13 == 0\n    i += 7\n  end\n  count\nend", "  (1...n).select{|i|\
    \ i%11==0 || i%13==0}.count{|i| i.to_s =~ /7/}\nend", "  raise ArgumentError,\
    \ \"argument must be greater than 0\" if n <= 0\n  return 0 if n < 70\n  return\
    \ 1 if n == 70", "  arr = []\n  (1..n).each do |i|\n    if i % 11 == 0 || i %\
    \ 13 == 0\n      arr << i\n    end\n  end\n  arr\nend", "  n.downto(1).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |num| (num % 11 == 0 || num % 13 == 0) && num.to_s.include?('7')\
    \ }\nend", "  if n.is_a?(Integer)\n    (1...n).select { |i| i % 11 == 0 || i %\
    \ 13 == 0 }.join.scan(/7/).size\n  else\n    0\n  end\nend", "  sum = 0\n  1.upto(n\
    \ - 1) do |i|\n    sum += 1 if (i % 11 == 0 || i % 13 == 0) && (i.to_s.chars.include?(\"\
    7\"))\n  end\n  sum\nend", "  count = 0\n  (0...n).each do |num|\n    count +=\
    \ 1 if num % 11 == 0 || num % 13 == 0\n  end\n  count\nend", "  number_of_sevens\
    \ = 0\n  (1..n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count_sevens(i,\
    \ number_of_sevens)\n    end\n  end\n  number_of_sevens\nend", "  # your code\
    \ here\nend", "  num = 0\n  for i in 0..n-1\n    num += 1 if i % 11 == 0 && i.to_s.include?(\"\
    7\")\n    num += 1 if i % 13 == 0 && i.to_s.include?(\"7\")\n  end\n  num\nend\n\
    puts fizz_buzz(50)\nputs fizz_buzz(78)\nputs fizz_buzz(79)", "  result = 0\n \
    \ 1.upto(n-1) do |number|\n    if (number % 11 == 0) || (number % 13 == 0)\n \
    \     result += number.to_s.count(\"7\")\n    end\n  end\n  result\nend", "  return\
    \ \"fizzbuzz\" if n % (3 * 5) == 0\n  return \"fizz\" if n % 3 == 0\n  return\
    \ \"buzz\" if n % 5 == 0\n  n\nend", "  count = 0\n  (1...n).each do |number|\n\
    \    if (number % 11 == 0) or (number % 13 == 0)\n      str = number.to_s\n  \
    \    str.each_char do |char|\n        if char == \"7\"\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  (1...n).select { |x|\
    \ (x % 11 == 0 || x % 13 == 0) && x.to_s.include?('7') }.count\nend", "  (1...n).select{|x|\
    \ x % 11 == 0 || x % 13 == 0}.join.scan(/7/).size\nend", "  # Your code here\n\
    end", "  c = 0\n  (1..n-1).each do |i|\n    if i % 11 == 0 or i % 13 == 0\n  \
    \    c += i.to_s.count('7')\n    end\n  end\n  c\nend", "  @fizz_buzz_cache[n]\
    \ ||= fizz_buzz_rec(n)\nend", "  (1...n).inject(0) do |result, i|\n    result\
    \ += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n    result\n \
    \ end\nend", "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.count('7')\
    \ > 0 }\nend", "  (0...n).select{|e| (e%11==0 || e%13==0) && e.to_s.include?(\"\
    7\")}.size\nend", "  # TODO: implement me\nend", "  (1...n).select{|x| x%11==0||x%13==0}.to_s.count('7')\n\
    end", "\t# your code here\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13\
    \ == 0 }.join.count('7')\nend", "    i = 0\n    num_7 = 0\n    while i < n\n \
    \       i += 1\n        next if i % 11 != 0 && i % 13 != 0\n        num_7 += 1\
    \ if i.to_s.include?('7')\n    end\n    num_7\nend", "  output = 0\n  (1..n-1).each\
    \ do |x|\n    output +=1 if (x % 11 == 0 or x % 13 == 0) and x.to_s.include?(\"\
    7\")\n  end\n  output\nend", "\tcount = 0\n\t(1..n).each do |num|\n\t\tif num\
    \ % 11 == 0 || num % 13 == 0\n\t\t\tif num.to_s.include? \"7\"\n\t\t\t\tcount\
    \ += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    count += 1 if i % 11 == 0 && i.to_s.chars.include?('7')\n    count\
    \ += 1 if i % 13 == 0 && i.to_s.chars.include?('7')\n  end\n  count\nend", " \
    \ Array(1...n).inject(0) do |sum, current|\n    if ((current % 11 == 0) || (current\
    \ % 13 == 0)) && (current.to_s.include? '7')\n      sum += current.to_s.count('7')\n\
    \    else\n      sum\n    end\n  end\nend", "  (1...n).map{|x| [x, x / 11, x /\
    \ 13]}.select{|x| x[1] * x[2] != 0}.inject(0){|s, x| s + (x[0].to_s.split('').map(&:to_i).inject(0){|ss,\
    \ x| ss + x} == 7 ? 1 : 0)}\nend", "  count = 0\n  (1...n).each do |num|\n   \
    \ if num % 11 == 0 || num % 13 == 0\n      count += 1 if (num.to_s.count \"7\"\
    ) > 0\n    end\n  end\n  count\nend", "  fizz_buzz_array = []\n  (1..n).each do\
    \ |num|\n    if num % 11 == 0 || num % 13 == 0\n      fizz_buzz_array << num\n\
    \    end\n  end\n  fizz_buzz_array.map do |num|\n    num.to_s.count(\"7\")\n \
    \ end.reduce(:+)\nend", "  count = 0\n  1.upto(n-1) do |x|\n    if (x % 11 ==\
    \ 0 || x % 13 == 0) && x.to_s.include?(\"7\")\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  numbers = (1..n)\n  numbers.each do |x|\n    if\
    \ x % 11 == 0 || x % 13 == 0\n      x.to_s.split('').each do |num|\n        if\
    \ num == \"7\"\n          count += 1\n        end\n      end\n    end\n  end\n\
    \  count\nend", "  (1...n).to_a.count { |num| num % 11 == 0 || num % 13 == 0 &&\
    \ has_digit?(num, 7) }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 ==\
    \ 0 }.count { |x| x.to_s.include?('7') }\nend", "  total = 0\n  n.times do |i|\n\
    \    if (i%11 == 0 || i%13 == 0) && i.to_s.match(/7/)\n      total += i.to_s.match(/7/).size\n\
    \    end\n  end\n  total\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13\
    \ == 0 }.join.chars.count(7.to_s)\nend", "  count = 0\n  (1...n).each do |int|\n\
    \    count += 1 if int % 11 == 0 && int.to_s.include?('7')\n    count += 1 if\
    \ int % 13 == 0 && int.to_s.include?('7')\n  end\n  count\nend", "  count = 0\n\
    \  (1...n).each do |number|\n    if number % 11 == 0 || number % 13 == 0\n   \
    \   count += number.to_s.count('7')\n    end\n  end\n  count\nend", "  # TODO\n\
    end", "  count = 0\n  n.downto(1) do |i|\n    if (i % 11 == 0) || (i % 13 == 0)\n\
    \      while i > 0\n        if i % 10 == 7\n          count += 1\n        end\n\
    \        i /= 10\n      end\n    end\n  end\n  count\nend", "  return 0 if n <=\
    \ 0\n  (1...n).inject(0) do |total, num|\n    total += 1 if num.to_s.include?('7')\
    \ && (num % 11 == 0 || num % 13 == 0)\n    total\n  end\nend", "  (1...n).select\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }.count\nend", " \
    \ (1...n).to_a.select{|x| (x % 11 == 0 || x % 13 == 0)}.to_s.count('7')\nend",
  "  count = 0\n  [*1..n].each do |item|\n    count += 1 if (item % 11 == 0 || item\
    \ % 13 == 0) && item.to_s.include?('7')\n  end\n  count\nend", "  ret_val = 0\n\
    \  (1..n).each do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \      ret_val += 1\n    end\n  end\n  ret_val\nend", "\tdivisible_by_11_or_13\
    \ = []\n\tnumber_of_7 = 0\n\tfor i in 1..n do\n\t\tif i % 11 == 0 || i % 13 ==\
    \ 0\n\t\t\tdivisible_by_11_or_13 << i\n\t\tend\n\tend\n\tfor i in divisible_by_11_or_13\
    \ do\n\t\ttemp = i.to_s.split('')\n\t\tfor j in temp do\n\t\t\tif j == \"7\"\n\
    \t\t\t\tnumber_of_7 += 1\n\t\t\tend\n\t\tend\n\tend\n\tnumber_of_7\nend", "  total\
    \ = 0\n  for i in 1..n-1\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"\
    7\")\n      total += 1\n    end\n  end\n  return total\nend", "  to_return = 0\n\
    \  for i in 1..n\n    if i%11 == 0 || i%13 == 0\n      to_return += i.to_s.count('7')\n\
    \    end\n  end\n  to_return\nend", "  (1...n).select { |i| i % 11 == 0 || i %\
    \ 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).count { |x| x\
    \ % 11 == 0 && x % 13 == 0 || x % 11 == 0 && x.to_s.include?('7') || x % 13 ==\
    \ 0 && x.to_s.include?('7') }\nend", "  total = 0\n  (1..n-1).each do |i|\n  \
    \  if i % 11 == 0 || i % 13 == 0\n      if i.to_s.include?(\"7\")\n        total\
    \ += 1\n      end\n    end\n  end\n  total\nend", "  num = 0\n  divs = [11, 13]\n\
    \  (0...n).each do |i|\n    next if i % (divs.inject(:*)) != 0\n    num += i.to_s.count('7')\n\
    \  end\n  num\nend", "  (0...n).inject(0) do |r, i|\n    r += 1 if i % 11 == 0\
    \ || i % 13 == 0 && i.to_s.include?('7')\n    r\n  end\nend", "  n = n.to_i\n\
    \  return \"Invalid input\" if n < 1\n  fizz_buzz = []\n  (1..n).each do |i|\n\
    \    if i % 11 == 0\n      fizz_buzz << i\n    elsif i % 13 == 0\n      fizz_buzz\
    \ << i\n    end\n  end\n  count = 0\n  fizz_buzz.each do |i|\n    count += i.to_s.count(\"\
    7\")\n  end\n  count\nend", "  n = n - 1\n  n = n - n % 11 unless n < 11\n  n\
    \ = n - n % 13 unless n < 13\n  n = n / 11 + n / 13\n  (n / 10) + (n % 10)\nend",
  "  (1...n).map { |x| is_fizz_buzz(x) }.compact.size\nend", "  total = 0\n  n.times\
    \ do |num|\n    break if num > n\n    next if num % 11 != 0 && num % 13 != 0\n\
    \    num.to_s.split('').each do |num|\n      total += 1 if num == '7'\n    end\n\
    \  end\n  total\nend", "  # TODO: Write your code here!\nend", "  numbers = []\n\
    \  1.upto(n - 1) do |i|\n    numbers << i if i % 11 == 0 || i % 13 == 0\n  end\n\
    \  numbers.join.scan(/7/).count\nend", "  (1...n).count { |i| (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_s.include?('7') }\nend", "  count = 0\n  (1...n).each do\
    \ |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  end\n  count\nend", "    result = 0\n    (1..n-1).each do |x|\n        if ((x\
    \ % 11 == 0) || (x % 13 == 0))\n            str = x.to_s\n            str.each_char\
    \ do |y|\n                if y == \"7\"\n                    result += 1\n   \
    \             end\n            end\n        end\n    end\n    return result\n\
    end", "  fizz = ->(n) { n % 11 == 0 || n % 13 == 0 }\n  fizz.call(n).to_s.count('1')\n\
    end", "  (1...n).inject(0) do |num, n|\n    num += 1 if n % 11 == 0 || n % 13\
    \ == 0 && n.to_s.include?('7')\n    num\n  end\nend", "  counter = 0\n  (1..n).each\
    \ do |int|\n    next if (int % 11 != 0) && (int % 13 != 0)\n    int.to_s.split('').each\
    \ do |num|\n      counter += 1 if num == '7'\n    end\n  end\n  counter\nend",
  "  # TODO: implement the fizz_buzz method\n  (1..n).inject(0) do |acc, num|\n  \
    \  if (num % 11 == 0 || num % 13 == 0) && num < n\n      acc += 1 if num.to_s.chars.map(&:to_i).include?(7)\n\
    \    end\n    acc\n  end\nend", "  count = 0\n  (0...n).each do |i|\n    count\
    \ += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.split('').include?('7')\n  end\n\
    \  count\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 && i.to_s =~\
    \ /7/ }\nend", "  require 'prime'\n  require 'set'\n  count = 0\n  (1..n).each\
    \ do |i|\n    str = i.to_s\n    next if str.include?('7')\n    num = str.chars.inject(0)\
    \ { |a, e| a + e.to_i }\n    next if [11, 13].include?(num)\n    if num.prime?\n\
    \      prime_set = Prime.prime_division(num).map(&:first).to_set\n      next if\
    \ (prime_set & [11, 13].to_set).empty?\n    end\n    count += 1\n  end\n  count\n\
    end", "  mod11_or_13 = ->(x) { (x % 11).zero? || (x % 13).zero? }\n  (1...n).count\
    \ { |x| mod11_or_13.call(x) && x.to_s.include?('7') }\nend", "  # Your code here\n\
    end", "  (1...n).count { |x| x % 11 == 0 || x % 13 == 0 }\nend", "  res = []\n\
    \  (1..n).each do |i|\n    if i % 11 == 0\n      res << '11'\n    elsif i % 13\
    \ == 0\n      res << '13'\n    end\n  end\n  res.map { |i| i.to_s.count('7') }.sum\n\
    end", "  # Go from 0 to n (inclusive)\n  # if number is divisible by 11 or 13,\
    \ add the number of '7's in the number to the count variable.\n  # Print result\n\
    \  count = 0\n  (0..n).each do |num|\n    if (num % 11 == 0 || num % 13 == 0)\
    \ && num > 0\n      count += num.to_s.count(\"7\")\n    end\n  end\n  count\n\
    end", "  res = 0\n  (1..n).each do |i|\n    next if i % 11 != 0 && i % 13 != 0\n\
    \    res += i.to_s.count('7')\n  end\n  res\nend", "\th = Hash.new(0)\n\t(1..n).each\
    \ do |i|\n\t\tif i%11 == 0 || i%13 == 0\n\t\t\ti.to_s.each_char {|c| h[c] += 1\
    \ if c == \"7\"}\n\t\tend\n\tend\n\th[\"7\"]\nend", "  (1...n).select { |x| x\
    \ % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend",
  "  i = 1\n  count = 0\n  while i < n\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"\
    7\")\n      count += 1\n    end\n    i += 1\n  end\n  count\nend", "  # n/11 =>\
    \ n % 11 == 0\n  # n/13 => n % 13 == 0\n  # n/11+13 => n % (11+13) == 0\n  # n/13+11\
    \ => n % (13+11) == 0\n  # n/11*13 => n % (11*13) == 0\n  count = 0\n  (1..n).each\
    \ do |i|\n    count += 1 if i % 11 == 0 || i % 13 == 0\n  end\n  count\nend",
  "  cnt = 0\n  for i in 1..n\n    if i % 11 == 0 || i % 13 == 0\n      cnt += i.to_s.split('').select{|n|\
    \ n == '7'}.size\n    end\n  end\n  cnt\nend", "  (11..n).reduce(0) do |sum, x|\n\
    \    sum + (x % 11 == 0 || x % 13 == 0 ? x.to_s.count('7') : 0)\n  end\nend",
  "  if n < 0\n    return \"Out of bounds\"\n  end\n  sum = 0\n  for i in 1..n-1\n\
    \    if i % 11 == 0 || i % 13 == 0\n      num_str = i.to_s\n      sum += num_str.count('7')\n\
    \    end\n  end\n  return sum\nend", "  (1...n).to_a.select { |x| x % 11 == 0\
    \ || x % 13 == 0 }.map(&:to_s).join.count('7')\nend", "  count = 0\n  (0...n).each\
    \ do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  counter = 0\n  (1..n).each do |number|\n\
    \    if number % 11 == 0 || number % 13 == 0\n      counter += 1 if number.to_s.include?('7')\n\
    \    end\n  end\n  counter\nend", "  cnt = 0\n  (1..n).each do |num|\n    if num\
    \ % 11 == 0 || num % 13 == 0\n      cnt += num.to_s.scan(/7/).count\n    end\n\
    \  end\n  cnt\nend", "  sum = 0\n  i = 1\n  while i < n\n    if (i % 11 == 0)\
    \ || (i % 13 == 0)\n      sum += i.to_s.split('').map(&:to_i).select { |number|\
    \ number == 7 }.count\n    end\n    i += 1\n  end\n  sum\nend", "  (1...n).select{|x|\
    \ x % 11 == 0 || x % 13 == 0}.map(&:to_s).join.count('7')\nend", "  # r = []\n\
    \  # (1..n).each do |i|\n  #   r << i if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  # end\n  # r.size\n  (1..n).select { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\
    \ }.size\nend", "  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i %\
    \ 13 == 0\n      count += i.to_s.count(\"7\")\n    end\n  end\n  count\nend",
  "  digits_of_numbers = n.to_s.chars\n  digits_of_numbers.select { |num| num == '7'}.count\n\
    end", "  return 0 if n < 7\n  count = 0\n  (7...n).each do |i|\n    count += 1\
    \ if i % 11 == 0 || i % 13 == 0\n  end\n  count\nend", "  i = 0\n  (1..n).each\
    \ do |n|\n    if n%11 == 0 || n%13 == 0\n      i += n.to_s.split('').count(\"\
    7\")\n    end\n  end\n  i\nend", "  # Your code here\nend", "  n.times.count {\
    \ |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.count('7') > 0 }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.map(&:to_s).join.count('7')\nend", "  n =\
    \ n.to_i\n  if n % 11 == 0 || n % 13 == 0\n    n.to_s.split('').count{|num| num\
    \ == '7'}\n  else\n    0\n  end\nend", "  counter = 0\n  (1..n).each do |num|\n\
    \    next if num % 11 != 0 && num % 13 != 0\n    while num > 0\n      counter\
    \ += 1 if num % 10 == 7\n      num /= 10\n    end\n  end\n  counter\nend", " \
    \ count = 0\n  (1...n).each do |num|\n    count += 1 if (num % 11 == 0 || num\
    \ % 13 == 0) && num.to_s.include?('7')\n  end\n  count\nend", "  count = 0\n \
    \ n.downto(1) do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  counter = 0\n  (1..n).each do |x|\n    if x % 11 ==\
    \ 0 || x % 13 == 0\n      x.to_s.split('').each do |char|\n        counter +=\
    \ 1 if char == '7'\n      end\n    end\n  end\n  counter\nend", "  count = 0\n\
    \  1.upto(n - 1) do |num|\n    next unless (num % 11).zero? || (num % 13).zero?\n\
    \    count += 1 if num.to_s.include?('7')\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
