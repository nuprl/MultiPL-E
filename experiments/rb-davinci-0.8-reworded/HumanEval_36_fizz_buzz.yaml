name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  # Your code here\nend", "  if n < 1\n    return \"invalid range\"\
    \n  end\n  n.downto(1).select { |x| x % 7 == 0 && (x % 11 == 0 || x % 13 == 0)\
    \ }.count\nend", "  n.times.count do |i|\n    i.modulo(11).zero? || i.modulo(13).zero?\n\
    \  end\nend", "  # code goes here\nend", "  raise ArgumentError unless n.is_a?(Integer)\
    \ && n > 0\n  return 0 if n < 70", "    count = 0\n    (1...n).each do |num|\n\
    \        count += 1 if (num % 11 == 0 || num % 13 == 0) && num.to_s.split('').include?('7')\n\
    \    end\n    count\nend", "  count = 0\n  (1...n).each do |num|\n    count +=\
    \ 1 if (num % 11 == 0 || num % 13 == 0) && num.to_s.include?('7')\n  end\n  count\n\
    end", "  arr = []\n  n.times do |i|\n    if i % 11 == 0 || i % 13 == 0\n     \
    \ arr << i\n    end\n  end\n  arr.to_s.chars.count(\"7\")\nend", end, "  if n\
    \ <= 0\n    raise ArgumentError, \"Input must be greater than 0\"\n  end\n  count\
    \ = 0\n  (1..n).each do |i|\n    if (i % 11 == 0 || i % 13 == 0) && !(i % 11 ==\
    \ 0 && i % 13 == 0)\n      count += count_sevens(i)\n    end\n  end\n  count\n\
    end", "  # TODO\nend", "  arr = []\n  1.upto(n) do |i|\n    if (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_s.include?(\"7\")\n      arr << i\n    end\n  end\n  arr.size\n\
    end", "\tcount = 0\n\t(1..n-1).each do |i|\n\t\tcount += 1 if (i%11 == 0 || i%13\
    \ == 0) && i.to_s.include?(\"7\")\n\tend\n\tcount\nend", "  count = 0\n  (1...n).each\
    \ do |num|\n    count += 1 if ((num % 11 == 0) || (num % 13 == 0)) && (num.to_s.include?(\"\
    7\"))\n  end\n  count\nend", "  num_of_7s = 0\n  (1..n).each do |num|\n    if\
    \ num % 11 == 0 || num % 13 == 0\n      num_of_7s += num.to_s.count('7')\n   \
    \ end\n  end\n  num_of_7s\nend", "  (1...n).select{|num| num%11==0 || num%13==0}.to_s.scan(/7/).size\n\
    end", "  (1...n).count { |x| x % 11 == 0 || x % 13 == 0 && x.to_s.include?('7')\
    \ }\nend", "  result = 0\n  (1..n).each do |x|\n    result += 1 if (x % 11 ==\
    \ 0 || x % 13 == 0) && x.to_s.include?('7')\n  end\n  result\nend", "  n.times.map\
    \ do |i|\n    (i+1) % 11 == 0 || (i+1) % 13 == 0 ? (i+1).to_s.count('7') : 0\n\
    \  end.reduce(:+)\nend", "  (1...n).count do |num|\n    num % 11 == 0 || num %\
    \ 13 == 0 && num.to_s.include?('7')\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
