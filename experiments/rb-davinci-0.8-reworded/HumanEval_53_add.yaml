name: HumanEval_53_add
language: rb
prompt: "# Add two numbers x and y\n# >>> add.call(2, 3)\n# 5\n# >>> add.call(5, 7)\n\
  # 12\ndef add(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1,\
  \ candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12,\
  \ candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n"
completions: ["  x + y\nend", "\tx + y\nend", "  x + y\nend", "  x + y\nend", "  x\
    \ + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  # TODO: return the sum of x and y\n  x + y\nend", " \
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  x + y\nend", "    x + y\nend", "  x + y\nend", "  return\
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "    x +\
    \ y\nend", "  x + y\nend\nadd_lam = lambda { |x, y| x + y }\np add_lam.call(2,\
    \ 3)\np add_lam.call(5, 7)", "  x + y\nend", "  x + y\nend", "  x + y\nend", " \
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "    # YOUR CODE HERE\nend", " \
    \ x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  x + y\nend", "\tx + y\nend", "  x + y\nend", "  x + y\n\
    end", "    return x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  x + y\nend", "\tx + y\n\
    end", "  x + y\nend", "  x + y\nend", "    x + y\nend", "  x + y\nend", "  x +\
    \ y\nend", "    x + y\nend", "  x + y\nend", "  x + y\nend\nputs add.call(2,3)\n\
    puts add.call(5,7)", "  x + y\nend", "  x + y\nend", "    return x + y\nend",
  "  x + y\nend", "  x + y\nend", "    x + y\nend", "  x + y\nend", "  # TODO: return\
    \ the sum of x and y\n  x + y\nend", "  x + y\nend", "    x + y\nend", "  x +\
    \ y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  return x + y\nend",
  "  x + y\nend", "\tx + y\nend\nputs \"Addition\"\nputs add.call(2, 3)\nputs add.call(5,\
    \ 7)", "  return x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  return x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\n\
    end", "\tx + y\nend", "  return x + y\nend", "  x + y\nend", "  return x + y\n\
    end", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "\t\
    x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", " \
    \ x + y\nend", "  x + y\nend", "\tx + y\nend", "\t# Add two numbers and return\
    \ their sum\n\tx + y\nend", "\treturn x + y\nend", "  x + y\nend", "  x + y\n\
    end", "  return x + y\nend", "  x + y\nend", "  x + y\nend", "  return x + y\n\
    end", "  x + y\nend", "  x + y\nend", "  x + y\nend", "    x + y\nend\nputs add(4,\
    \ 5)", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  # TODO: Add code here\n\
    \  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend\nadd_proc = Proc.new { |x, y| x + y }\nadd_lambda\
    \ = lambda { |x, y| x + y }\nadd_proc.call(2, 2)\nadd_lambda.call(2, 2)", "  x\
    \ + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", " \
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "    x + y\nend\n\
    add.call(5, 7)", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend\nadd.call(2, 3)\nadd.call(5, 7)",
  "  x + y\nend", "  x + y\nend", "\tx + y\nend\nadd_proc = Proc.new { |x, y| x +\
    \ y }", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\nend",
  "  x + y\nend", "  puts x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\nend", " \
    \ x + y\nend", "  x + y\nend", "\tx + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  return\
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "\tx + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
