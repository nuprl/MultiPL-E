name: HumanEval_156_int_to_mini_roman
language: rb
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman.call(19)\n# \"xix\"\n# >>> int_to_mini_roman.call(152)\n\
  # \"clii\"\n# >>> int_to_mini_roman.call(426)\n# \"cdxxvi\"\ndef int_to_mini_roman(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
  \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
  \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
  \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
  \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
  \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
  \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
  \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
  \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
completions: ["  roman = \"\"\n  roman = roman + \"m\" * (number / 1000)\n  roman\
    \ = roman + \"c\" * ((number % 1000) / 100)\n  roman = roman + \"x\" * ((number\
    \ % 100) / 10)\n  roman = roman + \"i\" * (number % 10)\n  return roman\nend",
  "  raise ArgumentError.new(\"Invalid number\") if number > 1000 || number < 1\n\
    \  roman_numeral = []\n  ROMAN_NUMERALS.each do |numeral, num_value|\n    while\
    \ number >= num_value\n      roman_numeral << numeral\n      number -= num_value\n\
    \    end\n  end\n  roman_numeral.join.downcase\nend", "  str = \"\"\n  rom_hsh\
    \ = {1 => \"i\", 5 => \"v\", 10 => \"x\", 50 => \"l\", 100 => \"c\", 500 => \"\
    d\", 1000 => \"m\"}\n  digits = number.to_s.split(\"\").reverse.map!{|s| s.to_i}\n\
    \  digits.each_with_index do |digit, i|\n    factor = 10**i\n    if digit >= 1\
    \ && digit <= 3\n      str.prepend(rom_hsh[factor] * digit)\n    elsif digit ==\
    \ 4\n      str.prepend(rom_hsh[factor] + rom_hsh[factor * 5])\n    elsif digit\
    \ == 5\n      str.prepend(rom_hsh[factor * 5])\n    elsif digit >= 6 && digit\
    \ <= 8\n      str.prepend(rom_hsh[factor * 5] + rom_hsh[factor] * (digit - 5))\n\
    \    elsif digit == 9\n      str.prepend(rom_hsh[factor] + rom_hsh[factor * 10])\n\
    \    end\n  end\n  str\nend", "  number_str = number.to_s\n  digits = number_str.split('')\n\
    \  upper_limit = 3\n  if number >= 1000\n    upper_limit = 4\n  end\n  result\
    \ = ''\n  upper_limit.times do |digit|\n    result << roman_numeral_of_digit(digit,\
    \ digits)\n  end\n  result\nend", "  number = number.to_i\n  rom_num = ''\n  rom_num\
    \ = rom_num + 'm' * (number/1000)\n  rom_num = rom_num + 'd' * (number%1000/500)\n\
    \  rom_num = rom_num + 'c' * (number%500/100)\n  rom_num = rom_num + 'l' * (number%100/50)\n\
    \  rom_num = rom_num + 'x' * (number%50/10)\n  rom_num = rom_num + 'v' * (number%10/5)\n\
    \  rom_num = rom_num + 'i' * (number%5/1)\n  rom_num\nend", "  raise ArgumentError.new(\"\
    Argument must be a positive integer\") unless number.is_a?(Integer) && number\
    \ > 0\n  raise ArgumentError.new(\"Argument must be in range 1 <= num <= 1000\"\
    ) unless number >= 1 && number <= 1000", "  # Your code here\nend", "  roman =\
    \ \"\"\n  symbol = {\n            \"M\" => 1000,\n            \"D\" => 500,\n\
    \            \"C\" => 100,\n            \"L\" => 50,\n            \"X\" => 10,\n\
    \            \"V\" => 5,\n            \"I\" => 1\n            }\n    symbol.each\
    \ do |key, value|\n      roman += key * (number / value)\n      number = number\
    \ % value\n    end\n    return roman.downcase\nend", "  roman = []\n  roman_lookup\
    \ = {\n    1 => \"i\",\n    5 => \"v\",\n    10 => \"x\",\n    50 => \"l\",\n\
    \    100 => \"c\",\n    500 => \"d\",\n    1000 => \"m\"\n  }\n  decimal_values\
    \ = roman_lookup.keys.reverse\n  decimal_values.each do |decimal|\n    quotient,\
    \ number = number.divmod(decimal)\n    roman << roman_lookup[decimal] * quotient\n\
    \  end\n  return roman.join\nend", "  if number < 1 || number > 1000\n    raise\
    \ \"Number out of range\"\n  end\n  thousands = number / 1000\n  hundreds = (number\
    \ % 1000) / 100\n  tens = (number % 100) / 10\n  units = number % 10\n  result\
    \ = \"m\" * thousands\n  result += \"c\" * hundreds\n  result += \"x\" * tens\n\
    \  result += \"i\" * units\n  result\nend", "  symbols = {1 => 'i', 4 => 'iv',\
    \ 5 => 'v', 9 => 'ix', 10 => 'x', 40 => 'xl', 50 => 'l', 90 => 'xc', 100 => 'c',\
    \ 400 => 'cd', 500 => 'd', 900 => 'cm', 1000 => 'm'}\n  result = ''\n  while number\
    \ > 0\n    symbols.keys.reverse.each do |key|\n      if number >= key\n      \
    \  result << symbols[key]\n        number -= key\n        break\n      end\n \
    \   end\n  end\n  result\nend", "  # your code here\nend", "  raise NotImplementedError\n\
    end", "  i = 0\n  romans = {1000 => \"m\", 900 => \"cm\", 500 => \"d\", 400 =>\
    \ \"cd\", 100 => \"c\", 90 => \"xc\", 50 => \"l\", 40 => \"xl\", 10 => \"x\",\
    \ 9 => \"ix\", 5 => \"v\", 4 => \"iv\", 1 => \"i\"}\n  mini_roman = \"\"\n  while\
    \ number > 0\n    if number >= romans.keys[i]\n      mini_roman += romans.values[i]\n\
    \      number -= romans.keys[i]\n    else\n      i += 1\n    end\n  end\n  mini_roman\n\
    end", "  roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n  integers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  result = \"\"\n  index = 0\n  while\
    \ number > 0\n    while number >= integers[index]\n      result << roman_numerals[index]\n\
    \      number -= integers[index]\n    end\n    index += 1\n  end\n  result\nend",
  "  # TODO: implement this method\nend", "    # convert number to string to get number\
    \ length\n    #   and grab each digit with index\n    num_string = number.to_s\n\
    \    num_length = num_string.length\n    # set up array to store roman numerals\n\
    \    roman_numeral = []\n    # set up array to store mini-roman symbols\n    symbols\
    \ = %w(i v x l c d m)\n    # set up hash to lookup symbol based on placement in\
    \ number\n    placement = { 1 => 0, 10 => 2, 100 => 4, 1000 => 6 }\n    # for\
    \ each digit in number, lookup symbol and placement\n    #   and build roman numeral\
    \ array\n    num_string.split('').each_with_index do |digit, index|\n        #\
    \ turn digit string into integer\n        digit = digit.to_i\n        # determine\
    \ symbol to use based on placement\n        symbol = symbols[placement[(10 **\
    \ (num_length - index - 1))]]\n        # determine mini-roman numeral\n      \
    \  numeral = mini_roman_numeral(digit, symbol)\n        # add numeral to roman\
    \ numeral array\n        roman_numeral << numeral\n    end\n    # convert roman\
    \ numeral array to string\n    #   and downcase\n    return roman_numeral.join('').downcase\n\
    end", "  roman_str = ''\n  int_to_mini_roman_map.each do |arabic, roman|\n   \
    \ while number >= arabic\n      roman_str << roman\n      number -= arabic\n \
    \   end\n  end\n  roman_str\nend", "  # Your code here\nend", "\tnum_hash = {\n\
    \t\t1 => \"i\",\n\t\t2 => \"ii\",\n\t\t3 => \"iii\",\n\t\t4 => \"iv\",\n\t\t5\
    \ => \"v\",\n\t\t6 => \"vi\",\n\t\t7 => \"vii\",\n\t\t8 => \"viii\",\n\t\t9 =>\
    \ \"ix\",\n\t\t10 => \"x\",\n\t\t20 => \"xx\",\n\t\t30 => \"xxx\",\n\t\t40 =>\
    \ \"xl\",\n\t\t50 => \"l\",\n\t\t60 => \"lx\",\n\t\t70 => \"lxx\",\n\t\t80 =>\
    \ \"lxxx\",\n\t\t90 => \"xc\",\n\t\t100 => \"c\",\n\t\t200 => \"cc\",\n\t\t300\
    \ => \"ccc\",\n\t\t400 => \"cd\",\n\t\t500 => \"d\",\n\t\t600 => \"dc\",\n\t\t\
    700 => \"dcc\",\n\t\t800 => \"dccc\",\n\t\t900 => \"cm\",\n\t\t1000 => \"m\"\n\
    \t}\n\tnum_arr = number.to_s.chars.reverse\n\troman_num = \"\"\n\tnum_arr.each_with_index\
    \ do |num, i|\n\t\tnum = num.to_i\n\t\troman_num.prepend(num_hash[num * (10 **\
    \ i)]) if num != 0\n\tend\n\troman_num\nend", "  RomanConverter.new(:mini).call(number)\n\
    end", "  number_string = ''\n  roman_numerals.each do |numeral, digit|\n    if\
    \ number == digit\n      number_string << numeral\n    elsif number > digit\n\
    \      number_string << numeral * (number / digit)\n      number = number % digit\n\
    \    end\n  end\n  number_string\nend", "  raise unless number.is_a?(Fixnum) &&\
    \ number.between?(1, 1000)\n  letters = { 1 => 'i', 5 => 'v', 10 => 'x', 50 =>\
    \ 'l', 100 => 'c', 500 => 'd', 1000 => 'm' }\n  result = ''\n  case number\n \
    \ when 1..3   then result = 'i' * number\n  when 4      then result = 'iv'\n \
    \ when 5..8   then result = 'v' + 'i' * (number - 5)\n  when 9      then result\
    \ = 'ix'\n  when 10..39 then result = 'x' * (number / 10) + int_to_mini_roman(number\
    \ % 10)\n  when 40..49 then result = 'xl' + int_to_mini_roman(number % 10)\n \
    \ when 50..89 then result = 'l' + int_to_mini_roman(number % 50)\n  when 90..99\
    \ then result = 'xc' + int_to_mini_roman(number % 10)\n  when 100..399\n    result\
    \ = 'c' * (number / 100) + int_to_mini_roman(number % 100)\n  when 400..499\n\
    \    result = 'cd' + int_to_mini_roman(number % 100)\n  when 500..899\n    result\
    \ = 'd' + int_to_mini_roman(number % 500)\n  when 900..999\n    result = 'cm'\
    \ + int_to_mini_roman(number % 100)\n  when 1000\n    result = 'm'\n  end\n  result\n\
    end", "  if !number.is_a?(Integer)\n    raise TypeError, \"Must be an integer.\"\
    \n  elsif number < 1 || number > 1000\n    raise RangeError, \"Integer must be\
    \ between 1 and 1000.\"\n  end", "  # Empty string\n  mini_roman = \"\"\n  # *\"\
    Dictionary\"* of number-symbol associations\n  symbols = { \"M\" => 1000, \"CM\"\
    \ => 900, \"D\" => 500, \"CD\" => 400, \"C\" => 100,\n              \"XC\" =>\
    \ 90, \"L\" => 50, \"XL\" => 40, \"X\" => 10, \"IX\" => 9,\n              \"V\"\
    \ => 5, \"IV\" => 4, \"I\" => 1}\n  # Loop through each key in the dictionary\n\
    \  symbols.each do |key, value|\n    # While the number is greater than or equal\
    \ to the value of the key\n    while number >= value\n      # Append the key to\
    \ the string\n      mini_roman << key\n      # Subtract the value from the number\n\
    \      number -= value\n    end\n  end\n  # Return the string\n  mini_roman\n\
    end", "  roman = \"\"\n  return \"m\" if number == 1000\n  roman += \"d\" if number\
    \ >= 500\n  if number < 400\n    roman += \"c\" * (number % 500 / 100)\n  else\n\
    \    roman += \"cd\"\n  end\n  if number < 90\n    roman += \"x\" * (number %\
    \ 100 / 10)\n  else\n    roman += \"xc\"\n  end\n  if number < 40\n    roman +=\
    \ \"i\" * (number % 10)\n  else\n    roman += \"xl\"\n  end\n  roman\nend", " \
    \ if number < 1 || number > 1000\n    return nil\n  end\n  result = ''\n  values\
    \ = {\n    'M'  => 1000,\n    'CM' => 900,\n    'D'  => 500,\n    'CD' => 400,\n\
    \    'C'  => 100,\n    'XC' => 90,\n    'L'  => 50,\n    'XL' => 40,\n    'X'\
    \  => 10,\n    'IX' => 9,\n    'V'  => 5,\n    'IV' => 4,\n    'I'  => 1\n  }\n\
    \  values.each do |letter, value|\n    result << letter * (number / value)\n \
    \   number %= value\n  end\n  result.downcase\nend", "  @int_to_mini_roman ||=\
    \ {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n\
    \    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  @int_to_mini_roman\
    \ = @int_to_mini_roman.sort.reverse.to_h", "  str = []\n  while number > 0\n \
    \   if number >= 1000\n      str << \"m\"\n      number -= 1000\n    elsif number\
    \ >= 900\n      str << \"cm\"\n      number -= 900\n    elsif number >= 500\n\
    \      str << \"d\"\n      number -= 500\n    elsif number >= 400\n      str <<\
    \ \"cd\"\n      number -= 400\n    elsif number >= 100\n      str << \"c\"\n \
    \     number -= 100\n    elsif number >= 90\n      str << \"xc\"\n      number\
    \ -= 90\n    elsif number >= 50\n      str << \"l\"\n      number -= 50\n    elsif\
    \ number >= 40\n      str << \"xl\"\n      number -= 40\n    elsif number >= 10\n\
    \      str << \"x\"\n      number -= 10\n    elsif number >= 9\n      str << \"\
    ix\"\n      number -= 9\n    elsif number >= 5\n      str << \"v\"\n      number\
    \ -= 5\n    elsif number >= 4\n      str << \"iv\"\n      number -= 4\n    elsif\
    \ number >= 1\n      str << \"i\"\n      number -= 1\n    end\n  end\n  str.join(\"\
    \")\nend", "  num_str = \"\"\n  while number > 0\n    if number >= 1000\n    \
    \  num_str += \"m\"\n      number -= 1000\n    elsif number >= 900\n      num_str\
    \ += \"cm\"\n      number -= 900\n    elsif number >= 500\n      num_str += \"\
    d\"\n      number -= 500\n    elsif number >= 400\n      num_str += \"cd\"\n \
    \     number -= 400\n    elsif number >= 100\n      num_str += \"c\"\n      number\
    \ -= 100\n    elsif number >= 90\n      num_str += \"xc\"\n      number -= 90\n\
    \    elsif number >= 50\n      num_str += \"l\"\n      number -= 50\n    elsif\
    \ number >= 40\n      num_str += \"xl\"\n      number -= 40\n    elsif number\
    \ >= 10\n      num_str += \"x\"\n      number -= 10\n    elsif number >= 9\n \
    \     num_str += \"ix\"\n      number -= 9\n    elsif number >= 5\n      num_str\
    \ += \"v\"\n      number -= 5\n    elsif number >= 4\n      num_str += \"iv\"\n\
    \      number -= 4\n    elsif number >= 1\n      num_str += \"i\"\n      number\
    \ -= 1\n    end\n  end\n  num_str\nend", "  to_mini_roman(number, {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  })\nend", "  numerals = [[1000,\
    \ \"m\"],\n              [900, \"cm\"],\n              [500, \"d\"],\n       \
    \       [400, \"cd\"],\n              [100, \"c\"],\n              [90, \"xc\"\
    ],\n              [50, \"l\"],\n              [40, \"xl\"],\n              [10,\
    \ \"x\"],\n              [9, \"ix\"],\n              [5, \"v\"],\n           \
    \   [4, \"iv\"],\n              [1, \"i\"]]\n  if number == 0\n    return ''\n\
    \  end\n  numerals.each do |i|\n    if number >= i[0]\n      return i[1] + int_to_mini_roman(number\
    \ - i[0])\n    end\n  end\nend", "  roman_numeral = \"\"\n  while number > 0\n\
    \    if number >= 1000\n      roman_numeral << \"m\"\n      number -= 1000\n \
    \   elsif number >= 900\n      roman_numeral << \"cm\"\n      number -= 900\n\
    \    elsif number >= 500\n      roman_numeral << \"d\"\n      number -= 500\n\
    \    elsif number >= 400\n      roman_numeral << \"cd\"\n      number -= 400\n\
    \    elsif number >= 100\n      roman_numeral << \"c\"\n      number -= 100\n\
    \    elsif number >= 90\n      roman_numeral << \"xc\"\n      number -= 90\n \
    \   elsif number >= 50\n      roman_numeral << \"l\"\n      number -= 50\n   \
    \ elsif number >= 40\n      roman_numeral << \"xl\"\n      number -= 40\n    elsif\
    \ number >= 10\n      roman_numeral << \"x\"\n      number -= 10\n    elsif number\
    \ >= 9\n      roman_numeral << \"ix\"\n      number -= 9\n    elsif number >=\
    \ 5\n      roman_numeral << \"v\"\n      number -= 5\n    elsif number >= 4\n\
    \      roman_numeral << \"iv\"\n      number -= 4\n    elsif number >= 1\n   \
    \   roman_numeral << \"i\"\n      number -= 1\n    end\n  end\n  roman_numeral\n\
    end", "  raise TypeError unless number.is_a?(Integer)\n  raise ArgumentError unless\
    \ number.between?(1, 1000)", "  # TODO: Implement me!\nend", "  number_to_roman_table\
    \ = {\n    1    => 'i',\n    5    => 'v',\n    10   => 'x',\n    50   => 'l',\n\
    \    100  => 'c',\n    500  => 'd',\n    1000 => 'm'\n  }", "  letter_values =\
    \ {\n    'i' => 1,\n    'v' => 5,\n    'x' => 10,\n    'l' => 50,\n    'c' =>\
    \ 100,\n    'd' => 500,\n    'm' => 1000\n  }\n  num = number\n  results = ''\n\
    \  while num > 0\n    result = letter_values.keys.map { |letter| [letter, num\
    \ / letter_values[letter]] }.to_h\n    biggest_letter = result.keys.max_by { |letter|\
    \ result[letter] }\n    results += biggest_letter * result[biggest_letter]\n \
    \   num -= letter_values[biggest_letter] * result[biggest_letter]\n  end\n  results\n\
    end", "  # Fill this in, along with any other functions you may need.\nend", " \
    \ if number == 0\n    return \"\"\n  elsif number >= 1000\n    return \"m\" +\
    \ int_to_mini_roman(number - 1000)\n  elsif number >= 900\n    return \"cm\" +\
    \ int_to_mini_roman(number - 900)\n  elsif number >= 500\n    return \"d\" + int_to_mini_roman(number\
    \ - 500)\n  elsif number >= 400\n    return \"cd\" + int_to_mini_roman(number\
    \ - 400)\n  elsif number >= 100\n    return \"c\" + int_to_mini_roman(number -\
    \ 100)\n  elsif number >= 90\n    return \"xc\" + int_to_mini_roman(number - 90)\n\
    \  elsif number >= 50\n    return \"l\" + int_to_mini_roman(number - 50)\n  elsif\
    \ number >= 40\n    return \"xl\" + int_to_mini_roman(number - 40)\n  elsif number\
    \ >= 10\n    return \"x\" + int_to_mini_roman(number - 10)\n  elsif number >=\
    \ 9\n    return \"ix\" + int_to_mini_roman(number - 9)\n  elsif number >= 5\n\
    \    return \"v\" + int_to_mini_roman(number - 5)\n  elsif number >= 4\n    return\
    \ \"iv\" + int_to_mini_roman(number - 4)\n  elsif number >= 1\n    return \"i\"\
    \ + int_to_mini_roman(number - 1)\n  end\nend", "  roman = \"\"\n  roman << \"\
    c\" * (number / 100)\n  roman << \"l\" * ((number % 100) / 50)\n  roman << \"\
    x\" * ((number % 50) / 10)\n  roman << \"v\" * ((number % 10) / 5)\n  roman <<\
    \ \"i\" * (number % 5)\n  roman\nend", "  roman_numerals = {\n    1000 => \"m\"\
    ,\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\"\
    ,\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n\
    \    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", " \
    \ hundreds = number / 100\n  tens = (number % 100) / 10\n  ones = number % 10\n\
    \  str = \"\"\n  str << \"c\" * hundreds\n  if tens == 9\n    str << \"xc\"\n\
    \  elsif tens == 4\n    str << \"xl\"\n  else\n    str << \"l\" * (tens / 5)\n\
    \    str << \"x\" * (tens % 5)\n  end\n  if ones == 9\n    str << \"ix\"\n  elsif\
    \ ones == 4\n    str << \"iv\"\n  else\n    str << \"v\" * (ones / 5)\n    str\
    \ << \"i\" * (ones % 5)\n  end\n  str\nend", "  mini_roman_numerals = {1000 =>\
    \ 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c', 90 => 'xc', 50 => 'l',\
    \ 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'}\n  mini_roman_numerals.each_with_object(\"\
    \") do |(num, letter), str|\n    quotient, number = number.divmod(num)\n    str\
    \ << letter * quotient\n  end\nend", "  mini_roman_arr = []\n  mini_roman_hash\
    \ = {\"1\" => \"i\", \"5\" => \"v\", \"10\" => \"x\", \"50\" => \"l\", \"100\"\
    \ => \"c\", \"500\" => \"d\", \"1000\" => \"m\"}\n  mini_arr = number.to_s.split(\"\
    \")\n  mini_arr.each_with_index do |value, index|\n    case value\n    when \"\
    0\"\n      mini_roman_arr << \"\"\n    when \"1\"\n      mini_roman_arr << mini_roman_hash[\"\
    1\"]\n    when \"2\"\n      mini_roman_arr << mini_roman_hash[\"1\"] * 2\n   \
    \ when \"3\"\n      mini_roman_arr << mini_roman_hash[\"1\"] * 3\n    when \"\
    4\"\n      mini_roman_arr << mini_roman_hash[\"1\"] + mini_roman_hash[\"5\"]\n\
    \    when \"5\"\n      mini_roman_arr << mini_roman_hash[\"5\"]\n    when \"6\"\
    \n      mini_roman_arr << mini_roman_hash[\"5\"] + mini_roman_hash[\"1\"]\n  \
    \  when \"7\"\n      mini_roman_arr << mini_roman_hash[\"5\"] + mini_roman_hash[\"\
    1\"] * 2\n    when \"8\"\n      mini_roman_arr << mini_roman_hash[\"5\"] + mini_roman_hash[\"\
    1\"] * 3\n    when \"9\"\n      mini_roman_arr << mini_roman_hash[\"1\"] + mini_roman_hash[\"\
    10\"]\n    end\n    mini_roman_arr[index] = mini_roman_arr[index] * ((mini_arr.length\
    \ - index - 1) * 10)\n  end\n  mini_roman_arr.join(\"\").downcase\nend\nputs int_to_mini_roman(19)\n\
    puts int_to_mini_roman(152)\nputs int_to_mini_roman(426)", "  hash = {\n    1000\
    \ => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100\
    \ => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 =>\
    \ \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n\
    \  }\n  output = \"\"\n  hash.each do |k, v|\n    while number >= k\n      output\
    \ << v\n      number -= k\n    end\n  end\n  output\nend", end, "  # We want to\
    \ put the roman numeral characters in reverse order (i.e. 1000\n  # should be\
    \ first, then 500, etc.)\n  romans = [[1000, \"m\"], [500, \"d\"], [100, \"c\"\
    ], [50, \"l\"], [10, \"x\"], [5, \"v\"], [1, \"i\"]]\n  result = []\n  romans.each\
    \ do |arabic, roman|\n    # We now want to repeatedly add a character to the result\
    \ string, until\n    # we get to the first value less than the number we're converting.\n\
    \    while number >= arabic\n      # We add that character\n      result << roman\n\
    \      # We deduct the value of the character from the number\n      number -=\
    \ arabic\n    end\n  end\n  # Finally, we join the array of characters into a\
    \ string, and return the\n  # result.\n  result.join\nend", "  roman_numerals\
    \ = {1 => \"i\", 5 => \"v\", 10 => \"x\", 50 => \"l\", 100 => \"c\", 500 => \"\
    d\", 1000 => \"m\"}\n  translated_numerals = []\n  remainder = number\n  # Start\
    \ with the biggest roman numeral and go down\n  roman_numerals.keys.reverse.each\
    \ do |decimal|\n    # Keep going until the decimal is greater than the remainder\n\
    \    while decimal <= remainder\n      # Add the corresponding roman numeral to\
    \ the array and subtract\n      # its decimal equivalent from the remainder\n\
    \      translated_numerals << roman_numerals[decimal]\n      remainder -= decimal\n\
    \    end\n  end\n  # Return the array of translated numerals as a string\n  translated_numerals.join(\"\
    \")\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500\
    \ => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n\
    \    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n\
    \    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n   \
    \ result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  numerals = {\n    \"m\" => 1000,\n    \"cm\" => 900,\n    \"d\" => 500,\n\
    \    \"cd\" => 400,\n    \"c\" => 100,\n    \"xc\" => 90,\n    \"l\" => 50,\n\
    \    \"xl\" => 40,\n    \"x\" => 10,\n    \"ix\" => 9,\n    \"v\" => 5,\n    \"\
    iv\" => 4,\n    \"i\" => 1\n  }\n  result = \"\"\n  numerals.each do |letter,\
    \ value|\n    result << letter * (number / value)\n    number = number % value\n\
    \  end\n  result\nend", "  raise NotImplementedError.new(\"int_to_mini_roman not\
    \ implemented\")\nend", "  if number == 0\n    \"\"\n  elsif number >= 1000\n\
    \    \"m\" + int_to_mini_roman(number - 1000)\n  elsif number >= 900\n    \"cm\"\
    \ + int_to_mini_roman(number - 900)\n  elsif number >= 500\n    \"d\" + int_to_mini_roman(number\
    \ - 500)\n  elsif number >= 400\n    \"cd\" + int_to_mini_roman(number - 400)\n\
    \  elsif number >= 100\n    \"c\" + int_to_mini_roman(number - 100)\n  elsif number\
    \ >= 90\n    \"xc\" + int_to_mini_roman(number - 90)\n  elsif number >= 50\n \
    \   \"l\" + int_to_mini_roman(number - 50)\n  elsif number >= 40\n    \"xl\" +\
    \ int_to_mini_roman(number - 40)\n  elsif number >= 10\n    \"x\" + int_to_mini_roman(number\
    \ - 10)\n  elsif number >= 9\n    \"ix\" + int_to_mini_roman(number - 9)\n  elsif\
    \ number >= 5\n    \"v\" + int_to_mini_roman(number - 5)\n  elsif number >= 4\n\
    \    \"iv\" + int_to_mini_roman(number - 4)\n  elsif number >= 1\n    \"i\" +\
    \ int_to_mini_roman(number - 1)\n  end\nend", "  letters = %w(i v x l c d m)\n\
    \  remainder = number\n  result = ''\n  letters.each_with_index do |letter, index|\n\
    \    val = (remainder % 10 ** (index / 2 + 1)) / 10 ** (index / 2)\n    case val\n\
    \    when 0\n      next\n    when 1..3\n      result = letter * val + result\n\
    \    when 4\n      result = letter + letters[index + 1] + result\n    when 5..8\n\
    \      result = letters[index + 1] + letter * (val - 5) + result\n    when 9\n\
    \      result = letter + letters[index + 2] + result\n    end\n    remainder -=\
    \ val * 10 ** (index / 2)\n  end\n  result\nend", "  base_chars = \"vxlcdm\"\n\
    \  base_ints = [5, 10, 50, 100, 500, 1000]\n  mini_roman = ''\n  base_ints.reverse.each_with_index\
    \ do |value, index|\n    while number >= value\n      mini_roman << base_chars[index]\n\
    \      number -= value\n    end\n  end\n  mini_roman\nend", "  # TODO: your code\
    \ here\nend", "  # Your code here\nend", "    if number.to_i <= 0 || number.to_i\
    \ > 1000\n        return \"Invalid Input\"\n    end\n    \n    roman = \"\"\n\
    \    roman = roman + \"m\" * (number / 1000)\n    roman = roman + \"d\" * (number\
    \ % 1000 / 500)\n    roman = roman + \"c\" * (number % 500 / 100)\n    roman =\
    \ roman + \"l\" * (number % 100 / 50)\n    roman = roman + \"x\" * (number % 50\
    \ / 10)\n    roman = roman + \"v\" * (number % 10 / 5)\n    roman = roman + \"\
    i\" * (number % 5 / 1)\n    roman.downcase\nend\nputs int_to_mini_roman(19)\n\
    puts int_to_mini_roman(152)\nputs int_to_mini_roman(426)", "  number = number.to_i\n\
    \  if number <= 0\n    puts \"Please select number greater than 0\"\n  elsif number\
    \ >= 1000\n    puts \"Please select number smaller than 1000\"\n  else\n    roman_mapping\
    \ = {\n      1000 => \"m\",\n      900 => \"cm\",\n      500 => \"d\",\n     \
    \ 400 => \"cd\",\n      100 => \"c\",\n      90 => \"xc\",\n      50 => \"l\"\
    ,\n      40 => \"xl\",\n      10 => \"x\",\n      9 => \"ix\",\n      5 => \"\
    v\",\n      4 => \"iv\",\n      1 => \"i\"\n    }\n    roman = \"\"\n    roman_mapping.each\
    \ do |key, value|\n      roman << value*(number/key)\n      number = number %\
    \ key\n    end\n    return roman\n  end\nend", "  $ones_hash.each do |key, value|\n\
    \    if number == key\n      return value\n    end\n  end\n  $tens_hash.each do\
    \ |key, value|\n    if number == key\n      return value\n    end\n  end\n  $hundreds_hash.each\
    \ do |key, value|\n    if number == key\n      return value\n    end\n  end\n\
    \  $thousands_hash.each do |key, value|\n    if number == key\n      return value\n\
    \    end\n  end\n  if number > 1000\n    return 'm' * (number / 1000) + int_to_mini_roman(number\
    \ % 1000)\n  elsif number > 100\n    return $hundreds_hash[number / 100 * 100]\
    \ + int_to_mini_roman(number % 100)\n  elsif number > 10\n    return $tens_hash[number\
    \ / 10 * 10] + int_to_mini_roman(number % 10)\n  else\n    return $ones_hash[number]\n\
    \  end\nend", "  hash_map = { 1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\
    \ 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v',\
    \ 4 => 'iv', 1 => 'i' }\n  result = ''\n  hash_map.each do |key, value|\n    result\
    \ << value * (number / key)\n    number = number % key\n  end\n  result\nend",
  "  result = ''\n  array_to_mini_roman = [\n  [['i', 1], ['ii', 2], ['iii', 3], ['iv',\
    \ 4], ['v', 5], ['vi', 6], ['vii', 7], ['viii', 8], ['ix', 9]],\n  [['x', 10],\
    \ ['xx', 20], ['xxx', 30], ['xl', 40], ['l', 50], ['lx', 60], ['lxx', 70], ['lxxx',\
    \ 80], ['xc', 90]],\n  [['c', 100], ['cc', 200], ['ccc', 300], ['cd', 400], ['d',\
    \ 500], ['dc', 600], ['dcc', 700], ['dccc', 800], ['cm', 900]],\n  [['m', 1000],\
    \ ['mm', 2000], ['mmm', 3000]]\n  ]\n  if number >= 1000\n    array_to_mini_roman[3].each\
    \ do |pair|\n      if number >= pair[1]\n        result += pair[0]\n        number\
    \ -= pair[1]\n      end\n    end\n  end\n  if number >= 100\n    array_to_mini_roman[2].each\
    \ do |pair|\n      if number >= pair[1]\n        result += pair[0]\n        number\
    \ -= pair[1]\n      end\n    end\n  end\n  if number >= 10\n    array_to_mini_roman[1].each\
    \ do |pair|\n      if number >= pair[1]\n        result += pair[0]\n        number\
    \ -= pair[1]\n      end\n    end\n  end\n  if number >= 1\n    array_to_mini_roman[0].each\
    \ do |pair|\n      if number >= pair[1]\n        result += pair[0]\n        number\
    \ -= pair[1]\n      end\n    end\n  end\n  result\nend\nputs int_to_mini_roman(3)\n\
    puts int_to_mini_roman(9)\nputs int_to_mini_roman(15)\nputs int_to_mini_roman(1000)\n\
    puts int_to_mini_roman(2004)\nputs int_to_mini_roman(100)\nputs int_to_", "  roman_convert\
    \ = {1 => \"i\", 5 => \"v\", 10 => \"x\", 50 => \"l\", 100 => \"c\", 500 => \"\
    d\", 1000 => \"m\"}\n  count = number / 1000\n  number = number % 1000\n  roman_string\
    \ = \"m\" * count\n  count = number / 500\n  number = number % 500\n  roman_string\
    \ += \"d\" * count\n  count = number / 100\n  number = number % 100\n  roman_string\
    \ += \"c\" * count\n  count = number / 50\n  number = number % 50\n  roman_string\
    \ += \"l\" * count\n  count = number / 10\n  number = number % 10\n  roman_string\
    \ += \"x\" * count\n  count = number / 5\n  number = number % 5\n  roman_string\
    \ += \"v\" * count\n  roman_string += \"i\" * number\n  roman_string.downcase\n\
    end", "  one = ['i', 'x', 'c', 'm']\n  five = ['v', 'l', 'd']\n  res = []\n  i\
    \ = 0\n  loop do\n    digit = number % 10\n    if digit == 0\n      i += 1\n \
    \     number /= 10\n      next\n    end\n    if digit <= 3\n      res.unshift(one[i]\
    \ * digit)\n    elsif digit == 4\n      res.unshift(one[i] + five[i])\n    elsif\
    \ digit == 5\n      res.unshift(five[i])\n    elsif digit <= 8\n      res.unshift(five[i]\
    \ + one[i] * (digit - 5))\n    else\n      res.unshift(one[i] + one[i + 1])\n\
    \    end\n    i += 1\n    number /= 10\n    break if number == 0\n  end\n  res.join('')\n\
    end", "  # Write your code here\nend", "  roman_converter(number, [[\"m\", 1000],\
    \ [\"d\", 500], [\"c\", 100], [\"l\", 50], [\"x\", 10], [\"v\", 5], [\"i\", 1]])\n\
    end", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n  \
    \  9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n\
    \    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000\
    \ => 'm'\n  }\n  if roman_numerals.keys.include?(number)\n    return roman_numerals[number]\n\
    \  end\n  roman_numerals.keys.each do |num|\n    if number > num\n      next\n\
    \    else\n      return roman_numerals[num] + int_to_mini_roman(number - num)\n\
    \    end\n  end\nend", "  letters = {1 => \"i\", 5 => \"v\", 10 => \"x\", 50 =>\
    \ \"l\", 100 => \"c\", 500 => \"d\", 1000 => \"m\"}\n  digits = number.to_s.split(\"\
    \").map(&:to_i)\n  digits.map!.with_index do |n, i|\n    if (i + 1) % 3 == 0 &&\
    \ i > 0\n      if n == 1\n        letters[1] + letters[100 * (10 ** (i / 3))]\n\
    \      elsif n == 2\n        letters[1] + letters[100 * (10 ** (i / 3))] + letters[100\
    \ * (10 ** (i / 3))]\n      elsif n == 3\n        letters[1] + letters[100 * (10\
    \ ** (i / 3))] + letters[100 * (10 ** (i / 3))] + letters[100 * (10 ** (i / 3))]\n\
    \      elsif n == 4\n        letters[1] + letters[5 * (10 ** (i / 3))]\n     \
    \ elsif n == 5\n        letters[5 * (10 ** (i / 3))]\n      elsif n == 6\n   \
    \     letters[5 * (10 ** (i / 3))] + letters[1]\n      elsif n == 7\n        letters[5\
    \ * (10 ** (i / 3))] + letters[1] + letters[1]\n      elsif n == 8\n        letters[5\
    \ * (10 ** (i / 3))] + letters[1] + letters[1] + letters[1]\n      elsif n ==\
    \ 9\n        letters[1] + letters[10 * (10 ** (i / 3))]\n      end\n    elsif\
    \ (i + 1) % 2 == 0 && i > 0\n      if n == 1\n        letters[1] + letters[10\
    \ * (10 ** (i / 2))]\n      elsif n == 2\n        letters[1] + letters[10 * (10\
    \ ** (i / 2))] + letters[10 * (10 ** (i / 2))]\n      elsif n == 3\n        letters[1]\
    \ + letters[10 * (10 ** (i / 2))] + letters", "  require 'roman_numerals'\n  return\
    \ RomanNumerals.to_roman(number).downcase\nend", "  roman_numeral = []\n  chars\
    \ = {\n    'M' => 1000,\n    'D' => 500,\n    'C' => 100,\n    'L' => 50,\n  \
    \  'X' => 10,\n    'V' => 5,\n    'I' => 1\n  }\n  chars.each do |key, value|\n\
    \    roman_numeral << key*(number/value)\n    number = number % value\n  end\n\
    \  return roman_numeral.join\nend", "  raise NotImplementedError\nend", "  roman_symbols\
    \ = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n  # Cases for when we have\
    \ a single digit\n  if number < 4\n    return roman_symbols[0] * number\n  elsif\
    \ number == 4\n    return roman_symbols[0] + roman_symbols[1]\n  elsif number\
    \ < 9\n    return roman_symbols[1] + roman_symbols[0] * (number - 5)\n  elsif\
    \ number == 9\n    return roman_symbols[0] + roman_symbols[2]\n  end\n  # Cases\
    \ for when we have multiple digits\n  if number < 40\n    return roman_symbols[2]\
    \ * (number / 10) + int_to_mini_roman(number % 10)\n  elsif number < 50\n    return\
    \ roman_symbols[2] + roman_symbols[3] + int_to_mini_roman(number % 10)\n  elsif\
    \ number < 90\n    return roman_symbols[3] + roman_symbols[2] * ((number - 50)\
    \ / 10) + int_to_mini_roman(number % 10)\n  elsif number < 100\n    return roman_symbols[2]\
    \ + roman_symbols[4] + int_to_mini_roman(number % 10)\n  elsif number < 400\n\
    \    return roman_symbols[4] * (number / 100) + int_to_mini_roman(number % 100)\n\
    \  elsif number < 500\n    return roman_symbols[4] + roman_symbols[5] + int_to_mini_roman(number\
    \ % 100)\n  elsif number < 900\n    return roman_symbols[5] + roman_symbols[4]\
    \ * ((number - 500) / 100) + int_to_mini_roman(number % 100)\n  elsif number <\
    \ 1000\n    return roman_symbols[4] + roman_symbols[6] + int_", "  roman_map =\
    \ {\n      1 => 'i',\n      5 => 'v',\n      10 => 'x',\n      50 => 'l',\n  \
    \    100 => 'c',\n      500 => 'd',\n      1000 => 'm'\n  }\n  numbers = roman_map.keys\n\
    \  values = roman_map.values\n  result = ''\n  numbers.reverse.each_with_index\
    \ do |num, idx|\n    while number >= num\n      number -= num\n      result +=\
    \ values[idx]\n    end\n  end\n  result\nend", "  if number > 1000 || number <\
    \ 1\n    puts \"Please enter a number between 1 and 1000.\"\n  else\n    roman_numerals\
    \ = {1000 => \"m\", 900 => \"cm\", 500 => \"d\", 400 => \"cd\", 100 => \"c\",\
    \ 90 => \"xc\", 50 => \"l\", 40 => \"xl\", 10 => \"x\", 9 => \"ix\", 5 => \"v\"\
    , 4 => \"iv\", 1 => \"i\"}\n    output = \"\"\n    roman_numerals.each do |key,\
    \ value|\n      (number / key).times { output << value ; number -= key }\n   \
    \ end\n    output\n  end\nend", "  roman_numerals = [['i', 'v'], ['x', 'l'], ['c',\
    \ 'd'], ['m']]\n  base = roman_numerals.length - 1\n  result = []\n  while base\
    \ >= 0\n    digit = number / (10 ** base)\n    case digit\n    when 1, 2, 3\n\
    \      result << roman_numerals[base][0] * digit\n    when 4\n      result <<\
    \ roman_numerals[base][0] + roman_numerals[base][1]\n    when 5, 6, 7, 8\n   \
    \   result << roman_numerals[base][1] + (roman_numerals[base][0] * (digit - 5))\n\
    \    when 9\n      result << roman_numerals[base][0] + roman_numerals[base + 1][0]\n\
    \    end\n    number = number % (10 ** base)\n    base -= 1\n  end\n  result.join\n\
    end", "  numeral = ''\n  while number > 0\n    if number % 5 == 4\n      numeral\
    \ = 'i' + numeral\n      number += 1\n    end\n    numeral = 'v' + numeral if\
    \ number % 10 == 9\n    numeral = 'x' + numeral if number % 10 >= 5\n    number\
    \ = number % 5\n    numeral = 'i' + numeral\n    number -= 1\n  end\n  numeral\n\
    end", "  #  code goes here\nend", "    # replace this stub with your code\n  \
    \  \"\"\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 =>\
    \ 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90\
    \ => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n\
    \    1000 => 'm'\n  }\n  output = ''\n  (1..number).each do |int|\n    roman_numerals.each\
    \ do |key, value|\n      if int == key\n        output += value\n      end\n \
    \   end\n  end\n  output\nend", "  return \"i\" if number == 1\n  return \"ii\"\
    \ if number == 2\n  return \"iii\" if number == 3\n  return \"iv\" if number ==\
    \ 4\n  return \"v\" if number == 5\n  return \"vi\" if number == 6\n  return \"\
    vii\" if number == 7\n  return \"viii\" if number == 8\n  return \"ix\" if number\
    \ == 9\n  return \"x\" if number == 10\n  return \"xi\" if number == 11\n  return\
    \ \"xii\" if number == 12\n  return \"xiii\" if number == 13\n  return \"xiv\"\
    \ if number == 14\n  return \"xv\" if number == 15\n  return \"xvi\" if number\
    \ == 16\n  return \"xvii\" if number == 17\n  return \"xviii\" if number == 18\n\
    \  return \"xix\" if number == 19\n  return \"xx\" if number == 20\n  return \"\
    xxi\" if number == 21\n  return \"xxii\" if number == 22\n  return \"xxiii\" if\
    \ number == 23\n  return \"xxiv\" if number == 24\n  return \"xxv\" if number\
    \ == 25\n  return \"xxvi\" if number == 26\n  return \"xxvii\" if number == 27\n\
    \  return \"xxviii\" if number == 28\n  return \"xxix\" if number == 29\n  return\
    \ \"xxx\" if number == 30\n  return \"xxxi\" if number == 31\n  return \"xxxii\"\
    \ if number == 32\n  return \"xxxiii\" if number == 33\n  return \"xxxiv\" if\
    \ number == 34\n  return \"xxxv\" if number == 35\n  return \"xxxvi\" if number\
    \ == 36\n  return \"xxxvii\" if number == 37\n  return \"xxxviii\" if number ==\
    \ 38\n  return \"xxxix\" if number == 39\n  return \"xl\" if number == 40\n  return\
    \ \"xli\" if number == 41\n  return \"xlii\" if number == 42\n  return \"xliii\"\
    \ if number == 43\n  return \"xliv\" if number == 44\n  return \"xlv\" if number\
    \ == 45\n  return \"xlvi\" if number == 46\n  return \"xlvii\"", "  roman_numeral\
    \ = []\n  numbers = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }\n  numbers.each do |k, v|\n    if number >=\
    \ k\n      number -= k\n      roman_numeral << v\n    end\n  end\n  roman_numeral.join\n\
    end", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 =>\
    \ \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 =>\
    \ \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\"\
    ,\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # raise NotImplementedError\nend",
  "  #write your code here\nend", "\tif (1..1000).include?(number)\n\t\troman_numeral\
    \ = ''\n\t\tarabic_numerals = [1000, 500, 100, 50, 10, 5, 1]\n\t\tmini_roman_numerals\
    \ = ['m', 'd', 'c', 'l', 'x', 'v', 'i']\n\t\tarabic_numerals.each_with_index do\
    \ |n, i|\n\t\t\twhile number >= n\n\t\t\t\troman_numeral << mini_roman_numerals[i]\n\
    \t\t\t\tnumber -= n\n\t\t\tend\n\t\tend\n\t\troman_numeral\n\telse\n\t\traise\
    \ 'Number must be in range 1..1000'\n\tend\nend", "  # Your Code Here\nend", " \
    \ #TODO: Implement me!\nend", "  # TODO: Implement me!\nend", "  # hint: look\
    \ at the tests!\nend", '  number = number.to_i', "  raise NotImplementedError\n\
    end", "  # TODO\nend", "  roman_to_int = [[1000, \"m\"],\n                  [900,\
    \ \"cm\"],\n                  [500, \"d\"],\n                  [400, \"cd\"],\n\
    \                  [100, \"c\"],\n                  [90, \"xc\"],\n          \
    \        [50, \"l\"],\n                  [40, \"xl\"],\n                  [10,\
    \ \"x\"],\n                  [9, \"ix\"],\n                  [5, \"v\"],\n   \
    \               [4, \"iv\"],\n                  [1, \"i\"]]\n  remainder = number\n\
    \  roman_numeral = \"\"\n  roman_to_int.each do |pair|\n    roman_numeral << pair[1]\
    \ * (remainder / pair[0])\n    remainder = remainder % pair[0]\n  end\n  roman_numeral\n\
    end", "  return 'x' if number == 10\n  return 'v' if number == 5\n  return 'i'\
    \ if number == 1\n  return '' if number == 0\n  return 'l' if number == 50\n \
    \ return 'c' if number == 100\n  return 'd' if number == 500\n  return 'm' if\
    \ number == 1000\n  if number >= 1000\n    'm' + int_to_mini_roman(number - 1000)\n\
    \  elsif number >= 500\n    'd' + int_to_mini_roman(number - 500)\n  elsif number\
    \ >= 100\n    'c' + int_to_mini_roman(number - 100)\n  elsif number >= 50\n  \
    \  'l' + int_to_mini_roman(number - 50)\n  elsif number >= 10\n    'x' + int_to_mini_roman(number\
    \ - 10)\n  elsif number >= 5\n    'v' + int_to_mini_roman(number - 5)\n  elsif\
    \ number >= 1\n    'i' + int_to_mini_roman(number - 1)\n  end\nend", "  roman\
    \ = \"\"\n  roman = roman + \"c\" * (number / 100)\n  roman = roman + \"l\" *\
    \ (number % 100 / 50)\n  roman = roman + \"x\" * (number % 50 / 10)\n  roman =\
    \ roman + \"v\" * (number % 10 / 5)\n  roman = roman + \"i\" * (number % 5 / 1)\n\
    \  roman\nend", "  chars = {1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix', 10 => 'x',\
    \ 40 => 'xl', 50 => 'l', 90 => 'xc', 100 => 'c', 400 => 'cd', 500 => 'd', 900\
    \ => 'cm', 1000 => 'm'}\n  result = \"\"\n  nums = chars.keys.reverse.select {|n|\
    \ n <= number}\n  nums.each do |n|\n    if n == number\n      result << chars[n]\n\
    \      number -= n\n    else\n      times = number / n\n      result << chars[n]\
    \ * times\n      number -= n * times\n    end\n  end\n  result\nend", "\traise\
    \ ArgumentError, \"Not valid input\" if number < 1 || number > 1000\n\tresult\
    \ = \"\"\n\tresult += \"c\" * (number / 100)\n\tnumber %= 100\n\tresult += \"\
    l\" * (number / 50)\n\tnumber %= 50\n\tresult += \"x\" * (number / 10)\n\tnumber\
    \ %= 10\n\tresult += \"v\" * (number / 5)\n\tnumber %= 5\n\tresult += \"i\" *\
    \ number\n\treturn result\nend", "  digit_values = {\n    1 => 'i',\n    5 =>\
    \ 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n   \
    \ 1000 => 'm'\n  }\n  roman_numeral = ''\n  remaining = number\n  digit_values.keys.reverse.each\
    \ do |divisor|\n    quotient, remaining = remaining.divmod(divisor)\n    next\
    \ if quotient.zero?\n    roman_numeral << if quotient <= 3\n                 \
    \      digit_values[divisor] * quotient\n                     elsif (divisor /\
    \ 10) * 3 < quotient\n                       digit_values[divisor] + digit_values[divisor\
    \ * 10]\n                     else\n                       digit_values[divisor\
    \ * 5] + digit_values[divisor] * (quotient - 5)\n                     end\n  end\n\
    \  roman_numeral\nend", "  # TODO: implement me!\nend", "  converted_string =\
    \ \"\"\n  arabics = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n \
    \ romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"]\n  while number > 0\n    arabics.each_with_index\
    \ do |arabic, index|\n      while number >= arabic\n        converted_string <<\
    \ romans[index]\n        number -= arabic\n      end\n    end\n  end\n  converted_string\n\
    end", "  if (1..1000).include?(number)\n    roman_numeral = \"\"\n    numeral_conversion_hash\
    \ = {\n      1000 => \"m\",\n      900 => \"cm\",\n      500 => \"d\",\n     \
    \ 400 => \"cd\",\n      100 => \"c\",\n      90 => \"xc\",\n      50 => \"l\"\
    ,\n      40 => \"xl\",\n      10 => \"x\",\n      9 => \"ix\",\n      5 => \"\
    v\",\n      4 => \"iv\",\n      1 => \"i\"\n    }\n    until number == 0\n   \
    \   numeral_conversion_hash.each do |value, numeral|\n        if value <= number\n\
    \          roman_numeral << numeral\n          number -= value\n          break\n\
    \        end\n      end\n    end\n    roman_numeral\n  else\n    raise ArgumentError.new(\"\
    Argument must be between 1 and 1000.\")\n  end\nend", "  str = ''\n  numerals\
    \ = [\n    { num:  1, roman: 'i' },\n    { num:  4, roman: 'iv' },\n    { num:\
    \  5, roman: 'v' },\n    { num:  9, roman: 'ix' },\n    { num: 10, roman: 'x'\
    \ },\n    { num: 40, roman: 'xl' },\n    { num: 50, roman: 'l' },\n    { num:\
    \ 90, roman: 'xc' },\n    { num: 100, roman: 'c' },\n    { num: 400, roman: 'cd'\
    \ },\n    { num: 500, roman: 'd' },\n    { num: 900, roman: 'cm' },\n    { num:\
    \ 1000, roman: 'm' }\n  ]\n  numerals.reverse.each do |numeral|\n    while number\
    \ >= numeral[:num]\n      str += numeral[:roman]\n      number -= numeral[:num]\n\
    \    end\n  end\n  str\nend", "    if number <= 1000 && number > 0\n        roman_string\
    \ = \"\"\n        num = number.to_s.chars.map { |i| i.to_i }\n        num.each_with_index\
    \ do |n, i|\n            case i\n            when 0\n                if n == 9\n\
    \                    roman_string << \"i\" << \"x\"\n                elsif n ==\
    \ 4\n                    roman_string << \"i\" << \"v\"\n                else\n\
    \                    roman_string << \"v\" * (n / 5)\n                    roman_string\
    \ << \"i\" * (n % 5)\n                end\n            when 1\n              \
    \  if n == 9\n                    roman_string << \"x\" << \"c\"\n           \
    \     elsif n == 4\n                    roman_string << \"x\" << \"l\"\n     \
    \           else\n                    roman_string << \"l\" * (n / 5)\n      \
    \              roman_string << \"x\" * (n % 5)\n                end\n        \
    \    when 2\n                if n == 9\n                    roman_string << \"\
    c\" << \"m\"\n                elsif n == 4\n                    roman_string <<\
    \ \"c\" << \"d\"\n                else\n                    roman_string << \"\
    d\" * (n / 5)\n                    roman_string << \"c\" * (n % 5)\n         \
    \       end\n            when 3\n                roman_string << \"m\" * n\n \
    \           end\n        end\n        roman_string.downcase\n    else\n      \
    \  raise ArgumentError, \"Your number must be between 1 and 1000\"\n    end\n\
    end", "  answer = \"\"\n  mini_roman_numerals.each do |k, v|\n    while number\
    \ >= k\n      answer << v\n      number -= k\n    end\n  end\n  answer\nend",
  "  raise ArgumentError.new(\"Number should be in range 1..1000\") unless (1..1000).include?(number)\n\
    \  number\n    .to_s\n    .chars\n    .map\n    .with_index { |digit, power| digit.to_i\
    \ * 10**power }\n    .reverse\n    .map { |int| mini_roman_digit(int) }\n    .join\n\
    end", "  # TODO\nend", "  roman_conversion_hash = { 1 => \"i\", 2 => \"ii\", 3\
    \ => \"iii\", 4 => \"iv\", 5 => \"v\", 6 => \"vi\", 7 => \"vii\", 8 => \"viii\"\
    , 9 => \"ix\", 10 => \"x\", 20 => \"xx\", 30 => \"xxx\", 40 => \"xl\", 50 => \"\
    l\", 60 => \"lx\", 70 => \"lxx\", 80 => \"lxxx\", 90 => \"xc\", 100 => \"c\",\
    \ 200 => \"cc\", 300 => \"ccc\", 400 => \"cd\", 500 => \"d\", 600 => \"dc\", 700\
    \ => \"dcc\", 800 => \"dccc\", 900 => \"cm\", 1000 => \"m\" }\n  mini_roman_string\
    \ = \"\"\n  number_as_string = number.to_s\n  number_array = number_as_string.split(\"\
    \")\n  number_array.length.times do |index|\n    index = -(index + 1)\n    if\
    \ number_array[index] == \"0\"\n      next\n    else\n      key = number_array[index].to_i\
    \ * (10 ** index)\n      mini_roman_string = roman_conversion_hash[key] + mini_roman_string\n\
    \    end\n  end\n  mini_roman_string\nend", "  # First, convert to Roman numeral\n\
    \  str = int_to_roman(number)\n  # Then lowercase it\n  str.downcase\nend", " \
    \ # Try it in the browser console.\nend", "  thousands = number / 1000\n  hundreds\
    \ = (number % 1000) / 100\n  tens = (number % 100) / 10\n  ones = number % 10",
  "  # NOTE: This is provided for you, do not modify.\n  digit_vals = [['c', 100],\
    \ ['x', 10], ['i', 1]]", "  # Your code here\nend", "  numeral = ''\n  # Go through\
    \ each digit, working right to left\n  number.to_s.chars.reverse.each_with_index\
    \ do |digit, index|\n    # Get the roman numeral equivalent of the digit\n   \
    \ numeral = ROMAN_DIGITS[index][digit.to_i] + numeral\n  end\n  # Return the numeral\
    \ in lowercase\n  numeral.downcase\nend", "  roman_hash = {1 => \"i\", 5 => \"\
    v\", 10 => \"x\", 50 => \"l\", 100 => \"c\", 500 => \"d\", 1000 => \"m\"}\n  roman_hash.each\
    \ do |key, value|\n    if number == key\n      return value\n    end\n  end\n\
    end", "  [\n    ['m', 1000],\n    ['d', 500],\n    ['c', 100],\n    ['l', 50],\n\
    \    ['x', 10],\n    ['v', 5],\n    ['i', 1]\n  ].inject(\"\") do |memo, pair|\n\
    \    num, roman = pair\n    quotient, number = number.divmod(roman)\n    memo\
    \ + num * quotient\n  end\nend", "  # TODO: Implement me!\nend", "\tif number\
    \ <= 0 or number > 1000\n\t\treturn nil\n\tend\n\troman = {\n\t\t\"I\" => 1,\n\
    \t\t\"V\" => 5,\n\t\t\"X\" => 10,\n\t\t\"L\" => 50,\n\t\t\"C\" => 100,\n\t\t\"\
    D\" => 500,\n\t\t\"M\" => 1000\n\t}\n\toutput = \"\"\n\troman.each do |k, v|\n\
    \t\twhile number >= v\n\t\t\toutput << k\n\t\t\tnumber -= v\n\t\tend\n\tend\n\t\
    return output\nend", "\tthousands = number / 1000\n\thundreds = (number - thousands\
    \ * 1000) / 100\n\ttens = (number - thousands * 1000 - hundreds * 100) / 10\n\t\
    ones = number - thousands * 1000 - hundreds * 100 - tens * 10\n\troman = \"\"\n\
    \tthousands.times { roman += \"m\" }\n\tif hundreds == 9\n\t\troman += \"cm\"\n\
    \telsif hundreds == 4\n\t\troman += \"cd\"\n\telse\n\t\troman += \"d\" * (number\
    \ % 1000 / 500)\n\t\troman += \"c\" * (number % 500 / 100)\n\tend\n\tif tens ==\
    \ 9\n\t\troman += \"xc\"\n\telsif tens == 4\n\t\troman += \"xl\"\n\telse\n\t\t\
    roman += \"l\" * (number % 100 / 50)\n\t\troman += \"x\" * (number % 50 / 10)\n\
    \tend\n\tif ones == 9\n\t\troman += \"ix\"\n\telsif ones == 4\n\t\troman += \"\
    iv\"\n\telse\n\t\troman += \"v\" * (number % 10 / 5)\n\t\troman += \"i\" * (number\
    \ % 5 / 1)\n\tend\n\treturn roman\nend", "  numbers = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]\n  numerals = %w(m cm d cd c xc l xl x ix v iv i)\n\
    \  result = \"\"\n  numbers.each_with_index do |num, i|\n    while number >= num\n\
    \      result << numerals[i]\n      number -= num\n    end\n  end\n  result\n\
    end", "  hash = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n\
    \    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }\n  answer = []\n  hash.each do |key, value|\n\
    \    while number >= key\n      answer << value\n      number -= key\n    end\n\
    \  end\n  answer.join(\"\")\nend", "  i = 1\n  result = \"\"\n  while i <= number\n\
    \    if i == 1000\n      result += \"m\"\n      i += 1000\n    elsif i == 500\n\
    \      result += \"d\"\n      i += 500\n    elsif i == 100\n      result += \"\
    c\"\n      i += 100\n    elsif i == 50\n      result += \"l\"\n      i += 50\n\
    \    elsif i == 10\n      result += \"x\"\n      i += 10\n    elsif i == 5\n \
    \     result += \"v\"\n      i += 5\n    elsif i == 1\n      result += \"i\"\n\
    \      i += 1\n    end\n  end\n  result\nend", "  #program code goes here\nend",
  "    numerals = {\n        \"1\" => \"i\",\n        \"5\" => \"v\",\n        \"\
    10\" => \"x\",\n        \"50\" => \"l\",\n        \"100\" => \"c\",\n        \"\
    500\" => \"d\",\n        \"1000\" => \"m\"\n    }\n    roman_string = \"\"\n \
    \   number_array = number.to_s.split(\"\")\n    number_array.length.times do |i|\n\
    \        num = number_array[i].to_i\n        puts num\n        if num == 4\n \
    \           roman_string += numerals[number_array[i-1].to_s] + numerals[number_array[i].to_s]\n\
    \        elsif num == 9\n            roman_string += numerals[number_array[i-1].to_s]\
    \ + numerals[number_array[i+1].to_s]\n        elsif num > 4\n            while\
    \ num != 5\n                roman_string += numerals[number_array[i-1].to_s]\n\
    \                num -= 1\n            end\n            roman_string += numerals[number_array[i].to_s]\n\
    \        else\n            roman_string += numerals[number_array[i].to_s]\n  \
    \      end\n    end\n    roman_string\nend", "  numeral = \"\"\n  while number\
    \ > 0\n    if number >= 1000\n      numeral += \"m\"\n      number -= 1000\n \
    \   elsif number >= 900\n      numeral += \"cm\"\n      number -= 900\n    elsif\
    \ number >= 500\n      numeral += \"d\"\n      number -= 500\n    elsif number\
    \ >= 400\n      numeral += \"cd\"\n      number -= 400\n    elsif number >= 100\n\
    \      numeral += \"c\"\n      number -= 100\n    elsif number >= 90\n      numeral\
    \ += \"xc\"\n      number -= 90\n    elsif number >= 50\n      numeral += \"l\"\
    \n      number -= 50\n    elsif number >= 40\n      numeral += \"xl\"\n      number\
    \ -= 40\n    elsif number >= 10\n      numeral += \"x\"\n      number -= 10\n\
    \    elsif number >= 9\n      numeral += \"ix\"\n      number -= 9\n    elsif\
    \ number >= 5\n      numeral += \"v\"\n      number -= 5\n    elsif number >=\
    \ 4\n      numeral += \"iv\"\n      number -= 4\n    elsif number >= 1\n     \
    \ numeral += \"i\"\n      number -= 1\n    end\n  end\n  numeral\nend", "  mini_roman_number\
    \ = ''\n  symbols = { 1 => 'i', 5 => 'v', 10 => 'x', 50 => 'l', 100 => 'c', 500\
    \ => 'd', 1000 => 'm' }\n  divisors = [1000, 500, 100, 50, 10, 5, 1]\n  divisors.each\
    \ do |divisor|\n    while number >= divisor\n      if number % divisor == 9\n\
    \        mini_roman_number << symbols[divisor] << symbols[divisor * 10]\n    \
    \    number -= divisor * 9\n      elsif number % divisor == 4\n        mini_roman_number\
    \ << symbols[divisor] << symbols[divisor * 5]\n        number -= divisor * 4\n\
    \      else\n        mini_roman_number << symbols[divisor]\n        number -=\
    \ divisor\n      end\n    end\n  end\n  mini_roman_number\nend", "  raise ArgumentError\
    \ unless number.is_a?(Integer) && number >= 1 && number <= 1000\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  output\
    \ = []\n  roman_numerals.keys.reverse.each do |roman_numeral|\n    if number >=\
    \ roman_numeral\n      number_of_occurrences = number / roman_numeral\n      output.push(roman_numerals[roman_numeral]\
    \ * number_of_occurrences)\n      number -= number_of_occurrences * roman_numeral\n\
    \    end\n  end\n  output.join\nend", "  roman_string = ''\n  numbers = {\n  \
    \  '1' => 'i',\n    '5' => 'v',\n    '10' => 'x',\n    '50' => 'l',\n    '100'\
    \ => 'c',\n    '500' => 'd',\n    '1000' => 'm'\n  }\n  number_string = number.to_s\n\
    \  number_string.reverse.split('').each_with_index do |char, index|\n    if char\
    \ == '1'\n      if index == 0\n        roman_string = numbers[char] + roman_string\n\
    \      elsif index == 1\n        roman_string = numbers[char] + roman_string\n\
    \      elsif index == 2\n        roman_string = numbers[char] + roman_string\n\
    \      elsif index == 3\n        roman_string = numbers[char] + roman_string\n\
    \      end\n    elsif char == '2'\n      if index == 0\n        roman_string =\
    \ numbers[char] + roman_string\n      elsif index == 1\n        roman_string =\
    \ numbers[char] + roman_string\n      elsif index == 2\n        roman_string =\
    \ numbers[char] + roman_string\n      elsif index == 3\n        roman_string =\
    \ numbers[char] + roman_string\n      end\n    elsif char == '3'\n      if index\
    \ == 0\n        roman_string = numbers[char] + roman_string\n      elsif index\
    \ == 1\n        roman_string = numbers[char] + roman_string\n      elsif index\
    \ == 2\n        roman_string = numbers[char] + roman_string\n      elsif index\
    \ == 3\n        roman_string = numbers[char] + roman_string\n      end\n    elsif\
    \ char == '4'\n      if index == 0\n        roman_string = numbers['1'] + numbers['5']\
    \ + roman_string\n      elsif index == 1\n        roman_string = numbers['10']\
    \ + numbers['50'] + roman_string\n      elsif index == 2\n        roman_string",
  "  # code your solution here\nend", "  raise ArgumentError, \"Number must be in\
    \ the range 1..1000\" unless (1..1000).include?(number)\n  number = number.to_s\n\
    \  result = \"\"\n  #  for thousands\n  if number.length > 3\n    result += \"\
    m\" * number[0].to_i\n  end\n  #  for hundreds\n  if number.length > 2\n    if\
    \ number[1] == \"9\"\n      result += \"cm\"\n    elsif number[1] == \"4\"\n \
    \     result += \"cd\"\n    else\n      result += \"d\" * (number[1].to_i / 5)\n\
    \      result += \"c\" * (number[1].to_i % 5)\n    end\n  end\n  #  for tens\n\
    \  if number.length > 1\n    if number[2] == \"9\"\n      result += \"xc\"\n \
    \   elsif number[2] == \"4\"\n      result += \"xl\"\n    else\n      result +=\
    \ \"l\" * (number[2].to_i / 5)\n      result += \"x\" * (number[2].to_i % 5)\n\
    \    end\n  end\n  #  for units\n  if number.length > 0\n    if number[3] == \"\
    9\"\n      result += \"ix\"\n    elsif number[3] == \"4\"\n      result += \"\
    iv\"\n    else\n      result += \"v\" * (number[3].to_i / 5)\n      result +=\
    \ \"i\" * (number[3].to_i % 5)\n    end\n  end\n  result\nend", "  # YOUR CODE\
    \ HERE\nend", "  mini_roman_conversion_array = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n  int_conversion_array\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  result = \"\"\n\
    \  int_conversion_array.each_with_index do |int, index|\n    num_times = number\
    \ / int\n    if num_times > 0\n      result += mini_roman_conversion_array[index]\
    \ * num_times\n      number -= int * num_times\n    end\n  end\n  result\nend",
  "  roman_numeral = ''\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral\
    \ << \"d\" * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 /\
    \ 100)\n  roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"\
    x\" * (number % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral\
    \ << \"i\" * (number % 5 / 1)\n  roman_numeral\nend", "  roman_characters = {\n\
    \    \"I\" => 1,\n    \"V\" => 5,\n    \"X\" => 10,\n    \"L\" => 50,\n    \"\
    C\" => 100,\n    \"D\" => 500,\n    \"M\" => 1000\n  }\n  roman_number = \"\"\n\
    \  while number > 0\n    digit = number % 10\n    if digit == 0\n      roman_number.prepend(\"\
    \")\n    elsif digit == 1\n      roman_number.prepend(\"I\")\n    elsif digit\
    \ == 2\n      roman_number.prepend(\"II\")\n    elsif digit == 3\n      roman_number.prepend(\"\
    III\")\n    elsif digit == 4\n      roman_number.prepend(\"IV\")\n    elsif digit\
    \ == 5\n      roman_number.prepend(\"V\")\n    elsif digit == 6\n      roman_number.prepend(\"\
    VI\")\n    elsif digit == 7\n      roman_number.prepend(\"VII\")\n    elsif digit\
    \ == 8\n      roman_number.prepend(\"VIII\")\n    elsif digit == 9\n      roman_number.prepend(\"\
    IX\")\n    end\n    number = number / 10\n  end\n  return roman_number\nend",
  "  # ...\nend", "  romans = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  roman = ''\n  romans.each_pair do |int, numeral|\n    roman <<\
    \ numeral * (number / int)\n    number = number % int\n  end\n  roman\nend", " \
    \ roman_number = \"\"\n  ROMAN_NUMBERS.each do |arabic, roman|\n    while number\
    \ >= arabic\n      roman_number << roman\n      number -= arabic\n    end\n  end\n\
    \  roman_number\nend", "  'xix'\nend", "  result = \"\"\n  # Numbers from 1 to\
    \ 10 are represented as follows: I, II, III, IV, V, VI, VII, VIII, IX, X.\n  result\
    \ << \"x\" * (number/10)\n  number = number % 10\n  # Numbers from 10 to 50 are\
    \ represented as follows: X, XX, XXX, XL, L, LX, LXX, LXXX, XC, C.\n  result <<\
    \ \"l\" * (number/50)\n  number = number % 50\n  # Numbers from 50 to 100 are\
    \ represented as follows: L, LX, LXX, LXXX, XC, C, CC, CCC, CD, D.\n  result <<\
    \ \"c\" * (number/100)\n  number = number % 100\n  # Numbers from 100 to 500 are\
    \ represented as follows: C, CC, CCC, CD, D, DC, DCC, DCCC, CM, M.\n  result <<\
    \ \"d\" * (number/500)\n  number = number % 500\n  # Numbers from 500 to 1000\
    \ are represented as follows: D, DC, DCC, DCCC, CM, M, MC, MCC, MCD, MD.\n  result\
    \ << \"m\" * (number/1000)\n  number = number % 1000\n  # Number 1000 is represented\
    \ as follows: M\n  result << \"m\" if number == 1000\n  # Number 9 is represented\
    \ as follows: IX\n  result << \"ix\" if number == 9\n  # Number 8 is represented\
    \ as follows: VIII\n  result << \"viii\" if number == 8\n  # Number 7 is represented\
    \ as follows: VII\n  result << \"vii\" if number == 7\n  # Number 6 is represented\
    \ as follows: VI\n  result << \"vi\" if number == 6\n  # Number 5 is represented\
    \ as follows: V\n  result << \"v\" if number == 5\n  # Number 4 is represented\
    \ as follows: IV\n  result << \"iv\" if number == 4\n  # Number 3 is represented\
    \ as follows: III\n  result << \"iii\" if number == 3\n  # Number 2 is represented\
    \ as follows: II\n  result << \"ii\" if number == 2\n  # Number 1 is represented\
    \ as follows: I\n  result << \"i\" if number == 1\n  result\nend", "  # TODO:\
    \ implement me\nend", "  units = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"]\n  tens = [\"\", \"x\", \"xx\", \"xxx\",\
    \ \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n  hundreds = [\"\", \"c\"\
    , \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n  thousands\
    \ = [\"\", \"m\", \"mm\", \"mmm\", \"mv\", \"v\", \"vm\", \"vmm\", \"vmmm\", \"\
    mx\"]\n  thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number\
    \ % 100) / 10] + units[number % 10]\nend", "  roman_numerals = {\n    1000 =>\
    \ \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 =>\
    \ \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"\
    x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }",
  "  # replace me\nend", "  ones = [\n    nil,\n    \"i\",\n    \"ii\",\n    \"iii\"\
    ,\n    \"iv\",\n    \"v\",\n    \"vi\",\n    \"vii\",\n    \"viii\",\n    \"ix\"\
    \n  ]\n  tens = [\n    nil,\n    \"x\",\n    \"xx\",\n    \"xxx\",\n    \"xl\"\
    ,\n    \"l\",\n    \"lx\",\n    \"lxx\",\n    \"lxxx\",\n    \"xc\"\n  ]\n  hundreds\
    \ = [\n    nil,\n    \"c\",\n    \"cc\",\n    \"ccc\",\n    \"cd\",\n    \"d\"\
    ,\n    \"dc\",\n    \"dcc\",\n    \"dccc\",\n    \"cm\"\n  ]\n  thousands = [\n\
    \    nil,\n    \"m\",\n    \"mm\",\n    \"mmm\"\n  ]\n  # Now break it up into\
    \ the number of parts\n  # and then do it by part\n  roman = \"\"\n  thousand,\
    \ hundo, ten, one = number.to_s.rjust(4, \"0\").split(\"\").map(&:to_i)\n  if\
    \ thousand > 0\n    roman += thousands[thousand]\n  end\n  if hundo > 0\n    roman\
    \ += hundreds[hundo]\n  end\n  if ten > 0\n    roman += tens[ten]\n  end\n  if\
    \ one > 0\n    roman += ones[one]\n  end\n  roman\nend", "  response = []\n  roman_numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  roman_mini_symbols\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\
    \  roman_numbers.each_with_index do |item, index|\n    while number >= item\n\
    \      response << roman_mini_symbols[index]\n      number -= item\n    end\n\
    \  end\n  response.join('')\nend", "  result = ''\n  if number > 1000\n    return\
    \ result\n  end\n  roman_numerals = { 1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix',\
    \ 10 => 'x', 40 => 'xl', 50 => 'l', 90 => 'xc', 100 => 'c', 400 => 'cd', 500 =>\
    \ 'd', 900 => 'cm', 1000 => 'm' }\n  roman_numerals.each_key do |i|\n    while\
    \ number >= i\n      result << roman_numerals[i]\n      number -= i\n    end\n\
    \  end\n  result\nend", "  if number >= 1000\n    #should never happen\n    ''\n\
    \  elsif number >= 900\n    'c' + int_to_mini_roman(number - 900)\n  elsif number\
    \ >= 500\n    'd' + int_to_mini_roman(number - 500)\n  elsif number >= 400\n \
    \   'c' + int_to_mini_roman(number - 400)\n  elsif number >= 100\n    'c' + int_to_mini_roman(number\
    \ - 100)\n  elsif number >= 90\n    'xc' + int_to_mini_roman(number - 90)\n  elsif\
    \ number >= 50\n    'l' + int_to_mini_roman(number - 50)\n  elsif number >= 40\n\
    \    'xl' + int_to_mini_roman(number - 40)\n  elsif number >= 10\n    'x' + int_to_mini_roman(number\
    \ - 10)\n  elsif number >= 9\n    'ix' + int_to_mini_roman(number - 9)\n  elsif\
    \ number >= 5\n    'v' + int_to_mini_roman(number - 5)\n  elsif number >= 4\n\
    \    'iv' + int_to_mini_roman(number - 4)\n  elsif number >= 1\n    'i' + int_to_mini_roman(number\
    \ - 1)\n  else\n    ''\n  end\nend", "  @numerals = {\n    1000 => \"m\",\n  \
    \  900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result\
    \ = \"\"\n  while number > 0\n    @numerals.each do |k, v|\n      if number >=\
    \ k\n        result += v\n        number -= k\n        break\n      end\n    end\n\
    \  end\n  result\nend", "  number\nend", "  num = number\n  roman = \"\"\n  roman\
    \ = roman + \"c\" * (num / 100)\n  num = num % 100\n  if num >= 90\n    roman\
    \ = roman + \"xc\"\n    num = num - 90\n  end\n  roman = roman + \"l\" * (num\
    \ / 50)\n  num = num % 50\n  if num >= 40\n    roman = roman + \"xl\"\n    num\
    \ = num - 40\n  end\n  roman = roman + \"x\" * (num / 10)\n  num = num % 10\n\
    \  if num >= 9\n    roman = roman + \"ix\"\n    num = num - 9\n  end\n  roman\
    \ = roman + \"v\" * (num / 5)\n  num = num % 5\n  if num >= 4\n    roman = roman\
    \ + \"iv\"\n    num = num - 4\n  end\n  roman = roman + \"i\" * num\n  return\
    \ roman\nend", "  romans = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = ''\n  romans.each do |value, symbol|\n    result <<\
    \ symbol * (number / value)\n    number = number % value\n  end\n  result\nend",
  "\tresult = \"\"\n\tnumber.times { result += \"i\" }\n\tresult.gsub!(\"iiiii\",\
    \ \"v\")\n\tresult.gsub!(\"iiii\", \"iv\")\n\tresult.gsub!(\"vv\", \"x\")\n\t\
    result.gsub!(\"viv\", \"ix\")\n\tresult.gsub!(\"xxxxxxxxx\", \"l\")\n\tresult.gsub!(\"\
    xxxxxxxx\", \"xl\")\n\tresult.gsub!(\"ll\", \"c\")\n\tresult.gsub!(\"lxl\", \"\
    xc\")\n\tresult.gsub!(\"cccccccccc\", \"d\")\n\tresult.gsub!(\"ccccccccc\", \"\
    cd\")\n\tresult.gsub!(\"dd\", \"m\")\n\tresult.gsub!(\"dcd\", \"cm\")\n\tresult\n\
    end", "  numbers = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n\
    \    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 =>\
    \ 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n\
    \  }\n  result = \"\"\n  numbers.each do |num, letter|\n    while number >= num\n\
    \      result << letter\n      number -= num\n    end\n  end\n  result\nend",
  "  # TODO: implement this method\nend", "  roman_numeral = ''\n  roman_numeral =\
    \ roman_numeral + 'c' * (number / 100)\n  roman_numeral = roman_numeral + 'l'\
    \ * ((number % 100) / 50)\n  roman_numeral = roman_numeral + 'x' * ((number %\
    \ 50) / 10)\n  roman_numeral = roman_numeral + 'v' * ((number % 10) / 5)\n  roman_numeral\
    \ = roman_numeral + 'i' * (number % 5)\n  roman_numeral.gsub!('dcccc', 'cm')\n\
    \  roman_numeral.gsub!('cccc', 'cd')\n  roman_numeral.gsub!('lxxxx', 'xc')\n \
    \ roman_numeral.gsub!('xxxx', 'xl')\n  roman_numeral.gsub!('viiii', 'ix')\n  roman_numeral.gsub!('iiii',\
    \ 'iv')\n  roman_numeral\nend", "  roman = \"\"\n  mini_hash = {\n    1000 =>\
    \ \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 =>\
    \ \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"\
    x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n\
    \  mini_hash.each do |key, val|\n    roman << val * (number / key)\n    number\
    \ = number % key\n  end\n  roman\nend", "  numerals = [\"i\", \"v\", \"x\", \"\
    l\", \"c\", \"d\", \"m\"]\n  numeral_values = [1, 5, 10, 50, 100, 500, 1000]\n\
    \  number_array = number.to_s.split(\"\").map(&:to_i)\n  roman_numerals = []\n\
    \  number_array.each_with_index do |digit, index|\n    if digit == 4\n      first_value\
    \ = numeral_values[index]\n      second_value = numeral_values[index + 1]\n  \
    \    roman_numerals << numerals[index] + numerals[index + 1]\n    elsif digit\
    \ == 9\n      first_value = numeral_values[index]\n      second_value = numeral_values[index\
    \ + 2]\n      roman_numerals << numerals[index] + numerals[index + 2]\n    elsif\
    \ digit == 5\n      roman_numerals << numerals[index + 1]\n    elsif digit < 4\n\
    \      roman_numerals << numerals[index] * digit\n    elsif digit > 5\n      roman_numerals\
    \ << numerals[index + 1] + numerals[index] * (digit - 5)\n    end\n  end\n  roman_numerals.join(\"\
    \").downcase\nend", "  # code goes here\nend", "  #your code here\nend", "  #\
    \ Your code here\nend", "\t# YOUR CODE HERE\nend", "  letters = [[\"m\", 1000],\n\
    \             [\"d\", 500],\n             [\"c\", 100],\n             [\"l\",\
    \ 50],\n             [\"x\", 10],\n             [\"v\", 5],\n             [\"\
    i\", 1]]\n  answer = \"\"\n  letters.each do |letter, value|\n    answer << letter\
    \ * (number / value)\n    number %= value\n  end\n  answer\nend", "  roman_mapping\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }\n  result = \"\"\n  roman_mapping.each do |key, value|\n   \
    \ while number >= key\n      result << value\n      number -= key\n    end\n \
    \ end\n  result\nend", "  # write your code here\nend", "  if number < 0 || number\
    \ > 1000\n    raise ArgumentError, 'positive integers less than 1001 only'\n \
    \ end\n  roman_for_digit = { 1 => 'i', 2 => 'ii', 3 => 'iii', 4 => 'iv', 5 =>\
    \ 'v',\n                      6 => 'vi', 7 => 'vii', 8 => 'viii', 9 => 'ix' }\n\
    \  roman_for_tens = { 1 => 'x', 2 => 'xx', 3 => 'xxx', 4 => 'xl', 5 => 'l',\n\
    \                     6 => 'lx', 7 => 'lxx', 8 => 'lxxx', 9 => 'xc' }\n  roman_for_hundreds\
    \ = { 1 => 'c', 2 => 'cc', 3 => 'ccc', 4 => 'cd', 5 => 'd',\n                \
    \         6 => 'dc', 7 => 'dcc', 8 => 'dccc', 9 => 'cm' }\n  string = ''\n  if\
    \ number > 99\n    hundreds_digit = number / 100\n    string << roman_for_hundreds[hundreds_digit]\n\
    \    number -= hundreds_digit * 100\n  end\n  if number > 9\n    tens_digit =\
    \ number / 10\n    string << roman_for_tens[tens_digit]\n    number -= tens_digit\
    \ * 10\n  end\n  string << roman_for_digit[number]\n  string\nend", "  mini_roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  mini_roman_string\
    \ = \"\"\n  mini_roman_numerals.each do |key, value|\n    mini_roman_string <<\
    \ value * (number / key)\n    number = number % key\n  end\n  mini_roman_string\n\
    end", "  # Your code here\nend", "  # TODO: Your code here\nend", "  x = number\
    \ / 1000\n  number = number % 1000\n  d = number / 500\n  number = number % 500\n\
    \  c = number / 100\n  number = number % 100\n  l = number / 50\n  number = number\
    \ % 50\n  x1 = number / 10\n  number = number % 10\n  v = number / 5\n  number\
    \ = number % 5\n  i = number\n  m = \"m\" * x\n  d1 = \"d\" * d\n  c1 = \"c\"\
    \ * c\n  l1 = \"l\" * l\n  x2 = \"x\" * x1\n  v1 = \"v\" * v\n  i1 = \"i\" * i\n\
    \  roman = m + d1 + c1 + l1 + x2 + v1 + i1\n  roman.downcase\nend\nputs int_to_mini_roman(152)",
  "  roman_equivalent = \"\"\n  symbol_values = { \"m\" => 1000, \"d\" => 500, \"\
    c\" => 100, \"l\" => 50, \"x\" => 10, \"v\" => 5, \"i\" => 1 }\n  symbol_values.each\
    \ do |symbol, value|\n    number_of_symbols = number / value\n    roman_equivalent\
    \ += symbol * number_of_symbols\n    number = number % value\n  end\n  roman_equivalent\n\
    end", "  int_to_roman = { 1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix', 10 => 'x',\n\
    \                                           40 => 'xl', 50 => 'l', 90 => 'xc',\n\
    \                                           100 => 'c', 400 => 'cd', 500 => 'd',\n\
    \                                           900 => 'cm', 1000 => 'm' }\n  result\
    \ = \"\"\n  while number > 0\n    if number < 4\n      result << \"i\" * number\n\
    \      number = 0\n    elsif number < 9\n      result << \"v\" + (\"i\" * (number\
    \ - 5))\n      number = 0\n    elsif number < 19\n      result << \"x\" + (\"\
    i\" * (number - 10))\n      number = 0\n    elsif number < 40\n      result <<\
    \ \"x\" * (number / 10)\n      number = number % 10\n    elsif number < 50\n \
    \     result << \"xl\" + (\"x\" * (number - 40))\n      number = 0\n    elsif\
    \ number < 90\n      result << \"l\" + (\"x\" * (number - 50))\n      number =\
    \ 0\n    elsif number < 100\n      result << \"l\" + (\"x\" * (number - 50))\n\
    \      number = 0\n    elsif number < 400\n      result << \"c\" * (number / 100)\n\
    \      number = number % 100\n    elsif number < 500\n      result << \"cd\" +\
    \ (\"c\" * (number - 400))\n      number = 0\n    elsif number < 900\n      result\
    \ << \"d\" + (\"c\" * (number - 500))\n      number = 0\n    elsif number < 1000\n\
    \      result << \"c\" * (number / 100)\n      number = number % 100\n    else\n\
    \      result << \"m\" + (\"c\" * (number - 900))\n      number = 0\n    end\n\
    \  end\n  result\nend", "  symbols = {\n    'M' => 1000,\n    'D' => 500,\n  \
    \  'C' => 100,\n    'L' => 50,\n    'X' => 10,\n    'V' => 5,\n    'I' => 1\n\
    \  }\n  symbols.keys.reduce(\"\") do |acc, key|\n    val = number / symbols[key]\n\
    \    number -= val * symbols[key]\n    acc << key * val\n  end\nend", "    p =\
    \ Proc.new {|n| ('i' * n).upcase }\n    h = {\n        'I' => 1,\n        'V'\
    \ => 5,\n        'X' => 10,\n        'L' => 50,\n        'C' => 100,\n       \
    \ 'D' => 500,\n        'M' => 1000\n    }\n    # Note that MiniRomanNumerals class\
    \ is defined below.\n    # You'll have to scroll down to find it.\n    MiniRomanNumerals.new(number,\
    \ p, h).to_s\nend", "  roman_numerals = \"ivxlcdm\"\n  result = []\n  numerals\
    \ = number.to_s.reverse.chars.map(&:to_i)\n  numerals.each_with_index do |num,\
    \ idx|\n    case num\n    when 1..3\n      result << roman_numerals[idx * 2] *\
    \ num\n    when 4\n      result << roman_numerals[idx * 2] + roman_numerals[idx\
    \ * 2 + 1]\n    when 5\n      result << roman_numerals[idx * 2 + 1]\n    when\
    \ 6..8\n      result << roman_numerals[idx * 2 + 1] + roman_numerals[idx * 2]\
    \ * (num - 5)\n    when 9\n      result << roman_numerals[idx * 2] + roman_numerals[idx\
    \ * 2 + 2]\n    end\n  end\n  result.reverse.join\nend", "    roman=\"\"\n   \
    \ mini_roman_hash={1000=>\"m\",900=>\"cm\",500=>\"d\",400=>\"cd\",100=>\"c\",90=>\"\
    xc\",50=>\"l\",40=>\"xl\",10=>\"x\",9=>\"ix\",5=>\"v\",4=>\"iv\",1=>\"i\"}\n \
    \   mini_roman_hash.each do |key,value|\n    count=number/key\n    number=number%key\n\
    \    roman=roman+value*count\n    end\n    return roman\nend", "  roman_numerals\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"]\n  decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n  result = \"\"\n  for i in 0..roman_numerals.length - 1\n    while\
    \ number >= decimals[i]\n      result += roman_numerals[i]\n      number -= decimals[i]\n\
    \    end\n  end\n  return result\nend", "  roman_numeral = \"\"\n  return \"m\"\
    \ if number == 1000\n  roman_numeral += \"d\" * (number / 500)\n  roman_numeral\
    \ += \"c\" * ((number % 500) / 100)\n  roman_numeral += \"l\" * ((number % 100)\
    \ / 50)\n  roman_numeral += \"x\" * ((number % 50) / 10)\n  roman_numeral += \"\
    v\" * ((number % 10) / 5)\n  roman_numeral += \"i\" * (number % 5)\n  roman_numeral\n\
    end", "  ROMAN_NUMBERS.each do |roman_number|\n    division, number = number.divmod(roman_number.last)\n\
    \    roman_result << roman_number.first * division\n  end\n  roman_result\nend",
  "  raise NotImplementedError\nend", "  roman_hash = { \"1000\" => \"m\", \"900\"\
    \ => \"cm\", \"500\" => \"d\", \"400\" => \"cd\", \"100\" => \"c\", \"90\" =>\
    \ \"xc\", \"50\" => \"l\", \"40\" => \"xl\", \"10\" => \"x\", \"9\" => \"ix\"\
    , \"5\" => \"v\", \"4\" => \"iv\", \"1\" => \"i\" }\n  if number <= 1000 && number\
    \ >= 1\n    roman_arr = []\n    roman_hash.keys.each do |key|\n      if number\
    \ >= key.to_i\n        num = number / key.to_i\n        roman_arr << roman_hash[key]\
    \ * num\n        number = number % key.to_i\n      end\n    end\n    roman_arr.join\n\
    \  else\n    \"Please enter a number between 1 and 1000.\"\n  end\nend", "  roman_numerals\
    \ = {\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 =>\
    \ 'c',\n    500 => 'd',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |key|\n    if number >= key\n      count = number / key\n      result +=\
    \ roman_numerals[key] * count\n      number = number % key\n    end\n  end\n \
    \ result\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", end, " \
    \ output = []\n  number_string = number.to_s\n  number_length = number_string.length\n\
    \  number_string.split('').each_with_index do |number, index|\n    number = number.to_i\n\
    \    case number_length - index\n    when 1\n      if number < 4\n        number.times\
    \ { output << 'i' }\n      elsif number == 4\n        output << 'iv'\n      elsif\
    \ number > 4 && number < 9\n        (number - 5).times { output << 'i' }\n   \
    \     output << 'v'\n      elsif number == 9\n        output << 'ix'\n      end\n\
    \    when 2\n      if number < 4\n        number.times { output << 'x' }\n   \
    \   elsif number == 4\n        output << 'xl'\n      elsif number > 4 && number\
    \ < 9\n        (number - 5).times { output << 'x' }\n        output << 'l'\n \
    \     elsif number == 9\n        output << 'xc'\n      end\n    when 3\n     \
    \ if number < 4\n        number.times { output << 'c' }\n      elsif number ==\
    \ 4\n        output << 'cd'\n      elsif number > 4 && number < 9\n        (number\
    \ - 5).times { output << 'c' }\n        output << 'd'\n      elsif number == 9\n\
    \        output << 'cm'\n      end\n    when 4\n      number.times { output <<\
    \ 'm' }\n    end\n  end\n  output.join('')\nend", "  roman = []\n  roman_numbers\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }\n  roman_numbers.each do |k, v|\n    while number >= k\n   \
    \   roman << v\n      number -= k\n    end\n  end\n  roman.join(\"\").downcase\n\
    end", "  result = ''\n  while number > 0\n    if number >= 1000\n      result\
    \ += 'm'\n      number -= 1000\n    elsif number >= 900\n      result += 'cm'\n\
    \      number -= 900\n    elsif number >= 500\n      result += 'd'\n      number\
    \ -= 500\n    elsif number >= 400\n      result += 'cd'\n      number -= 400\n\
    \    elsif number >= 100\n      result += 'c'\n      number -= 100\n    elsif\
    \ number >= 90\n      result += 'xc'\n      number -= 90\n    elsif number >=\
    \ 50\n      result += 'l'\n      number -= 50\n    elsif number >= 40\n      result\
    \ += 'xl'\n      number -= 40\n    elsif number >= 10\n      result += 'x'\n \
    \     number -= 10\n    elsif number >= 9\n      result += 'ix'\n      number\
    \ -= 9\n    elsif number >= 5\n      result += 'v'\n      number -= 5\n    elsif\
    \ number >= 4\n      result += 'iv'\n      number -= 4\n    elsif number >= 1\n\
    \      result += 'i'\n      number -= 1\n    end\n  end\n  result\nend", "  number.to_roman.downcase\n\
    end", "  if number < 1 || number > 1000\n    raise ArgumentError, \"input should\
    \ be an integer between 1 and 1000, inclusive\"\n  end", "    # Get each digit\
    \ of the number using modulo\n    # Get the roman numeral equivalent of each digit\n\
    \    # Append the roman numeral to the string\n    # Return the string\n    str\
    \ = \"\"\n    length = number.to_s.length\n    for i in 1..length\n        digit\
    \ = number % 10\n        digit = digit_to_mini_roman(digit)\n        str = digit\
    \ + str\n        number = number / 10\n    end\n    return str\nend", "  final_string\
    \ = \"\"\n  num_hash = { 1 => \"i\", 2 => \"ii\", 3 => \"iii\", 4 => \"iv\", 5\
    \ => \"v\", 6 => \"vi\", 7 => \"vii\", 8 => \"viii\", 9 => \"ix\", 10 => \"x\"\
    , 20 => \"xx\", 30 => \"xxx\", 40 => \"xl\", 50 => \"l\", 60 => \"lx\", 70 =>\
    \ \"lxx\", 80 => \"lxxx\", 90 => \"xc\", 100 => \"c\", 200 => \"cc\", 300 => \"\
    ccc\", 400 => \"cd\", 500 => \"d\", 600 => \"dc\", 700 => \"dcc\", 800 => \"dccc\"\
    , 900 => \"cm\", 1000 => \"m\" }\n  if number <= 10\n    final_string = num_hash[number]\n\
    \  elsif number <= 100\n    tens = number.to_s[0].to_i * 10\n    ones = number.to_s[1].to_i\n\
    \    final_string = num_hash[tens] + num_hash[ones]\n  elsif number <= 1000\n\
    \    hundreds = number.to_s[0].to_i * 100\n    tens = number.to_s[1].to_i * 10\n\
    \    ones = number.to_s[2].to_i\n    final_string = num_hash[hundreds] + num_hash[tens]\
    \ + num_hash[ones]\n  end\n  final_string\nend", "  roman_numeral = \"\"\n  digits\
    \ = number.to_s.chars.map(&:to_i)\n  digit_index = digits.length - 1\n  thousands\
    \ = digits[0]\n  hundreds = digits[1]\n  tens = digits[2]\n  ones = digits[3]",
  "  roman = \"\"\n  roman = roman + \"c\" * (number / 100)\n  roman = roman + \"\
    l\" * (number % 100 / 50)\n  roman = roman + \"x\" * (number % 50 / 10)\n  roman\
    \ = roman + \"v\" * (number % 10 / 5)\n  roman = roman + \"i\" * (number % 5 /\
    \ 1)\n  return roman\nend", "  roman_numeral = \"\"\n  mini_roman_numerals = {\
    \ 1 => \"i\",\n                          4 => \"iv\",\n                      \
    \    5 => \"v\",\n                          9 => \"ix\",\n                   \
    \       10 => \"x\",\n                          40 => \"xl\",\n              \
    \            50 => \"l\",\n                          90 => \"xc\",\n         \
    \                 100 => \"c\",\n                          400 => \"cd\",\n  \
    \                        500 => \"d\",\n                          900 => \"cm\"\
    ,\n                          1000 => \"m\" }\n  mini_roman_numerals.keys.reverse.each\
    \ do |key|\n    while number >= key\n      roman_numeral << mini_roman_numerals[key]\n\
    \      number -= key\n    end\n  end\n  roman_numeral\nend", "  hundred_s = \"\
    c\" * (number / 100)\n  fifty_s = \"l\" * ((number - (number / 100) * 100) / 50)\n\
    \  ten_s = \"x\" * ((number - (number / 100) * 100 - (number / 50) * 50) / 10)\n\
    \  five_s = \"v\" * ((number - (number / 100) * 100 - (number / 50) * 50 - (number\
    \ / 10) * 10) / 5)\n  one_s = \"i\" * (number - (number / 100) * 100 - (number\
    \ / 50) * 50 - (number / 10) * 10 - (number / 5) * 5)\n  hundred_s + fifty_s +\
    \ ten_s + five_s + one_s\nend", "\treturn nil if number <= 0 || number > 1000\n\
    \t\n\tresult = \"\"\n\t\n\tthousands_digit = number/1000\n\tresult << \"m\" *\
    \ thousands_digit\n\t\n\thundreds_digit = (number%1000)/100\n\thundreds_digit\
    \ = 4 if hundreds_digit == 9\n\tresult << \"cm\" if hundreds_digit == 9\n\tresult\
    \ << \"d\" if hundreds_digit == 5\n\tresult << \"d\" << \"c\" * (hundreds_digit-5)\
    \ if hundreds_digit > 5\n\tresult << \"c\" * hundreds_digit if hundreds_digit\
    \ < 5\n\t\n\ttens_digit = (number%100)/10\n\ttens_digit = 4 if tens_digit == 9\n\
    \tresult << \"xc\" if tens_digit == 9\n\tresult << \"l\" if tens_digit == 5\n\t\
    result << \"l\" << \"x\" * (tens_digit-5) if tens_digit > 5\n\tresult << \"x\"\
    \ * tens_digit if tens_digit < 5\n\t\n\tones_digit = number%10\n\tones_digit =\
    \ 4 if ones_digit == 9\n\tresult << \"ix\" if ones_digit == 9\n\tresult << \"\
    v\" if ones_digit == 5\n\tresult << \"v\" << \"i\" * (ones_digit-5) if ones_digit\
    \ > 5\n\tresult << \"i\" * ones_digit if ones_digit < 5\n\t\n\tresult\nend", "\t\
    roman_numerals = { \n\t\t1000 => \"m\",\n\t\t900 => \"cm\",\n\t\t500 => \"d\"\
    ,\n\t\t400 => \"cd\",\n\t\t100 => \"c\",\n\t\t90 => \"xc\",\n\t\t50 => \"l\",\n\
    \t\t40 => \"xl\",\n\t\t10 => \"x\",\n\t\t9 => \"ix\",\n\t\t5 => \"v\",\n\t\t4\
    \ => \"iv\",\n\t\t1 => \"i\"\n\t}\n\tresult = \"\"\n\troman_numerals.each do |key,\
    \ value|\n\t\tresult << value * (number / key)\n\t\tnumber = number % key\n\t\
    end\n\tresult\nend", "  # your code here\nend", "  # Fill in code here\nend",
  "  roman = \"\"\n  while number > 0\n    if number >= 1000\n      number -= 1000\n\
    \      roman += \"m\"\n    elsif number >= 900\n      number -= 900\n      roman\
    \ += \"cm\"\n    elsif number >= 500\n      number -= 500\n      roman += \"d\"\
    \n    elsif number >= 400\n      number -= 400\n      roman += \"cd\"\n    elsif\
    \ number >= 100\n      number -= 100\n      roman += \"c\"\n    elsif number >=\
    \ 90\n      number -= 90\n      roman += \"xc\"\n    elsif number >= 50\n    \
    \  number -= 50\n      roman += \"l\"\n    elsif number >= 40\n      number -=\
    \ 40\n      roman += \"xl\"\n    elsif number >= 10\n      number -= 10\n    \
    \  roman += \"x\"\n    elsif number >= 9\n      number -= 9\n      roman += \"\
    ix\"\n    elsif number >= 5\n      number -= 5\n      roman += \"v\"\n    elsif\
    \ number >= 4\n      number -= 4\n      roman += \"iv\"\n    elsif number >= 1\n\
    \      number -= 1\n      roman += \"i\"\n    end\n  end\n  roman\nend", "  #Convert\
    \ number to roman numeral\n  str = \"\"\n  while number > 0\n    if number < 4\n\
    \      str << \"i\" * number\n      number = 0\n    elsif number == 4\n      str\
    \ << \"iv\"\n      number = 0\n    elsif number < 9\n      str << \"v\"\n    \
    \  number -= 5\n    elsif number == 9\n      str << \"ix\"\n      number = 0\n\
    \    elsif number < 40\n      str << \"x\" * (number / 10)\n      number %= 10\n\
    \    elsif number < 50\n      str << \"xl\"\n      number -= 40\n    elsif number\
    \ < 90\n      str << \"l\"\n      number -= 50\n    elsif number < 100\n     \
    \ str << \"xc\"\n      number -= 90\n    elsif number < 400\n      str << \"c\"\
    \ * (number / 100)\n      number %= 100\n    elsif number < 500\n      str <<\
    \ \"cd\"\n      number -= 400\n    elsif number < 900\n      str << \"d\"\n  \
    \    number -= 500\n    elsif number < 1000\n      str << \"cm\"\n      number\
    \ -= 900\n    elsif number == 1000\n      str << \"m\"\n      number = 0\n   \
    \ end\n  end\n  return str\nend", "  roman_numerals = ''\n  while number > 0\n\
    \    if number == 1000\n      roman_numerals << 'm'\n      number -= 1000\n  \
    \  elsif number == 900\n      roman_numerals << 'cm'\n      number -= 900\n  \
    \  elsif number == 500\n      roman_numerals << 'd'\n      number -= 500\n   \
    \ elsif number == 400\n      roman_numerals << 'cd'\n      number -= 400\n   \
    \ elsif number == 100\n      roman_numerals << 'c'\n      number -= 100\n    elsif\
    \ number == 90\n      roman_numerals << 'xc'\n      number -= 90\n    elsif number\
    \ == 50\n      roman_numerals << 'l'\n      number -= 50\n    elsif number ==\
    \ 40\n      roman_numerals << 'xl'\n      number -= 40\n    elsif number == 10\n\
    \      roman_numerals << 'x'\n      number -= 10\n    elsif number == 9\n    \
    \  roman_numerals << 'ix'\n      number -= 9\n    elsif number == 5\n      roman_numerals\
    \ << 'v'\n      number -= 5\n    elsif number == 4\n      roman_numerals << 'iv'\n\
    \      number -= 4\n    elsif number == 1\n      roman_numerals << 'i'\n     \
    \ number -= 1\n    end\n  end\n  roman_numerals\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
