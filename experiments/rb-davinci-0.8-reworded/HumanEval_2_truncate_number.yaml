name: HumanEval_2_truncate_number
language: rb
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n\
  \    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n\
  \    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n\
  \  end\nend\n"
completions: ["  return 0.0 if number.to_i == number\n  number.abs - number.to_i.abs\n\
    end", "  # MATHEMATICAL SOLUTION\n  # str_number = number.to_s\n  # str_number[str_number.index('.')..-1].to_f",
  "  number.to_i - number\nend", "  return number - number.to_i\nend", "  number.to_i\n\
    end", "  number % 1\nend", "  return 0\nend", "  # TODO: Implement this method.\n\
    end", "  # number.to_i.to_f\n  # number - number.to_i\n  number % 1\nend", " \
    \ (number - number.to_i).round(2)\nend", "  number.divmod(1).last\nend", "  [number.floor,\
    \ number - number.floor]\nend", "  # TODO: implement me\nend", "  return 0 if\
    \ number.nil?\n  return 0 if number == 0", "  # your code here\nend", "  if number\
    \ >= 0\n    number - number.floor\n  else\n    number.abs - number.abs.floor\n\
    \  end\nend", "  number.to_i.to_f\nend", end, "  # ...\nend", "  number.to_i ==\
    \ number ? 0 : number - number.to_i\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
