name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2,\
  \ 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3,\
  \ 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5,\
  \ 3)\n# false\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: ["  Math.log(x, n) % 1 == 0\nend", "  x == n**Math.log(x, n).round\n\
    end", "  return x == n**Math.log2(x).to_i\nend", "  Math.log(x, n) % 1 == 0\n\
    end", "  p n**(Math.log(x)/Math.log(n))\n  p n**(Math.log(x)/Math.log(n)).round",
  "  return false if n.zero?\n  (Math.log(x)/Math.log(n)).round == (Math.log(x)/Math.log(n))\n\
    end", "\tx = x.to_f\n\tn = n.to_f\n\tMath.log(x) / Math.log(n) == Math.log(x)\
    \ / Math.log(n).to_i\nend", "  #your code here\nend", "  #Math.log(x, n) % 1 ==\
    \ 0\n  x == n**Math.log(x, n)\nend", "  if x != 1 && n != 1\n    x == n**(Math.log(x)/Math.log(n)).to_i\n\
    \  elsif x == 1 && n != 1\n    x == n**(Math.log(x)/Math.log(n)).to_i\n  elsif\
    \ x != 1 && n == 1\n    x == n**(Math.log(x)/Math.log(n)).to_i\n  else\n    x\
    \ == n**(Math.log(x)/Math.log(n)).to_i\n  end\nend", "    return true if x ==\
    \ n**(Math.log(x)/Math.log(n)).to_i\n    false\nend", "  x = Math.log(x, n)\n\
    \  x == x.to_i\nend", "  (n**(Math.log(x)/Math.log(n))).to_i == x\nend", "  (1..x).any?\
    \ { |i| n**i == x }\nend", "  Math.log(x, n) % 1 == 0\nend", "  # your code here\n\
    end", "  x == n**Math.log(x, n).to_i\nend", "  (1..100).each do |i|\n    return\
    \ true if n**i == x\n  end\n  false\nend", "  (Math.log(x) / Math.log(n)).to_i\
    \ == (Math.log(x) / Math.log(n))\nend", "  Math.log10(x) / Math.log10(n) % 1 ==\
    \ 0\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
