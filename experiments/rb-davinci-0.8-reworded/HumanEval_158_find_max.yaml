name: HumanEval_158_find_max
language: rb
prompt: "# Write a function that accepts an array of strings.\n# The array contains\
  \ different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> find_max.call([\"name\", \"\
  of\", \"string\"])\n# \"string\"\n# >>> find_max.call([\"name\", \"enam\", \"game\"\
  ])\n# \"enam\"\n# >>> find_max.call([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\
  \ndef find_max(words)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
  \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
  name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
  , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
  , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
  ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"\
  are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
  this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"\
  ]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
  \  end\nend\n"
completions: ["  words.select { |word| word.chars.uniq.size == words.map { |w| w.chars.uniq.size\
    \ }.max }.sort.first\nend", "  max_uniq_count = nil\n  max_uniq_word = nil\n \
    \ words.each do |word|\n    uniq_count = word.split('').uniq.count\n    if max_uniq_count.nil?\n\
    \      max_uniq_count = uniq_count\n      max_uniq_word = word\n    elsif uniq_count\
    \ > max_uniq_count\n      max_uniq_count = uniq_count\n      max_uniq_word = word\n\
    \    elsif uniq_count == max_uniq_count\n      max_uniq_word = word if word <\
    \ max_uniq_word\n    end\n  end\n  max_uniq_word\nend", "  words.max { |a, b|\
    \ max_unique_chars(a) <=> max_unique_chars(b) }\nend", "\t# write your code here\n\
    end", "  words.max_by{|word| word.chars.uniq.count}\nend", "  arr_of_word_hash\
    \ = words.map do |word|\n    word_hash = Hash.new(0)\n    word.chars.each do |char|\n\
    \      word_hash[char] += 1\n    end\n    word_hash\n  end\n  max_unique_chars\
    \ = arr_of_word_hash.max_by { |el| el.length }.length\n  words.select { |word|\
    \ word.chars.uniq.length == max_unique_chars }.min\nend", "  lexicographic_index_of_max_unique_characters_word(words)\
    \ || words.first\nend", "  word_hash = Hash.new()\n  words.each { |word| word_hash[word]\
    \ = word.chars.uniq.count }\n  word_hash.key(word_hash.values.max)\nend", "  uniques\
    \ = words.map { |word| word.chars.uniq.size }\n  words[uniques.index(uniques.max)]\n\
    end\np find_max([\"name\", \"of\", \"string\"])\np find_max([\"name\", \"enam\"\
    , \"game\"])\np find_max([\"aaaaaaa\", \"bb\", \"cc\"])", "\tmax_count = 0\n\t\
    max_word = \"\"\n\twords.each do |word|\n\t\tcount = 0\n\t\tword.split(\"\").each\
    \ do |ch|\n\t\t\tcount += 1 if word.count(ch) == 1\n\t\tend\n\t\tif count > max_count\n\
    \t\t\tmax_count = count\n\t\t\tmax_word = word\n\t\telsif count == max_count\n\
    \t\t\tmax_word = word if word < max_word\n\t\tend\n\tend\n\tmax_word\nend", " \
    \ words.map { |word| [word, word.chars.uniq.size] }.max_by { |word, count| count\
    \ }.first\nend", "  # TODO: implement this function\nend", "  chars = []\n  unique_chars\
    \ = []\n  unique_char_count = []\n  index = 0\n  word_index = 0\n  words.each\
    \ do |word|\n    chars[index] = word.split('')\n    unique_chars[index] = chars[index].uniq\n\
    \    unique_char_count[index] = unique_chars[index].count\n    index += 1\n  end\n\
    \  max_count = unique_char_count.max\n  count_index = 0\n  unique_char_count.each\
    \ do |count|\n    if count == max_count\n      word_index = count_index\n    \
    \  break\n    end\n    count_index += 1\n  end\n  words[word_index]\nend", " \
    \ max_str = words.max_by { |word| word.chars.uniq.size }\n  words.index(max_str)\
    \ < words.index(words.min) ? words.min : max_str\nend", "  sorted_by_unique_chars\
    \ = words.sort_by { |word| word.chars.uniq.size }\n  sorted_by_unique_chars.last\n\
    end", "  words.max { |a, b| a.chars.uniq.count <=> b.chars.uniq.count }\nend",
  "  max_word = \"\"\n  max_unique_chars = 0\n  words.each do |word|\n    if max_unique_chars\
    \ < word.chars.uniq.count\n      max_unique_chars = word.chars.uniq.count\n  \
    \    max_word = word\n    end\n  end\n  max_word\nend", "  # TODO\nend", "  #\
    \ Your code here\nend", "    # TODO: Implement me\nend", "  # return the word\
    \ with maximum number of unique characters\n  # if multiple strings have maximum\
    \ number of unique characters,\n  # return the one which comes first in lexicographical\
    \ order\n  #\n  # input: array of strings\n  # output: string\n  #\n  # unique\
    \ characters are the number of distinct letters in the word\n  # lexicographical\
    \ order is how you would alphabetize strings\n  #\n  # use the Enumerable#reduce\
    \ method to compare each word to the\n  # previous word, selecting the word with\
    \ the most unique characters\n  # when compared to the previous word.\n  #\n \
    \ # then, return the first word if that's the one with the most unique\n  # characters.\n\
    \  #\n  # sort the array, then compare the first word to the second word. If the\n\
    \  # number of characters in the first word is greater than the second word,\n\
    \  # then return the first word. Otherwise, return the second word.\n  #\n  #\
    \ You need to compare the words in alphabetical order, so you will have to\n \
    \ # sort the array.\n  #\n  # There are many ways to compare the unique characters\
    \ in a word.\n  #\n  # First:\n  #   compare the two words by looking at each\
    \ character in the word and\n  #   counting the number of characters that are\
    \ in the second word.\n  #   if the count of the number of characters in the second\
    \ word is greater\n  #   than 0, then subtract one from the count.\n  #   if the\
    \ count of the number of characters in the second word is zero,\n  #   then add\
    \ that character to a new array, which will represent the unique\n  #   characters\
    \ in the first word.\n  #\n  # Second:\n  #   compare the two words by looking\
    \ at each character in the word and\n  #   checking to see if it exists in the\
    \ second word.\n  #   if the character exists in the second word, then do nothing.\n\
    \  #   if the character does not exist in the second word, then add that\n  #\
    \   character to a new array, which will represent the unique characters\n  #\
    \   in the first word.\n  #\n  # Third:\n  #   compare the two words by putting\
    \ the characters in the second word\n  #   into a hash,", "  words.max_by { |word|\
    \ word.chars.uniq.count }\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    count\
    \ = word.chars.uniq.count\n    if count > max_count\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  words.max_by do |word|\n\
    \    word.chars.uniq.size\n  end\nend", "  max_word = nil\n  max_unique_chars\
    \ = 0\n  words.each do |word|\n    chars = word.split('')\n    unique_chars =\
    \ chars.uniq.length\n    if unique_chars > max_unique_chars\n      max_unique_chars\
    \ = unique_chars\n      max_word = word\n    end\n  end\n  max_word\nend", " \
    \ find_max_helper(words).first\nend", "  # your code here\nend", "  words.max_by\
    \ { |word| word.chars.uniq.count }\nend", "  max_len = 0\n  max_word = \"\"\n\
    \  words.each do |word|\n    if word.length > max_len\n      max_len = word.length\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  words.map { |word|\
    \ [word, word.chars.uniq.count] }.max_by(&:last).first\nend", "  max_word = nil\n\
    \  max_count = 0\n  words.each do |word|\n    if word.chars.uniq.count > max_count\n\
    \      max_word = word\n      max_count = word.chars.uniq.count\n    end\n  end\n\
    \  max_word\nend", "  words.sort_by! { |word| word.length }.reverse!\n  words.find\
    \ do |word|\n    word.chars.uniq.length == word.length\n  end\nend", "  max_value\
    \ = 0\n  words.each do |word|\n    if word.length > max_value\n      max_value\
    \ = word.length\n    end\n  end\n  words.sort! do |a, b|\n    a.length <=> b.length\n\
    \  end\n  words.each do |word|\n    if word.length == max_value\n      return\
    \ word\n    end\n  end\nend", "  words.max_by do |word|\n    word.split('').uniq.count\n\
    \  end\nend", "  max_word = words.first\n  max_length = words.first.length\n \
    \ words.each do |word|\n    if word.length > max_length\n      max_word = word\n\
    \      max_length = word.length\n    end\n  end\n  max_word\nend", "  # words.max_by{|word|\
    \ word.chars.uniq.count}\n  words.max_by{|word| word.length}\nend", "  words.max_by\
    \ { |word| word.chars.uniq.count }\nend", "  max_word = \"\"\n  max_count = 0\n\
    \  words.each do |word|\n    if word.length > max_count\n      max_count = word.length\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  max_word_length =\
    \ 0\n  max_word = nil\n  words.each do |word|\n    unique_chars = word.split('').uniq.length\n\
    \    if unique_chars > max_word_length\n      max_word_length = unique_chars\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  words.max_by do |word|\n\
    \    word.split('').uniq.count\n  end\nend", "  max_word = \"\"\n  max_count =\
    \ 0\n  words.each do |word|\n    if max_count < (word.split(\"\").uniq.length)\n\
    \      max_count = word.split(\"\").uniq.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend", "  words.max_by { |x| x.split('').uniq.length }\nend",
  "  if words.size == 1\n    words[0]\n  else\n    current_length = words[0].size\n\
    \    max_length = words[0].size\n    max_word = words[0]\n    for word in words\n\
    \      current_length = word.size\n      if max_length < current_length\n    \
    \    max_length = current_length\n        max_word = word\n      end\n    end\n\
    \    max_word\n  end\nend", "  words.sort.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  words.max_by { |word| word.size - word.chars.uniq.size }\nend",
  "  # TODO: write code here\nend", "  max_word = words.first\n  max_unique_chars\
    \ = max_word.chars.uniq.count\n  words.each do |word|\n    unique_chars = word.chars.uniq.count\n\
    \    if unique_chars > max_unique_chars\n      max_word = word\n      max_unique_chars\
    \ = unique_chars\n    end\n  end\n  max_word\nend", "  chars = words.map { |word|\
    \ word.chars.uniq }\n  chars.max_by { |char| char.size }.join\nend", "  # Your\
    \ code goes here\nend", "  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n\
    \    chars = word.split(\"\")\n    count = chars.uniq.count\n    if count > max_count\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  max_word = words.max_by do |word|\n    # use the set method to remove\
    \ duplicates\n    word.chars.to_set.size\n  end\n  max_word\nend", "\twords.sort_by\
    \ { |word| [word.split('').uniq.count, word] }.last\nend", "  words.sort_by {\
    \ |word| [word.chars.uniq.count, word] }.last\nend", "  max_unique_count = words.map\
    \ { |w| w.chars.uniq.count }.max\n  words.find { |w| w.chars.uniq.count == max_unique_count\
    \ }\nend", "  words.max_by { |word| word.chars.uniq.count }\nend", "  return words.max_by{|w|\
    \ w.chars.uniq.size}\nend", "  unique_char_map = Hash.new { |h, k| h[k] = [] }\n\
    \  words.each do |word|\n    unique_char_map[word.split('').uniq.count] << word\n\
    \  end\n  unique_char_map[unique_char_map.keys.max].sort.first\nend", "  unique_chars\
    \ = words.map do |word|\n    word.chars.uniq.size\n  end\n  words[unique_chars.index(unique_chars.max)]\n\
    end", "  return words.sort_by { |s| [s.split('').uniq.length, s] }.last\nend",
  "  # your code here\nend", "    count_hash = Hash.new\n    max_count = 1\n    count_hash[words[0]]\
    \ = 1\n    max_element = words[0]\n    words.each do |word|\n        if count_hash[word]\n\
    \            next\n        else\n            uniq_char_count = find_uniq_char_count(word)\n\
    \            count_hash[word] = uniq_char_count\n            if uniq_char_count\
    \ > max_count\n                max_count = uniq_char_count\n                max_element\
    \ = word\n            end\n        end\n    end\n    return max_element\nend",
  "  max_words = words.select { |word| word.chars.uniq.length == words.max_by(&:length).chars.uniq.length\
    \ }\n  max_words.min\nend", "  puts words.map{|w| w.chars.uniq.length}.zip(words).max[1]\n\
    end", "  unique_letters = words.map { |word| word.chars.uniq.count }\n  max_uniq\
    \ = unique_letters.max\n  words[unique_letters.index(max_uniq)]\nend", end, "\t\
    words.max_by{|s|s.chars.uniq.size}\nend\nputs \"finding maximum unique charactered\
    \ words\"\nputs find_max([\"name\", \"of\", \"string\"])\nputs find_max([\"name\"\
    , \"enam\", \"game\"])\nputs find_max([\"aaaaaaa\", \"bb\", \"cc\"])", "  max_unique_chars\
    \ = words.map { |word| word.chars.uniq.count }.max\n  words.select { |word| word.chars.uniq.count\
    \ == max_unique_chars }.first\nend", "  words.max_by { |w| w.chars.uniq.count\
    \ }\nend", "  best_word = words.max_by do |word|\n    word.split('').uniq.length\n\
    \  end\n  best_word\nend", "  a = Hash.new(0)\n  words.each do |word|\n    word.each_char\
    \ { |char| a[char] += 1 }\n  end\n  max = a.max_by { |k, v| v }\n  max_key = max[0]\n\
    \  max_value = max[1]\n  max_words = []\n  a.each do |k, v|\n    if v == max_value\n\
    \      max_words << k\n    end\n  end\n  words.select { |word| word.include?(max_words.sort[0])\
    \ }.first\nend", "    words.max_by { |word| word.chars.uniq.count }\nend", " \
    \ words.sort_by do |word|\n    [word.chars.uniq.size, word]\n  end.last\nend",
  "  words.max_by do |word|\n    word.chars.uniq.count\n  end\nend", "  max_length\
    \ = 0\n  max_word = \"\"\n  words.each do |word|\n    if word.length > max_length\n\
    \      max_length = word.length\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  # yep\nend", "  return words.max_by{|x| x.chars.uniq.length}\nend", " \
    \ max_word = words.first\n  max_count = count_unique_characters(max_word)\n  words.each\
    \ do |word|\n    char_count = count_unique_characters(word)\n    if char_count\
    \ > max_count\n      max_word = word\n      max_count = char_count\n    end\n\
    \  end\n  max_word\nend", "  # sort by number of unique characters, then by\n\
    \  # lexicographical order\n  words.sort_by { |word| [word.chars.uniq.size, word]\
    \ }.last\nend", "  h = Hash.new(0)\n  words.each do |word|\n    word.chars.each\
    \ do |char|\n      h[char] += 1\n    end\n  end\n  max_length = 0\n  max_word\
    \ = \"\"\n  words.each do |word|\n    unique_chars = word.chars.uniq.length\n\
    \    if unique_chars > max_length\n      max_length = unique_chars\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend\np find_max([\"name\", \"of\", \"string\"\
    ]) #\"string\"\np find_max([\"name\", \"enam\", \"game\"]) #\"enam\"\np find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]) #\"aaaaaaa\"\np find_max([\"aaaaaaa\", \"bb\", \"\
    cc\", \"aa\"]) #\"aa\"", "  words.max { |a, b| a.chars.to_a.uniq.length <=> b.chars.to_a.uniq.length\
    \ }\nend", "  max_char = \"\"\n  max_word = words[0]\n  words.each do |word|\n\
    \    uniq_char = word.split(\"\").uniq.join(\"\")\n    if uniq_char.length > max_char.length\n\
    \      max_char = uniq_char\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  max_word = ''\n  max_count = 0\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend", "  result = \"\"\n  result_unique_chars = 0\n\
    \  words.each do |word|\n    if word.chars.uniq.length > result_unique_chars\n\
    \      result = word\n      result_unique_chars = word.chars.uniq.length\n   \
    \ end\n  end\n  result\nend", "  # YOUR CODE HERE\nend", "    uniq_chars = words.map\
    \ { |word| count_uniq_chars(word) }\n    max_uniq_chars = uniq_chars.max\n   \
    \ max_uniq_word = words[uniq_chars.index(max_uniq_chars)]\n    return max_uniq_word\n\
    end", "  max_char = words.max_by do |word|\n    word.split('').uniq.length\n \
    \ end\n  words.index(max_char) == 0 ? words[0] : max_char\nend", "  words.sort_by\
    \ { |word| word.length }.max\nend", "  max_word = words.max_by { |word| word.split('').uniq.size\
    \ }\n  max_word\nend", "  words.max_by { |word| word.chars.uniq.size }\nend",
  "  max_unique_char_count = 0\n  words.each do |word|\n    unique_char_count = word.chars.uniq.count\n\
    \    if unique_char_count > max_unique_char_count\n      max_unique_char_count\
    \ = unique_char_count\n    end\n  end\n  result = nil\n  words.each do |word|\n\
    \    if word.chars.uniq.count == max_unique_char_count\n      result = word\n\
    \      break\n    end\n  end\n  result\nend", "  words.select { |word| word.length\
    \ == words.map(&:length).max }.min\nend", "  words.reduce { |max, word| max.length\
    \ == word.length ? (max < word ? max : word) : (max.length > word.length ? max\
    \ : word) }\nend", "  words.max_by { |w| w.chars.uniq.count }\nend", "  max_len\
    \ = 0\n  max_word = \"\"\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > max_len\n      max_len = word.chars.uniq.length\n      max_word = word\n \
    \   end\n  end\n  max_word\nend", "  best_word = words.first\n  max_unique_letters\
    \ = best_word.split('').uniq.count\n  words.each do |word|\n    unique_letters\
    \ = word.split('').uniq.count\n    if unique_letters > max_unique_letters\n  \
    \    best_word = word\n      max_unique_letters = unique_letters\n    end\n  end\n\
    \  best_word\nend", "  words.max_by { |word| word.chars.uniq.size }\nend", " \
    \ words.max { |a, b| a.chars.uniq.length <=> b.chars.uniq.length }\nend", "  words.map\
    \ { |word| [word, word.split('').uniq.length] }.max_by { |word| word[1] }[0]\n\
    end", "  words.max_by{|word| word.chars.uniq.count}\nend", "    # TODO: Implement\
    \ this method.\n    words.max_by { |word| word.chars.uniq.count }\nend", "  current_max\
    \ = \"\"\n  words.each do |word|\n    unique_chars = word.chars.uniq\n    if unique_chars.count\
    \ > current_max.chars.uniq.count\n      current_max = word\n    end\n  end\n \
    \ current_max\nend", "  words.reduce do |max, word|\n    max_unique_chars = max.chars.uniq.count\n\
    \    word_unique_chars = word.chars.uniq.count\n    max_unique_chars == word_unique_chars\
    \ ?\n      [max, word].min :\n      [max, word].max { |w| w.chars.uniq.count }\n\
    \  end\nend", "  words.map { |word| [word, word.chars.uniq.size] }.sort_by { |word,\
    \ len| [-len, word] }.first.first\nend", "  word = words.first\n  word.size.times\
    \ do |index|\n    word_index = words.index(word)\n    if word.size - word.split('').uniq.size\
    \ == index\n      return word\n    else\n      word = words[word_index + 1]\n\
    \    end\n  end\nend", "  words.sort_by{|word| [word.chars.uniq.count, word]}.last\n\
    end", "  best_word = words.first\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > best_word.chars.uniq.length\n      best_word = word\n    end\n  end\n  best_word\n\
    end", "  max_len = 0\n  max_word = \"\"\n  words.each do |word|\n    word_len\
    \ = word.chars.uniq.length\n    if word_len > max_len\n      max_len = word_len\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  # your code here\n\
    end", "  # TODO: implement the function\nend", "\tmax_word = words[0]\n\tmax_count\
    \ = find_unique_characters(words[0]).length\n\tfor word in words[1..-1]\n\t\t\
    if find_unique_characters(word).length > max_count\n\t\t\tmax_word = word\n\t\t\
    \tmax_count = find_unique_characters(word).length\n\t\tend\n\tend\n\treturn max_word\n\
    end", "  words.max_by { |word| word.chars.uniq.size }\nend", "  # BEGIN (write\
    \ your solution here)\n  result = words.sort_by(&:length).last\n  result_length\
    \ = result.chars.uniq.length\n  result = words.select{|word| word.chars.uniq.length\
    \ == result_length}.sort.first\n  result\n  # END\nend", "  max_length = words.map\
    \ { |word| word.chars.to_a.uniq.length }.max\n  words.select { |word| word.chars.to_a.uniq.length\
    \ == max_length }.min\nend", "  unique_count = []\n  words.each do |word|\n  \
    \  unique_count << word.chars.uniq.count\n  end\n  max_count = unique_count.max\n\
    \  max_index = unique_count.index(max_count)\n  words[max_index]\nend", "  max_val\
    \ = 0\n  max_word = \"\"\n  words.each do |word|\n    unique_chars = word.split(\"\
    \").uniq.length\n    if unique_chars > max_val\n      max_val = unique_chars\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  words.max_by{|word|\
    \ word.chars.uniq.size}\nend", "  max_word = words.first\n  max_length = unique_length(words.first)\n\
    \  words.each do |word|\n    current_length = unique_length(word)\n    if current_length\
    \ > max_length\n      max_word = word\n      max_length = current_length\n   \
    \ end\n  end\n  max_word\nend", "  words.map { |word| [unique_chars(word), word]\
    \ }.max[1]\nend", "  words.max_by { |word| word.chars.uniq.size }\nend", "  #\
    \ Your code here\nend", "  words.max_by { |word| word.chars.uniq.size }\nend",
  "\twords.inject { |memo, word| memo.chars.uniq.count > word.chars.uniq.count ? memo\
    \ : word }\nend", "  words.max_by{|word| word.chars.uniq.count}.tap do |word|\n\
    \    puts \"\\\"#{word}\\\"\"\n  end\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  words.max { |a, b| (a.split('') - a.split('').uniq).length <=> (b.split('')\
    \ - b.split('').uniq).length }\nend", "  word = words.first\n  words.each { |x|\
    \ word = x if unique_chars(x) > unique_chars(word) }\n  word\nend", "  words.max\
    \ { |a, b| a.chars.uniq.size <=> b.chars.uniq.size }\nend", "  words.each_with_index.map\
    \ do |word, index|\n    [word, index, word.chars.to_a.uniq.size]\n  end.max_by(&:last).first\n\
    end", "  characters = Hash.new { |hash, key| hash[key] = [] }\n  words.each_with_index\
    \ do |word, i|\n    word.chars.each do |char|\n      characters[char] << i\n \
    \   end\n  end\n  characters = characters.reject { |_, v| v.size > 1 }\n  min_index\
    \ = words.size\n  (0...words.size).each do |i|\n    min_index = i if characters.all?\
    \ { |_, v| v.include?(i) }\n  end\n  words[min_index]\nend", "\twords.max_by {\
    \ |word| word.chars.uniq.size }\nend", "  max_word = \"\"\n  max_uniq_chars =\
    \ 0\n  words.each do |word|\n    uniq_chars = word.split(\"\").uniq.length\n \
    \   if uniq_chars > max_uniq_chars\n      max_uniq_chars = uniq_chars\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  uniq_chars = words.map do |word|\n\
    \    word.chars.uniq.size\n  end\n  max_count = uniq_chars.max\n  words[uniq_chars.index(max_count)]\n\
    end", "  best_word = \"\"\n  best_word_chars = 0\n  words.each do |word|\n   \
    \ chars = word.split(\"\").uniq.count\n    if chars > best_word_chars\n      best_word\
    \ = word\n      best_word_chars = chars\n    end\n  end\n  best_word\nend", " \
    \ words.max_by do |word|\n    word.chars.uniq.size\n  end\nend", "  find_max =\
    \ \"\"\n  find_max_unique_chars = 0\n  words.each do |word|\n    unique_chars\
    \ = word.split(\"\").uniq.length\n    if unique_chars > find_max_unique_chars\n\
    \      find_max = word\n      find_max_unique_chars = unique_chars\n    end\n\
    \  end\n  find_max\nend", "  words.max_by { |word| word.chars.uniq.count }\nend",
  "  words.sort! { |x, y| y.split('').uniq.length <=> x.split('').uniq.length }\n\
    \  words[0]\nend", "  max_word = words.max_by { |word| word.chars.uniq.size }\n\
    \  if words.count(max_word) > 1\n    words.select { |word| word.chars.uniq.size\
    \ == max_word.chars.uniq.size }.sort.first\n  else\n    max_word\n  end\nend",
  "  max_uniq = nil\n  max_word = nil\n  words.each do |word|\n    word_uniq = word.chars.uniq.size\n\
    \    if max_uniq.nil? || word_uniq > max_uniq\n      max_uniq = word_uniq\n  \
    \    max_word = word\n    end\n  end\n  max_word\nend", "  max_word = \"\"\n \
    \ char_count = 0\n  words.each do |word|\n    count = word.split(\"\").uniq.count\n\
    \    if count > char_count\n      max_word = word\n      char_count = count\n\
    \    end\n  end\n  max_word\nend", "  # determine which is the highest and then\
    \ pick the first\n  # if array.map{ |word| word.split('').uniq.count }.max\n \
    \ #   words\n  # else\n  #   words.sort!\n  # end", "  # Write your solution here\n\
    end", "  words.sort_by { |word| [word.chars.uniq.size, word] }.last\nend", " \
    \ words.inject([]) do |result, word|\n    result << [word, word.chars.uniq.count]\n\
    \  end.max_by { |_, count| count }.first\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  words.max { |a, b| count_unique_chars(a) <=> count_unique_chars(b)\
    \ }\nend", "  sorted_words = words.sort_by { |word| [word.chars.uniq.count, word]\
    \ }\n  sorted_words.last\nend", "  words.max_by do |word|\n    word.chars.uniq.size\n\
    \  end\nend", "  freq = words.map { |w| w.chars.uniq.count }\n  words[freq.index(freq.max)]\n\
    end", "  words.map{|word| [word, unique_count(word)]}.max_by(&:last).first\nend",
  "  max_char_count = 0\n  max_word = \"\"\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_char_count\n      max_char_count = word.chars.uniq.count\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  sorted_words = words.sort_by do |word|\n    if word.length == word.split('').uniq.length\n\
    \      word\n    else\n      0\n    end\n  end\n  sorted_words.last\nend", " \
    \ words.max_by do |word|\n    word.chars.uniq.count\n  end\nend", "  words.max_by\
    \ { |word| word.chars.uniq.count }\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  all_words = {}\n  words.each do |word|\n    unique_chars = word.split('').uniq.join\n\
    \    all_words[word] = unique_chars.length\n  end\n  max_uniq = all_words.values.max\n\
    \  all_words.select { |k, v| v == max_uniq }.keys.first\nend", "  word = words.first\n\
    \  unique_count = unique_char_count(word)\n  words.each do |word|\n    if unique_char_count(word)\
    \ > unique_count\n      unique_count = unique_char_count(word)\n      output =\
    \ word\n    end\n  end\n  output\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  max_word = nil\n  max_chars = 0\n  words.each do |word|\n    uniq_chars\
    \ = word.split('').uniq.length\n    if uniq_chars > max_chars\n      max_chars\
    \ = uniq_chars\n      max_word = word\n    end\n  end\n  max_word\nend", "  max_word\
    \ = nil\n  max_count = 0\n  words.each do |word|\n    word_count = word.chars.uniq.count\n\
    \    if word_count > max_count\n      max_count = word_count\n      max_word =\
    \ word\n    end\n  end\n  max_word\nend", "  max_word = words.min_by do |word|\n\
    \    word.size\n  end\n  words.max_by do |word|\n    word.chars.uniq.size\n  end\n\
    end", "  words.max_by { |word| word.chars.uniq.count }\nend", "  words.inject\
    \ do |max, word|\n    if max.split('').uniq.size == word.split('').uniq.size\n\
    \      max < word ? max : word\n    else\n      max.split('').uniq.size > word.split('').uniq.size\
    \ ? max : word\n    end\n  end\nend", "  words.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  # TODO\nend", "  words.max_by { |word| word.chars.uniq.count }\n\
    end", "  max_char_count = 0\n  max_char_word = \"\"\n  words.each do |word|\n\
    \    if word.chars.uniq.count > max_char_count\n      max_char_count = word.chars.uniq.count\n\
    \      max_char_word = word\n    end\n  end\n  max_char_word\nend", "  words.max_by\
    \ { |w| w.chars.uniq.count }\nend", "\twords.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  words.reduce do |acc, word|\n    acc.length > word.length || (acc.length\
    \ == word.length && acc > word) ? acc : word\n  end\nend", "  frequency = Hash.new(0)\n\
    \  max_count = 0\n  max_word = \"\"\n  words.each do |word|\n    frequency = Hash.new(0)\n\
    \    word.each_char do |char|\n      frequency[char] += 1\n    end\n    if frequency.length\
    \ > max_count\n      max_count = frequency.length\n      max_word = word\n   \
    \ end\n  end\n  max_word\nend", "  max_count = 0\n  max_word = \"\"\n  words.each\
    \ do |word|\n    word_count = word.chars.uniq.count\n    if word_count > max_count\n\
    \      max_count = word_count\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  words.map do |word|\n    [word, word.chars.uniq.count]\n  end.sort_by\
    \ do |word, unique_count|\n    [unique_count, word]\n  end.last.first\nend", " \
    \ max_word = \"\"\n  max_char = 0\n  words.each do |word|\n    if (word.chars.uniq.length\
    \ > max_char) || (word.chars.uniq.length == max_char && word < max_word)\n   \
    \   max_word = word\n      max_char = word.chars.uniq.length\n    end\n  end\n\
    \  max_word\nend", "  max_word = words.first\n  max_count = 0\n  words.each do\
    \ |word|\n    count = count_unique_chars(word)\n    if count > max_count\n   \
    \   max_count = count\n      max_word = word\n    end\n  end\n  max_word\nend",
  "  max_count = 0\n  max_word = nil\n  words.each do |word|\n    if max_count < word.chars.uniq.size\n\
    \      max_count = word.chars.uniq.size\n      max_word = word\n    end\n  end\n\
    \  max_word\nend", "  words.inject do |acc, word|\n    if word.chars.uniq.length\
    \ > acc.chars.uniq.length\n      word\n    else\n      acc\n    end\n  end\nend",
  "  uniq_chars = Hash.new(0)\n  words.each do |word|\n    word.chars.each do |char|\n\
    \      uniq_chars[char] += 1\n    end\n  end\n  word_counts = uniq_chars.values.uniq.sort.reverse\n\
    \  words.sort.each do |word|\n    if word.length == word_counts[0]\n      return\
    \ word\n    end\n  end\nend", "  words.max_by do |word|\n    word.chars.uniq.count\n\
    \  end\nend", "  return words.map{|word| [word, word.split('').uniq.count]}.sort_by{|word|\
    \ word[1]}.reverse[0][0]\nend", "\treturn words.max_by { |word| word.split('').uniq.length\
    \ }\nend", "  counter = 0\n  str = \"\"\n  words.each do |word|\n    if word.size\
    \ == word.split(\"\").uniq.size\n      if counter == 0\n        counter = word.size\n\
    \        str = word\n      elsif counter < word.size\n        counter = word.size\n\
    \        str = word\n      end\n    end\n  end\n  str\nend", "  words.max { |a,\
    \ b| a.chars.uniq.count <=> b.chars.uniq.count }\nend", "  max_word = words.max_by\
    \ { |word| word.split('').uniq.length }\n  max_word.is_a?(Array) ? max_word.sort.first\
    \ : max_word\nend", "  words.map! do |word|\n    word.chars.uniq.count\n  end\n\
    \  words.index(words.max)\nend", "  words.sort { |x, y| y.chars.uniq.length <=>\
    \ x.chars.uniq.length }.first\nend", "  best_word = \"\"\n  best_count = 0\n \
    \ words.each do |word|\n    count = word.split(\"\").uniq.count\n    if count\
    \ > best_count\n      best_count = count\n      best_word = word\n    end\n  end\n\
    \  best_word\nend", "  words.max_by do |word|\n    word.chars.uniq.size\n  end\n\
    end", "  words.sort_by { |word| [word.chars.uniq.count, word] }.last\nend", " \
    \ words.max_by { |word| word.split('').uniq.size }\nend", "  # -- your code here\
    \ --\nend", "  longest_word = nil\n  words.each do |word|\n    if longest_word.nil?\
    \ || uniq_chars(word).length > uniq_chars(longest_word).length\n      longest_word\
    \ = word\n    end\n  end\n  longest_word\nend", "  hash = {}\n  words.each do\
    \ |word|\n    # count unique characters\n    hash[word] = word.chars.uniq.count\n\
    \  end\n  # get the max number of unique characters\n  max = hash.values.max\n\
    \  # return the first word with the maximum number of unique characters\n  hash.key(max)\n\
    end", "  words.sort_by! { |w| [-w.chars.uniq.count, w] }\n  words.first\nend",
  "  #finds the word with most unique characters in it\n  words.max do |a, b|\n  \
    \  a.chars.uniq.size <=> b.chars.uniq.size\n  end\nend", "  max_uniq_chars = words.map\
    \ { |word| word.split('').uniq.size }.max\n  word_index = max_uniq_chars\n  words.select\
    \ { |word| word.split('').uniq.size == word_index }.first\nend", "  # raise \"\
    find_max not implemented\"\n  words.max_by { |w| w.chars.uniq.count }\nend", " \
    \   # words.max_by { |word| word.size - word.uniq.size }\n    p words.max_by {\
    \ |word| word.size - word.chars.uniq.size }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
