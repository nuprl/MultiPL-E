name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n\
  # 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  return 0 if arr.length == 0\n  return 1 if arr.length == 1\n  arr.each.map\
    \ do |num|\n    if num < 0\n      num = num.abs\n    end\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  end.count { |num| num > 0 }\nend", "  count = 0\n  if arr.empty?\n    return\
    \ count\n  else\n    arr.each do |x|\n      if sum_of_digits(x) > 0\n        count\
    \ += 1\n      end\n    end\n    return count\n  end\nend", "  arr.select{|x| x\
    \ > 0}.count\nend", "  arr.count { |x| x.digits.sum > 0 }\nend", "  # your code\
    \ here\nend", "  numbers = 0\n  for x in arr\n    if x > 0\n      numbers += 1\n\
    \    elsif x < 0\n      n = x.abs\n      numbers += (n.to_s.split('').map(&:to_i).reduce(:+))\
    \ > 0 ? 1 : 0\n    end\n  end\n  numbers\nend", "  # your code here\nend", " \
    \ arr.select { |num| num.abs.digits.sum > 0 }.size\nend", "  arr.count { |num|\
    \ num.digits.sum > 0 }\nend", "  count = 0\n  arr.each do |a|\n    count += 1\
    \ if sum_digits(a) > 0\n  end\n  count\nend", "  arr.count { |e| e.abs.digits.sum\
    \ > 0 }\nend", "  count = 0\n  arr.each do |num|\n    num = num.abs if num < 0\n\
    \    while num > 0\n      count += 1 if num % 10 != 0\n      num /= 10\n    end\n\
    \  end\n  count\nend", "\tcount = 0\n\tfor i in arr\n\t\tif i < 0\n\t\t\ti = i\
    \ * -1\n\t\tend\n\t\tnum = i.to_s.chars.map(&:to_i).inject(:+)\n\t\tif num > 0\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  return 0 if arr.empty?\n  return 0 if arr.length == 1 && arr[0]\
    \ == 0\n  counts = 0\n  arr.each do |num|\n    if num.negative?\n      num *=\
    \ -1\n    end\n    counts += 1 if num.digits.sum > 0\n  end\n  counts\nend", " \
    \ arr.count { |x| (x.to_s.chars.map(&:to_i).reduce(:+) || 0) > 0 }\nend", "  arr.count\
    \ { |n| n.to_s.chars.map(&:to_i).sum > 0 }\nend", "  # TODO\nend", "  count =\
    \ 0\n  arr.each do |number|\n    count += number.abs.to_s.split('').map(&:to_i).inject(:+)\n\
    \  end\n  count\nend", "  puts arr.count{|num| num.digits.sum > 0}\nend\ncount_nums([])\n\
    count_nums([-1, 11, -11])\ncount_nums([1, 1, 2])"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
