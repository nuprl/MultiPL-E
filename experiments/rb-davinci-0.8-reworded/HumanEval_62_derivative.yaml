name: HumanEval_62_derivative
language: rb
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>>\
  \ derivative.call([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative.call([1,\
  \ 2, 3])\n# [2, 6]\ndef derivative(xs)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n\
  \    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3,\
  \ 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2,\
  \ 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3,\
  \ 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n"
completions: ["    new_xs = []\n    i = 1\n    while i < xs.length\n        new_xs\
    \ << i * xs[i]\n        i += 1\n    end\n    return new_xs\nend", "  if xs.size\
    \ == 1\n    [0]\n  else\n    xs.take(xs.size - 1).map.with_index { |x, i| (i +\
    \ 1) * x }\n  end\nend", "  i = 1\n  xs.map { |x| x * i }.tap { xs.shift }\nend",
  "  (1...xs.length).map { |i| xs[i] * i }\nend", "  xs.length-1.times.map{|i| xs[i+1]*(i+1)}\n\
    end", "  r = []\n  xs.each_with_index do |x, i|\n    next if i == 0\n    r <<\
    \ x * i\n  end\n  r\nend", "  values = xs.clone\n  values.shift\n  values.map.with_index\
    \ { |e, index| (index + 1) * e }\nend", "  xs.each_with_index.map do |num, idx|\n\
    \    (idx > 0) ? num * idx : nil\n  end.compact\nend", "  if xs.length == 1\n\
    \    [0]\n  else\n    (1...xs.length).map { |i| xs[i] * i }\n  end\nend", "  #\
    \ TODO: your code here\n  result = []\n  xs.each_with_index do |x, index|\n  \
    \  result << x*index\n  end\n  result.shift\n  result\nend", "  i = 1\n  xs.map{|x|\
    \ i *= x; i}.drop(1)\nend", "  # todo: check if xs is empty\n  xs.map.with_index\
    \ { |x, i| i * x }[1..-1]\nend", "  # PUT YOUR CODE HERE\nend", "  # raise 'Not\
    \ implemented'\n  result = []\n  xs.each_with_index do |x, i|\n    result << x\
    \ * i if i > 0\n  end\n  result\nend", "  # p xs[0..xs.length-2]\n  # if xs.length\
    \ == 1 then xs else xs[0..xs.length-2]\n  if xs.length == 1 then [] else xs[0..xs.length-2].zip(1..xs.length-1).map{|x,y|\
    \ x*y}\nend", "  [].tap do |deriv|\n    xs.each_with_index do |value, index|\n\
    \      deriv << (index * value)\n    end\n  end.drop(1)\nend", "  (1...xs.length).map\
    \ { |i| xs[i] * i }\nend", "  i = 0\n  while i < xs.length\n    xs[i] = xs[i]\
    \ * i\n    i += 1\n  end\n  xs.shift\n  xs\nend", "  h = ->(xs) { xs.each_cons(2).map\
    \ { |x1, x2| x2 - x1 } }\n  ->(xs) { h.call(xs[1..-1]) }\nend", "  xs.map.with_index\
    \ do |x, index|\n    if index == 0\n      next\n    end\n    x * index\n  end.reject(&:nil?)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
