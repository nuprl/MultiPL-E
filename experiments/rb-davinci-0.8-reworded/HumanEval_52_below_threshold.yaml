name: HumanEval_52_below_threshold
language: rb
prompt: "# Return true if all numbers in the array l are below threshold t.\n# >>>\
  \ below_threshold.call([1, 2, 4, 10], 100)\n# true\n# >>> below_threshold.call([1,\
  \ 20, 4, 10], 5)\n# false\ndef below_threshold(l, t)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_threshold\n\
  \    candidate = method(:below_threshold)\n    assert_equal(true, candidate.call([1,\
  \ 2, 4, 10], 100))\n    assert_equal(false, candidate.call([1, 20, 4, 10], 5))\n\
  \    assert_equal(true, candidate.call([1, 20, 4, 10], 21))\n    assert_equal(true,\
  \ candidate.call([1, 20, 4, 10], 22))\n    assert_equal(true, candidate.call([1,\
  \ 8, 4, 10], 11))\n    assert_equal(false, candidate.call([1, 8, 4, 10], 10))\n\
  \  end\nend\n"
completions: ["  l.all? { |x| x < t }\nend", "  l.each do |i|\n    if i >= t\n   \
    \   return false\n    end\n  end\n  return true\nend", "  l.all? { |e| e < t }\n\
    end", "  l.all? { |e| e < t }\nend", "  l.all? { |e| e < t }\nend", "  count =\
    \ 0\n  l.each do |val|\n    count += 1 if val < t\n  end\n  count == l.length\n\
    end", "  l.all? { |i| i < t }\nend", "  l.all? { |x| x < t }\nend", "  l.all?\
    \ { |i| i < t }\nend", "  l.all? { |e| e < t }\nend", "  l.all? { |num| num <\
    \ t }\nend", "  l.all? { |e| e < t }\nend", "  l.all? { |e| e < t }\nend", " \
    \ l.each { |x| return false if x >= t }\n  true\nend", "    l.select{|i| i < t}.length\
    \ == l.length\nend", "    l.all? { |n| n < t }\nend\nputs below_threshold.call([1,\
    \ 2, 4, 10], 100) # true\nputs below_threshold.call([1, 20, 4, 10], 5) # false",
  "  result = true\n  l.each do |x|\n    if x > t\n      result = false\n    end\n\
    \  end\n  return result\nend", "\tresult = true\n\tl.each do |n|\n\t\tif n > t\n\
    \t\t\tresult = false\n\t\tend\n\tend\n\treturn result\nend", "  proc { |l, t|\n\
    \    l.all? { |x| x < t }\n  }\nend", "  if l.all? { |num| num < t }\n    true\n\
    \  else\n    false\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
