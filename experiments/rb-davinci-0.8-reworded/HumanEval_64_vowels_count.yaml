name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n\
  # 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.downcase.scan(/[aeiouy]/).count\nend", "    count = 0\n    for\
    \ i in 0..s.length - 1\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u'\n            count += 1\n        end\n    end\n \
    \   if s[s.length - 1] == 'y'\n        count += 1\n    end\n    return count\n\
    end", "  v='aeiouyAEIOUY'\n  vc=0\n  (0..s.length-1).each {|i| vc+=1 if v.include?\
    \ s[i]}\n  return vc\nend", "  # Your code goes here.\nend", "\tvowels = 0\n\t\
    s.each_char do |c|\n\t\tif c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y'\n\t\t\tvowels += 1\n\t\tend\n\tend\n\treturn vowels\nend", "\t\
    return s.downcase.gsub(/[^aeiouy]/, '').length\nend", "  x = s.downcase.split('')\n\
    \  x.delete('y')\n  x.select { |e| ['a', 'e', 'i', 'o', 'u'].include?(e) }.count\n\
    end", "    vowels = \"aeiouy\"\n    counter = 0\n    s.each_char do |c|\n    \
    \    if vowels.include?(c)\n            counter += 1\n        end\n    end\n \
    \   return counter\nend", "  i = 0\n  count = 0\n  while i < s.length\n    if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \      count += 1\n    end\n    i += 1\n  end\n  return count\nend", "  s.downcase.chars.count\
    \ { |c| \"aeiouy\".include?(c) }\nend", "  # 1. Convert the string to lower case.\n\
    \  s = s.downcase\n  # 2. Find the vowels and count them.\n  vowels = \"aeiouy\"\
    \n  count = 0\n  s.each_char do |ch|\n    if vowels.include?(ch)\n      count\
    \ += 1\n    end\n  end\n  # 3. Return the count.\n  return count\nend", "  s.count(\"\
    aeiou\") + (s.count(\"y\") > 0 ? 1 : 0)\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.chars.count { |c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y' }\nend", "  s.gsub(/[^aeiou]/i, '').length\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if ['a', 'e', 'i', 'o', 'u',\
    \ 'y'].include?(c.downcase)\n  end\n  count\nend", "  numVowels = 0\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  s.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      numVowels += 1\n    end\n  end\n  return numVowels\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  if s.length == 0\n    0\n  elsif s[0] == 'a' or s[0] ==\
    \ 'e' or s[0] == 'i' or s[0] == 'o' or s[0] == 'u'\n    1 + vowels_count(s[1..-1])\n\
    \  elsif s[0] == 'y' and s[1] == nil\n    1 + vowels_count(s[1..-1])\n  else\n\
    \    vowels_count(s[1..-1])\n  end\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
