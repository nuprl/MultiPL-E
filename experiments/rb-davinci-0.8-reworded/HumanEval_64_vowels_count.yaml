name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n\
  # 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.downcase.scan(/[aeiouy]/).count\nend", "    count = 0\n    for\
    \ i in 0..s.length - 1\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u'\n            count += 1\n        end\n    end\n \
    \   if s[s.length - 1] == 'y'\n        count += 1\n    end\n    return count\n\
    end", "  v='aeiouyAEIOUY'\n  vc=0\n  (0..s.length-1).each {|i| vc+=1 if v.include?\
    \ s[i]}\n  return vc\nend", "  # Your code goes here.\nend", "\tvowels = 0\n\t\
    s.each_char do |c|\n\t\tif c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y'\n\t\t\tvowels += 1\n\t\tend\n\tend\n\treturn vowels\nend", "\t\
    return s.downcase.gsub(/[^aeiouy]/, '').length\nend", "  x = s.downcase.split('')\n\
    \  x.delete('y')\n  x.select { |e| ['a', 'e', 'i', 'o', 'u'].include?(e) }.count\n\
    end", "    vowels = \"aeiouy\"\n    counter = 0\n    s.each_char do |c|\n    \
    \    if vowels.include?(c)\n            counter += 1\n        end\n    end\n \
    \   return counter\nend", "  i = 0\n  count = 0\n  while i < s.length\n    if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \      count += 1\n    end\n    i += 1\n  end\n  return count\nend", "  s.downcase.chars.count\
    \ { |c| \"aeiouy\".include?(c) }\nend", "  # 1. Convert the string to lower case.\n\
    \  s = s.downcase\n  # 2. Find the vowels and count them.\n  vowels = \"aeiouy\"\
    \n  count = 0\n  s.each_char do |ch|\n    if vowels.include?(ch)\n      count\
    \ += 1\n    end\n  end\n  # 3. Return the count.\n  return count\nend", "  s.count(\"\
    aeiou\") + (s.count(\"y\") > 0 ? 1 : 0)\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.chars.count { |c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y' }\nend", "  s.gsub(/[^aeiou]/i, '').length\nend",
  "  count = 0\n  s.each_char do |c|\n    count += 1 if ['a', 'e', 'i', 'o', 'u',\
    \ 'y'].include?(c.downcase)\n  end\n  count\nend", "  numVowels = 0\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  s.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      numVowels += 1\n    end\n  end\n  return numVowels\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  if s.length == 0\n    0\n  elsif s[0] == 'a' or s[0] ==\
    \ 'e' or s[0] == 'i' or s[0] == 'o' or s[0] == 'u'\n    1 + vowels_count(s[1..-1])\n\
    \  elsif s[0] == 'y' and s[1] == nil\n    1 + vowels_count(s[1..-1])\n  else\n\
    \    vowels_count(s[1..-1])\n  end\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  return s.scan(/[aeiouy]/i).count\nend", "  count = 0\n  (s.length - 1).times\
    \ do |i|\n    if /[aeiou]/.match(s[i])\n      count += 1\n    end\n  end\n  if\
    \ /[aeiouy]/.match(s[-1])\n    count += 1\n  end\n  count\nend", "  if s[-1]=='y'\n\
    \    return s.delete('^aeiouy').length\n  else\n    return s.delete('^aeiou').length\n\
    \  end\nend", "  s.scan(/[aeiouy]/i).size\nend", "\ts.count(\"aeiouy\")\nend",
  "  if s == nil\n    return 0\n  end\n  s.downcase!\n  array = s.split('')\n  vowel\
    \ = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  array.each do |i|\n    if vowel.include?(i)\n\
    \      count += 1\n    end\n  end\n  if array[-1] == 'y'\n    count += 1\n  end\n\
    \  return count\nend", "  s.downcase.gsub(/[^aeiouy]/, '').count\nend", "  i=0\n\
    \  counter=0\n  while i<s.length\n    if s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'\n\
    \      counter=counter+1\n    end\n    i=i+1\n  end\n  return counter\nend", "\t\
    count = 0\n\ts.each_char do |c|\n\t\tcount += 1 if ['a', 'e', 'i', 'o', 'u', 'y'].include?(c.downcase)\n\
    \tend\n\tcount\nend", "  s.gsub(/[^aeiou]/i, '').length\nend", "  if s[-1] ==\
    \ 'y'\n    s.downcase.count('aeiou') - 1\n  else\n    s.downcase.count('aeiou')\n\
    \  end\nend", "  s.downcase.count(\"aeiouy\")\nend", "  count = 0\n  s.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c\
    \ == 'y' && c == s[-1])\n      count += 1\n    end\n  end\n  count\nend", "  num\
    \ = 0\n  s.each_char do |x|\n    if x.match(/[aeiou]/)\n      num += 1\n    end\n\
    \  end\n  if s[-1] == \"y\"\n    num += 1\n  end\n  num\nend", "\ts.scan(/[AEIOUY]/i).count\n\
    end\nputs vowels_count(\"ACEDY\")", "  s.chars.select{|c| /[aeiou]/i.match(c)}.size\n\
    end", "  s.downcase.gsub(/[^aeiouy]/, '').length\nend", "  cnt = 0\n  s.each_char\
    \ do |c|\n    if c =~ /[aeiou]/i\n      cnt += 1\n    end\n  end\n  cnt\nend",
  "\t\n\ts = s.split('')\n\tcounter = 0", "  s.split('').select{|x| ['a','e','i','o','u','y'].include?\
    \ x.downcase}.length\nend", "  s.scan(/[aeiouy]/i).count\nend", "  # if !s.empty?\n\
    \  #   a = s.gsub(/[^aeiou]/i, '')\n  #   b = a.length\n  #   return b\n  # else\n\
    \  #   return 0\n  # end\n  a = s.gsub(/[^aeiou]/i, '')\n  b = a.length\n  b\n\
    end", "  s.split('').select{|x| x == 'a' || x == 'e' || x == 'i' || x == 'o' ||\
    \ x == 'u' || x == 'y'}.length\nend", "  s.scan(/[aeiouy]/i).size\nend", "  #\
    \ Your code here\nend", "  count = 0\n  check = \"aeiouy\"\n  0.upto(s.length-1)\
    \ do |i|\n    count += 1 if check.include?(s[i].downcase)\n  end\n  count\nend\n\
    assert_equal(2, vowels_count.call(\"abcde\"))\nassert_equal(3, vowels_count.call(\"\
    ACEDY\"))", "  s.count('aeiou') + (s.count('y') * (s[-1] == 'y' ? 1 : 0))\nend",
  "  sum = 0\n  s.downcase.each_char { |c| sum += 1 if c =~ /[aeiou]/ }\n  s[-1] ==\
    \ 'y' ? sum += 1 : sum\nend", "\ts = s.downcase\n\ts = s.split('')\n\ts.delete_if\
    \ {|x| x !~ /[aeiou]/}\n\ts.delete_if {|x| x == 'y' and x == s.last}\n\ts.length\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.split('').each do\
    \ |i|\n    count += 1 if vowels.include?(i.downcase)\n  end\n  if s[-1] == 'y'\n\
    \    count += 1\n  end\n  count\nend", "  count = 0\n  s.downcase.each_char do\
    \ |c|\n    if %w(a e i o u y).include?(c)\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  s.split(\"\").each do |char|\n    if vowels.include?(char.downcase)\n     \
    \ count += 1\n    end\n  end\n  count\nend", "  vowels = 'aeiou'\n  count = 0\n\
    \  s.downcase.each_char do |c|\n    count += 1 if vowels.include?(c)\n  end\n\
    \  count\nend", "  n = 0\n  (s.length - 1).times do |i|\n    n += 1 if s[i] =~\
    \ /[aeiou]/i\n  end\n  s[-1] =~ /[aeiouy]/i ? n + 1 : n\nend", "  s.split('').select\
    \ { |i| %w(a e i o u y).include?(i.downcase) }.count\nend", "  vc=0\n  s.each_char\
    \ do |x|\n    if x=='a' || x=='e' || x=='i' || x=='o' || x=='u'\n      vc=vc+1\n\
    \    end\n  end\n  if (s[-1]=='y')\n    vc=vc+1\n  end\n  vc\nend", "  if s.nil?\n\
    \    return 0\n  end\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  counter = 0\n  s.each_char\
    \ do |letter|\n    if vowels.include?(letter.downcase)\n      counter += 1\n \
    \   end\n  end\n  return counter\nend", "  count = 0\n  s.downcase.each_char do\
    \ |c|\n    if %w(a e i o u y).include?(c)\n      count += 1\n    end\n  end\n\
    \  count\nend", "  # write code here\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.chars.reduce(0) do |acc, char|\n    if ['a', 'e', 'i', 'o',\
    \ 'u'].include?(char) || (char == 'y' && acc == 0)\n      acc + 1\n    else\n\
    \      acc\n    end\n  end\nend", "  # your solution here\nend", "  s.downcase.count(\"\
    aeiouy\")\nend", "  count = 0\n  vowels = 'aeiou'\n  for i in 0..s.length-1\n\
    \    if vowels.include?(s[i].downcase)\n      count += 1\n    end\n  end\n  if\
    \ s[-1] == 'y' || s[-1] == 'Y'\n    count += 1\n  end\n  return count\nend", " \
    \ s.downcase.gsub(/[^aeiouy]/, '').chars.uniq.count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.count \"aeiouy\"\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s.each_char\
    \ do |c|\n        if vowels.include?(c)\n            count += 1\n        end\n\
    \    end\n    count\nend", "  s.scan(/[aeiouy]/i).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "    v = ['a', 'e', 'i', 'o', 'u']\n    w = s.downcase.split('')\n    count\
    \ = 0\n    w.each do |l|\n        if v.include?(l) && l != 'y'\n            count\
    \ += 1\n        elsif l == 'y' && l == w.last\n            count += 1\n      \
    \  end\n    end\n    count\nend", "    return s.scan(/[aeiouy]/i).count\nend",
  end, "  count = 0\n  if s.size > 1\n    s.each_char.with_index do |c, i|\n     \
    \ if c.match(/a|e|i|o|u/)\n        count += 1\n      elsif c.match(/y/)\n    \
    \    count += 1 if s[i+1] == nil\n      end\n    end\n  else\n    count = 1 if\
    \ s.match(/a|e|i|o|u|y/)\n  end\n  count\nend", "  count = 0\n  ['a', 'e', 'i',\
    \ 'o', 'u'].each do |vowel|\n    count += s.count(vowel)\n  end\n  return count\n\
    end", "    # Your code goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n   \
    \ s.downcase!\n    count = 0\n    (0..s.length-1).each do |i|\n        if vowels.include?(s[i])\n\
    \            count = count + 1\n        end\n    end\n    if s[s.length-1] ==\
    \ 'y'\n        count = count + 1\n    end\n    return count\nend\nputs \"Test\
    \ Case 1 (Basic Case):\"\nputs vowels_count(\"abcde\")\nputs \"Test Case 2 (Empty\
    \ Case):\"\nputs vowels_count(\"\")\nputs \"Test Case 3 (Single Vowel Case):\"\
    \nputs vowels_count(\"a\")\nputs \"Test Case 4 (Long Case):\"\nputs vowels_count(\"\
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\
    \ incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\
    \ exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\
    \ irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat\
    \ nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\
    \ qui officia deserunt mollit anim id est laborum.\")\nputs \"Test Case 5 (Single\
    \ Vowel Case):\"\nputs vowels_count(\"y\")\nputs \"Test Case 6 (Non-Vowel Case):\"\
    \nputs vowels_count(\"h\")\nputs \"Test Case 7 (Only Non-Vowel Case):\"\nputs\
    \ vowels_count(\"hkjdfhdjksfhfksdhfk\")\nputs \"Test Case 8 (Full Vowel Case):\"\
    \nputs vowels_count(\"aeiou\")\nputs \"Test Case 9 (Full Vowel Case 2):\"\nputs\
    \ vowels_count(\"AEIOU\")\nputs \"Test Case 10 (Full Vowel Case", "  s.count \"\
    aeiouy\"\nend", "  # --- your code here ---\nend", "  s.gsub(/[^aieouy]/i, '').length\n\
    end", "  return s.gsub(/[^aeiou]/i, '').length\nend", "  s.scan(/[aeiouy]/i).size\n\
    end", "  count = 0\n  for i in 0..s.length-1\n    if s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y'\n      count +=\
    \ 1\n    end\n  end\n  return count\nend", "  s.split('').select{|c| [\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\"].include?(c.downcase)}.size\nend", "    count\
    \ = 0\n    s.each_char { |c| count += 1 if c =~ /[aeiouy]/i }\n    count\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.downcase.chars.each_with_index\
    \ do |c, i|\n    if vowels.include?(c)\n      count += 1\n    elsif c == 'y' &&\
    \ i == s.length - 1\n      count += 1\n    end\n  end\n  count\nend", "  vowels\
    \ = 'aeiouy'\n  count = 0\n  s.each_char do |i|\n    count += 1 if vowels.include?(i)\n\
    \  end\n  count\nend", "  # TODO: implement this method\n  #count = 0\n  #s.downcase.chars.each\
    \ do |char|\n  #  if char =~ /[aeiou]/\n  #    count += 1\n  #  end\n  #end\n\
    \  #count\n  #==> if we are using regexp match we can use count\n  s.scan(/[aeiou]/i).count\n\
    end", "  vowels = 'aeiouy'\n  unless s.nil? || s.empty?\n    if vowels.include?(s[s.length-1])\n\
    \      return 1 + vowels_count(s[0...s.length-1])\n    else\n      return vowels_count(s[0...s.length-1])\n\
    \    end\n  end\n  return 0\nend", "    return s.downcase.scan(/[aeiouy]/).length\n\
    end", "  # Write your code here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \  s.downcase.each_char.inject(0) do |sum, c|\n    sum += vowels.include?(c) ?\
    \ 1 : 0\n  end\nend", "  count = 0\n  vowels = 'aeiou'\n  s.each_char do |c|\n\
    \    if vowels.include?(c.downcase)\n      count += 1\n    end\n  end\n  count\n\
    end", "  /[aeiouy]/i.match(s).to_a.count\nend", "  # YOUR CODE HERE\nend", "\t\
    s.delete!(\"^aeiou\")\n\ts.delete!(\"^aeiouy\") if s.end_with?('y')\n\ts.length\n\
    end", "  # s.scan(/[aeiouy]/i).count\n  count = 0\n  s.chars.each do |char|\n\
    \    count += 1 if char =~ /[aeiouy]/i\n  end\n  count\nend", "  s.length - s.gsub(/[aeiou]/i,\
    \ '').length\nend", "\ts = s.downcase\n\ts = s.split('')\n\tvowels = 0\n\ts.each\
    \ do |letter|\n\t\tif letter == 'a'\n\t\t\tvowels += 1\n\t\telsif letter == 'e'\n\
    \t\t\tvowels += 1\n\t\telsif letter == 'i'\n\t\t\tvowels += 1\n\t\telsif letter\
    \ == 'o'\n\t\t\tvowels += 1\n\t\telsif letter == 'u'\n\t\t\tvowels += 1\n\t\t\
    elsif letter == 'y'\n\t\t\tvowels += 1\n\t\tend\n\tend\n\tvowels\nend", "  case\n\
    \  when s[-1] == 'y'\n    s.count('aeiouy')\n  else\n    s.count('aeiou')\n  end\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  (s.split('') & ['a', 'e',\
    \ 'i', 'o', 'u']).count\nend", "  s.scan(/[aeiouy]/i).count\nend", "  arr = s.chars\n\
    \  arr.select { |c| ['a', 'e', 'i', 'o', 'u', 'y'].include?(c.downcase) }.size\n\
    end", "  s.downcase.gsub(/[aeiou]/, '*').count('*')\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').size\nend", "  s.downcase.chars.count { |c| %w(a e i o u y).include?(c)\
    \ }\nend", "  s.count('aieou') + (s.end_with?('y') ? 1 : 0)\nend", "  vowels =\
    \ \"aeiouy\"\n  s.downcase.chars.select{|c| vowels.include?(c)}.size\nend", " \
    \ s.downcase.count('aeiouy')\nend", "  s.gsub(/[^aeiou]/i, '').length\nend", " \
    \ s.downcase.scan(/[aeiouy]/).count\nend", "  s.count \"aeiouy\"\nend", "  # YOUR\
    \ CODE HERE\nend", "  s.downcase.chars.inject(0) do |result, letter|\n    result\
    \ += 1 if ['a', 'e', 'i', 'o', 'u', 'y'].include?(letter)\n    result\n  end\n\
    end", "  s.delete('^aeiou').size\nend", "  s.scan(/[aeiouy]/i).size\nend", " \
    \ count = 0\n  s.downcase.chars.each do |char|\n    if char == 'a' || char ==\
    \ 'e' || char == 'i' || char == 'o' || char == 'u'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  return s.scan(/[aeiouy]/i).size\nend", "  v = 0\n  s.each_char\
    \ { |c| v += 1 if c.match(/[aeiou]/) or (c.downcase == 'y' and s.index(c) == s.length\
    \ - 1) }\n  v\nend", "  s.scan(/[aeiouy]/i).count\nend", "  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  if s[-1] == 'y'\n    vowels.push('y')\n  end\n  return s.count(\"\
    aeiouy\")\nend", "    s.scan(/[aeiouy]/i).count\nend", "  return 0 if s.empty?\n\
    \  a = s.downcase.chars\n  l = a.length\n  v = 0\n  a.each do |c|\n    v += 1\
    \ if c =~ /[aeiou]/\n  end\n  return v if a[l-1] =~ /[aeiou]/\n  return v - 1\n\
    end", "  count = 0\n  s.each_char do |letter|\n    if \"aeiouy\".include?(letter.downcase)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  a = s.scan(/[aeiouy]/i)\n\
    \  a.length\nend", "\ts.downcase.chars.map { |c| c == 'y' || c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' }.count(true)\nend", "  count = 0\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i in 0..s.length\n    if\
    \ vowels.include?(s[i])\n      count += 1\n    end\n  end\n  return count\nend",
  "  if (s[-1].upcase == 'Y')\n    s.downcase.count('aeiou') + 1\n  else\n    s.downcase.count('aeiou')\n\
    \  end\nend\nputs vowels_count.call(\"abcde\")\nputs vowels_count.call(\"ACEDY\"\
    )\nputs vowels_count.call(\"ACED\")", "  s.count('aeiouy')\nend", "\tvowels =\
    \ \"aeiou\"\n\ts = s.split(\"\")\n\tcount = 0\n\ts.each do |x|\n\t\tif vowels.include?(x)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend\nvowels_count(\"ACEDY\")",
  "  count = 0\n  s.chars.each do |x|\n    if x == 'a' || x == 'e' || x == 'i' ||\
    \ x == 'o' || x == 'u' || x == 'y'\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  s.downcase.chars.select{|c| 'aeiouy'.include?(c)}.size\nend",
  "  s.downcase.scan(/[aeiouy]/).count\nend", "  t = 0\n  for c in s.downcase.split('')\n\
    \    if ['a', 'e', 'i', 'o', 'u'].include?(c)\n      t += 1\n    end\n  end\n\
    \  t\nend", "\t# Convert input string to lowercase and remove spaces.\n\ts = s.gsub(\"\
    \ \", \"\").downcase\n\t# Set count for vowels.\n\tcount = 0\n\t# Create an array\
    \ of vowels.\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\t# Loop through the input\
    \ string and check for vowels.\n\ts.each_char do |char|\n\t\tif vowels.include?(char)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend", "  s.downcase.each_char.reduce(0)\
    \ do |count, char|\n    count += 1 if %w[a e i o u y].include?(char)\n    count\n\
    \  end\nend", "  count = 0\n  vowels = %w(a e i o u)\n  s.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.downcase.gsub(/[^aeiouy]/, '').chars.count\nend", "  # for each character\
    \ of a string\n  # check if it is a vowel\n  # add to result\n  s.chars.inject(0)\
    \ do |result, char|\n    result += (char.downcase =~ /[aeiouy]/) ? 1 : 0\n  end\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  last_letter\
    \ = s[-1]\n  vowels.each do |vowel|\n    if (s.downcase.include? vowel) && (vowel\
    \ == last_letter || vowel == last_letter.downcase)\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  # Define a method named: vowels_count\n  s.split('').count{|x|\
    \ x.match(/[aeiouy]/)}\nend", "  s.count(\"aeiouyAEIOUY\")\nend", "  s.scan(/[aeiouy]/i).count\n\
    end", "  s.gsub(/[^aeiou]/i, '').length\nend", "  vowels = \"aeiouy\"\n  s.downcase.chars.count\
    \ { |c| vowels.include?(c) }\nend", "  # TODO\nend", "  s.scan(/[aeiouy]/i).count\n\
    end", "  counter = 0\n  s.downcase.chars.each do |i|\n    if i == 'a' || i ==\
    \ 'e' || i == 'i' || i == 'o' || i == 'u'\n      counter += 1\n    end\n  end\n\
    \  counter\nend", "  s.downcase.split('').count do |c|\n    %w(a e i o u y).include?(c)\n\
    \  end\nend", "  s.downcase.scan(/[aeiouy]/).size\nend", "  # your code here\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  # TODO\nend", "    if s.nil?\
    \ || s.empty?\n        0\n    else\n        s.downcase!\n        vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n        vowels.count { |c| s.include?(c) }\n    end\nend",
  "    # YOUR CODE HERE\n    # Replace this line with your code\n    s = s.downcase\n\
    \    n = 0\n    if s[-1] == 'y'\n        n += 1\n    end\n    s.scan('a').count\
    \ + s.scan('e').count + s.scan('i').count + s.scan('o').count + s.scan('u').count\
    \ + n\nend", "  s.downcase.chars.select { |c| \"aeiouy\".include?(c) }.count\n\
    end", "  return s.scan(/[aeiouy]/i).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.count(\"aeiouy\")\nend", "  s.downcase.split('').count { |c|\
    \ c =~ /[aeiou]/ }\nend", "  a = s.split('')\n  a.pop if a.last == 'y'\n  a.delete_if\
    \ { |v| !(v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u') }\n  a.size\n\
    end", "  s.split('').select { |char| %w(a e i o u y).include?(char.downcase) }.size\n\
    end", "  vowels = %w(a e i o u)\n  count = 0\n  s.each_char do |c|\n    count\
    \ += 1 if vowels.include?(c.downcase)\n  end\n  count\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').size\nend", "  # your code goes here\nend", "  # TODO\nend", "  s.chars.each_with_object([])\
    \ do |char, vowels|\n    vowels << char if char =~ /[aeiou]/i\n  end.size\nend",
  "  n = 0\n  s.downcase.chars.each do |c|\n    n += 1 if c =~ /[aeiou]/\n  end\n\
    \  n\nend", "  # START\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count\
    \ = 0\n  (0..s.length-1).each do |i|\n    if vowels.include?(s[i].downcase)\n\
    \      count += 1\n    end\n  end\n  count\n  # END\nend", "  # Your code here\n\
    end", "  (s.chars.select { |c| c =~ /[aeiouy]/ }).count\nend", "  count = 0\n\
    \  s.downcase.each_char do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u'\n      count += 1\n    end\n  end\n  s.downcase.end_with?('y')\
    \ ? count += 1 : count\nend", "  v_count = 0\n  v_array = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  s.downcase.each_char do |c|\n    if v_array.include?(c)\n \
    \     v_count += 1\n    end\n  end\n  if s[-1] == \"y\"\n    v_count += 1\n  end\n\
    \  return v_count\nend", "  vowels = 'aeiou'\n  count = 0\n  s.each_char { |char|\
    \ count += 1 if vowels.include?(char) }\n  count\nend", "  v = \"aeiou\"\n  x\
    \ = s.downcase.chars.delete_if { |i| !v.include?(i) }\n  x.count\nend", "    s.count\
    \ \"aeiou\" + \"AEIOU\"\nend", "  i = 0\n  s.downcase.each_char { |c| i += 1 if\
    \ ['a', 'e', 'i', 'o', 'u', 'y'].include?(c) }\n  i\nend", "  v = ['a', 'e', 'i',\
    \ 'o', 'u']\n  v.reduce(0) { |c, e| c + s.downcase.count(e) }\nend", "  n = 0\n\
    \  s.each_char do |c|\n    n += 1 if c =~ /[aeiou]/i or (c == 'y' and s.index(c)\
    \ == s.length - 1)\n  end\n  n\nend", "  s.downcase.count(\"aeiouy\")\nend", " \
    \ s.count \"aeiouy\"\nend", "  count = 0\n  if s[-1] == 'y'\n    count += 1\n\
    \  end\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  letters = s.split('')\n  letters.each\
    \ do |letter|\n    vowels.each do |vowel|\n      if letter == vowel\n        count\
    \ += 1\n      end\n    end\n  end\n  count\nend", "  s.downcase.chars.inject(0)\
    \ do |count, c|\n    count += 1 if %w[a e i o u y].include?(c)\n    count\n  end\n\
    end", "  # TODO: add your code here\nend", "  arr=s.downcase.split('')\n  coun=0\n\
    \  arr.each do |x|\n    coun+=1 if ['a','e','i','o','u','y'].include?(x)\n  end\n\
    \  coun\nend", "  s.split('').inject(0) do |memo, char|\n    if %w(a e i o u y).include?(char.downcase)\n\
    \      memo + 1\n    else\n      memo\n    end\n  end\nend", "  len = s.length\n\
    \  if len == 0\n    return 0\n  else\n    vowels = s.slice(len-1).downcase =~\
    \ /[aeiouy]/ ? 1 : 0\n    vowels += vowels_count(s.slice(0, len-1))\n  end\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    s.each_char\
    \ do |char|\n        if vowels.include?(char.downcase)\n            count += 1\n\
    \        end\n    end\n    return count\nend", "  # res = s.downcase.scan(/[aeiouy]/).count\n\
    \  res = s.downcase.scan(/[aeiou]|y(?=\\z)/).count\n  res\nend", "  s.downcase.chars.count{|x|\
    \ x=~/[aeiou]/}\nend", "  chars = s.split('')\n  vowels = 'aeiou'.split('')\n\
    \  vowels << 'y' if chars.last == 'y'\n  chars.select { |char| vowels.include?(char.downcase)\
    \ }.size\nend", "  return 0 if s.nil?\n  return s.scan(/[aeiouy]/i).count\nend",
  "  # WRITE YOUR CODE HERE\nend", "  vowels = \"aeiou\"\n  num = 0\n  for i in 0..s.length\n\
    \    if vowels.include?(s[i])\n      num += 1\n    end\n  end\n  num\nend", " \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  #puts \"string s is \" +\
    \ s\n  s.each_char do |c|\n    #puts \"char c is \" + c\n    #puts \"count is\
    \ \" + count.to_s\n    if (vowels.include? c)\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  s.chars.count { |c| %w(a e i o u y).include?(c.downcase)\
    \ }\nend", "  s.scan(/[aeiouy]/i).count\nend", "  vowels = %w(a e i o u)\n  s.chars.count\
    \ do |l|\n    vowels.include?(l.downcase) || l.downcase == 'y' && s.index(l) ==\
    \ s.length - 1\n  end\nend", "  i = 0\n  str = s.downcase\n  vcount = 0\n  while\
    \ i < str.length\n    if str[i] == \"a\" || str[i] == \"e\" || str[i] == \"i\"\
    \ || str[i] == \"o\" || str[i] == \"u\"\n      vcount += 1\n    end\n    i +=\
    \ 1\n  end\n  vcount\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
