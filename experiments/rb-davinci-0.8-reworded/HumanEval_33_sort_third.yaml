name: HumanEval_33_sort_third
language: rb
prompt: "# This function takes an array l and returns an array l' such that\n# l'\
  \ is identical to l in the indicies that are not divisible by three, while its values\
  \ at the indicies that are divisible by three are equal\n# to the values of the\
  \ corresponding indicies of l, but sorted.\n# >>> sort_third.call([1, 2, 3])\n#\
  \ [1, 2, 3]\n# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9,\
  \ 5]\ndef sort_third(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_third\n\
  \    candidate = method(:sort_third)\n    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5,\
  \ 6, 3, 4, 8, 9, 2]))\n    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5,\
  \ 8, 3, 4, 6, 9, 2]))\n    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5,\
  \ 6, 9, 4, 8, 3, 2]))\n    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5,\
  \ 6, 3, 4, 8, 9, 2, 1]))\n  end\nend\n"
completions: ["    # l[0...l.length].map.with_index { |e, i| i % 3 == 0 ? e.sort :\
    \ e }\n    sorted = []\n    l.each_with_index do |e, i|\n        if i % 3 == 0\n\
    \            sorted.push(e.sort)\n        else\n            sorted.push(e)\n \
    \       end\n    end\n    sorted\nend", "    return l.map.with_index do |el, i|\n\
    \        i % 3 == 0 ? l[i, 3].sort : el\n    end\nend", "  l.map.with_index do\
    \ |e, i|\n    if i % 3 == 0\n      e.sort\n    else\n      e\n    end\n  end\n\
    end", "\treturn l.each_index.map { |i| i % 3 == 0 ? l[i].sort : l[i] }\nend",
  "  l.each_index.collect { |i| (i+1) % 3 == 0 ? l[i].sort : l[i] }\nend", "  l.map.with_index\
    \ do |num, index|\n    if index % 3 == 0\n      l[index..index + 2].sort\n   \
    \ else\n      num\n    end\n  end.flatten\nend", "  l.zip(l.values_at(*l.each_index.select\
    \ {|i| i % 3 == 0}).map(&:sort)).map {|a, b| a == b ? a : b}\nend", "  new_list\
    \ = []\n  l.each_with_index do |value, index|\n    if index % 3 == 0\n      new_list\
    \ << value.sort\n    else\n      new_list << value\n    end\n  end\n  new_list\n\
    end", "  l.each_index.map { |index| (index % 3).zero? ? l[index].sort : l[index]\
    \ }\nend", "\tif l.length > 0\n\t\tnew_list = []\n\t\tfor i in 0..l.length - 1\n\
    \t\t\tif (i % 3) == 0\n\t\t\t\tnew_list[i] = l[i].sort\n\t\t\telse\n\t\t\t\tnew_list[i]\
    \ = l[i]\n\t\t\tend\n\t\tend\n\t\treturn new_list\n\telse\n\t\treturn l\n\tend\n\
    end", "\tl_prime = []\n\tl.each_with_index do |num, index|\n\t\tif (index + 1)\
    \ % 3 == 0\n\t\t\tl_prime.push(l[index..index + 2].sort)\n\t\telse\n\t\t\tl_prime.push(num)\n\
    \t\tend\n\tend\n\tl_prime.flatten\nend", "  l.each_index { |i| l[i] = l[i].sort\
    \ if i % 3 == 0 }\nend", "  third = l.each_slice(3).to_a\n  sorted = third.map\
    \ do |arr|\n    arr.sort\n  end\n  second = sorted.flatten\n  first = l.map.with_index\
    \ do |num, i|\n    if i % 3 == 0 || i % 3 == 1\n      num\n    end\n  end\n  first.compact!\n\
    \  first.zip(second).flatten\nend", "  l.map.with_index do |e,i|\n    i % 3 ==\
    \ 0 ? e.sort : e\n  end\nend", "\tl.each_with_index.map { |x, i| i % 3 == 0 ?\
    \ x.sort : x }\nend", "  l.map.with_index do |e, i|\n    if i % 3 == 0\n     \
    \ l[i, 3].sort\n    else\n      e\n    end\n  end.flatten\nend", "    return l.each_index.map\
    \ { |i| i % 3 == 0 ? l[i..i+2].sort : l[i] }\nend", "  l.map.with_index { |x,\
    \ i| i % 3 == 0 ? x.sort : x }\nend", "  l.map.with_index do |e, i|\n    i % 3\
    \ == 0 ? e.sort : e\n  end\nend", "  (l.map.with_index { |_, i| i % 3 == 0 ? l[i..i\
    \ + 2].sort : l[i] }).flatten.compact\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
