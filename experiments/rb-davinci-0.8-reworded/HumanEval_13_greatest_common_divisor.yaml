name: HumanEval_13_greatest_common_divisor
language: rb
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
  \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
  \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
  \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
completions: ["  min = [a, b].min\n  divisor = 1\n  (1..min).each do |value|\n   \
    \ if a % value == 0 && b % value == 0\n      divisor = value\n    end\n  end\n\
    \  divisor\nend", "  return a if b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  if b\
    \ == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", " \
    \ if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  return a if b == 0\n  return b if a == 0\n  return a.abs if b.abs == 1\n  return\
    \ b.abs if a.abs == 1\n  return 1 if a.abs == b.abs\n  return greatest_common_divisor(b,\
    \ a) if a < b\n  greatest_common_divisor(b, a % b)\nend", "    # Implement your\
    \ code here\n    if b==0\n        return a\n    else\n        a%b\n    end\nend",
  "  return a if b == 0\n  return b if a == 0\n  a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a % b while b != 0\n  a\nend", "  a > b ? (a % b).zero?\
    \ ? b : greatest_common_divisor(b, a % b) : greatest_common_divisor(b, a)\nend",
  "  b == 0 ? a : greatest_common_divisor(b, a % b)\nend", "  if a == b\n    a\n \
    \ elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  a, b = b, a % b while b.nonzero?\n  a\nend", "  gcd\
    \ = 1\n  minimum = a < b ? a : b\n  (1..minimum).each do |i|\n    gcd = i if a\
    \ % i == 0 && b % i == 0\n  end\n  gcd\nend", "  b == 0 ? a : greatest_common_divisor(b,\
    \ a % b)\nend", "  return b if a == 0\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a % b while b.nonzero?\n  a\nend", "  return a if\
    \ b == 0\n  greatest_common_divisor(b, a % b)\nend", "  (a % b).zero? ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  return a if b == 0\n  return b if a == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b,\
    \ a % b)\n    end\nend", "  a, b = b, a % b while b != 0\n  a\nend", "    return\
    \ 0 if a == 0 or b == 0\n    return a if a == b\n    if a > b\n        greatest_common_divisor(a\
    \ - b, b)\n    else\n        greatest_common_divisor(a, b - a)\n    end\nend",
  "  while a != b\n    a, b = [a, b].minmax\n    a -= b\n  end\n  a\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend", "\ta, b = b, a % b while b !=\
    \ 0\n\ta\nend", "  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend",
  "  # your code here\nend", "  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend",
  "  a, b = b, a % b while b.nonzero?\n  a.abs\nend", "  a, b = b, a % b while b.nonzero?\n\
    \  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a\
    \ if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  a, b = b, a % b while\
    \ b != 0\n  a\nend", "  a, b = b, a if a < b\n  if b == 0\n    a\n  else\n   \
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  return nil if a == 0 or b\
    \ == 0\n  a, b = b, a if a < b\n  remainder = a % b\n  b == remainder ? b : greatest_common_divisor(b,\
    \ remainder)\nend", "\t# Your code here\nend", "  a, b = b, a if a < b\n  return\
    \ a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  return a if b ==\
    \ 0\n  a % b == 0 ? b : greatest_common_divisor(b, a % b)\nend", "  a, b = b,\
    \ a % b while b != 0\n  a\nend", "  b == 0 ? a : greatest_common_divisor(b, a\
    \ % b)\nend", "  min = a < b ? a : b\n  max = a > b ? a : b\n  while min != 0\n\
    \    if min == 0\n      return max\n    end\n    max = max % min\n    min = min\
    \ - 1\n  end\n  return max\nend", "  if a == b\n    a\n  elsif a < b\n    greatest_common_divisor(a,\
    \ b - a)\n  else\n    greatest_common_divisor(a - b, b)\n  end\nend", "  a, b\
    \ = b, a % b while b.nonzero?\n  a.abs\nend", "  # ToDo\nend", "  return b ==\
    \ 0 ? a : greatest_common_divisor(b, a % b)\nend", "  gcd_helper = lambda do |a,\
    \ b|\n    if b.zero?\n      a\n    else\n      gcd_helper.call(b, a % b)\n   \
    \ end\n  end", "  a, b = a.abs, b.abs\n  return a if b == 0\n  return b if a ==\
    \ 0\n  greatest_common_divisor(b, a % b)\nend", "  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  a, b\
    \ = b, a % b while b.nonzero?\n  a.abs\nend", "  a, b = b, a % b while b != 0\n\
    \  a\nend", "  raise \"Arguments are not integers\" unless a.is_a?(Integer) &&\
    \ b.is_a?(Integer)\n  greatest_common_divisor = 1\n  numbers = (1..[a, b].min).to_a.reverse\n\
    \  numbers.each do |i|\n    if a % i == 0 && b % i == 0\n      greatest_common_divisor\
    \ = i\n      break\n    end\n  end\n  greatest_common_divisor\nend", "  n = [a,\
    \ b].min\n  n.downto(1) do |d|\n    return d if (a % d).zero? && (b % d).zero?\n\
    \  end\nend", "  a, b = b, a if a < b\n  remainder = a % b\n  while remainder\
    \ != 0\n    a, b = b, remainder\n    remainder = a % b\n  end\n  b\nend", "  gcd_rec(a,\
    \ b)\nend", "  return b if a == 0\n  greatest_common_divisor(b % a, a)\nend",
  "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n\
    \    greatest_common_divisor(a, b - a)\n  end\nend", "  a = a.abs\n  b = b.abs\n\
    \  while a != 0 && b != 0\n    if a > b\n      a = a % b\n    else\n      b =\
    \ b % a\n    end\n  end\n  a + b\nend", "  a.gcd(b)\nend", "  max = [a, b].max\n\
    \  min = [a, b].min\n  if min == 0\n    raise \"Both arguments should be greater\
    \ than 0\"\n  end\n  gcd = 1\n  max.times do |i|\n    if min % (i + 1) == 0 &&\
    \ max % (i + 1) == 0\n      gcd = i + 1\n    end\n  end\n  gcd\nend", "  if b\
    \ == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", " \
    \ arr = [a, b]\n  arr.min.downto(1) do |i|\n    return i if arr.all? { |e| e %\
    \ i == 0 }\n  end\nend", "  # \u041D\u0430\u0445\u043E\u0434\u0438\u043C \u043E\
    \u0441\u0442\u0430\u0442\u043E\u043A \u043E\u0442 \u0434\u0435\u043B\u0435\u043D\
    \u0438\u044F\n  a_mod_b = a % b\n  # \u0415\u0441\u043B\u0438 \u043E\u0441\u0442\
    \u0430\u0442\u043E\u043A \u0440\u0430\u0432\u0435\u043D \u043D\u0443\u043B\u044E\
    , \u0442\u043E \u0447\u0438\u0441\u043B\u043E b \u044F\u0432\u043B\u044F\u0435\
    \u0442\u0441\u044F \u043D\u0430\u0438\u0431\u043E\u043B\u044C\u0448\u0438\u043C\
    \ \u043E\u0431\u0449\u0438\u043C \u0434\u0435\u043B\u0438\u0442\u0435\u043B\u0435\
    \u043C\n  # \u0442.\u043A. \u043E\u0441\u0442\u0430\u0442\u043E\u043A \u043E\u0442\
    \ \u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0440\u0430\u0432\u0435\u043D \u043D\
    \u0443\u043B\u044E => a \u0434\u0435\u043B\u0438\u0442\u0441\u044F \u043D\u0430\
    \ b \u0431\u0435\u0437 \u043E\u0441\u0442\u0430\u0442\u043A\u0430\n  if a_mod_b\
    \ == 0\n    b\n  # \u0438\u043D\u0430\u0447\u0435 \u0432\u044B\u0437\u044B\u0432\
    \u0430\u0435\u043C \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u0434\u043B\u044F\
    \ b \u0438 \u043E\u0441\u0442\u0430\u0442\u043A\u0430\n  else\n    greatest_common_divisor(b,\
    \ a_mod_b)\n  end\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  return a if b == 0\n  greatest_common_divisor(b, a %\
    \ b)\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  a, b = b, a if a < b\n  return b if a % b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  if a < b\n    a, b = b, a\n  end\n  while (n = a % b) != 0\n\
    \    a, b = b, n\n  end\n  b\nend", "  while a.nonzero? && b.nonzero?\n    a %=\
    \ b\n    b %= a\n  end\n  a + b\nend", "  if a == b\n    a\n  elsif a > b\n  \
    \  greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a, b\
    \ - a)\n  end\nend", "  a = a.abs\n  b = b.abs\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a%b)\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  return\
    \ a if b == 0\n  greatest_common_divisor(b, a % b)\nend", '  a, b = b, a if a
    < b', "  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  # Keep\
    \ calling this method until a == b\n  if a != b\n    if a > b\n      greatest_common_divisor(a\
    \ - b, b)\n    else\n      greatest_common_divisor(a, b - a)\n    end\n  else\n\
    \    a\n  end\nend", "  # TODO: Implement it\nend", "  while b > 0\n    a %= b\n\
    \    a, b = b, a\n  end\n  a\nend", "  while b != 0\n    temp = b\n    b = a %\
    \ b\n    a = temp\n  end\n  a\nend", "\treturn a if b == 0\n\treturn greatest_common_divisor(b,\
    \ a % b)\nend", "  return a if b == 0\n  return b if a == 0\n  if a > b\n    return\
    \ greatest_common_divisor(a % b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b % a)\n  end\nend", "  gcd = nil\n  if a == b\n    gcd = a\n  elsif a > b\n\
    \    (1..b).each do |divisor|\n      if a % divisor == 0 && b % divisor == 0\n\
    \        gcd = divisor\n      end\n    end\n  else\n    (1..a).each do |divisor|\n\
    \      if a % divisor == 0 && b % divisor == 0\n        gcd = divisor\n      end\n\
    \    end\n  end\n  gcd\nend", "  greater = [a, b].max\n  lesser = [a, b].min\n\
    \  until lesser == 0\n    remainder = greater % lesser\n    greater = lesser\n\
    \    lesser = remainder\n  end\n  greater\nend", "  while b != 0\n    a, b = b,\
    \ a % b\n  end\n  a\nend", "  loop do\n    a, b = b, a % b\n    return a if b.zero?\n\
    \  end\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  a, b\
    \ = b, a%b while b > 0\n  a\nend", "  a, b = b, a % b while b.nonzero?\n  a.abs\n\
    end", "  min = a > b ? b : a\n  max = a < b ? b : a\n  if min == 0\n    max\n\
    \  else\n    max = min\n    min = max % min\n    greatest_common_divisor(max,\
    \ min)\n  end\nend", "  # TODO\nend", "  a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a if a < b\n  c = a % b\n  return b if c == 0\n \
    \ greatest_common_divisor(b, c)\nend", "  (a % b).zero? ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  while a != b\n    a, b = [a, b].minmax\n    a -= b\n  end\n\
    \  a\nend", "  a, b = b, a % b while b.nonzero?\n  a.abs\nend", "    while(b !=\
    \ 0)\n        t = b\n        b = a % b\n        a = t\n    end\n    return a\n\
    end", "  # your code here\nend", "  # TODO: complete the method\nend", "  until\
    \ b == 0\n    temp = a % b\n    a = b\n    b = temp\n  end\n  a\nend", "  divisor\
    \ = 1\n  bigger = a > b ? a : b\n  for i in 1..bigger\n    if a % i == 0 && b\
    \ % i == 0\n      divisor = i\n    end\n  end\n  divisor\nend", "  if b == 0\n\
    \    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", "  a, b =\
    \ b, a % b while b != 0\n  a\nend", "  return b if a == 0\n  greatest_common_divisor(b\
    \ % a, a)\nend", "  a = a.abs\n  b = b.abs\n  while b != 0\n    a, b = b, a %\
    \ b\n  end\n  a\nend", "    return a if b == 0\n    greatest_common_divisor(b,\
    \ a % b)\nend", "  a_divisors = prime_divisors(a)\n  b_divisors = prime_divisors(b)\n\
    \  common_divisors = a_divisors & b_divisors\n  common_divisors.inject(:*)\nend",
  "  return a if b == 0\n  return b if a == 0\n  return a if a == b\n  smallest =\
    \ a < b ? a : b\n  return greatest_common_divisor(smallest, a - b) if a > b\n\
    \  return greatest_common_divisor(smallest, b - a) if a < b\nend", "  # todo\n\
    end", "  return a if b == 0\n  return b if a == 0\n  greater = [a, b].max\n  smaller\
    \ = [a, b].min\n  greatest_common_divisor(smaller, greater % smaller)\nend", " \
    \ # TODO: implement me\nend", "    if b == 0\n        return a\n    else\n   \
    \     greatest_common_divisor(b, a % b)\n    end\nend", "    a = a.abs\n    b\
    \ = b.abs\n    a, b = b, a if a < b\n    return a if b == 0\n    return greatest_common_divisor(b,\
    \ a % b)\nend", "  (1..a).select { |i| a % i == 0 && b % i == 0 }.max\nend", " \
    \ if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n  end\n\
    end", "\twhile b != 0\n\t\ta, b = b, a % b\n\tend\n\ta\nend", "\treturn nil if\
    \ a == nil || b == nil\n\t\n\twhile b != 0 do\n\t\tt = b\n\t\tb = a % b\n\t\t\
    a = t\n\tend\n\treturn a\nend", "  # YOUR CODE HERE\nend", "  a, b = b, a if a\
    \ < b\n  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  # your code here\n\
    end", "  while b != 0\n    a %= b\n    a, b = b, a\n  end\n  a\nend", "  x = a.abs\n\
    \  y = b.abs\n  if x > y\n    while y > 0\n      remainder = x % y\n      x =\
    \ y\n      y = remainder\n    end\n    x\n  else\n    while x > 0\n      remainder\
    \ = y % x\n      y = x\n      x = remainder\n    end\n    y\n  end\nend", "  if\
    \ b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", " \
    \ loop do\n    remainder = a % b\n    return b if remainder.zero?\n    a = b\n\
    \    b = remainder\n  end\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "    a,\
    \ b = b, a % b while b > 0\n    a\nend", "  current_gcd = 1\n  (2..[a, b].min).each\
    \ do |divisor|\n    if a % divisor == 0 && b % divisor == 0\n      current_gcd\
    \ = divisor\n    end\n  end\n  current_gcd\nend", "  # TODO\nend", "  a, b = b,\
    \ a % b while b != 0\n  a\nend", "  min = a < b ? a : b\n  min.downto(1) do |divisor|\n\
    \    return divisor if a % divisor == 0 && b % divisor == 0\n  end\nend", "  return\
    \ a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  while a != b\n  \
    \  if a > b\n      a = a - b\n    else\n      b = b - a\n    end\n  end\n  a\n\
    end", "  a, b = b, a % b while b != 0\n  a\nend", "  if a == b\n    a\n  elsif\
    \ a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  x = 1\n  y = a < b ? a : b\n  while x <= y\n    return\
    \ x if a % x == 0 && b % x == 0\n    x += 1\n  end\nend", "  a, b = b, a % b while\
    \ b.nonzero?\n  a.abs\nend", "  m = a.abs\n  n = b.abs\n  if m == 0\n    return\
    \ n\n  elsif n == 0\n    return m\n  end\n  if m < n\n    m, n = n, m\n  end\n\
    \  d = m / n\n  m = m - n * d\n  while m != 0\n    d = m / n\n    m = m - n *\
    \ d\n    if m < n\n      m, n = n, m\n    end\n  end\n  return n\nend", "  min\
    \ = [a, b].min\n  (1..min).to_a.reverse.find { |x| a % x == 0 && b % x == 0 }\n\
    end", "\tif b == 0\n\t\treturn a\n\telse\n\t\treturn greatest_common_divisor(b,\
    \ a % b)\n\tend\nend", "  # TODO: Return a greatest common divisor of two integers\
    \ a and b\n  return a if b == 0\n  a = a % b\n  greatest_common_divisor(b, a)\n\
    end", "  if a == b\n    a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend",
  "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n  end\n\
    end", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  # TODO: impl\xE9mentez la fonction\nend", "  a, b = b,\
    \ a % b while b.nonzero?\n  a.abs\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == b\n    a\n  elsif a < b\n    greatest_common_divisor(a,\
    \ b - a)\n  else\n    greatest_common_divisor(a - b, b)\n  end\nend", "  small,\
    \ big = [a, b].sort\n  while small > 0\n    big, small = small, big % small\n\
    \  end\n  big\nend", "  a, b = b, a if a < b\n  if b == 0\n    a\n  else\n   \
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  a, b = a.abs, b.abs\n  gcd\
    \ = 1\n  gcd = gcd(a, b) while a != 0 && b != 0\n  gcd(a, b)\nend", "  if a.gcd(b)\
    \ == 1\n    1\n  else\n    a.gcd(b)\n  end\nend", "  # TODO: return the greatest\
    \ common divisor of a and b\n  if a == b\n    return a\n  elsif a > b\n    return\
    \ greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend", "  a, b = b, a % b while b.nonzero?\n  a.abs\nend", "\t#\
    \ write your solution here\n\twhile b != 0\n\t\tt = b\n\t\tb = a % b\n\t\ta =\
    \ t\n\tend\n\ta\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a > b\n    a, b = b, a\n  end\n  # TODO: write a\
    \ recursive function to return greatest common divisor of a and b\n  r = a % b\n\
    \  if r == 0\n    b\n  else\n    greatest_common_divisor(b, r)\n  end\nend", " \
    \ a, b = b, a if a < b\n  return b if a % b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a if a < b\n  (a % b).zero? ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  # TODO\nend", "  a.gcd(b)\nend", "    if b == 0\n        return\
    \ a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend",
  "  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  # your code here\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  a, b = b, a if a < b\n  while b > 0\n    a, b = b, a\
    \ % b\n  end\n  a\nend", "\tif a == b\n\t\treturn a\n\telsif a > b\n\t\tgreatest_common_divisor(a\
    \ - b, b)\n\telse\n\t\tgreatest_common_divisor(a, b - a)\n\tend\nend", "  if b\
    \ == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", " \
    \   if a > b\n        a, b = b, a\n    end\n    if b % a == 0\n        return\
    \ a\n    else\n        return greatest_common_divisor(b % a, a)\n    end\nend\n\
    greatest_common_divisor.call(3, 5)\ngreatest_common_divisor.call(25, 15)", " \
    \ # TODO: write your code here\nend", "  a, b = b, a if a < b\n  while b > 0\n\
    \    a, b = b, a % b\n  end\n  a\nend", "  min = a < b ? a : b\n  (1..min).select\
    \ { |i| a % i == 0 && b % i == 0 }.max\nend", "  if b == 0\n    a\n  else\n  \
    \  greatest_common_divisor(b, a % b)\n  end\nend", "  if a == b\n    a\n  elsif\
    \ a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  d = 1\n  [a, b].min.downto(1) do |i|\n    d = i if a\
    \ % i == 0 && b % i == 0\n  end\n  d\nend", "  (a % b).zero? ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  return b if a % b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  a, b = b, a if a < b\n  a % b == 0 ? b : greatest_common_divisor(b, a\
    \ % b)\nend", "  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "\ta, b = b, a if a < b\n\twhile b != 0\n\t\ta, b = b,\
    \ a % b\n\tend\n\ta\nend", "  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  return b if a == 0\n  a % b\nend", "  while a != b\n    a >\
    \ b ? a -= b : b -= a\n  end\n  a\nend", "  divisor = [a, b].min\n  while divisor\
    \ > 0\n    return divisor if a % divisor == 0 && b % divisor == 0\n    divisor\
    \ -= 1\n  end\nend", "  # Compute the greatest common divisor of two integers\n\
    \  gcd = 1\n  if a > b\n    i = b\n  else\n    i = a\n  end\n  while i > 0\n \
    \   if a % i == 0 && b % i == 0\n      gcd = i\n      i = 0\n    else\n      i\
    \ -= 1\n    end\n  end\n  gcd\nend", "  common_divisors = common_divisors(a).select\
    \ { |x| common_divisors(b).include?(x) }\n  common_divisors.empty? ? 1 : common_divisors.max\n\
    end", "  while a != b\n    if a > b\n      a = a - b\n    else\n      b = b -\
    \ a\n    end\n  end\n  a\nend", "  for i in a.downto(0)\n    if a % i == 0 &&\
    \ b % i == 0\n      return i\n    end\n  end\nend", "  if b == 0\n    a\n  else\n\
    \    greatest_common_divisor(b, a % b)\n  end\nend", "  a, b = b, a % b while\
    \ b.nonzero?\n  a.abs\nend", "  gcd = 1\n  max = [a, b].max\n  min = [a, b].min\n\
    \  for i in (2..min)\n    if a % i == 0 && b % i == 0\n      gcd = i\n    end\n\
    \  end\n  gcd\nend", "  if b > a\n    divisor = b\n  else\n    divisor = a\n \
    \ end\n  i = divisor\n  while i > 0\n    if a % i == 0 and b % i == 0\n      return\
    \ i\n    end\n    i -= 1\n  end\nend", "  if a == b\n    a\n  elsif a > b\n  \
    \  greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a, b\
    \ - a)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
