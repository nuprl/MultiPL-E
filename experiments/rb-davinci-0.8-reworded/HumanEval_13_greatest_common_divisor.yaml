name: HumanEval_13_greatest_common_divisor
language: rb
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
  \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
  \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
  \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
completions: ["  min = [a, b].min\n  divisor = 1\n  (1..min).each do |value|\n   \
    \ if a % value == 0 && b % value == 0\n      divisor = value\n    end\n  end\n\
    \  divisor\nend", "  return a if b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  if b\
    \ == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", " \
    \ if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  return a if b == 0\n  return b if a == 0\n  return a.abs if b.abs == 1\n  return\
    \ b.abs if a.abs == 1\n  return 1 if a.abs == b.abs\n  return greatest_common_divisor(b,\
    \ a) if a < b\n  greatest_common_divisor(b, a % b)\nend", "    # Implement your\
    \ code here\n    if b==0\n        return a\n    else\n        a%b\n    end\nend",
  "  return a if b == 0\n  return b if a == 0\n  a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a % b while b != 0\n  a\nend", "  a > b ? (a % b).zero?\
    \ ? b : greatest_common_divisor(b, a % b) : greatest_common_divisor(b, a)\nend",
  "  b == 0 ? a : greatest_common_divisor(b, a % b)\nend", "  if a == b\n    a\n \
    \ elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  a, b = b, a % b while b.nonzero?\n  a\nend", "  gcd\
    \ = 1\n  minimum = a < b ? a : b\n  (1..minimum).each do |i|\n    gcd = i if a\
    \ % i == 0 && b % i == 0\n  end\n  gcd\nend", "  b == 0 ? a : greatest_common_divisor(b,\
    \ a % b)\nend", "  return b if a == 0\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  a, b = b, a % b while b.nonzero?\n  a\nend", "  return a if\
    \ b == 0\n  greatest_common_divisor(b, a % b)\nend", "  (a % b).zero? ? b : greatest_common_divisor(b,\
    \ a % b)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
