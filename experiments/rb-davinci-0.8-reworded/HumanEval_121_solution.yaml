name: HumanEval_121_solution
language: rb
prompt: "# Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# >>> solution.call([5, 8, 7, 1])\n#\
  \ 12\n# >>> solution.call([3, 3, 3, 3, 3])\n# 9\n# >>> solution.call([30, 13, 24,\
  \ 321])\n# 0\ndef solution(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
  \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7,\
  \ 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
  \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
  \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
  \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
completions: ["  sum = 0\n  lst.each_with_index do |n, i|\n    sum += n if n.odd?\
    \ && i.even?\n  end\n  sum\nend", "  lst.values_at(* lst.each_index.select {|i|\
    \ i.even?}).select {|x| x.odd?}.sum\nend", "  lst.select.with_index{|x,i| x.odd?\
    \ && i.even?}.sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|x| x.odd?}.sum\nend", "  sum = 0\n  even_indices = (0...lst.length).step(2).to_a\n\
    \  odd_indices = (1...lst.length).step(2).to_a\n  even_indices.each do |index|\n\
    \    sum += lst[index] if lst[index].odd?\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |element, index| element.odd? && index.even? }.reduce(:+)\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even? }).select {|x| x.odd? }.sum\nend", "  lst.select.with_index\
    \ { |x, idx| idx.even? && x.odd? }.reduce(:+)\nend", "  ary = lst.each_with_index.select\
    \ { |_, i| i.even? }.select { |x, _| x.odd? }\n  ary.map { |x, _| x }.reduce(:+)\n\
    end", "  lst.select.with_index { |num, idx| num.odd? && idx.even? }.reduce(:+)\n\
    end", "  lst.each_with_index.reduce(0) do |sum, (el, idx)|\n    sum + el if el.odd?\
    \ && idx.even?\n  end\nend", "  lst.map.with_index { |v, i| v if i.even? && v.odd?\
    \ }.compact.sum\nend", "  lst.map.with_index { |num, index| num if index.even?\
    \ && num.odd? }.compact.sum\nend", "\todd = []\n\teven = []\n\tlst.each_with_index\
    \ do |l, i|\n\t\tif l.odd?\n\t\t\todd << l\n\t\tend\n\t\tif l.even?\n\t\t\teven\
    \ << l\n\t\tend\n\tend\n\todd.count == 0 ? odd = 0 : odd = odd.sum\n\teven.count\
    \ == 0 ? even = 0 : even = even.sum\n\todd - even\nend", "  lst.each_with_index.reduce(0)\
    \ do |sum, (elem, idx)|\n    sum + elem if elem.odd? && idx.even?\n  end\nend",
  "  lst.each_with_index.map{|a,i| a if a.odd? && i.even?}.compact.reduce(:+)\nend",
  "  # TODO\nend", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end", "  lst.select.with_index{|num,i| i.even? && num.odd?}.reduce(:+)\nend",
  "  lst.each_with_index.inject(0) { |res, (num, i)| i.even? && num.odd? ? res + num\
    \ : res }\nend", "  lst.select.with_index { |item, index| item.odd? && index.even?\
    \ }.sum\nend", "  p lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|v| v.odd?}.reduce(:+)\nend", "  lst.select.with_index { |_, i| i.even? }.sum(&:odd?)\n\
    end", "  lst.each_with_index.inject(0) { |sum, (num, i)| num.odd? && i.even? ?\
    \ sum + num : sum }\nend", "  sum = 0\n  lst.each_with_index do |e, i|\n    sum\
    \ += e if i.even? && e.odd?\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |n, i|\n    sum += n if i.even? && n.odd?\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each_with_index do |num, i|\n    sum += num if num.odd? && i.even?\n  end\n\
    \  sum\nend", "  lst.each_with_index.inject(0) { |sum, (n, i)| n.odd? && i.even?\
    \ ? sum + n : sum }\nend", "  sum = 0\n  lst.each_with_index do |v, i|\n    sum\
    \ += v if v.odd? && i.even?\n  end\n  sum\nend", "  count = 0\n  (0...lst.length).step(2)\
    \ do |num|\n    count += lst[num] if lst[num].odd?\n  end\n  count\nend", "  lst.select.with_index\
    \ { |v, i| v.odd? && i.even? }.sum\nend", "  sum = 0\n  lst.each_with_index do\
    \ |item, index|\n    sum += item if index.even? && item.odd?\n  end\n  sum\nend",
  "  sum = 0\n  lst.each_with_index do |num, index|\n    sum += num if index.even?\
    \ && num.odd?\n  end\n  sum\nend", "  # Your code here\nend", "  lst.each_with_index.reduce(0)\
    \ do |sum, (v, i)|\n    sum + v if i.even? && v.odd?\n  end\nend", "  raise NotImplementedError\n\
    end", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\nend", " \
    \ lst.select.with_index{|e, i| e.odd? && i.even?}.sum\nend", "  lst.select.with_index{|e,i|\
    \ e.odd? && i.even?}.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|x| x.odd?}.reduce(:+)\nend", "  lst.each_with_index.inject(0)\
    \ { |acc, (e, i)| acc + e if i.even? && e.odd? }\nend", "  lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).sum\nend", "  lst.select.with_index { |num,\
    \ i| i.even? && num.odd? }.sum\nend", "  lst.map.with_index { |item, index| index.even?\
    \ ? item : 0 }.select { |item| item.odd? }.sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|x| x.odd?}.sum\nend", "  # We need to check all values\
    \ that are in even position for being odd\n  # and sum them up\n  # and return\
    \ that total as the answer\n  # We can use a helper array to only store the odd\
    \ numbers in even positions\n  # Then we can use the reduce method to sum that\
    \ array\n  # Finally, we can return the total\n  lst.select.with_index { |val,\
    \ i| val.odd? && i.even? }.reduce(:+)\nend", "  lst.each_with_index.reduce(0)\
    \ do |odd_sum, (val, index)|\n    (val.odd? && index.even?) ? odd_sum + val :\
    \ odd_sum\n  end\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.reduce(:+)\nend", '  # sum of odd numbers in even positions', "  lst.select.with_index{|e,i|\
    \ i.even?}.select{|e| e.odd?}.sum\nend", "  lst.select.with_index{|n, i| n.odd?\
    \ && i.even?}.sum\nend", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end", "  lst.map.with_index { |el, index| el if (index % 2).zero? }.compact.inject(:+)\n\
    end", "  # code goes here\n  lst.select.with_index { |num, i| i.even? && num.odd?\
    \ }.sum\nend", "  sum = 0\n  lst.each_with_index do |element, index|\n    if index.even?\n\
    \      sum += element if element.odd?\n    end\n  end\n  sum\nend", "  lst.values_at(*lst.each_index.select(&:even?)).reduce(0)\
    \ { |sum, n| n.odd? ? sum + n : sum }\nend", "  lst.select.with_index { |_, idx|\
    \ idx.even? }.select(&:odd?).sum\nend", "  lst.select.with_index { |_, i| i.even?\
    \ }.select(&:odd?).reduce(0, :+)\nend", "  # Your solution goes here\nend", " \
    \ result = 0\n  lst.each_with_index do |number, index|\n    result += number if\
    \ index.even? && number.odd?\n  end\n  result\nend", "  lst.select.with_index{|_,i|\
    \ i.even?}.select{|n| n.odd?}.sum\nend", "    even = false\n    sum = 0\n    lst.each\
    \ do |i|\n        if even\n            sum += i if i.odd?\n        end\n     \
    \   even = !even\n    end\n    sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|e| e.odd?}.sum\nend", "  lst.select.with_index { |_,\
    \ i| i.even? }.select(&:odd?).sum\nend", "  lst.select.with_index { |n,i| n.odd?\
    \ && i.even? }.reduce(:+)\nend", "    lst.values_at(*lst.each_index.select {|i|\
    \ i.even?}).compact.select{|e| e.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |value, index|\n    sum += value if index.even? && value.odd?\n  }\n  sum\n\
    end", "  lst.select.with_index{|e,i| e.odd? && i.even?}.sum\nend", "  # your code\
    \ here\nend", "  lst.select.with_index{|num, index| num.odd? and index.even?}.sum\n\
    end", "  sum = 0\n  lst.each_with_index do |x,i|\n    next if i % 2 == 0 || x\
    \ % 2 == 1\n    sum += x\n  end\n  sum\nend", "  lst.find_all.with_index { |n,\
    \ i| i.even? && n.odd? }.sum\nend", "  odds = []\n  lst.each_with_index do |e,\
    \ i|\n    odds << e if e.odd? && i.even?\n  end\n  odds.sum\nend", "  sum = 0\n\
    \  for i in 0..lst.length - 1\n    sum += lst[i] if lst[i].odd? && i.even?\n \
    \ end\n  sum\nend", "  i = 0\n  sum = 0\n  while i < lst.length\n    if i.even?\
    \ && lst[i].odd?\n      sum += lst[i]\n    end\n    i += 1\n  end\n  sum\nend",
  "  lst.select.with_index{|n, i| i.even? }.select(&:odd?).sum\nend", "    # Your\
    \ code here\nend", "  total = 0\n  lst.each_with_index do |val, index|\n    if\
    \ index.even? && val.odd?\n      total += val\n    end\n  end\n  total\nend",
  "  # write your code here\nend", "  lst.each_with_index.reduce(0) do |sum, (element,\
    \ index)|\n    sum + element if index.even? && element.odd?\n  end\nend", "  lst.values_at(*lst.each_index.select\
    \ {|i| i.even?}).inject(0) {|sum, elem| elem.odd? ? sum + elem : sum}\nend", " \
    \ lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\nend", "  sum =\
    \ 0\n  lst.each_with_index do |el, i|\n    if i.even? && el.odd?\n      sum +=\
    \ el\n    end\n  end\n  sum\nend", "  # Code here\nend", "  idx = 0\n  total =\
    \ 0\n  while idx < lst.length\n    total += lst[idx] if idx.even? && lst[idx].odd?\n\
    \    idx += 1\n  end\n  total\nend", "  lst.select.with_index{|x,i| i.even? &&\
    \ x.odd?}.reduce(:+)\nend", "  lst.select.with_index { |num, idx| idx.even? &&\
    \ num.odd? }.sum\nend", "  sum = 0\n  lst.each_with_index { |item, index| sum\
    \ += item if index.even? && item.odd? }\n  sum\nend", "  numbers = lst.select\
    \ { |num| lst.index(num).even? }\n  numbers.select { |num| num.odd? }.reduce(:+)\n\
    end", "  odd_elems = lst.select.with_index { |elem, idx| idx.even? && elem.odd?\
    \ }\n  odd_elems.sum\nend", "  lst.select.with_index { |x, i| x.odd? if i.even?\
    \ }.reduce(:+)\nend", "  # TODO: write your code here\nend", "  total = 0\n  #\
    \ iterate through the array with index\n  lst.each_with_index do |x, i|\n    #\
    \ if the index is even and the number is odd\n    if i.even? && x.odd?\n     \
    \ # add the number to the total\n      total += x\n    end\n  end\n  total\nend",
  "  lst.values_at(* lst.each_index.select {|i| i.even? }).select{|n| n.odd?}.sum\n\
    end", "  lst.each_with_index.reduce(0) do |sum, (item, index)|\n    if item.odd?\
    \ && index.even?\n      sum + item\n    else\n      sum\n    end\n  end\nend",
  "  lst.select.with_index { |el, i| el.odd? && i.even? }.reduce(:+)\nend", "  new_lst\
    \ = []\n  counter = 0\n  lst.each_with_index do |x, y|\n    if y.even? && x.odd?\n\
    \      new_lst << x\n    end\n  end\n  new_lst.inject(:+)\nend", "  lst.select.with_index\
    \ { |e, i| i.even? && e.odd? }.sum\nend", "  lst.select.with_index{|e,i| i.even?\
    \ && e.odd?}.reduce(:+)\nend", "  even = lst.select.with_index{|x,i| i.even? &&\
    \ x.odd?}.reduce(:+)\n  return even\nend", "  lst.values_at(* lst.each_index.select(&:even?)).select\
    \ { |x| x.odd? }.sum\nend", "  lst.each_index.select { |i| i.even? }.sum { |i|\
    \ lst[i] }\nend", "  lst.select{|n| n.odd? && n % 2 == 0}.reduce(:+)\nend", " \
    \ lst.values_at(*lst.each_index.select(&:even?)).select(&:odd?).sum\nend", " \
    \ return 0 if lst.empty?\n  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end", "  lst.select.with_index { |_, idx| idx.even? }.select(&:odd?).sum\nend",
  "  # Write your solution here\n  lst.map.with_index.inject(0) { |sum, (x, i)| (i\
    \ + 1).odd? ? sum : sum + x.odd? ? x : 0 }\nend", "  lst.select.with_index { |_,\
    \ i| i.even? }.select(&:odd?).sum\nend", "  lst.select.with_index { |x, i| x.odd?\
    \ && i.even? }.sum\nend", "  # your code here\nend", "  sum = 0\n  lst.each_with_index\
    \ do |num, i|\n    sum += num if num.odd? && i.even?\n  end\n  sum\nend", "  lst.map.with_index{|x,i|\
    \ x.odd? && i.even? ? x : 0}.sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).sum\nend", "  lst.select.with_index { |n, i| n.odd? && i.even?\
    \ }.sum\nend", "  lst.select.with_index { |x, i| x.odd? if i.even? }.reduce(:+)\n\
    end", "  lst.select.with_index { |n,i| n.odd? && i.even? }.sum\nend", "  # x represent\
    \ the variable that is used as an index\n  lst.select.with_index{|x,i| i.even?\
    \ && x.odd?}.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(0)\
    \ {|sum, n| n.odd? ? sum + n : sum}\nend", "    even_pos = []\n    odd_pos = []\n\
    \    lst.each_with_index do |num, index|\n        if index % 2 == 0\n        \
    \    even_pos << num\n        else\n            odd_pos << num\n        end\n\
    \    end\n    even_pos.select{|num| num.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |el, idx|\n    sum += el if el.odd? && idx.even?\n  end\n  sum\nend", " \
    \ lst.select.with_index { |n, i| n.odd? if i.even? }.reduce(:+)\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).reduce(0) {|sum, num| sum + num if num.odd?}.to_i\n\
    end", "  lst.select.with_index { |x, i| i.even? }.select(&:odd?).reduce(:+)\n\
    end", "  lst.select.with_index { |x, i| i.even? && x.odd? }.sum\nend", "  result\
    \ = 0\n  lst.each_with_index do |e, i|\n    result += e if i.even? && e.odd?\n\
    \  end\n  result\nend", "  i = 0\n  total = 0\n  while i < lst.length\n    if\
    \ i.even? && lst[i].odd?\n      total += lst[i]\n    end\n    i += 1\n  end\n\
    \  total\nend", "  sum = 0\n  for i in 0..lst.length-1\n    if i % 2 == 0 && lst[i]\
    \ % 2 != 0\n      sum += lst[i]\n    end\n  end\n  sum\nend", "  (0...lst.length).step(2).map\
    \ { |i| lst[i] }.select(&:odd?).sum\nend", "  lst.select.with_index{|_, i| i.even?}.select(&:odd?).sum\n\
    end", "  lst.values_at(* lst.each_index.select(&:even?)).select { |x| x.odd? }.sum\n\
    end", "  # TODO: Code goes here\nend", "\tlst.keep_if.with_index { |n,i| i.even?\
    \ }.select { |n| n.odd? }.sum\nend", "\tlst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select{|x| x.odd?}.sum\nend", "  lst.each_with_index.map { |num,\
    \ index| num if index.even? && num.odd? }.compact.reduce(:+)\nend", "  sum = 0\n\
    \  lst.each_with_index do |num, ind|\n    sum += num if num.odd? && ind.even?\n\
    \  end\n  sum\nend", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\n\
    end", "  sum = 0\n  lst.each_with_index do |number, index|\n    sum += number\
    \ if number.odd? && index.even?\n  end\n  sum\nend", "  lst.each_with_index.select\
    \ { |_, idx| idx.even? }.map(&:first).select(&:odd?).sum\nend", "  lst.select.with_index{|x,\
    \ i| x.odd? && i.even?}.sum\nend", "  lst.select.with_index { |x, i| i.even? &&\
    \ x.odd? }.sum\nend", "  lst.each_with_index.reduce(0) do |sum, (elem, index)|\n\
    \    if index.even? && elem.odd?\n      sum + elem\n    else\n      sum\n    end\n\
    \  end\nend", "    sum = 0\n    lst.each_with_index do |num, index|\n        if\
    \ num.odd? && index.even?\n            sum += num\n        end\n    end\n    sum\n\
    end", "  #todo\nend", "  sum = 0\n  lst.each_with_index do |e, i|\n    sum +=\
    \ e if i.even? && e.odd?\n  end\n  sum\nend", "  lst.select.with_index{|e,i| i.even?\
    \ && e.odd?}.reduce(:+)\nend", "  lst.select.with_index { |n, i| n.odd? if i.even?\
    \ }.reduce(:+)\nend", "  lst.map.with_index { |x, i| x if i.even? && x.odd? }.compact.sum\n\
    end", "  odds = lst.select(&:odd?)\n  odds.inject(0) { |acc, el| acc + el }\n\
    end", "  lst.select.with_index{|v,i| i.even? && v.odd?}.sum\nend", "  sum = 0\n\
    \  lst.each_with_index do |e, i|\n    sum += e if e.odd? && i.even?\n  end\n \
    \ sum\nend", "  lst.each_with_index.inject(0) { |sum, (item, index)| (index %\
    \ 2).zero? ? sum + item : sum }\nend", "  lst.values_at(*lst.each_index.select(&:even?)).select(&:odd?).sum\n\
    end", "  even_odd_sum = 0\n  lst.each_with_index do |n, idx|\n    even_odd_sum\
    \ += n if n.odd? && idx.even?\n  end\n  even_odd_sum\nend", "    lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select {|x| x.odd?}.sum\nend", "  lst.select.with_index{|x,i|\
    \ i.even? && x.odd?}.sum\nend", "  lst.select.with_index { |i, idx| idx.even?\
    \ && i.odd? }.sum\nend", "  # lst.each_with_index { |i, ind| puts \"#{i} index:\
    \ #{ind}\" }\n  lst.each_with_index.select { |i, ind| ind.even? && i.odd? }.map(&:first).sum\n\
    end", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).sum\nend", " \
    \ lst.select.with_index { |x,i| i.even? && x.odd? }.sum\nend", "  lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).sum\nend", "  lst.each_with_index.inject(0)\
    \ { |sum, (i,index)| (i.odd? && index.even?) ? sum + i : sum }\nend", "  sum =\
    \ 0\n  index = 0\n  while index < lst.length\n    if lst[index].odd? && index.even?\n\
    \      sum += lst[index]\n    end\n    index += 1\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |x, i| x.odd? && i.even? }.sum\nend", "  sum = 0\n  lst.each_with_index do\
    \ |el, idx|\n    if idx.even?\n      sum += el if el.odd?\n    end\n  end\n  sum\n\
    end", "  lst.select.with_index { |_, index| index.even? }.select(&:odd?).reduce(:+)\n\
    end", "  lst.each_with_index.reduce(0) do |sum, (num, i)|\n    sum + (num if i.even?\
    \ && num.odd?)\n  end\nend", "  lst.select.with_index { |v, i| v.odd? && i.even?\
    \ }.reduce(:+)\nend", "  #put your solution here\nend", "  x = lst.partition.with_index\
    \ { |_, i| i.even? }\n  x[0].select(&:odd?).sum\nend", "  # TODO: your code here\n\
    end", "  lst.select.with_index { |v, i| v.odd? && i.even? }.reduce(:+)\nend",
  "  res = 0\n  lst.each_with_index { |e, i| res += e if i.even? && e.odd? }\n  res\n\
    end", "  # Your Code Here\nend", "  lst.each_with_index.map { |x, index| x if\
    \ index.even? && x.odd? }.compact.sum\nend", "  lst.select.with_index { |n, i|\
    \ i.even? && n.odd? }.sum\nend", "  sum = 0\n  index = 0\n  loop do\n    break\
    \ if index == lst.size\n    current_number = lst[index]\n    sum += current_number\
    \ if index.even? && current_number.odd?\n    index += 1\n  end\n  sum\nend", " \
    \ lst.map.with_index{|x,i| i.even? ? x : 0}.select{|x| x % 2 != 0}.reduce(:+)\n\
    end", "  # Your code here\nend", "  #elements in even position are: [5, 7]\n \
    \ #odd elements are: [5, 7]\n  #return 12\n  sum = 0\n  lst.each_with_index do\
    \ |num, idx|\n    if idx.even? && num.odd?\n      sum += num\n    end\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each_with_index do |item, index|\n    sum += item\
    \ if item.odd? && index.even?\n  end\n  sum\nend", "  lst.each_with_index.reduce(0)\
    \ do |sum, (x, i)|\n    sum + (x.odd? && i.even? ? x : 0)\n  end\nend", "  lst.select.with_index\
    \ { |num, i| i.even? && num.odd? }.sum\nend", "  odd_index_sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    odd_index_sum += num if index.even? && num.odd?\n  end\n\
    \  odd_index_sum\nend", "  lst.select.with_index { |x, i| x.odd? && i.even? }.sum\n\
    end", "  lst.select.with_index { |x, i| x.odd? if i.even? }.reduce(:+)\nend",
  "  sum = 0\n  lst.each_with_index do |num, i|\n    if num.odd? && i.even?\n    \
    \  sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |number, i| sum += number if number.odd? && i.even? }\n  sum\nend", "  lst.each_index.select\
    \ { |i| i.even? }.map { |i| lst[i] }.select { |i| i.odd? }.reduce(:+)\nend", " \
    \ lst.select.with_index { |_, i| i.even? }.select(&:odd?).reduce(0, :+)\nend",
  "  sum = 0\n  lst.each_with_index do |num, idx|\n    sum += num if idx.even? &&\
    \ num.odd?\n  end\n  sum\nend", "    result = 0\n    lst.each_with_index do |item,\
    \ index|\n        if item.odd? and index.even?\n            result += item\n \
    \       end\n    end\n    result\nend", "  lst.select.with_index { |v, i| v.odd?\
    \ && i.even? }.sum\nend", "  lst.each_with_index.select { |x, y| y.even? }.map(&:first).select(&:odd?).sum\n\
    end", "  sum = 0\n  i = 0\n  while i < lst.length\n    sum += lst[i] if i.even?\
    \ && lst[i].odd?\n    i += 1\n  end\n  sum\nend", "\tlst.each_with_index.reduce(0)\
    \ do |sum, (num, idx)|\n\t\tsum += num if idx.even? && num.odd?\n\t\tsum\n\tend\n\
    end", "  # evens = lst.select { |num| num.even? }\n  # odds = lst.select { |num|\
    \ num.odd? }\n  # evens.select { |num| num.odd? }.reduce(:+) + odds.select { |num|\
    \ num.even? }.reduce(:+)\n  lst.map.with_index { |num, index| index.even? ? num\
    \ : 0 }.reduce(:+) + lst.map.with_index { |num, index| index.odd? ? num : 0 }.reduce(:+)\n\
    end", "  lst.each_with_index.map{|x, i| x if x.odd? && i.even?}.compact.reduce(:+)\n\
    end", "  lst.each_with_index.inject(0) { |sum, (e,i)| i.even? && e.odd? ? sum\
    \ + e : sum }\nend", "    lst.each_with_index.map { |num, i| num if i.even? &&\
    \ num.odd? }.compact.sum\nend", "  lst.select.with_index { |i, k| i.odd? && k.even?\
    \ }.reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
