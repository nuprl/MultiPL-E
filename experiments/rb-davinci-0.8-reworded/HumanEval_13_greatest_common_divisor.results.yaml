language: rb
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  min = [a, b].min\n  divisor = 1\n  (1..min).each do |value|\n    if a\
    \ % value == 0 && b % value == 0\n      divisor = value\n    end\n  end\n  divisor\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4fxvbhtn

    Started

    .

    Finished in 0.000416783 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.33 tests/s, 9597.32 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk60akurk

    Started

    .

    Finished in 0.000395988 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2525.33 tests/s, 10101.32 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2e8fy0bw

    Started

    .

    Finished in 0.000382945 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2611.34 tests/s, 10445.36 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd7lhtz8c

    Started

    .

    Finished in 0.000400464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2497.10 tests/s, 9988.41 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl4a1d9eb

    Started

    .

    Finished in 0.000398476 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2509.56 tests/s, 10038.25 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl4a1d9eb

    Started

    .

    Finished in 0.000398476 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2509.56 tests/s, 10038.25 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 1
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  return b if a == 0\n  return a.abs if b.abs == 1\n\
    \  return b.abs if a.abs == 1\n  return 1 if a.abs == b.abs\n  return greatest_common_divisor(b,\
    \ a) if a < b\n  greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6k6paglx\nStarted\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/tmp/tmp6k6paglx.rb:19:in\
    \ `test_greatest_common_divisor'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_greatest_common_divisor\n     18:     candidate = method(:greatest_common_divisor)\n\
    \  => 19:     assert_equal(1, candidate.call(3, 7))\n     20:     assert_equal(5,\
    \ candidate.call(10, 15))\n     21:     assert_equal(7, candidate.call(49, 14))\n\
    \     22:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <3>\n===============================================================================\n\
    \nFinished in 0.011280693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.65 tests/s, 88.65 assertions/s\n"
  timestamp: 1659824131
- exit_code: 1
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n    # Implement your code here\n    if b==0\n        return a\n    else\n\
    \        a%b\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp42plqphe\nStarted\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/tmp/tmp42plqphe.rb:18:in\
    \ `test_greatest_common_divisor'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_greatest_common_divisor\n     17:     candidate = method(:greatest_common_divisor)\n\
    \  => 18:     assert_equal(1, candidate.call(3, 7))\n     19:     assert_equal(5,\
    \ candidate.call(10, 15))\n     20:     assert_equal(7, candidate.call(49, 14))\n\
    \     21:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <3>\n===============================================================================\n\
    \nFinished in 0.006416102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.86 tests/s, 155.86 assertions/s\n"
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  return b if a == 0\n  a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgm60tldg

    Started

    .

    Finished in 0.000402103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2486.92 tests/s, 9947.70 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a % b while b != 0\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate =\
    \ method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n\
    \    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavw8km6l

    Started

    .

    Finished in 0.0005366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1863.59 tests/s, 7454.34 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a > b ? (a % b).zero? ? b : greatest_common_divisor(b, a % b) : greatest_common_divisor(b,\
    \ a)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo300jk8f

    Started

    .

    Finished in 0.000408326 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2449.02 tests/s, 9796.09 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  b == 0 ? a : greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu8rnhdvw

    Started

    .

    Finished in 0.000385022 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2597.25 tests/s, 10389.02 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd7lhtz8c

    Started

    .

    Finished in 0.000400464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2497.10 tests/s, 9988.41 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a % b while b.nonzero?\n  a\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n \
    \   candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnnonogbd

    Started

    .

    Finished in 0.000407192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2455.84 tests/s, 9823.38 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  gcd = 1\n  minimum = a < b ? a : b\n  (1..minimum).each do |i|\n    gcd\
    \ = i if a % i == 0 && b % i == 0\n  end\n  gcd\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n \
    \   candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpplae464h

    Started

    .

    Finished in 0.000408594 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2447.42 tests/s, 9789.67 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  b == 0 ? a : greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu8rnhdvw

    Started

    .

    Finished in 0.000385022 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2597.25 tests/s, 10389.02 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return b if a == 0\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1fnidgpa

    Started

    .

    Finished in 0.000415148 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2408.78 tests/s, 9635.12 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a % b while b.nonzero?\n  a\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n \
    \   candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnnonogbd

    Started

    .

    Finished in 0.000407192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2455.84 tests/s, 9823.38 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk60akurk

    Started

    .

    Finished in 0.000395988 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2525.33 tests/s, 10101.32 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
- exit_code: 0
  program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  (a % b).zero? ? b : greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmnycuvaa

    Started

    .

    Finished in 0.000391507 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2554.23 tests/s, 10216.93 assertions/s

    '
  stdout: ''
  timestamp: 1659824131
