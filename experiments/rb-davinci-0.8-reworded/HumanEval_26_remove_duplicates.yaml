name: HumanEval_26_remove_duplicates
language: rb
prompt: "# From an array of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates.call([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
  \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
  \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
completions: ["  #TODO: implement the method\n  (numbers & numbers).sort\nend", " \
    \ numbers.uniq\nend", "  numbers.select.with_index { |element, index| numbers.index(element)\
    \ == index }\nend", "  numbers.uniq\nend", "  x = numbers.uniq\n  return x\nend",
  "  numbers.uniq\nend", "  numbers.uniq\nend", "  numbers.uniq\nend", "  numbers.uniq\n\
    end", "  numbers.uniq\nend", "  numbers.uniq\nend", "  uniq = []\n  numbers.each\
    \ do |number|\n    uniq << number unless uniq.include?(number)\n  end\n  uniq\n\
    end", "    return numbers.reject { |x| numbers.count(x) > 1 }\nend", "  # TODO:\
    \ Write me\n  output = []\n  numbers.each do |n|\n    output << n unless output.include?(n)\n\
    \  end\n  output\nend", "  numbers.uniq\nend", "  numbers.find_all { |e| numbers.count(e)\
    \ == 1 }\nend", "  numbers.to_a.uniq\nend", "  numbers.uniq\nend", "    numbers.uniq\n\
    end", "  arr = []\n  numbers.each do |n|\n    if arr.include?(n)\n      arr.delete(n)\n\
    \    else\n      arr << n\n    end\n  end\n  arr\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
