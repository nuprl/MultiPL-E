name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return array of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "\tstring.length.times.with_object([]) do |i, result|\n\
    \t\tresult << string[0..i]\n\tend\nend", "\tstring.split('').map.with_index {\
    \ |x, i| string[0..i] }\nend", "  string.split('').map { |char| string[0..string.index(char)]\
    \ }\nend", "  string.chars.each_with_object([]) do |char, result|\n    result\
    \ << string[0..result.length]\n  end\nend", "  # create array to store results\n\
    \  result = []\n  # iterate through each character in string\n  (0...string.length).each\
    \ do |i|\n    # add to array each character and its prefixes\n    result << string[0..i]\n\
    \  end\n  result\nend", "  prefixes = []\n  for i in 0..string.length\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0,\
    \ i] }\nend", "  result = []\n  for i in 1..string.length\n    result << string[0..i-1]\n\
    \  end\n  result\nend", "  string.length.times.map { |idx| string[0..idx] }\n\
    end", "  prefixes = []\n  for i in 0..string.length-1\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "\tstring.chars.reduce([]) do |acc, char|\n\t\tacc <<\
    \ char\n\t\tacc\n\tend\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  string.chars.each_with_object([]) do |c, p|\n    p << c\n    p << c +\
    \ p.last\n  end\nend", "  (1..string.length).map { |i| string[0, i] }\nend", " \
    \ string.chars.each_index.map { |i| string[0..i] }\nend", "  string.chars.each_index.map\
    \ { |i| string[0..i] }\nend", "  (1..string.length).map { |n| string[0, n] }\n\
    end", "  (1..string.length).map { |x| string[0..x-1] }\nend", "  1.upto(string.length).map\
    \ { |n| string[0, n] }\nend", "  (1..string.length).map { |n| string[0, n] }\n\
    end", "  result = []\n  0.upto(string.length - 1) do |index|\n    result << string[0..index]\n\
    \  end\n  result\nend", "  (1..string.length).map { |length| string[0...length]\
    \ }\nend", "  (1..string.length).map { |n| string[0, n] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map{|i| string[0..i-1]}\n\
    end", "  (1..string.length).map { |index| string[0..index-1] }\nend", "  0.upto(string.length\
    \ - 1).map { |i| string[0..i] }\nend", "  (1..string.length).to_a.map { |num|\
    \ string[0, num] }\nend", "\tall_prefixes = []\n\t0.upto(string.length - 1) do\
    \ |index|\n\t\tall_prefixes << string[0..index]\n\tend\n\tall_prefixes\nend",
  "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n  string.chars.each_with_index\
    \ do |c, i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |size| string[0, size] }\nend", "  result = []\n  string.length.times do |i|\n\
    \    result << string[0..i]\n  end\n  result\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  string.length.times.map { |i| string[0..i] }\n\
    end", "  prefixes = []\n  length = string.length\n  (1..length).each do |num|\n\
    \    prefixes << string[0..num-1]\n  end\n  prefixes\nend", "  string.size.times.map\
    \ { |i| string[0..i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n\
    \  for i in 0..string.length\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = string.split(\"\")\n  results = []\n \
    \ prefixes.each_with_index do |_, index|\n    results << prefixes[0..index].join\n\
    \  end\n  results\nend", "  prefixes = []\n  index = 1\n  while index <= string.length\n\
    \    prefixes << string[0..index-1]\n    index += 1\n  end\n  prefixes\nend",
  "  (1..string.length).map{|len| string[0, len]}\nend", "  string.chars.each_with_object([])\
    \ do |char, array|\n    string_index = string.index(char)\n    array << string[0..string_index]\n\
    \  end\nend", "  (1..string.length).map { |n| string[0...n] }\nend", "  prefixes\
    \ = []\n  shortest_length = 1\n  while shortest_length <= string.length\n    prefixes\
    \ << string[0...shortest_length]\n    shortest_length += 1\n  end\n  prefixes\n\
    end", "  0.upto(string.length).collect { |i| string[0..i] }\nend", "  prefixes\
    \ = []\n  i = 0\n  while i < string.length\n    prefixes << string[0..i]\n   \
    \ i += 1\n  end\n  prefixes\nend", "  output = []\n  (0..string.length-1).each\
    \ do |i|\n    output << string[0..i]\n  end\n  output\nend", "  prefixes = []\n\
    \  0.upto(string.length - 1) do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  letters = string.split(\"\")\n  prefixes = []\n  letters.each_with_index\
    \ do |letter, idx|\n    prefixes << string[0..idx]\n  end\n  prefixes\nend", " \
    \ (1..string.length).map { |i| string[0, i] }\nend", "  out = []\n  (1..string.length).each\
    \ do |num|\n    out << string[0..num - 1]\n  end\n  out\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "\treturn [''] if string.empty?\n\tresult = []\n\
    \t(1..string.length).each do |n|\n\t\tresult << string[0..n-1]\n\tend\n\tresult\n\
    end", "  (1..string.length).map { |n| string[0, n] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).to_a.reverse.map{|i|\
    \ string[0..i-1]}\nend", "  results = []\n  (1..string.length).each do |i|\n \
    \   results << string[0...i]\n  end\n  results\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0..i-1]\n  end\n  prefixes\nend", "  string.chars.reduce([])\
    \ do |prefixes, ch|\n    prefixes << prefixes.last.to_s + ch\n  end\nend", " \
    \ (1..string.length).collect { |i| string[0..i-1] }\nend", "  if string.length\
    \ == 1\n    return [string]\n  end\n  prefixes = all_prefixes(string[0..-2])\n\
    \  prefixes.push(string)\n  return prefixes\nend", "  (1..string.length).map{|i|\
    \ string[0..i-1]}\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  result = []\n  1.upto(string.length) do |i|\n    result << string[0, i]\n  end\n\
    \  result\nend", "\tresult = []\n\t(0..string.length).each do |index|\n\t\tresult\
    \ << string[0..index]\n\tend\n\tresult\nend", "  prefixes = []\n  i = 0\n  while\
    \ i < string.length\n    prefixes << string[0..i]\n    i += 1\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |length| string[0...length] }\nend", "  prefixes\
    \ = []\n  while !string.empty?\n    prefixes << string\n    string = string[0...-1]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  (1..string.length).map { |idx| string[0...idx] }\nend", "  prefixes = []\n  0.upto(string.length-1)\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  ret = []\n\
    \  (1..string.length).each do |i|\n    ret << string[0, i]\n  end\n  ret\nend",
  "  if string.empty?\n    []\n  else\n    all_prefixes(string[0..-2]) + [string]\n\
    \  end\nend", "  (1..string.length).map { |len| string[0, len] }\nend", "  first_index\
    \ = 0\n  last_index = 1\n  prefixes = []\n  while last_index <= string.length\n\
    \    prefixes << string[first_index..last_index]\n    last_index += 1\n  end\n\
    \  prefixes\nend", "  all_prefixes = []\n  string.length.times do |char_idx|\n\
    \    all_prefixes << string[0..char_idx]\n  end\n  all_prefixes\nend", "  1.upto(string.length).map\
    \ { |i| string[0...i] }\nend", "  string.chars.map.with_index { |_, i| string[0..i]\
    \ }\nend", "\tall_prefixes = []\n\tstring.chars.each_with_index do |_, index|\n\
    \t\tall_prefixes << string[0..index]\n\tend\n\tall_prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |n| string[0, n] }\n\
    end", "  (1..string.length).map{|i| string[0,i]}\nend", "  prefixes = []\n  (0..string.length).each\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend", "  1.upto(string.length).map { |i| string[0, i] }\nend", " \
    \ (1..string.length).map{|i| string[0,i]}\nend", "  (1..string.length).map { |i|\
    \ string[0, i] }\nend", "  string.each_char.inject([]) { |acc, char| acc << char\
    \ + acc.last.to_s }\nend", "  (1..string.length).to_a.map { |idx| string[0..idx-1]\
    \ }\nend", "  (1..string.length).inject([]) do |prefixes, char_count|\n    prefixes\
    \ << string[0...char_count]\n  end\nend", "  (1..string.length).map { |i| string[0...i]\
    \ }\nend", "  (1..string.length).map{|n| string[0,n]}\nend", "  string.chars.map.with_index\
    \ { |_, i| string[0..i] }\nend", "  string.length.times.map { |i| string[0...i+1]\
    \ }\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "\t(0..string.length-1).map { |i| string[0..i] }\nend",
  "\tputs \"your input string is #{string}\"\n\tall_prefixes = []\n\t(1..string.length).each\
    \ do |i|\n\t\tall_prefixes << string[0,i]\n\tend\n\tall_prefixes\nend", "  p string.chars.map.with_index\
    \ { |_, i| string[0..i] }\nend", "  (1..string.length).map { |i| string[0...i]\
    \ }\nend", "  (1..string.length).to_a.map { |n| string[0...n] }\nend", "  prefixes\
    \ = []\n  string.length.times do |prefix_length|\n    prefixes << string[0..prefix_length]\n\
    \  end\n  prefixes\nend", "  [].tap do |result|\n    string.length.times do |i|\n\
    \      result << string[0..i]\n    end\n  end\nend", "  p = []\n  1.upto(string.length)\
    \ do |i|\n    p << string[0..i-1]\n  end\n  p\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (0..string.length).each do\
    \ |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n  prefixes\n\
    end", "  i = 0\n  prefixes = []\n  while i < string.length\n    prefixes << string[0..i]\n\
    \    i += 1\n  end\n  prefixes\nend", "  (1..string.length).map { |len| string[0,\
    \ len] }\nend", "  (1..string.length).map{|len| string[0, len]}\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  string.chars.map.with_index { |_, index| string[0..index]\
    \ }\nend", "  prefixes = []\n  string.chars.each_with_index do |char, i|\n   \
    \ prefixes << string[0..i]\n  end\n  prefixes\nend", "  all_prefixes = []\n  0.upto(string.length-1)\
    \ do |index|\n    all_prefixes << string[0..index]\n  end\n  all_prefixes\nend",
  "  string.chars.each_with_object([]) do |char, array|\n    array << string[0..array.size]\n\
    \  end\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  # Fill\
    \ in your solution here.\nend", "  arr = []\n  (1..string.length).each do |i|\n\
    \    arr << string[0...i]\n  end\n  arr\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0..i - 1]\n  end\n  prefixes\nend", "  (1..string.length).to_a.map{|n|\
    \ string[0,n]}\nend", "  prefixes = [string[0]]\n  1.upto(string.length - 1) do\
    \ |i|\n    prefixes << prefixes[i - 1] + string[i]\n  end\n  prefixes\nend", " \
    \ string.chars.each_with_object([]) do |_, result|\n    result << string.slice(0..result.size)\n\
    \  end\nend", "  string.size.times.map { |i| string[0..i] }\nend", "  string.chars.each_with_object([])\
    \ do |char, result|\n    result << string[0...(result.size + 1)]\n  end\nend",
  "  string.length.times.map { |i| string[0..i] }\nend", "  string.size.times.map\
    \ { |num| string[0..num] }\nend", "\tprefixes = []\n\t(1..string.length).each\
    \ do |n|\n\t\tprefixes << string[0,n]\n\tend\n\tprefixes\nend", "  array = []\n\
    \  string.chars.each_with_index do |char, i|\n    array << string[0..i]\n  end\n\
    \  array\nend", "  result = []\n  0.upto(string.length - 1) do |i|\n    result\
    \ << string[0..i]\n  end\n  result\nend", "  string.chars.reduce([]) do |acc,\
    \ char|\n    acc << string[0...string.index(char)+1]\n  end\nend", "  string.each_char.map.with_index\
    \ do |char, i|\n    string[0..i]\n  end\nend", "  (1..string.length).map{|length|\
    \ string[0, length]}\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  accumulator = []\n  (1..string.length).each do |i|\n    accumulator <<\
    \ string[0...i]\n  end\n  accumulator\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |n|\n    prefixes << string[0..n - 1]\n  end\n  prefixes\nend", "  string.chars.to_a.inject([])\
    \ do |prefixes, char|\n    prefixes << string[0..prefixes.length]\n  end\nend",
  "  (1..string.length).map { |i| string[0, i] }\nend", "  to_return = []\n  string.length.times\
    \ do |counter|\n    to_return << string[0..counter]\n  end\n  to_return\nend",
  "  1.upto(string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n  (0..string.length).each\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  string.chars.map(&:chr).inject([])\
    \ do |arr, char|\n    arr << string[0..arr.length]\n  end\nend", "  string.chars.map.with_index\
    \ do |char, index|\n    string[0..index]\n  end\nend", "  result = []\n  (1..string.length).each\
    \ do |i|\n    result << string[0...i]\n  end\n  result\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |n| string[0...n] }\nend", "\t(1..string.length).map\
    \ { |i| string[0,i] }\nend", "  prefix_array = []\n  string.length.times do |n|\n\
    \    prefix_array << string[0..n]\n  end\n  prefix_array\nend", "  prefixes =\
    \ []\n  (0..string.length).each do |index|\n    prefixes << string[0..index]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |substring_length| string[0,\
    \ substring_length] }\nend", "  # string.size.times.map { |i| string[0..i] }\n\
    \  # string.chars.each_with_object([]) { |c, a| a << a.last + c.to_s }\n  string.chars.inject([''])\
    \ { |arr, c| arr << (arr.last + c) }\nend", "  (1..string.length).map { |i| string[0,\
    \ i] }\nend", "  array = []\n  (1..string.length).each do |x|\n    array << string[0..x-1]\n\
    \  end\n  array\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  1.upto(string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  chars = string.split(\"\")\n  chars.map.with_index { |_, idx| chars[0..idx].join\
    \ }\nend", "  result = Array.new(string.length)\n  1.upto(string.length) do |i|\n\
    \    result[i-1] = string[0..i-1]\n  end\n  result\nend", "  prefix_count = string.length\n\
    \  prefixes = []\n  prefix_count.times do |count|\n    prefixes << string[0, prefix_count\
    \ - count]\n  end\n  prefixes\nend", "  string.chars.map.with_index { |_, index|\
    \ string[0..index] }\nend", "  string.chars.map.with_index { |_, i| string[0..i]\
    \ }\nend", "  1.upto(string.length).map { |x| string[0...x] }\nend", "  (1..string.length).map\
    \ { |x| string[0,x] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  i = 0\n  while i < string.length\n    prefixes << string[0..i]\n\
    \    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  0.upto(string.length\
    \ - 1) do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |num| string[0...num] }\nend", "  result = []\n  (0..string.length).each do\
    \ |length|\n    result << string[0...length]\n  end\n  result\nend", "  result\
    \ = []\n  0.upto(string.length - 1) do |i|\n    result << string[0..i]\n  end\n\
    \  result\nend", "  results = []\n  (1..string.length).each do |i|\n    results\
    \ << string[0...i]\n  end\n  results\nend", "  string.length.times.map { |idx|\
    \ string[0..idx] }\nend", "  prefixes = []\n  string.length.times do |i|\n   \
    \ prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |length| string[0...length]\
    \ }\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  string.size.times.map\
    \ { |i| string[0..i] }\nend", "  prefixes = []\n  string.length.times do |n|\n\
    \    prefixes << string[0..n]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |n| string[0...n] }\nend", "\ttemp_string = \"\"\n\tresult = []\n\tstring.split(\"\
    \").each_with_index do |c, i|\n\t\ttemp_string += c\n\t\tresult << temp_string\n\
    \tend\n\tresult\nend", "  arr = []\n  (1..string.length).each do |i|\n    arr\
    \ << string[0..i-1]\n  end\n  arr\nend", "  prefix_array = []\n  string.chars.each_with_index\
    \ do |letter, index|\n    prefix_array << string[0..index]\n  end\n  prefix_array\n\
    end", "  string.chars.map.with_index do |_, idx|\n    string[0..idx]\n  end\n\
    end", "  (1..string.length).map { |n| string[0, n] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  string.size.times.with_object([]) do |i, result|\n\
    \    result << string[0..i]\n  end\nend", "  string.chars.map.with_index { |c,\
    \ i| string[0..i] }\nend", "  result = []\n  (0..string.length-1).each do |i|\n\
    \    result << string[0..i]\n  end\n  result\nend", "  prefix_array = []\n  string.length.times\
    \ do |index|\n    prefix_array << string[0..index]\n  end\n  prefix_array\nend",
  "  (1..string.length).map{|len| string[0, len]}\nend", "  (1..string.length).collect{|i|\
    \ string[0,i]}\nend", "  string.chars.to_a.reduce([]) do |memo, char|\n    memo\
    \ << memo.last.to_s + char\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
