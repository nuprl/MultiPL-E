name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return array of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "\tstring.length.times.with_object([]) do |i, result|\n\
    \t\tresult << string[0..i]\n\tend\nend", "\tstring.split('').map.with_index {\
    \ |x, i| string[0..i] }\nend", "  string.split('').map { |char| string[0..string.index(char)]\
    \ }\nend", "  string.chars.each_with_object([]) do |char, result|\n    result\
    \ << string[0..result.length]\n  end\nend", "  # create array to store results\n\
    \  result = []\n  # iterate through each character in string\n  (0...string.length).each\
    \ do |i|\n    # add to array each character and its prefixes\n    result << string[0..i]\n\
    \  end\n  result\nend", "  prefixes = []\n  for i in 0..string.length\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0,\
    \ i] }\nend", "  result = []\n  for i in 1..string.length\n    result << string[0..i-1]\n\
    \  end\n  result\nend", "  string.length.times.map { |idx| string[0..idx] }\n\
    end", "  prefixes = []\n  for i in 0..string.length-1\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "\tstring.chars.reduce([]) do |acc, char|\n\t\tacc <<\
    \ char\n\t\tacc\n\tend\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  string.chars.each_with_object([]) do |c, p|\n    p << c\n    p << c +\
    \ p.last\n  end\nend", "  (1..string.length).map { |i| string[0, i] }\nend", " \
    \ string.chars.each_index.map { |i| string[0..i] }\nend", "  string.chars.each_index.map\
    \ { |i| string[0..i] }\nend", "  (1..string.length).map { |n| string[0, n] }\n\
    end", "  (1..string.length).map { |x| string[0..x-1] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
