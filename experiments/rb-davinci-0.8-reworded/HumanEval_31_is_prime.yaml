name: HumanEval_31_is_prime
language: rb
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime.call(6)\n\
  # false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>>\
  \ is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n\
  # false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n\
  \    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n\
  \    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n\
  \    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n\
  \    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n\
  \    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n\
  \  end\nend\n"
completions: ["  if n <= 1\n    return false\n  end\n  prime = true\n  (2..n/2).each\
    \ do |divisor|\n    if n % divisor == 0\n      prime = false\n    end\n  end\n\
    \  return prime\nend", "  return false if n <= 1\n  return true if n == 2\n  return\
    \ false if n % 2 == 0\n  (3..Math.sqrt(n)).each do |num|\n    return false if\
    \ n % num == 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  elsif n\
    \ == 2 || n == 3\n    return true\n  elsif n % 2 == 0 || n % 3 == 0\n    return\
    \ false\n  end\n  i = 5\n  while i <= Math.sqrt(n)\n    if n % i == 0 || n % (i\
    \ + 2) == 0\n      return false\n    end\n    i += 6\n  end\n  return true\nend",
  "  (2..n/2).none? { |i| n % i == 0 }\nend", "  (2..n/2).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  return true\nend", '  return false if n == 1',
  "  (2..Math.sqrt(n)).each do |x|\n    return false if n % x == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..Math.sqrt(n)).to_a.each do |int|\n    return\
    \ false if n % int == 0\n  end\n  true\nend", "  (2..n/2).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  return true\nend", "  (2..Math.sqrt(n)).each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n < 2\n    return\
    \ false\n  end\n  2.upto(Math.sqrt(n).to_i) do |d|\n    if n % d == 0\n      return\
    \ false\n    end\n  end\n  return true\nend\nis_prime = -> n { is_prime(n) }",
  "  if n <= 1\n    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  (1..n).select{|i|\
    \ n % i == 0}.length == 2\nend", "  # add your solution here\nend", "  if n <\
    \ 2\n    return false\n  elsif n == 2\n    return true\n  else\n    (2..(n - 1)).each\
    \ do |i|\n      if n % i == 0\n        return false\n      end\n    end\n    return\
    \ true\n  end\nend", "  (2..n/2).none? { |i| n % i == 0 }\nend", "  return false\
    \ if n < 2\n  return true if n == 2\n  return false if n % 2 == 0\n  return true\
    \ if n == 3\n  return false if n % 3 == 0\n  i = 5\n  while i <= Math.sqrt(n)\n\
    \    return false if n % i == 0\n    i += 2\n    return false if n % i == 0\n\
    \    i += 4\n  end\n  true\nend", "  (2..Math.sqrt(n)).each do |num|\n    return\
    \ false if n % num == 0\n  end\n  return true\nend", "  return false if n <= 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n < 2\n  2.upto(Math.sqrt(n)) do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  i = 2\n  while i < n\n    if n % i ==\
    \ 0\n      return false\n    end\n    i += 1\n  end\n  true\nend", "  if n ==\
    \ 2\n    return true\n  end\n  for i in 2..(n/2)\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend\nis_prime = lambda do |x|\n  if is_prime(x)\n\
    \    return true\n  else\n    return false\n  end\nend", "  return false if n\
    \ <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false if n % i == 0}\n\
    \  true\nend\nis_prime = ->(n) {\n  return false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each\
    \ {|i| return false if n % i == 0}\n  true\n}", "  (2..Math.sqrt(n)).each do |d|\n\
    \    return false if n % d == 0\n  end\n  true\nend\nis_prime = lambda do |n|\n\
    \  (2..Math.sqrt(n)).each do |d|\n    return false if n % d == 0\n  end\n  true\n\
    end\nputs 'is_prime'\nputs is_prime.call(6)\nputs is_prime.call(101)\nputs is_prime.call(11)\n\
    puts is_prime.call(13441)\nputs is_prime.call(61)\nputs is_prime.call(4)\nputs\
    \ is_prime.call(1)", "  return false if n == 1\n  (2..n/2).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  for i in 2..n-1\n    if n % i ==\
    \ 0\n      return false\n    end\n  end\n  return true\nend", "  if n < 2\n  \
    \  return false\n  end\n  (2...n).none? { |x| n % x == 0 }\nend", "  return false\
    \ if n <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false if n % i ==\
    \ 0}\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).to_a.each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend\nis_prime_block = proc\
    \ { |n| is_prime(n) }\nis_prime_block.call(6)\nis_prime_block.call(101)\nis_prime_block.call(11)\n\
    is_prime_block.call(13441)\nis_prime_block.call(61)\nis_prime_block.call(4)\n\
    is_prime_block.call(1)", "  if n == 2\n    return true\n  elsif n == 1\n    return\
    \ false\n  end\n  i = 2\n  while i < n do\n    if n % i == 0\n      return false\n\
    \    end\n    i += 1\n  end\n  return true\nend", "\ti = 1\n\tnumber_of_factors\
    \ = 0\n\twhile i <= n\n\t\tif n % i == 0\n\t\t\tnumber_of_factors += 1\n\t\tend\n\
    \t\ti += 1\n\tend\n\treturn number_of_factors == 2\nend", "\tfor i in 2..(n-1)\n\
    \t\tif (n % i) == 0\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  x = 2\n  if n == 1\n    return false\n  else\n    while x <= Math.sqrt(n)\n \
    \     if n % x == 0\n        return false\n      end\n      x = x + 1\n    end\n\
    \  end\n  return true\nend\nis_prime = ->(n) {\n  x = 2\n  if n == 1\n    return\
    \ false\n  else\n    while x <= Math.sqrt(n)\n      if n % x == 0\n        return\
    \ false\n      end\n      x = x + 1\n    end\n  end\n  return true\n}", "  return\
    \ false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false if n %\
    \ i == 0}\n  true\nend", "\treturn false if n == 1\n\tfor i in 2..n-1\n\t\treturn\
    \ false if n % i == 0\n\tend\n\treturn true\nend", "  i = 2\n  while i <= n\n\
    \    if n%i == 0\n      if i == n\n        return true\n      else\n        return\
    \ false\n      end\n    end\n    i += 1\n  end\nend", "  return false if n <=\
    \ 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false if n % i == 0}\n  true\n\
    end\nis_prime = method(:is_prime)", "  if n <= 1\n    return false\n  end\n  for\
    \ i in 2..(n-1)\n    if n % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n  \
    \    return false\n    end\n  end\n  return true\nend", "  return false if n ==\
    \ 1\n  return true if n == 2", "  if n < 2\n    return false\n  end\n  2.upto(Math.sqrt(n).to_i)\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  for d in 2..(n - 1)\n    if (n % d) == 0\n      return false\n    end\n\
    \  end\n  return true\nend", "    i = 2\n    while i < n do\n        if n % i\
    \ == 0\n            return false\n        end\n        i += 1\n    end\n    return\
    \ true\nend", "  for i in 2..(n - 1)\n    if (n % i) == 0\n      return false\n\
    \    end\n  end\n  if n == 1\n    return false\n  end\n  return true\nend", " \
    \ return false if n == 1\n  i = 2\n  while i < n\n    return false if n % i ==\
    \ 0\n    i += 1\n  end\n  true\nend", "  (1..n).select { |e| n % e == 0 }.length\
    \ == 2\nend", "  return false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i|\
    \ return false if n % i == 0}\n  true\nend", "  if n > 1\n    (2..n-1).each do\
    \ |i|\n      if n % i == 0\n        return false\n      end\n    end\n    return\
    \ true\n  else\n    return false\n  end\nend", "  2.upto(n-1) do |x|\n    if n\
    \ % x == 0\n      return false\n    end\n  end\n  true\nend", "    # if n <= 1\
    \ return false\n    if n <= 1\n        return false\n    # Loop through all possible\
    \ factors of n\n    elsif n == 2\n        return true\n    elsif n == 3\n    \
    \    return true\n    else\n        for i in 2..(n-1)\n            # If n is divisible\
    \ by i return false\n            if n % i == 0\n                return false\n\
    \            end\n        end\n    end\n    # Return true\n    return true\nend",
  "  return false if n == 1\n  for i in 2..(n-1)\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  (2..n - 1).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  return false if n < 2\n  2.upto(Math.sqrt(n).to_i)\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n  primes.include?(n)\nend", "  (2..n/2).none? { |i| n % i ==\
    \ 0 }\nend", "  if n < 2\n    return false\n  elsif n == 2\n    return true\n\
    \  else\n    (2..(n-1)).each do |x|\n      if n % x == 0\n        return false\n\
    \      end\n    end\n    return true\n  end\nend", "  return false if n == 1\n\
    \  return true if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |x|\n    return false if n % x == 0\n  end\n  true\nend", "  if n == 2 ||\
    \ n == 3 || n == 5 || n == 7\n    return true\n  elsif n % 2 == 0 || n % 3 ==\
    \ 0 || n % 5 == 0 || n % 7 == 0\n    return false\n  else\n    return true\n \
    \ end\nend", "  (2..n - 1).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n < 2\n  return true if n == 2\n  return false\
    \ if n % 2 == 0\n  max = Math.sqrt(n).floor\n  i = 3\n  while i <= max\n    return\
    \ false if n % i == 0\n    i += 2\n  end\n  true\nend", "  return false if n <\
    \ 2\n  (2..Math.sqrt(n)).none? { |i| n % i == 0 }\nend", "  puts n\n  # return\
    \ false if n <= 1\n  # return true if n <= 3\n  # return false if n % 2 == 0 ||\
    \ n % 3 == 0\n  #\n  # i = 5\n  # while i * i <= n\n  #   return false if n %\
    \ i == 0 || n % (i + 2) == 0\n  #   i += 6\n  # end\n  # true\n  # return false\
    \ if n < 2\n  # (2..Math.sqrt(n)).each do |x|\n  #   return false if n % x ==\
    \ 0\n  # end\n  # true\n  (2..Math.sqrt(n)).each { |x| return false if n % x ==\
    \ 0 }\n  n > 1\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |x|\n\
    \    return false if n % x == 0\n  end\n  true\nend", "  (2..Math.sqrt(n)).none?\
    \ { |factor| n % factor == 0 }\nend\nis_prime = ->(n) { (2..Math.sqrt(n)).none?\
    \ { |factor| n % factor == 0 } }", "  return false if n <= 1\n  return true if\
    \ n <= 3\n  return false if n % 2 == 0\n  return false if n % 3 == 0\n  x = 5\n\
    \  while x * x <= n\n    return false if n % x == 0\n    return false if n % (x\
    \ + 2) == 0\n    x += 6\n  end\n  true\nend", "  return false if n < 2\n  (2..n-1).each\
    \ do |k|\n    return false if n % k == 0\n  end\n  true\nend", "  if n <= 1\n\
    \    return false\n  end\n  i = 2\n  while i * i <= n\n    if n % i == 0\n   \
    \   return false\n    end\n    i += 1\n  end\n  return true\nend", "  Math.sqrt(n).floor.downto(2).each\
    \ {|i| return false if n % i == 0}\n  n > 1\nend", "  return false if n < 2\n\
    \  return true if n < 4\n  return false if n % 2 == 0\n  return true if n < 9\n\
    \  return false if n % 3 == 0\n  r = Math.sqrt(n).floor\n  f = 5\n  while f <=\
    \ r\n    return false if n % f == 0\n    return false if n % (f + 2) == 0\n  \
    \  f += 6\n  end\n  true\nend", "  return false if n <= 1\n  limit = Math.sqrt(n).to_i\n\
    \  (2..limit).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n <= 1\n  2.upto(Math.sqrt(n).floor) do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n  (2..n/2).none?\
    \ { |i| n % i == 0 }\nend", "  if n <= 1\n    return false\n  end\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n == 1\n  (2..n/2).each do |i|\n    return false if n\
    \ % i == 0\n  end\n  true\nend", "  factor_count = 0\n  i = 1\n  while i <= n\n\
    \    if n % i == 0\n      factor_count += 1\n    end\n    i += 1\n  end\n  if\
    \ factor_count == 2\n    true\n  else\n    false\n  end\nend", "  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend\nis_prime = proc\
    \ { |n| is_prime(n) }", "  if n <= 1\n    return false\n  end\n  max = Math.sqrt(n).floor\n\
    \  2.upto(max) do |i|\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  if n <= 1\n    return false\n  end\n  a = Math.sqrt(n).to_i\n\
    \  for i in 2..a\n    if n % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if n <= 2\n    return true\n  else\n    n.downto(2).each do |divisor|\n\
    \      if n % divisor == 0 && divisor != n\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  if n == 1\n    false\n  elsif n == 2\n\
    \    true\n  else\n    i = 2\n    while i < n\n      if n % i == 0\n        return\
    \ false\n      end\n      i += 1\n    end\n    true\n  end\nend", "  if n <= 1\n\
    \    return false\n  end\n  i = 2\n  while i < n\n    if n % i == 0\n      return\
    \ false\n    end\n    i += 1\n  end\n  return true\nend", "  return false if n\
    \ == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  for i in 2..(n\
    \ / 2)\n    return false if n % i == 0\n  end\n  true\nend", "  # Your code here.\n\
    end", "  if n < 2\n    return false\n  end\n  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
  "  if n == 1 || n == 0\n    return false\n  end\n  (2..(n - 1)).each do |i|\n  \
    \  if n % i == 0\n      return false\n    end\n  end\n  return true\nend", "\t\
    if n < 2\n\t\treturn false\n\telsif n == 2\n\t\treturn true\n\telse\n\t\tfor i\
    \ in 2..(n - 1)\n\t\t\tif n % i == 0\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\nend\nis_prime = lambda { |n|\n\tif n < 2\n\t\treturn false\n\
    \telsif n == 2\n\t\treturn true\n\telse\n\t\tfor i in 2..(n - 1)\n\t\t\tif n %\
    \ i == 0\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n}",
  "  return false if n == 1\n  (2..Math.sqrt(n)).none? { |i| n % i == 0 }\nend", " \
    \ return false if n == 1\n  return true if n == 2\n  return false if n % 2 ==\
    \ 0\n  return false if n % 3 == 0\n  i = 5\n  w = 2\n  while i * i <= n\n    return\
    \ false if n % i == 0\n    i += w\n    w = 6 - w\n  end\n  true\nend", "  i =\
    \ 2\n  prime = true\n  if n == 1\n    prime = false\n  end\n  while i < n\n  \
    \  if n % i == 0\n      prime = false\n    end\n    i += 1\n  end\n  prime\nend",
  "\treturn false if n == 1\n\tcount = 0\n\tfor i in 2..(n-1)\n\t\tcount += 1 if n\
    \ % i == 0\n\tend\n\tcount == 0\nend\nis_prime.call(6)", "  # return false if\
    \ n == 1\n  # i = 2\n  # while i < n\n  #   return false if n % i == 0\n  #  \
    \ i += 1\n  # end\n  # true\n  n > 1 && (2..Math.sqrt(n)).none? { |i| n % i ==\
    \ 0 }\nend\nis_prime = lambda { |n| is_prime(n) }\np is_prime.call(61)", "   \
    \ return true if n == 1\n    return false if n < 4\n    return true if n < 9\n\
    \    return false if n % 3 == 0\n    r = Math.sqrt(n).floor\n    f = 5\n    while\
    \ f <= r\n        return false if n % f == 0\n        return false if n % (f +\
    \ 2) == 0\n        f += 6\n    end\n    true\nend", "  return false if n == 1\n\
    \  (2..n/2).none? { |num| n % num == 0 }\nend", "  if n <= 1\n    return false\n\
    \  end\n  i = 2\n  while i * i <= n\n    if n % i == 0\n      return false\n \
    \   end\n    i += 1\n  end\n  return true\nend\nis_prime = lambda { |n|\n  if\
    \ n <= 1\n    return false\n  end\n  i = 2\n  while i * i <= n\n    if n % i ==\
    \ 0\n      return false\n    end\n    i += 1\n  end\n  return true\n}", "  if\
    \ n <= 1\n    return false\n  end\n  for i in 2..n-1\n    if n % i == 0\n    \
    \  return false\n    end\n  end\n  return true\nend", "  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  (2..n/2).none?\
    \ { |i| n % i == 0 }\nend", "\tx = 2\n\twhile x < n\n\t\tif n % x == 0\n\t\t\t\
    return false\n\t\telse\n\t\t\tx += 1\n\t\tend\n\tend\n\treturn true\nend", " \
    \ (2..Math.sqrt(n)).to_a.none? { |i| n % i == 0 }\nend", "    return true if n\
    \ == 2\n    return false if n == 1 || n % 2 == 0\n    (3..Math.sqrt(n)).step(2).each\
    \ do |i|\n        return false if n % i == 0\n    end\n    true\nend", "  if n\
    \ < 2\n    return false\n  end\n  (2...n).each do |i|\n    if n % i == 0\n   \
    \   return false\n    end\n  end\n  return true\nend", "  return false if n <\
    \ 2\n  (2..Math.sqrt(n)).to_a.each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n < 2\n    return false\n  end\n  (2...n).each do |i|\n \
    \   if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ (2..n-1).each do |x|\n    if n % x == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  true\nend", "  prime = true\n  (2..n-1).each do |i|\n\
    \    if n % i == 0\n      prime = false\n    end\n  end\n  prime\nend", "  if\
    \ n < 2\n    return false\n  end\n  (2...n).each do |num|\n    if n % num == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  return false if n\
    \ == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).none? { |i| n % i == 0 }\n\
    end", "  (2..Math.sqrt(n)).each do |divisor|\n    return false if n % divisor\
    \ == 0\n  end\n  true\nend", "  return false if n < 2\n  return true if n == 2",
  "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "    if n<2\n        return false\n    end\n    for i in\
    \ 2..n-1\n        if n%i==0\n            return false\n        end\n    end\n\
    \    return true\nend", "  return false if n < 2\n  divisor = 2\n  while divisor\
    \ <= Math.sqrt(n)\n    return false if n % divisor == 0\n    divisor += 1\n  end\n\
    \  true\nend", "  # return false if n == 1\n  # return true if n == 2\n  # numbers\
    \ = (2..n-1).to_a\n  # numbers.each do |number|\n  #   if n % number == 0\n  #\
    \     return false\n  #   end\n  # end\n  # true\n  return false if n == 1\n \
    \ return true if n == 2\n  (2..n-1).none? { |number| n % number == 0 }\nend",
  "  return false if n == 1\n  max = n / 2\n  (2..max).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).none?\
    \ { |m| n % m == 0 }\nend", "  (2..n).each do |i|\n    return false if n % i ==\
    \ 0 && i != n\n  end\n  true\nend", "  (2..n/2).none? { |i| n % i == 0 }\nend",
  "  return false if n == 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false\
    \ if n % i == 0}\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).none?\
    \ { |i| n % i == 0 }\nend", "  if n == 2\n    return true\n  elsif n % 2 == 0\n\
    \    return false\n  end\n  i = 3\n  while i <= n/2\n    if n % i == 0\n     \
    \ return false\n    end\n    i += 2\n  end\n  return true\nend\nis_prime_obj =\
    \ lambda do |x|\n  is_prime(x)\nend\nputs is_prime_obj.call(1)\nputs is_prime_obj.call(2)\n\
    puts is_prime_obj.call(3)\nputs is_prime_obj.call(4)\nputs is_prime_obj.call(5)\n\
    puts is_prime_obj.call(6)\nputs is_prime_obj.call(7)\nputs is_prime_obj.call(8)\n\
    puts is_prime_obj.call(9)\nputs is_prime_obj.call(10)\nputs is_prime_obj.call(11)\n\
    puts is_prime_obj.call(61)\nputs is_prime_obj.call(1009)\nputs is_prime_obj.call(6857)\n\
    puts is_prime_obj.call(13441)", "    return false if n == 1\n    (2..n/2).none?\
    \ { |i| n % i == 0 }\nend", "  return false if n == 1\n  2.upto(Math.sqrt(n))\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend\nis_prime = Proc.new { |n|\n  return false if n < 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\n}", "  return false if\
    \ n <= 1\n  return true if n == 2 || n == 3\n  return false if n % 2 == 0 || n\
    \ % 3 == 0\n  sqrt_n = Math.sqrt(n)\n  k = 5\n  while k <= sqrt_n\n    return\
    \ false if n % k == 0 || n % (k + 2) == 0\n    k += 6\n  end\n  true\nend", " \
    \ ((2..Math.sqrt(n)).none? { |i| n % i == 0 }) ? \"true\" : \"false\"\nend", " \
    \ (2..n-1).each do |x|\n    if n % x == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "    return false if n < 2\n    return true if n == 2\n\
    \    (2..Math.sqrt(n)).each do |i|\n        return false if n % i == 0\n    end\n\
    \    true\nend", "  if n < 2\n    return false\n  end\n  (2...n).each do |i|\n\
    \    if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ if n < 2\n    return false\n  end\n  i = 2\n  while i < n\n    if n % i == 0\n\
    \      return false\n    end\n    i += 1\n  end\n  return true\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      return false\n    end\n    i += 1\n \
    \ end\n  return true\nend", "  (2..n - 1).each do |i|\n    return false if n %\
    \ i == 0\n  end\n  true\nend", "  (2..n-1).each do |number|\n    if n % number\
    \ == 0\n      return false\n    end\n  end\n  return true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  if n == 2\n    return true\n  elsif n == 1\n    return\
    \ false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  (2..n - 1).each do |d|\n    return false\
    \ if n % d == 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  end\n\
    \  i = 2\n  while i < n\n    if n % i == 0\n      return false\n    end\n    i\
    \ += 1\n  end\n  return true\nend", "  if n <= 1\n    return false\n  end\n  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      return false\n    end\n    i +=\
    \ 1\n  end\n  return true\nend\nis_prime = ->(n) {\n  if n <= 1\n    return false\n\
    \  end\n  i = 2\n  while i < n\n    if n % i == 0\n      return false\n    end\n\
    \    i += 1\n  end\n  return true\n}", "  return false if n < 2\n  nums = (2..n).to_a\n\
    \  nums.each do |num|\n    return false if n % num == 0 && num != n\n  end\n \
    \ true\nend", "    (2..n-1).each do |i|\n        if n % i == 0\n            return\
    \ false\n        end\n    end\n    true\nend", "    if n > 1\n      for d in 2..(n\
    \ - 1)\n        if (n % d) == 0\n          return false\n        end\n      end\n\
    \      return true\n    else\n      return false\n    end\n  end\n  \n  is_prime_proc\
    \ = Proc.new { |n|\n    if n > 1\n      for d in 2..(n - 1)\n        if (n % d)\
    \ == 0\n          return false\n        end\n      end\n      return true\n  \
    \  else\n      return false\n    end\n  }\n  \n  \n  # >>> count_up_to.call(2)\n\
    \  # [1, 2]\n  # >>> count_up_to.call(6)\n  # [1, 2, 3, 4, 5, 6]\n  # >>> count_up_to.call(10)\n\
    \  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # >>> count_up_to.call(4)\n  # [1, 2,\
    \ 3, 4]\n  def count_up_to(n)\n    i = 1\n    results = []\n    while i <= n\n\
    \      results << i\n      i += 1\n    end\n    return results\n  end\n  \n  count_up_to_proc\
    \ = Proc.new { |n|\n    i = 1\n    results = []\n    while i <= n\n      results\
    \ << i\n      i += 1\n    end\n    return results\n  }\n  \n  \n  # >>> fizzbuzz.call(3)\n\
    \  # \"fizz\"\n  # >>> fizzbuzz.call(7)\n  # \"buzz\"\n  # >>> fizzbuzz.call(15)\n\
    \  # \"fizzbuzz\"\n  # >>> fizzbuzz.call(2)\n  # 2\n  # >>> fizzbuzz.call(0)\n\
    \  # \"fizzbuzz\"\n  def fizzbuzz(n)\n    if n == 0\n      return \"fizzbuzz\"\
    \n    elsif n % 3 == 0 && n % 5 == 0\n      return \"fizzbuzz\"\n    elsif n %\
    \ 3", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |x|\n    return false\
    \ if n % x == 0\n  end\n  true\nend", "  return false if n == 1\n  2.upto(Math.sqrt(n).to_i).none?\
    \ { |i| n % i == 0 }\nend", "  return false if n < 2\n  return true if n == 2\n\
    \  (2..Math.sqrt(n)).to_a.all?{|i| n % i != 0}\nend", "  return false if n ==\
    \ 1\n  2.upto(Math.sqrt(n).to_i) do |x|\n    return false if n % x == 0\n  end\n\
    \  true\nend", "  (2..n - 1).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n < 2\n    return false\n  end\n  for d in 2..(n - 1)\n \
    \   if (n % d) == 0\n      return false\n    end\n  end\n  return true\nend",
  "  (2..Math.sqrt(n)).each do |x|\n    return false if n % x == 0\n  end\n  true\n\
    end", "  return false if n <= 1\n  num = 2\n  while num < n\n    return false\
    \ if n % num == 0\n    num += 1\n  end\n  true\nend", "  if n == 1\n    return\
    \ false\n  end\n  divisor = 2\n  while divisor < n\n    if n % divisor == 0\n\
    \      return false\n    end\n    divisor += 1\n  end\n  return true\nend", " \
    \ return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend\nis_prime_proc = Proc.new { |n| is_prime(n) }",
  "    n = n.to_i\n    for d in 2..(n - 1)\n       if (n % d) == 0\n          return\
    \ false\n       end\n    end\n    return true\nend", "  (2..n-1).each do |num|\n\
    \    if n % num == 0\n      return false\n    end\n  end\n  return true\nend\n\
    is_prime = ->(n) {\n  (2..n-1).each do |num|\n    if n % num == 0\n      return\
    \ false\n    end\n  end\n  return true\n}", "  n <= 1 || (2..Math.sqrt(n)).any?\
    \ { |i| n % i == 0 }\nend", "  (1..n).select { |i| n % i == 0 }.count == 2\nend",
  "    (2..Math.sqrt(n)).each do |i|\n        if n % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n == 1\n    return false\n\
    \  end\n  (2..(n-1)).each do |num|\n    if n % num == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  if n < 2\n    return false\n  elsif n\
    \ == 2\n    return true\n  end\n  sqr = Math.sqrt(n)\n  (2..sqr).each do |i|\n\
    \    if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return false if n % i ==\
    \ 0}\n  true\nend", "  for d in 2..(n - 1)\n    if (n % d) == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n == 1\n  count\
    \ = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  return true\
    \ if count == 2\n  false\nend", "  return false if n <= 1\n  (2..n-1).each do\
    \ |val|\n    return false if n % val == 0\n  end\n  true\nend", "  if n <= 1\n\
    \    return false\n  elsif n <= 3\n    return true\n  elsif n % 2 == 0 || n %\
    \ 3 == 0\n    return false\n  end\n  i = 5\n  while i * i <= n\n    if n % i ==\
    \ 0 || n % (i + 2) == 0\n      return false\n    end\n    i += 6\n  end\n  return\
    \ true\nend\nis_prime =\n  lambda do |n|\n    is_prime(n)\n  end", "  (1..n).select\
    \ { |e| n % e == 0 }.length == 2\nend", "  for d in 2..(n - 1)\n   if (n % d)\
    \ == 0\n      return false\n    end\n  end\n return true\nend", "  return false\
    \ if n < 2\n  2.upto(Math.sqrt(n)) do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend\nis_prime = proc { |n| is_prime(n) }", "    if n <= 1\n        return\
    \ false\n    end\n    (2...n).each do |number|\n        if n % number == 0\n \
    \           return false\n        end\n    end\n    return true\nend", "  (2..n/2).none?\
    \ { |i| n % i == 0 }\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      return false\n    end\n    i += 1\n  end\n \
    \ return true\nend", "  (2..Math.sqrt(n)).each do |i|\n    return false if n %\
    \ i == 0\n  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1 ||\
    \ n == 0\n    return false\n  end\n  for i in 2..n - 1\n    if n % i == 0\n  \
    \    return false\n    end\n  end\n  return true\nend", "    return false if n\
    \ == 1\n    (2..n/2).none? { |i| n % i == 0 }\nend", "  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1\n\
    \    return false\n  elsif n == 2\n    return true\n  else\n    return (2..n/2).none?\
    \ { |i| n % i == 0 }\n  end\nend", "  if n > 1\n    (2..n-1).each do |num|\n \
    \     if n % num == 0\n        return false\n      end\n    end\n    return true\n\
    \  else\n    return false\n  end\nend", "  if n == 1\n    return false\n  end\n\
    \  if n == 2\n    return true\n  end\n  (2..(n/2)).each do |i|\n    if n % i ==\
    \ 0\n      return false\n    end\n  end\n  return true\nend", "  return false\
    \ if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n <= 1\n  return true if n == 2", " \
    \ # TODO return true if the given number is prime, and false otherwise\n  n.to_i\
    \ > 1 && !(2..n-1).any? { |el| n % el == 0 }\nend", "  # YOUR CODE HERE\nend",
  "  n > 1 && !(2..n-1).any? { |d| n % d == 0 }\nend", "  return false if n < 2\n\
    \  (2..Math.sqrt(n)).none? { |d| n % d == 0 }\nend", "    (2..n/2).each do |i|\n\
    \        if n % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  return false if n == 1\n  i = 2\n  while\
    \ i <= n/2\n    return false if n % i == 0\n    i += 1\n  end\n  true\nend", " \
    \ (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  return true if n == 2\n  return false if n % 2 == 0\n  x = 3\n  while x\
    \ < n\n    return false if n % x == 0\n    x += 2\n  end\n  true\nend", "  return\
    \ false if n < 2\n  for i in 2..(n**0.5)\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..n/2).none? { |i| n % i == 0 }\n\
    end", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  2.upto(Math.sqrt(n).to_i)\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend\nis_prime_proc =\
    \ Proc.new{|n| is_prime(n)}"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
