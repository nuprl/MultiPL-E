name: HumanEval_31_is_prime
language: rb
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime.call(6)\n\
  # false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>>\
  \ is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n\
  # false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n\
  \    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n\
  \    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n\
  \    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n\
  \    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n\
  \    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n\
  \  end\nend\n"
completions: ["  if n <= 1\n    return false\n  end\n  prime = true\n  (2..n/2).each\
    \ do |divisor|\n    if n % divisor == 0\n      prime = false\n    end\n  end\n\
    \  return prime\nend", "  return false if n <= 1\n  return true if n == 2\n  return\
    \ false if n % 2 == 0\n  (3..Math.sqrt(n)).each do |num|\n    return false if\
    \ n % num == 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  elsif n\
    \ == 2 || n == 3\n    return true\n  elsif n % 2 == 0 || n % 3 == 0\n    return\
    \ false\n  end\n  i = 5\n  while i <= Math.sqrt(n)\n    if n % i == 0 || n % (i\
    \ + 2) == 0\n      return false\n    end\n    i += 6\n  end\n  return true\nend",
  "  (2..n/2).none? { |i| n % i == 0 }\nend", "  (2..n/2).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  return true\nend", '  return false if n == 1',
  "  (2..Math.sqrt(n)).each do |x|\n    return false if n % x == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..Math.sqrt(n)).to_a.each do |int|\n    return\
    \ false if n % int == 0\n  end\n  true\nend", "  (2..n/2).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  return true\nend", "  (2..Math.sqrt(n)).each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n < 2\n    return\
    \ false\n  end\n  2.upto(Math.sqrt(n).to_i) do |d|\n    if n % d == 0\n      return\
    \ false\n    end\n  end\n  return true\nend\nis_prime = -> n { is_prime(n) }",
  "  if n <= 1\n    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  (1..n).select{|i|\
    \ n % i == 0}.length == 2\nend", "  # add your solution here\nend", "  if n <\
    \ 2\n    return false\n  elsif n == 2\n    return true\n  else\n    (2..(n - 1)).each\
    \ do |i|\n      if n % i == 0\n        return false\n      end\n    end\n    return\
    \ true\n  end\nend", "  (2..n/2).none? { |i| n % i == 0 }\nend", "  return false\
    \ if n < 2\n  return true if n == 2\n  return false if n % 2 == 0\n  return true\
    \ if n == 3\n  return false if n % 3 == 0\n  i = 5\n  while i <= Math.sqrt(n)\n\
    \    return false if n % i == 0\n    i += 2\n    return false if n % i == 0\n\
    \    i += 4\n  end\n  true\nend", "  (2..Math.sqrt(n)).each do |num|\n    return\
    \ false if n % num == 0\n  end\n  return true\nend", "  return false if n <= 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n < 2\n  2.upto(Math.sqrt(n)) do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
