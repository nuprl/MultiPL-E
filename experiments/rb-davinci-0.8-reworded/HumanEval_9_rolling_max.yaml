name: HumanEval_9_rolling_max
language: rb
prompt: "# From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3,\
  \ 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
  \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
  \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
  \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
completions: ["  numbers.each_index.map { |i| numbers[0..i].max }\nend", "  max =\
    \ numbers.first\n  numbers.reduce([]) do |acc, num|\n    max = num if num > max\n\
    \    acc << max\n  end\nend", "  numbers.map.with_index do |_, index|\n    numbers[0..index].max\n\
    \  end\nend", "  numbers.each_with_index.reduce([]) do |acc, (number, i)|\n  \
    \  acc[i] = if i == 0\n               number\n             else\n            \
    \   [number, acc[i - 1]].max\n             end\n  end\nend", "  result = []\n\
    \  max = nil\n  numbers.each do |n|\n    max = n if !max || max < n\n    result\
    \ << max\n  end\n  result\nend", "  result = []\n  max = numbers[0]\n  numbers.each\
    \ do |n|\n    if n > max\n      max = n\n    end\n    result << max\n  end\n \
    \ result\nend", "  result = []\n  result << numbers.first\n  numbers[1..-1].each\
    \ do |n|\n    result << (n > result.last ? n : result.last)\n  end\n  result\n\
    end", "  # TODO: Your code here.\nend", "  numbers.each_with_index.map { |e, i|\n\
    \    numbers[0..i].max\n  }\nend", "  # YOUR CODE HERE\nend", "  numbers.each_with_index.reduce([])\
    \ do |result, (number, index)|\n    result << numbers[0..index].max\n  end\nend",
  "  #TODO\nend", "  result = []\n  max = 0\n  numbers.each do |number|\n    if number\
    \ > max\n      max = number\n    end\n    result << max\n  end\n  result\nend",
  "  numbers.map.with_index do |number, i|\n    numbers[0..i].max\n  end\nend", " \
    \ result = []\n  numbers.each do |number|\n    result << [number, result.last].compact.max\n\
    \  end\n  result\nend", "  numbers.each_with_index.map do |n, i|\n    numbers[0..i].max\n\
    \  end\nend", "  result = []\n  max = 0\n  numbers.each do |number|\n    if number\
    \ > max\n      max = number\n    end\n    result << max\n  end\n  result\nend",
  "  max = []\n  max[0] = numbers[0]\n  numbers.each_with_index do |n, i|\n    i.zero?\
    \ ? next : max[i] = [max[i - 1], n].max\n  end\n  max\nend", "  # TODO: implement\
    \ me\nend", "  current_max = 0\n  numbers.map do |number|\n    current_max = [current_max,\
    \ number].max\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
