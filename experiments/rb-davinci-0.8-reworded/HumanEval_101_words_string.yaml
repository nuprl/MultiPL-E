name: HumanEval_101_words_string
language: rb
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\n# >>> words_string.call(\"Hi, my name is John\")\n# [\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"]\n# >>> words_string.call(\"One, two, three, four,\
  \ five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ndef\
  \ words_string(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_string\n\
  \    candidate = method(:words_string)\n    assert_equal([\"Hi\", \"my\", \"name\"\
  , \"is\", \"John\"], candidate.call(\"Hi, my name is John\"))\n    assert_equal([\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One, two,\
  \ three, four, five, six\"))\n    assert_equal([\"Hi\", \"my\", \"name\"], candidate.call(\"\
  Hi, my name\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"], candidate.call(\"One,, two, three, four, five, six,\"))\n    assert_equal([],\
  \ candidate.call(\"\"))\n    assert_equal([\"ahmed\", \"gamal\"], candidate.call(\"\
  ahmed     , gamal\"))\n  end\nend\n"
completions: ["  s.split(\",\")\nend", "  s.split(/[\\s,]+/)\nend", "  s.split\nend",
  "  s.split(/[\\s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/, | /)\nend",
  "  s.split(' ')\nend", "  # TODO: implement me\nend", "  s.split(\" \")\nend", " \
    \ s.split(/\\s|,\\s/)\nend", "\ts.split\nend", "  s.split(/\\W/)\nend", "  return\
    \ s.split(/[,\\s]+/)\nend", "  words = s.split(\" \")\n  words.each { |i| print\
    \ \"\\\"#{i}\\\", \" }\nend", "  s.split\nend", "  s.split(/[\\s,]+/)\nend", " \
    \ s.split(/[\\s,]+/)\nend", "  s.split(/\\W+/)\nend", "  s.split(\",\")\nend",
  "  s.split(/[\\s,]+/)\nend", "  s.split\nend", "  if s.include?(\",\")\n    s.split(\"\
    ,\")\n  else\n    s.split(\" \")\n  end\nend", "  s.split(/[ ,]+/)\nend", "\t\
    s.split(/\\s+|,\\s+/)\nend", "  return s.split(/[\\s,]+/)\nend", "  s.split('\
    \ ')\nend", "  s.split(/\\s|,\\s/)\nend", "  puts s.split(\", \")\nend", "  s.split(\"\
    ,\").map(&:strip)\nend", "  s.split\nend", "  s.split(/\\W+/)\nend", "  s.split(/,\
    \ | /)\nend", "  # your code here\nend", "  s.split(/\\W/)\nend", "  s.split(/[,\
    \ ]/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[ ,]+/)\nend", "  s.split(/\\\
    s|,\\s*/)\nend", "  # code code code\nend", "  if s.nil?\n    puts \"There's nothing\
    \ to see here!\"\n  else\n    s.split(/\\s*,\\s*/)\n  end\nend", "  s.split(/[\\\
    s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  return s.split(/,\\s|\\s/)\nend",
  "\treturn s.split(/,| /)\nend", "  return s.split(/[,\\s]+/)\nend", "  # your code\
    \ here\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s|,\\s/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "  return s.split(\",\")\nend", "  s.split(/\\W+/)\nend", "  s.split(/[,\\\
    s]+/)\nend", "  s.split(/\\s|,\\s*/)\nend", "  s.split(\" \")\nend", "  s.split(/\\\
    s|,/)\nend", "  return s.split(/,| /)\nend", "  s.split\nend", "    s.scan(/\\\
    w+/)\nend", "  s.split(/[ ,]+/)\nend", "  s.split(/\\s+|,\\s+/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "  s.split(/[, ]+/)\nend", "  # s.split(/\\s*,\\s*/)\n  s.split(/[,\\\
    s]+/)\nend", "  s.split\nend", "  # Your code here\nend", "  array = s.split(/\\\
    s*[,\\s]\\s*/)\n  array\nend", "  s.split(' ')\nend", "  s.split\nend", "  s.scan(/\\\
    w+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s|,\\s/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split\nend", "  s.split(/[ ,]+/)\n\
    end", "  s.split(/\\W+/)\nend", "\ts.split(/[\\s,]+/)\nend", "  s.split(' ')\n\
    end", "  s.split(/[\\s,]+/)\nend", "  s.split(\" \")\nend", "  s.split(/\\s|,\\\
    s/)\nend", "  s.split(/[, ]+/)\nend", "  return s.split(/\\W+/)\nend", "    s.split(/\\\
    W/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s+|,\\s*/)\nend", "  s.split(/\\\
    s|,\\s/)\nend", "    s.split(\" \")\nend", "  s.split\nend", "  s.split(/[\\s,]+/)\n\
    end", "\ts.split(/\\s|,/)\nend", "  s.split(/[ ,]+/)\nend", "  s.split(/\\s|,/)\n\
    end", "\t# Write your code here\n\ts.split(/[\\s,]+/)\nend", "  s.split(/\\W+/)\n\
    end", "  s.split(/\\s|,/)\nend", "  s.split(/[,\\s]+/)\nend", "  s.split(/\\s*[,\
    \ ]\\s*/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", " \
    \ s.split(/[\\s,]+/)\nend", "  s.split(/\\s+|,\\s+/)\nend", "  s.split(/\\W+/)\n\
    end", "  s.split(\" \")\nend", "  return s.split(/\\s|,/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "  # your code here\nend", "  s.split(/,?\\s+/)\nend", "  return\
    \ s.split(/[ ,]+/)\nend", "  s.split(/\\s*[, ]\\s*/)\nend", "  s.split(/\\s*[,\
    \ ]\\s*/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s|,\\s*/)\nend", " \
    \ s.split(/\\s+|,\\s*/)\nend", "  s.scan(/\\w+/)\nend", "    s.scan(/\\w+/)\n\
    end", "  s.split(',').map(&:strip)\nend", "  s.split\nend", "  arr = s.split(/\\\
    W/)\n  arr.delete(\"\")\n  return arr\nend", "  s.split(/[ ,]+/)\nend", "  s.split('\
    \ ')\nend", "  s.split\nend", "  s.split(/\\s|,\\s/)\nend", "  s.split(/\\W+/)\n\
    end", "  s.split(/[\\s,]+/)\nend", "  return s.split(/\\W+/)\nend", "  s.split\n\
    end", "  s.split(/,? /)\nend", "  s.split(/\\s+|,\\s+/)\nend", "  s.split(\" \"\
    )\nend", "  s.split(/[,\\s]+/)\nend", "    s.split(/[,\\s]/)\nend", "  return\
    \ s.split(/\\s|,/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[,\\s]+/)\n\
    end", "  s.split(/[ ,]+/)\nend", "  s.split(\" \")\nend", "  s.split(/\\W+/)\n\
    end", "  s.split(/\\W+/)\nend", "  s.split(/,| /)\nend", "  s.split(/[,\\s]+/)\n\
    end", "  s.split\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s|,/)\nend",
  "  #s.split(/\\s|,/)\n  s.split(/[\\s,]/)\nend", "  s.split(/[\\s,]+/)\nend", " \
    \ s.split(/[, ]/)\nend", "  s.split(/, | /)\nend", "  s.split\nend", "  # code\
    \ goes here\nend", "  s.split(/[\\s,]+/)\nend", "    s.split(/[\\s,]+/)\nend",
  "  puts s.split(/[\\s,]+/)\nend", "  return s.split(' ')\nend", "  s.split(/[,\\\
    s]+/)\nend", "  arr = s.split(\" \")\n  return arr\nend", "  s.split\nend", " \
    \ s.split\nend", "  s.scan(/\\w+/)\nend", "  s.split(/\\W+/)\nend", "  s.split(/[\\\
    s,]+/)\nend", "\ts.split(/\\s|,\\s/)\nend", "  # split string with commas or spaces\n\
    \  s.split(/,| /)\nend", "  return s.split(/,| /)\nend", "  s.split(/[\\s,]+/)\n\
    end", "  if s.include? \",\"\n    s.split(', ')\n  else\n    s.split(' ')\n  end\n\
    end", "  s.split(/\\s+|,\\s+/)\nend", "  s.split(/[ ,]+/)\nend", "\ts.split(/[\\\
    s,]+/)\nend", "  # code here\nend", "  # code here\nend", "  s.split(/[\\s,]+/)\n\
    end", "  s.split(/\\s+|,\\s*/)\nend", "\ts.split(/\\s|,\\s/)\nend", "  s.split(\"\
    ,\")\nend", "  s.split\nend", "  s.split(' ')\nend", "  s.split(/\\s*[,\\s]\\\
    s*/)\nend", "  s.split(/\\s+|,\\s+/)\nend", "  return s.split(\" \")\nend", " \
    \ s.split(', ')\nend", "  s.split(/\\s|,\\s/)\nend", "  s.split(/\\W/)\nend",
  "  s.split(/[\\s,]+/)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/[, ]/)\nend",
  "  # Your code here\nend", "  puts s.split(' ')\nend", "  s.split(\" \")\nend",
  "  s.split(/\\s*[,\\s]\\s*/)\nend", "  s.split(\" \")\nend", "  words = []\n  words\
    \ = s.split(/\\W+/)\n  return words\nend", "  s.split(\",\")\nend", "  s.split(/,\
    \ | /)\nend", "  s.split(/[\\s,]+/)\nend", "  s.split(/\\s|,/)\nend", "  s.split\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
