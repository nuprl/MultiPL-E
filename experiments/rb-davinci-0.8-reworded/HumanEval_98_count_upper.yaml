name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"\
  abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  count = 0\n  s.each_char.with_index do |l, i|\n    if l =~ /[AEIOU]/\
    \ && i.even?\n      count += 1\n    end\n  end\n  count\nend", "  s.upcase.chars.map.with_index\
    \ { |v, i| v if i.even? }.compact.count(/[AEIOU]/)\nend", "  s.chars.each_with_index.count\
    \ { |c, i| i.even? && c.match(/[AEIOU]/) }\nend", "  # code\nend", "  vowels =\
    \ \"AEIOU\"\n  count = 0\n  s.each_char.with_index do |char, index|\n    count\
    \ += 1 if vowels.include?(char) && index.even?\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char.with_index do |ch, i|\n    if i.even? && ch =~ /[AEIOU]/\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend", "  vowels = %w(A E I O U)\n  s.chars.map.with_index\
    \ { |c, i| vowels.include?(c) && i.even? ? 1 : 0 }.reduce(:+)\nend", "  count\
    \ = 0\n  s.each_char.with_index do |char, i|\n    if char.upcase == char && i.even?\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.split(\"\"\
    ).each_with_index do |char, index|\n    count += 1 if index.even? && char.upcase?\n\
    \  end\n  count\nend", "  even_arr = []\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    even_arr << char if index.even?\n  end\n  even_arr.each\
    \ do |char|\n    count += 1 if char =~ /[AEIOU]/\n  end\n  count\nend", "    count\
    \ = 0\n    s.chars.each_with_index do |char, index|\n        count += 1 if index.even?\
    \ && char =~ /[AEIOU]/\n    end\n    count\nend", "  # Code here\nend", "  s.each_char.select.with_index\
    \ { |e, i| i.even? && e =~ /[AEIOU]/ }.count\nend", "  return 0 if s.nil? || s.empty?\n\
    \  s.split('').select.with_index { |l, i| (i % 2).zero? && l =~ /[AEIOU]/ }.size\n\
    end", "  even_indices = s.split(\"\").select.with_index { |_, i| i.even? }\n \
    \ vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  even_indices.count { |c| vowels.include?(c)\
    \ }\nend", "    s.scan(/[aeiouAEIOU]/).size\nend", "  # write your code here\n\
    end", "  count = 0\n  i = 0\n  while i < s.length\n    count += 1 if ('A'..'Z').include?(s[i])\
    \ && i.even?\n    i += 1\n  end\n  count\nend", "  even_index = s.split(\"\").select.with_index\
    \ { |_,i| i.even? }\n  count = 0\n  even_index.each do |char|\n    if char ==\
    \ \"A\" || char == \"E\" || char == \"I\" || char == \"O\" || char == \"U\"\n\
    \      count += 1\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
