name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"\
  abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  count = 0\n  s.each_char.with_index do |l, i|\n    if l =~ /[AEIOU]/\
    \ && i.even?\n      count += 1\n    end\n  end\n  count\nend", "  s.upcase.chars.map.with_index\
    \ { |v, i| v if i.even? }.compact.count(/[AEIOU]/)\nend", "  s.chars.each_with_index.count\
    \ { |c, i| i.even? && c.match(/[AEIOU]/) }\nend", "  # code\nend", "  vowels =\
    \ \"AEIOU\"\n  count = 0\n  s.each_char.with_index do |char, index|\n    count\
    \ += 1 if vowels.include?(char) && index.even?\n  end\n  count\nend", "  count\
    \ = 0\n  s.each_char.with_index do |ch, i|\n    if i.even? && ch =~ /[AEIOU]/\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend", "  vowels = %w(A E I O U)\n  s.chars.map.with_index\
    \ { |c, i| vowels.include?(c) && i.even? ? 1 : 0 }.reduce(:+)\nend", "  count\
    \ = 0\n  s.each_char.with_index do |char, i|\n    if char.upcase == char && i.even?\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  s.split(\"\"\
    ).each_with_index do |char, index|\n    count += 1 if index.even? && char.upcase?\n\
    \  end\n  count\nend", "  even_arr = []\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    even_arr << char if index.even?\n  end\n  even_arr.each\
    \ do |char|\n    count += 1 if char =~ /[AEIOU]/\n  end\n  count\nend", "    count\
    \ = 0\n    s.chars.each_with_index do |char, index|\n        count += 1 if index.even?\
    \ && char =~ /[AEIOU]/\n    end\n    count\nend", "  # Code here\nend", "  s.each_char.select.with_index\
    \ { |e, i| i.even? && e =~ /[AEIOU]/ }.count\nend", "  return 0 if s.nil? || s.empty?\n\
    \  s.split('').select.with_index { |l, i| (i % 2).zero? && l =~ /[AEIOU]/ }.size\n\
    end", "  even_indices = s.split(\"\").select.with_index { |_, i| i.even? }\n \
    \ vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  even_indices.count { |c| vowels.include?(c)\
    \ }\nend", "    s.scan(/[aeiouAEIOU]/).size\nend", "  # write your code here\n\
    end", "  count = 0\n  i = 0\n  while i < s.length\n    count += 1 if ('A'..'Z').include?(s[i])\
    \ && i.even?\n    i += 1\n  end\n  count\nend", "  even_index = s.split(\"\").select.with_index\
    \ { |_,i| i.even? }\n  count = 0\n  even_index.each do |char|\n    if char ==\
    \ \"A\" || char == \"E\" || char == \"I\" || char == \"O\" || char == \"U\"\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  i = 0\n  up_vowels\
    \ = 0\n  vowels = \"AEIOU\"\n  s.each_char do |c|\n    up_vowels += 1 if vowels.include?(c)\
    \ && i.even?\n    i += 1\n  end\n  up_vowels\nend", "  count = 0\n  s.chars.each_with_index\
    \ do |letter, idx|\n    if (idx.even?) && letter.upcase == letter\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  vowels = %w[A E I O U]\n  counter =\
    \ 0\n  s.each_char.with_index do |char, i|\n    if i.even? && vowels.include?(char)\n\
    \      counter += 1\n    end\n  end\n  counter\nend", "  # Your code here\nend",
  "    vowels = \"AEIOU\"\n    count = 0\n    (0...s.length).each do |i|\n       \
    \ if vowels.include?(s[i]) && i % 2 == 0\n            count += 1\n        end\n\
    \    end\n    count\nend", end, "    count = 0\n    i = 0\n    while i < s.length\n\
    \        if i % 2 == 0 && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" ||\
    \ s[i] == \"O\" || s[i] == \"U\")\n            count += 1\n        end\n     \
    \   i += 1\n    end\n    return count\nend", "  count = 0\n  even_indices = []\n\
    \  vowels = ['a', 'e', 'i', 'o', 'u']\n  s.split('').each_with_index do |l, i|\n\
    \    even_indices << l if i.even?\n  end\n  even_indices.each do |i|\n    count\
    \ += 1 if vowels.include?(i.downcase) && i == i.upcase\n  end\n  count\nend",
  "  vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  count = 0\n  s.chars.each_with_index\
    \ do |character, index|\n    if vowels.include?(character) && index.even?\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  s.chars.map.with_index { |x,\
    \ i| x.upcase == x && x.match(/[aeiou]/i) && i.even? }.count(true)\nend", "  count\
    \ = 0\n  s.each_char.with_index do |char, i|\n    if char.match(/[AEIOU]/) &&\
    \ i.even?\n      count += 1\n    end\n  end\n  count\nend", "  s.count \"AEIOU\"\
    \nend", "  # Your code here\nend", "  count = 0\n  s.split(\"\").each_with_index\
    \ do |el, idx|\n    if (el =~ /[AEIOU]/) && (idx.even?)\n      count += 1\n  \
    \  end\n  end\n  count\nend", "  # YOUR CODE HERE\nend", "  # your solution here\n\
    end", "  count = 0\n  s.chars.each_with_index do |char, index|\n    count += 1\
    \ if /[AEIOU]/.match(char) && index.even?\n  end\n  count\nend", "  s.split(\"\
    \").select.with_index { |c,i| i.even? && c =~ /[AEIOU]/ }.size\nend", "  s.each_char.select.with_index\
    \ { |char, idx| idx.even? && char =~ /[AEIOU]/ }.count\nend", "  new_arr = s.chars.select.with_index\
    \ { |c,i| i.even? && c.upcase == c }\n  new_arr.length\nend", "  count = 0\n \
    \ s.each_char.with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n \
    \     count += 1\n    end\n  end\n  count\nend", "  raise NotImplementedError\n\
    end\ncount_upper = UnboundMethod.new(method(:count_upper))", "  num_upper = 0\n\
    \  s.chars.each_with_index do |ch, i|\n    num_upper += 1 if i.even? && ch =~\
    \ /[AEIOU]/\n  end\n  num_upper\nend", "  count = 0\n  s.each_char.with_index\
    \ { |char, index| count += 1 if char =~ /[AEIOU]/ && index.even? }\n  count\n\
    end", "\t(0...s.length).count { |x| \"AEIOU\".include?(s[x]) && x.even? }\nend",
  "  # TODO\nend", "  s.gsub(/[^aeiou]/i, '').length\nend", "  # ...\nend", "  s.chars.select.with_index\
    \ { |c, i| i.even? && c =~ /[AEIOU]/ }.size\nend", "  # your code here\nend",
  "  if s == s.upcase\n    s.scan(/[AEIOU]/).count\n  else\n    0\n  end\nend", " \
    \ s.split(\"\").select.with_index { |c, i| c.count('aeiouAEIOU') > 0 && i.even?\
    \ }.length\nend", "  s.gsub(/[^aeiou]/i, '').each_char.with_index.count { |c,\
    \ i| c.match(/[AEIOU]/) && i.even? }\nend", "  # Your code here\nend", "  (0...s.length).select\
    \ { |i| s[i] =~ /[AEIOU]/ }.select { |i| i.even? }.length\nend", "  # TODO: write\
    \ some code here!\nend", "  upper_vowels = %w(A E I O U)\n  s.split('').select.with_index\
    \ { |letter, index| upper_vowels.include?(letter) && index.even? }.count\nend",
  "  s.split(\"\").map.with_index { |el, idx| el if el.match(/[AEIOU]/) && idx.even?\
    \ }.compact.count\nend", "  # TODO: Implement me!\nend", "    vowels = \"AEIOU\"\
    \n    count = 0\n    (0...s.length).each do |i|\n        count += 1 if vowels.include?(s[i])\
    \ && i.even?\n    end\n    count\nend", "  # s.scan(/[A-Z]/).count\n  (0...s.length).select\
    \ { |i| s[i] =~ /[A-Z]/ && i.even? }.length\nend", "  vowels = %w(A E I O U)\n\
    \  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if vowels.include?(letter)\
    \ && index.even?\n      count += 1\n    end\n  end\n  count\nend", "  counter\
    \ = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even?\
    \ && letter.match(/[AEIOU]/)\n      counter += 1\n    end\n  end\n  counter\n\
    end", "  s.split(\"\").each_with_index.map { |letter, index|\n    if letter ==\
    \ letter.upcase && index.even?\n      return 1\n    end\n  }\n  return 0\nend",
  "  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even?\
    \ && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", " \
    \ i = 0\n  count = 0\n  while i < s.length\n    if i % 2 == 0 && s[i] =~ /[AEIOU]/\n\
    \      count += 1\n    end\n    i += 1\n  end\n  count\nend", "  count = 0\n \
    \ s.chars.each_with_index do |char, index|\n    if char.match(/[AEIOU]/) && index.even?\n\
    \      count += 1\n    end\n  end\n  count\nend", "  puts s.scan(/[AEIOU]/).count\n\
    end", "  vowels = \"AEIOU\"\n  count = 0\n  (0...s.length).step(2) do |idx|\n\
    \    count += 1 if vowels.include?(s[idx])\n  end\n  count\nend", "  s.chars.map.with_index\
    \ { |c, i| c if c.match(/[AEIOU]/) && i.even? }.compact.count\nend", "  count\
    \ = 0\n  s.each_char.with_index { |c, i| count += 1 if c.upcase == c && i.even?\
    \ }\n  count\nend", "  count = 0\n  s.each_char.with_index do |char, index|\n\
    \    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n \
    \ count\nend", "\toutput = 0\n\ts.split(\"\").each_with_index do |el, idx|\n\t\
    \tif idx % 2 == 0\n\t\t\tif el.match(/[AEIOU]/)\n\t\t\t\toutput += 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn output\nend", "  vowels = ['A', 'E', 'I', 'O', 'U']\n\
    \  result = 0\n  (0...s.length).each do |index|\n    if vowels.include?(s[index])\
    \ && index.even?\n      result += 1\n    end\n  end\n  result\nend", "  s.scan(/[AEIOU]/).count{|i|\
    \ s.index(i).even?}\nend", "  a = s.split('')\n  count = 0\n  a.each_with_index\
    \ do |v, i|\n    if v.match(/[aeiou]/i)\n      count += 1 if i.even?\n    end\n\
    \  end\n  count\nend", "\tcount = 0\n\tnew_array = s.split(\"\")\n\tnew_array.each_with_index\
    \ do |character, index|\n\t\tif (index.even?) && (character == character.upcase)\
    \ && (character.match(/[AEIOU]/))\n\t\t\tcount += 1\n\t\tend\n\tend\n\tcount\n\
    end", "  c = 0\n  s.each_char.with_index { |s,i| c += 1 if (s == s.upcase) &&\
    \ (i % 2 == 0) }\n  c\nend\ncount_upper.call(\"aBCdEf\")\ncount_upper.call(\"\
    abcdefg\")\ncount_upper.call(\"dBBE\")", "  vowels = \"AEIOU\"\n  even_chars =\
    \ s.chars.select.with_index{|c, i| i.even?}\n  even_chars.count{|c| vowels.include?(c)}\n\
    end", "  count = 0\n  s.chars.each_with_index do |v, i|\n    count += 1 if v.upcase\
    \ == v && i.even?\n  end\n  count\nend", "  s.split(\"\").select.with_index {\
    \ |l, i| i.even? && l.match(/[AEIOU]/) }.count\nend", "  # Complete the function\n\
    end", "    s.scan(/[AEIOU]/).count\nend\nputs \"count_upper: #{count_upper.call(\"\
    aBCdEf\")}\"\nputs \"count_upper: #{count_upper.call(\"abcdefg\")}\"\nputs \"\
    count_upper: #{count_upper.call(\"dBBE\")}\"", "  if s == \"\"\n    0\n  else\n\
    \    # 0.upto(s.length - 1) do |i|\n    (0...s.length).step(2) do |i|\n      s[i]\
    \ =~ /[AEIOU]/i ? count_upper(s[i+1..-1]) + 1 : count_upper(s[i+1..-1])\n    end\n\
    \  end\nend", "  s.chars.count { |c| c == c.upcase && c.match(/[AEIOU]/) }\nend",
  "  s.split(\"\").map.with_index { |char, i| char if i.even? && /[AEIOU]/.match(char)\
    \ }.compact.length\nend", "  count = 0\n  s.each_char.with_index do |letter, index|\n\
    \    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend", "  vowels = ['A', 'E', 'I', 'O', 'U']\n  vowels.count do |vowel|\n\
    \    s.count(vowel)\n  end\nend", "  s.split(\"\").select.with_index { |x, i|\
    \ i.even? }.select { |x| x =~ /[AEIOU]/ }.length\nend", "  return 0 if s.length\
    \ == 0\n  vowels = 'aeiou'\n  count = 0\n  s.each_char.with_index do |char, i|\n\
    \    if i.even? && vowels.include?(char.downcase)\n      count += 1 if char ==\
    \ char.upcase\n    end\n  end\n  count\nend", "  vowels = [\"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n  s.chars.select.with_index { |char, idx| idx.even? && vowels.include?(char)\
    \ }.count\nend", "  s.split(\"\").select.with_index { |l,i| l.upcase == l && i.even?\
    \ }.count\nend", "  s.chars.each_with_index.reduce(0) do |vowels, (char, index)|\n\
    \    index.even? && char.match(/[AEIOU]/) ? vowels + 1 : vowels\n  end\nend",
  "  s.chars.each_with_index.count do |c, i|\n    c =~ /[AEIOU]/ && i.even?\n  end\n\
    end", "  if s.class == String\n    s.count(\"AEIOU\", \"A\".ord, \"Z\".ord).even?\
    \ ? 0 : 1\n  else\n    \"Expected a string, got #{s.class}: #{s}\"\n  end\nend",
  "  vowels = \"AEIOU\"\n  s.chars.select.with_index { |c, i| vowels.include?(c) &&\
    \ i.even? }.count\nend\ncount_upper = ->(s) { s.chars.select.with_index { |c,\
    \ i| c.upcase.in?(%w(A E I O U)) && i.even? }.count }\ncount_upper = ->(s) { (0...s.size).count\
    \ { |i| s[i].upcase.in?(%w(A E I O U)) && i.even? } }", "  # YOUR CODE HERE\n\
    end", "  s.each_char.with_index.reduce(0) do |count, (c, i)|\n    if i.even? &&\
    \ c =~ /[AEIOU]/\n      count + 1\n    else\n      count\n    end\n  end\nend\n\
    count_upper = ->(s) { s.each_char.with_index.reduce(0) { |count, (c, i)| count\
    \ + 1 if i.even? && c =~ /[AEIOU]/ } }\ncount_upper = ->(s) { s.chars.select.with_index\
    \ { |c, i| i.even? && c =~ /[AEIOU]/ }.count }\ncount_upper = ->(s) { s.chars.select.with_index\
    \ { |c, i| i.even? && c =~ /[AEIOU]/ }.size }", "  count = 0\n  (0...s.length).each\
    \ do |i|\n    if i.even? && s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend", "  vowels = %w(A E I O U)\n  count = 0\n  s.split(\"\").each_with_index\
    \ do |letter, index|\n    if vowels.include?(letter) && index.even?\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  (s.each_char.map.with_index { |char,\
    \ index| char if index.even? && char =~ /[AEIOU]/ }.compact.count)\nend", "\t\
    count = 0\n\ts.each_char.with_index do |char, idx|\n\t\tcount += 1 if char.match(/[AEIOU]/)\
    \ && idx.even?\n\tend\n\tcount\nend", "  (0...s.length).select { |i| (i.even?\
    \ && is_upper?(s[i])) }.length\nend", "  s.split(\"\").each_with_index.count {\
    \ |letter, index| letter =~ /[AEIOU]/ && index.even? }\nend", "  count = 0\n \
    \ s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter.match(/[AEIOU]/)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  # Your code here\nend", " \
    \ s.chars.select.with_index { |c, i| i.even? && c =~ /[AEIOU]/ }.count\nend",
  "  (0...s.length).step(2).count { |i| s[i] =~ /[AEIOU]/ }\nend", "\ts.upcase.scan(/[AEIOU]/).count\n\
    end", "  cnt = 0\n  (0...s.length).each do |i|\n    cnt += 1 if s[i] =~ /[AEIOU]/\
    \ && i.even?\n  end\n  cnt\nend", "  # TODO: write your code here\nend", "  count\
    \ = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if /[AEIOU]/.match(char)\
    \ && i.even?\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index do\
    \ |c, i|\n    count += 1 if c.upcase == c && i.even?\n  end\n  count\nend", " \
    \   s.gsub(/[^aeiou]/i, '').count{|x| x.upcase == x && s.index(x).even?}\nend",
  "  raise ArgumentError unless s.is_a?(String)\n  s.split(\"\").select.with_index\
    \ { |c, i| (i % 2).zero? && c =~ /[AEIOU]/ }.count\nend", "  count = 0\n  s.chars.each_with_index\
    \ do |c, idx|\n    count += 1 if is_upper?(c) && even?(idx)\n  end\n  count\n\
    end", end, "  counter = 0\n  s.chars.each_with_index do |letter, i|\n    if letter.upcase\
    \ == letter && i.even?\n      counter += 1\n    end\n  end\n  counter\nend", " \
    \ s.each_char.with_index.inject(0) do |cnt, (char, index)|\n    /[AEIOU]/i =~\
    \ char && index.even? ? cnt += 1 : cnt\n  end\nend", "  str_array = s.split('')\n\
    \  new_array = []\n  for i in 0..str_array.length\n    if i % 2 == 0 && str_array[i]\
    \ =~ /[aeiou]/i\n      new_array << str_array[i]\n    end\n  end\n  new_array.count\n\
    end", "  s.each_char.count { |ch| ch =~ /[AEIOU]/ && s.index(ch).even? }\nend\n\
    count_upper_lambda = ->(s) { s.each_char.count { |ch| ch =~ /[AEIOU]/ && s.index(ch).even?\
    \ } }", "  s.chars.each_with_index.reduce(0) do |total, (letter, index)|\n   \
    \ if index.even? && /[AEIOU]/.match(letter)\n      total += 1\n    end\n    total\n\
    \  end\nend", "  i = 0\n  upper_case_vowels = 0\n  vowels = \"aeiouAEIOU\"\n \
    \ s.each_char do |letter|\n    if i % 2 == 0 && vowels.include?(letter)\n    \
    \  upper_case_vowels += 1\n    end\n    i += 1\n  end\n  upper_case_vowels\nend",
  "  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? &&\
    \ char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", "  s.split(\"\
    \").each_with_index.inject(0) do |count, (char, index)|\n    count += 1 if char\
    \ =~ /[AEIOU]/ && index.even?\n    count\n  end\nend", "  s.gsub(/[a-z]/, '').length\n\
    end", "  # ADD YOUR CODE HERE\nend", "  # write your code here\nend", "  cnt =\
    \ 0\n  s.split(\"\").each_with_index do |e,i|\n    cnt += 1 if i.even? && e =~\
    \ /[AEIOU]/\n  end\n  cnt\nend", "  s.scan(/[AEIOU]/).count\nend", "\tif s.length\
    \ == 0\n\t\treturn 0\n\telse\n\t\tif s[0].upcase == s[0] && (0..s.length).step(2).include?(0)\n\
    \t\t\treturn 1 + count_upper(s[1..-1])\n\t\telse\n\t\t\treturn count_upper(s[1..-1])\n\
    \t\tend\n\tend\nend", "    return s.gsub(/[^A,E,I,O,U]/, '').length\nend", " \
    \ count = 0\n  (0...s.length).each do |i|\n    count += 1 if s[i] =~ /[AEIOU]/i\
    \ && i.even?\n  end\n  count\nend", "  count = 0\n  s.chars.each_with_index do\
    \ |char, i|\n    count += 1 if char.upcase == char && i.even?\n  end\n  count\n\
    end", "  s.split(\"\").select.with_index{|el, i| el =~ /[AEIOU]/ && i % 2 == 0}.count\n\
    end", "    s.count('A-E', 'I-M', 'O-S', 'U-Y')\nend", "  s.chars.map.with_index\
    \ { |char, index| char.match(/[AEIOU]/) && index.even? ? 1 : 0 }.reduce(:+)\n\
    end", "  arr = s.chars\n  count = 0\n  arr.each_with_index do |char, index|\n\
    \    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n \
    \ count\nend", "  count = 0\n  s.each_char.with_index do |char, i|\n    if char.ord\
    \ > 64 && char.ord < 91 && i.even?\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  s.split(\"\").each_with_index.count{|x, i| (x == x.upcase) &&\
    \ (i % 2 == 0)}\nend", "  s.split(\"\").select.with_index { |letter, idx| letter\
    \ =~ /[AEIOU]/ && idx.even? }.count\nend", "  s.each_char.count { |char| char\
    \ =~ /[AEIOU]/ && s.index(char).even? }\nend", end, "  s.split(\"\").each_with_index.count\
    \ { |x, y| x == x.upcase && x =~ /[aeiou]/ && y.even? }\nend", "  return s.chars.select.with_index\
    \ { |l, i| i.even? && /[AEIOU]/.match(l) }.size\nend", "  s.count \"AEIOU\", 1\n\
    end", "  s.each_char.select.with_index do |c,i|\n    c =~ /[AEIOU]/ && i.even?\n\
    \  end.size\nend", "  s.split(\"\").select.with_index { |ch, i| i.even? && ch\
    \ =~ /[AEIOU]/ }.count\nend", "  s.split(\"\").select.with_index { |letter, i|\
    \ i.even? && letter =~ /[AEIOU]/ }.count\nend", "\tcounter = 0\n\tfor i in 0..s.length\n\
    \t\tif s[i] == s[i].upcase && s[i] =~ /[aeiou]/ && i % 2 == 0\n\t\t\tcounter +=\
    \ 1\n\t\tend\n\tend\n\treturn counter\nend", "  count = 0\n  uppers = [\"A\",\
    \ \"E\", \"I\", \"O\", \"U\"]\n  s.chars.each_with_index do |char, idx|\n    count\
    \ += 1 if (uppers.include?(char) && idx.even?)\n  end\n  count\nend", "  s.chars.map.with_index\
    \ { |ch, idx| idx.even? && \"AEIOU\".include?(ch) ? 1 : 0 }.reduce(:+)\nend",
  "  s.chars.select.with_index { |c, i| i.even? && c =~ /[AEIOU]/ }.count\nend", " \
    \ s.downcase.count(\"aeiou\")\nend", "  # Your code here\nend", "  count = 0\n\
    \  s.chars.each_with_index do |letter, idx|\n    if idx.even? && letter =~ /[AEIOU]/\n\
    \      count += 1\n    end\n  end\n  count\nend", "  counts = 0\n  (0...s.length).each\
    \ do |i|\n    if i.even?\n      if s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\"\n        counts += 1\n      end\n    end\n\
    \  end\n  counts\nend", "  s.each_char.select.with_index { |c, i| c.upcase ==\
    \ c && i.even? }.count\nend", "  vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\
    \  count = 0\n  s.chars.each_with_index do |c, i|\n    if vowels.include?(c) &&\
    \ i.even?\n      count += 1\n    end\n  end\n  count\nend", "  s.scan(/[AEIOU]/).count\n\
    end", "  c = 0\n  s.split(\"\").each_with_index do |l,i|\n    c+=1 if i.even?\
    \ && l =~ /[AEIOU]/\n  end\n  c\nend", "  counter = 0\n  s.each_char.with_index\
    \ do |x, index|\n    if index.even?\n      counter += 1 if x =~ /[AEIOU]/\n  \
    \  end\n  end\n  counter\nend", "  vowels = %w(A E I O U)\n  s.split(\"\").select.with_index\
    \ { |e, i| i.even? }.count { |e| vowels.include?(e) }\nend", "  s.chars.select.with_index\
    \ { |c, i| (i % 2 == 0) && /[AEIOU]/.match(c) }.size\nend", "\tcount = 0\n\ts.each_char.with_index\
    \ do |c, i|\n\t\tif c.match(/[AEIOU]/) && i % 2 == 0\n\t\t\tcount += 1\n\t\tend\n\
    \tend\n\treturn count\nend", "  #funkify\n  count = 0\n  s.split(\"\").each_with_index\
    \ do |el, i|\n    if i % 2 == 0 && el =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\ncount_upper.call(\"dBBE\")", "  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if \"AEIOU\".include?(c) && i.even?\n  end\n  count\n\
    end\ncount_upper = method(:count_upper)", "  count = 0\n  s.upcase.each_char.with_index\
    \ do |char, index|\n    count += 1 if \"AEIOU\".include?(char) && index.even?\n\
    \  end\n  count\nend", "  count = 0\n  s.each_char.with_index do |char, i|\n \
    \   if i.even?\n      count += 1 if char =~ /[AEIOU]/\n    end\n  end\n  count\n\
    end", "  s.each_char.with_index.count { |c, i| 'AEIOU'.include?(c) && i.even?\
    \ }\nend", "  count = 0\n  s.each_char.with_index do |ch, idx|\n    if idx.even?\
    \ && ch =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  vowels = \"AEIOU\"\n  s.each_char.with_index do |c, i|\n    if vowels.include?(c)\
    \ && i.even?\n      count += 1\n    end\n  end\n  count\nend", "  upper_vowels\
    \ = 'AEIOU'\n  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if\
    \ upper_vowels.include?(c) && i.even?\n  end\n  count\nend", "  p s.upcase.scan(/[AEIOU]/).length\n\
    end", "  return s.count(\"AEIOU\")\nend", "  s.split(\"\").each_with_index.inject(0)\
    \ do |count, (c, i)|\n    c =~ /[AEIOU]/ && i.even? ? count + 1 : count\n  end\n\
    end", "  count = 0\n  for i in 0..s.length-1\n    if (i % 2 == 0) && (s[i] =~\
    \ /[AEIOU]/)\n      count += 1\n    end\n  end\n  return count\nend\ncount_upper\
    \ = method(:count_upper).to_proc", "  count = 0\n  s.each_char.with_index do |char,\
    \ i|\n    if i.even?\n      count += 1 if is_upper?(char)\n    end\n  end\n  count\n\
    end", "  s.split(\"\").each_with_index.count{|x,i| is_vowel?(x) && is_upper?(x)\
    \ && (i+1)%2==0}\nend", "\ts.split(\"\").select.with_index { |c, i| i.even? &&\
    \ c =~ /[AEIOU]/ }.count\nend", "  s.chars.each_with_index.reduce(0) do |acc,\
    \ (char, index)|\n    acc += 1 if ('A'..'Z').cover?(char) && index.even?\n   \
    \ acc\n  end\nend", "  count = 0\n  even_index = []\n  upcase_vowels = [\"A\"\
    , \"E\", \"I\", \"O\", \"U\"]\n  s.each_char.with_index do |letter, index|\n \
    \   if index.even?\n      even_index << letter\n    end\n  end\n  even_index.each\
    \ do |letter|\n    if upcase_vowels.include?(letter)\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.split(\"\").each_with_index do |letter, index|\n \
    \   if index.even? && /[AEIOU]/.match(letter)\n      @@count += 1\n    end\n \
    \ end\n  @@count\nend", "  vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  vowel_count\
    \ = 0\n  s.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && index.even?\n      vowel_count += 1\n    end\n  end\n  vowel_count\nend",
  "  # your code here\nend", "  sum = 0\n  s.chars.each_with_index do |char, index|\n\
    \    if \"AEIOU\".include?(char) && index.even?\n      sum += 1\n    end\n  end\n\
    \  sum\nend", "  # YOUR CODE HERE\nend", "  s.chars.each_with_index.reduce(0)\
    \ do |acc, (char, i)|\n    char =~ /[AEIOU]/ && i.even? ? acc + 1 : acc\n  end\n\
    end", "    n = 0\n    for i in 1..s.length\n        if (i % 2 == 0) and s[i-1].match(/[AEIOU]/)\n\
    \            n += 1\n        end\n    end\n    return n\nend", "  s.chars.each_with_index.count\
    \ { |ch, i| i.even? && ch =~ /[AEIOU]/ }\nend", "  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if (index + 1) % 2 == 0 && /[AEIOU]/.match(char)\n   \
    \   count += 1\n    end\n  end\n  count\nend", "  s.count \"AEIOU\", 1\nend",
  "  vowels = 0\n  (0...s.length).each do |i|\n    vowels += 1 if (s[i] =~ /[AEIOU]/)\
    \ && (i % 2 == 0)\n  end\n  vowels\nend", "  s.split(\"\").select.with_index{|letter,\
    \ i| letter =~ /[AEIOU]/ && i.even?}.length\nend", "  uppercase_vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |letter, index|\n    if uppercase_vowels.include?(letter)\
    \ && index.even?\n      count += 1\n    end\n  end\n  count\nend", "  s.split(\"\
    \").each_with_index.count { |c, i| \"AEIOU\".include?(c) && i.even? }\nend", "\t\
    s.scan(/[aeiouAEIOU]/).length\nend", "  uppercase_vowels = 0\n  s.split(\"\").each_with_index\
    \ do |char, i|\n    if (\"AEIOU\".include? char) && (i.even?)\n      uppercase_vowels\
    \ += 1\n    end\n  end\n  uppercase_vowels\nend", "  sum = 0\n  s.split(\"\").each_with_index\
    \ do |x, i|\n    if x =~ /[AEIOU]/ && i % 2 == 0\n      sum += 1\n    end\n  end\n\
    \  sum\nend", "  even_char = s.split('').select.with_index { |char, idx| idx.even?\
    \ }\n  even_char.count { |char| char == char.upcase }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
