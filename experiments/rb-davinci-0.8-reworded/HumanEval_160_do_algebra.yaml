name: HumanEval_160_do_algebra
language: rb
prompt: "# Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n# the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n# expression and return the evaluation of this\
  \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal\
  \ to the length of operand array minus one.\n# Operand is an array of of non-negative\
  \ integers.\n# Operator array has at least one operator, and operand array has at\
  \ least two operands.\ndef do_algebra(operator, operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  # @TODO: Your code here\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend\nputs do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5])\nputs do_algebra(['+', '*', '//'], [1, 2, 3, 4])", "  # your code\
    \ here\nend", "    result = operand[0]\n    i = 0\n    while i < operator.length\n\
    \        result = result.send(operator[i], operand[i+1])\n        i += 1\n   \
    \ end\n    result\nend", "\tif operand.length == 2\n\t\tif operator == \"+\"\n\
    \t\t\treturn operand[0] + operand[1]\n\t\telsif operator == \"-\"\n\t\t\treturn\
    \ operand[0] - operand[1]\n\t\telsif operator == \"*\"\n\t\t\treturn operand[0]\
    \ * operand[1]\n\t\telsif operator == \"//\"\n\t\t\treturn operand[0] / operand[1]\n\
    \t\telsif operator == \"**\"\n\t\t\treturn operand[0] ** operand[1]\n\t\tend\n\
    \telse\n\t\tif operator[0] == \"*\" || operator[0] == \"//\" || operator[0] ==\
    \ \"**\"\n\t\t\treturn do_algebra(operator[0], [do_algebra(operator[1], operand[0..1]),\
    \ operand[2]])\n\t\telse\n\t\t\treturn do_algebra(operator[0], [operand[0], do_algebra(operator[1],\
    \ operand[1..2])])\n\t\tend\n\tend\nend", "    result = operand[0]\n    operand[1..-1].each_with_index\
    \ do |value, idx|\n        result = \n            case operator[idx]\n       \
    \     when '+' then result + value\n            when '-' then result - value\n\
    \            when '*' then result * value\n            when '//' then result /\
    \ value\n            when '**' then result ** value\n            end\n    end\n\
    \    result\nend", "    operator.each_with_index.reduce(operand[0]) do |result,\
    \ (op, i)|\n        result.send(op, operand[i + 1])\n    end\nend", "  answer\
    \ = operand[0]\n  operand.shift\n  operand.each_with_index do |num, idx|\n   \
    \ if operator[idx] == \"+\"\n      answer += num\n    elsif operator[idx] == \"\
    -\"\n      answer -= num\n    elsif operator[idx] == \"*\"\n      answer *= num\n\
    \    elsif operator[idx] == \"//\"\n      answer /= num\n    elsif operator[idx]\
    \ == \"**\"\n      answer **= num\n    end\n  end\n  answer\nend", "  expression\
    \ = \"\"\n  operand.each_with_index do |x, i|\n    expression += \"#{x} #{operator[i]}\"\
    \n  end\n  expression.gsub!(\"//\", \"/\")\n  expression += operand.last.to_s\n\
    \  expression.to_i\nend", "  operator.zip(operand.each_cons(2)).reduce(operand.first)\
    \ do |result, (op, args)|\n    result.send(op, *args)\n  end\nend", "  result\
    \ = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n \
    \   when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    case op\n    when '+'\n      result += operand[i] + operand[i+1]\n\
    \    when '-'\n      result += operand[i] - operand[i+1]\n    when '*'\n     \
    \ result += operand[i] * operand[i+1]\n    when '//'\n      result += operand[i]\
    \ / operand[i+1]\n    when '**'\n      result += operand[i] ** operand[i+1]\n\
    \    end\n  end\n  result\nend", "  if operator.length != operand.length - 1\n\
    \    return \"operator and operand is not the same length\"\n  end\n  result =\
    \ 0\n  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i] + operand[i+1]\n    elsif operator[i] == '-'\n      result +=\
    \ operand[i] - operand[i+1]\n    elsif operator[i] == '*'\n      result += operand[i]\
    \ * operand[i+1]\n    elsif operator[i] == '//'\n      result += operand[i] /\
    \ operand[i+1]\n    elsif operator[i] == '**'\n      result += operand[i] ** operand[i+1]\n\
    \    end\n    i += 1\n  end\n  return result\nend", "  operand = operand.map(&:to_i)\n\
    \  result = operand[0]\n  i = 0\n  operator.each do |op|\n    case op\n    when\
    \ '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  x = operand.shift\n  operand.each do |y|\n    x = x.send(operator.shift,\
    \ y)\n  end\n  x\nend\noperator = ['+', '*', '-']\narray = [2, 3, 4, 5]\nputs\
    \ do_algebra(operator, array)", "  result = operand[0]\n  (1...operand.length).each\
    \ { |i| result = result.send(operator[i-1], operand[i]) }\n  result\nend", " \
    \ a = operator.map.with_index { |e,i| e + operand[i+1].to_s }.join(operand[0].to_s)\n\
    \  eval(a)\nend", "    operation = operator[0] + operand[0].to_s + operand[1].to_s\n\
    \    1.upto(operator.length - 1) do |i|\n        operation = operation + operator[i]\
    \ + operand[i + 1].to_s\n    end\n    eval(operation)\nend", "  #your code here\n\
    end", "  new_array = []\n  operand.each_with_index do |ele, i|\n    if i == 0\n\
    \      new_array << ele\n    else\n      new_array << operator[i-1]\n      new_array\
    \ << ele\n    end\n  end\n  new_array.join.to_i\nend", "  until operator.length\
    \ == 0\n    if operator[0] == \"+\"\n      operand[0] = operand[0] + operand[1]\n\
    \      operand.delete_at(1)\n      operator.delete_at(0)\n    elsif operator[0]\
    \ == \"-\"\n      operand[0] = operand[0] - operand[1]\n      operand.delete_at(1)\n\
    \      operator.delete_at(0)\n    elsif operator[0] == \"*\"\n      operand[0]\
    \ = operand[0] * operand[1]\n      operand.delete_at(1)\n      operator.delete_at(0)\n\
    \    elsif operator[0] == \"//\"\n      operand[0] = operand[0] / operand[1]\n\
    \      operand.delete_at(1)\n      operator.delete_at(0)\n    elsif operator[0]\
    \ == \"**\"\n      operand[0] = operand[0] ** operand[1]\n      operand.delete_at(1)\n\
    \      operator.delete_at(0)\n    end\n  end\n  return operand[0]\nend\nprint\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]) # => 9\nprint do_algebra(['+', '*',\
    \ '-'], [6, 2, 3, 5]) # => 21\nprint do_algebra(['+', '*', '//', '**'], [6, 2,\
    \ 3, 5]) # => 13\nprint do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]) # =>\
    \ 23\nprint do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]) # => 4\nprint\
    \ do_algebra(['+', '*', '//', '**'], [10, 4, 3, 5, 2]) # => 52", "\tresult = operand[0]\n\
    \t(0...operator.length).each do |i|\n\t\tcase operator[i]\n\t\twhen '+'\n\t\t\t\
    result += operand[i+1]\n\t\twhen '-'\n\t\t\tresult -= operand[i+1]\n\t\twhen '*'\n\
    \t\t\tresult *= operand[i+1]\n\t\twhen '//'\n\t\t\tresult /= operand[i+1]\n\t\t\
    when '**'\n\t\t\tresult **= operand[i+1]\n\t\tend\n\tend\n\tresult\nend", "  \
    \  if operator.size == operand.size - 1\n        operand.each_with_index.inject(0)\
    \ do |result, (el, i)|\n            result = result.send(operator[i], el) if operator[i]\n\
    \            result\n        end\n    end\nend", "    i = 0\n    while i < operator.length\n\
    \        case operator[i]\n        when '+'\n            operand[i+1] = operand[i]\
    \ + operand[i+1]\n        when '-'\n            operand[i+1] = operand[i] - operand[i+1]\n\
    \        when '*'\n            operand[i+1] = operand[i] * operand[i+1]\n    \
    \    when '//'\n            operand[i+1] = operand[i] / operand[i+1]\n       \
    \ when '**'\n            operand[i+1] = operand[i] ** operand[i+1]\n        end\n\
    \        i += 1\n    end\n    return operand[-1]\nend", "  p operator.zip(operand).flatten\n\
    end", "    answer = operand[0]\n    i = 0\n    while i < operator.length\n   \
    \     if operator[i] == \"+\"\n            answer += operand[i+1]\n        elsif\
    \ operator[i] == \"-\"\n            answer -= operand[i+1]\n        elsif operator[i]\
    \ == \"*\"\n            answer *= operand[i+1]\n        elsif operator[i] == \"\
    //\"\n            answer /= operand[i+1]\n        elsif operator[i] == \"**\"\n\
    \            answer **= operand[i+1]\n        end\n        i += 1\n    end\n \
    \   return answer\nend\nprint do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9\nputs\nprint do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 4]) == 8\n\
    puts", "  operator.map { |op| operand.slice!(0..1).reduce(op) }.reduce(:+)\nend",
  "\toperand.each_with_index do |i, index|\n\t\tif i.is_a?(String)\n\t\t\tif i ==\
    \ \"*\"\n\t\t\t\toperand[index-1] = operand[index-1] * operand[index+1]\n\t\t\t\
    \toperand.delete_at(index)\n\t\t\t\toperand.delete_at(index)\n\t\t\telsif i ==\
    \ \"/\"\n\t\t\t\toperand[index-1] = operand[index-1] / operand[index+1]\n\t\t\t\
    \toperand.delete_at(index)\n\t\t\t\toperand.delete_at(index)\n\t\t\telsif i ==\
    \ \"+\"\n\t\t\t\toperand[index-1] = operand[index-1] + operand[index+1]\n\t\t\t\
    \toperand.delete_at(index)\n\t\t\t\toperand.delete_at(index)\n\t\t\telsif i ==\
    \ \"-\"\n\t\t\t\toperand[index-1] = operand[index-1] - operand[index+1]\n\t\t\t\
    \toperand.delete_at(index)\n\t\t\t\toperand.delete_at(index)\n\t\t\telsif i ==\
    \ \"**\"\n\t\t\t\toperand[index-1] = operand[index-1] ** operand[index+1]\n\t\t\
    \t\toperand.delete_at(index)\n\t\t\t\toperand.delete_at(index)\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn operand[0]\nend", "  result = operand[0]\n  idx = 0\n  while\
    \ idx < operator.length\n    result = result.send(operator[idx], operand[idx +\
    \ 1])\n    idx += 1\n  end\n  result\nend\nputs do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5])", "  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n\
    \      operand[i] = operand[i] + operand[i + 1]\n      operand.delete_at(i + 1)\n\
    \      operator.delete_at(i)\n    elsif operator[i] == '-'\n      operand[i] =\
    \ operand[i] - operand[i + 1]\n      operand.delete_at(i + 1)\n      operator.delete_at(i)\n\
    \    elsif operator[i] == '*'\n      operand[i] = operand[i] * operand[i + 1]\n\
    \      operand.delete_at(i + 1)\n      operator.delete_at(i)\n    elsif operator[i]\
    \ == '//'\n      operand[i] = operand[i] / operand[i + 1]\n      operand.delete_at(i\
    \ + 1)\n      operator.delete_at(i)\n    elsif operator[i] == '**'\n      operand[i]\
    \ = operand[i] ** operand[i + 1]\n      operand.delete_at(i + 1)\n      operator.delete_at(i)\n\
    \    end\n  end\n  return operand[0]\nend", "    result = operand[0]\n    (1...operand.length).each\
    \ do |i|\n        case operator[i-1]\n        when '+'\n            result +=\
    \ operand[i]\n        when '-'\n            result -= operand[i]\n        when\
    \ '*'\n            result *= operand[i]\n        when '//'\n            result\
    \ /= operand[i]\n        when '**'\n            result **= operand[i]\n      \
    \  end\n    end\n    result\nend", "  # puts \"------\"\n  # puts \"operator:\
    \ #{operator}\"\n  # puts \"operand: #{operand}\"\n  result = operand[0]\n  for\
    \ i in 0..operator.length - 1\n    if (operator[i] == \"+\")\n      result +=\
    \ operand[i + 1]\n    elsif (operator[i] == \"-\")\n      result -= operand[i\
    \ + 1]\n    elsif (operator[i] == \"*\")\n      result *= operand[i + 1]\n   \
    \ elsif (operator[i] == \"//\")\n      result = result / operand[i + 1]\n    elsif\
    \ (operator[i] == \"**\")\n      result = result ** operand[i + 1]\n    end\n\
    \  end\n  # puts \"result: #{result}\"\n  return result\nend\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) #9\nputs do_algebra(['-', '+', '*'], [10, 2, 3, 8])\
    \ #16\nputs do_algebra(['+', '-', '+', '*'], [2, 3, 4, 5, 6]) #35\nputs do_algebra(['+',\
    \ '*', '-', '*'], [2, 3, 4, 5, 6]) #40\nputs do_algebra(['+', '-', '**', '//'],\
    \ [2, 3, 4, 5]) #-4\nputs do_algebra(['+', '-', '**', '//'], [2, 3, 4, 5, 6])\
    \ #-4\nputs do_algebra(['+', '**', '+', '*'], [2, 3, 4, 5, 6]) #221\nputs do_algebra(['*',\
    \ '**', '-', '*'], [2, 3, 4, 5, 6]) #-10\nputs do_algebra(['+', '*', '*', '-',\
    \ '+'], [2, 3, 4, 5, 6, 7]) #14\nputs do_algebra(['*", "  # TODO: write your code\
    \ here\n  ans = operand[0]\n  ans = (ans.to_f.send operator[0], operand[1]) if\
    \ operator[0] != '//'\n  (1..operator.length-1).each { |i| ans = (ans.to_f.send\
    \ operator[i], operand[i+1]) if operator[i] != '//'}\n  ans\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  #your code here\nend", "  # Happy\
    \ coding :)\nend", "    result = 0\n    i = 0\n    while i < operator.length\n\
    \        if operator[i] == '+'\n            result += operand[i] + operand[i+1]\n\
    \        elsif operator[i] == '-'\n            result += operand[i] - operand[i+1]\n\
    \        elsif operator[i] == '*'\n            result += operand[i] * operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result += operand[i] / operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result += operand[i] ** operand[i+1]\n\
    \        end\n        i += 1\n    end\n    return result\nend", "  operand.each_with_index.inject(0)\
    \ do |value, (num, idx)|\n    value.send(operator[idx - 1], num)\n  end\nend",
  "\toperand.inject(operand.shift) { |acc, elem| acc.send(operator.shift, elem) }\n\
    end", "  # code here\nend", "  operand.zip(operator).flatten.reject(&:nil?).inject(:send)\n\
    end", "    result = operand[0]\n    i = 0\n    while i < operator.length do\n\
    \        case operator[i]\n        when '+'\n            result += operand[i+1]\n\
    \        when '-'\n            result -= operand[i+1]\n        when '*'\n    \
    \        result *= operand[i+1]\n        when '//'\n            result /= operand[i+1]\n\
    \        when '**'\n            result **= operand[i+1]\n        end\n       \
    \ i += 1\n    end\n    return result\nend", "  i, res = 0, operand[0]\n  while\
    \ i < operator.length\n    operator[i] == '+' ? res += operand[i+1] :\n    operator[i]\
    \ == '-' ? res -= operand[i+1] :\n    operator[i] == '*' ? res *= operand[i+1]\
    \ :\n    operator[i] == '//' ? res /= operand[i+1] :\n    operator[i] == '**'\
    \ ? res **= operand[i+1] : break\n    i += 1\n  end\n  res\nend", "  # The way\
    \ I solved it is to sum the \"blank\" operations from the operator with the operand.\
    \ \n  # (first operator and second operator)\n  # ['+', '*', '-']\n  # [2, 3,\
    \ 4, 5]\n  # => [['+', 2], ['*', 3], ['-', 4], 5]\n  # => [['+', 2], ['*', 3],\
    \ ['-', 4], 5].inject do |acc, elem| \n  #   acc.is_a?(Integer) ? acc.send(elem[0],\
    \ elem[1]) : acc[1].send(acc[0], elem[1])\n  # end\n  operator.map.with_index{|char,\
    \ idx| [char, operand[idx]] }.zip(operand[operator.length..-1]).flatten(1).inject\
    \ do |acc, elem| \n    acc.is_a?(Integer) ? acc.send(elem[0], elem[1]) : acc[1].send(acc[0],\
    \ elem[1])\n  end\nend", "    # your code here\n    eval(operand.zip(operator).flatten.join)\n\
    end", "    while operator.length > 0\n        operand.map!.with_index do |val,\
    \ i|\n            next val ** operand[i+1] if operator[i] == \"**\"\n        \
    \    next val // operand[i+1] if operator[i] == \"//\"\n            next val *\
    \ operand[i+1] if operator[i] == \"*\"\n            next val - operand[i+1] if\
    \ operator[i] == \"-\"\n            next val + operand[i+1] if operator[i] ==\
    \ \"+\"\n        end\n        operand.shift\n        operator.shift\n    end\n\
    \    operand[0]\nend", "  result = operand[0]\n  (1...operand.length).each do\
    \ |idx|\n    result = result.send(operator[idx - 1], operand[idx])\n  end\n  result\n\
    end", "  exp = ''\n  operand.each_with_index do |val, idx|\n    if idx == 0\n\
    \      exp << \"#{val}\"\n    else\n      exp << \"#{operator[idx-1]}#{val}\"\n\
    \    end\n  end\n  eval(exp)\nend", "  operand.unshift(0)\n  # print operand.to_s\n\
    \  # puts\n  # print operator.to_s\n  # puts\n  # puts\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result = result / operand[i+1]\n\
    \    when '**'\n      result = result ** operand[i+1]\n    end\n  end\n  result\n\
    end", "  result = operand[0]\n  for i in 1..operand.length-1\n    result = result.send(operator[i-1],\
    \ operand[i])\n  end\n  result\nend", "\toperand.each_with_index do |operand,\
    \ index|\n\t\tif operator[index] == \"*\"\n\t\t\toperand *= operand[index + 1]\n\
    \t\telsif operator[index] == \"/\"\n\t\t\toperand = operand / operand[index +\
    \ 1]\n\t\telsif operator[index] == \"+\"\n\t\t\toperand += operand[index + 1]\n\
    \t\telsif operator[index] == \"-\"\n\t\t\toperand -= operand[index + 1]\n\t\t\
    elsif operator[index] == \"**\"\n\t\t\toperand = operand ** operand[index + 1]\n\
    \t\tend\n\tend\n\toperand\nend", "  res = operand[0]\n  for i in 0..operator.length-1\n\
    \    operator_arg = operator[i]\n    res = case operator_arg\n      when '+' then\
    \ res + operand[i+1]\n      when '-' then res - operand[i+1]\n      when '*' then\
    \ res * operand[i+1]\n      when '//' then res.floor.to_f / operand[i+1]\n   \
    \   when '**' then res ** operand[i+1]\n    end\n  end\n  res\nend", "\tvalue\
    \ = operand[0]\n\toperand[1..-1].each_with_index do |operand, index|\n\t\tvalue\
    \ = value.send(operator[index], operand)\n\tend\n\tvalue\nend", "  operator =\
    \ operator.map { |e| e == '+' ? e = '+' : e == '-' ? e = '-' : e == '*' ? e =\
    \ '*' : e == '/' ? e = '/' : e == '//' ? e = '//' : e == '**' ? e = '**' : ' '\
    \ }\n  operators = operator.join(\" \")\n  operands = operand.join(\" \")\n  expression\
    \ = \"#{operands} #{operators}\"\n  expression = eval(expression)\nend", "  #TODO:\
    \ Write your code here\nend", "    result = operand[0]\n    for i in 1..(operand.length\
    \ - 1)\n        result = result.send(operator[i - 1], operand[i])\n    end\n \
    \   return result\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5])", "  #your\
    \ code here\nend", "    a = operand.shift()\n    operand.map.with_index { |val,\
    \ i|\n      case operator[i]\n      when '+'\n        a = a + val\n      when\
    \ '-'\n        a = a - val\n      when '*'\n        a = a * val\n      when '/'\n\
    \        a = a / val\n      when '^'\n        a = a ** val\n      end\n    }\n\
    \    a\nend", "  puts operator.join(\" \")\n  puts operand.join(\" \")\nend\n\
    do_algebra(['+', '*', '-'], [2, 3, 4, 5])\ndo_algebra(['+', '+', '*', '*', '+'],\
    \ [2, 3, 4, 5, 6, 7, 8, 9, 10])\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])", "  op2 = operand.pop\n  op1 = operand.pop\n  result = op1.send(operator,\
    \ op2)\n  operand.push(result)\n  while !operator.empty?\n    op2 = operand.pop\n\
    \    op1 = operand.pop\n    result = op1.send(operator.pop, op2)\n    operand.push(result)\n\
    \  end\n  result\nend", "  operand.each_with_index.inject(operand.first) do |result,\
    \ (item, index)|\n    result.public_send(operator[index], item)\n  end\nend",
  "\tresult = operand[0]\n\t1.upto(operator.length) do |i|\n\t\tif operator[i-1] ==\
    \ '+'\n\t\t\tresult += operand[i]\n\t\telsif operator[i-1] == '-'\n\t\t\tresult\
    \ -= operand[i]\n\t\telsif operator[i-1] == '*'\n\t\t\tresult *= operand[i]\n\t\
    \telsif operator[i-1] == '//'\n\t\t\tresult /= operand[i]\n\t\telsif operator[i-1]\
    \ == '**'\n\t\t\tresult **= operand[i]\n\t\tend\n\tend\n\tresult\nend", "  if\
    \ operator.any? { |op| [\"**\", \"//\"].include?(op) }\n    operation_order =\
    \ operator.map { |op| op == \"**\" ? op : nil }.compact\n    operation_order +=\
    \ operator.map { |op| op == \"//\" ? op : nil }.compact\n    operation_order +=\
    \ operator.map { |op| op != \"**\" && op != \"//\" ? op : nil }.compact\n  else\n\
    \    operation_order = operator\n  end\n  order_a = []\n  operation_order.each\
    \ do |op|\n    operand.each_with_index do |val, i|\n      if op == operator[i-1]\n\
    \        order_a << val\n        operand.delete_at(i)\n        break\n      end\n\
    \    end\n  end\n  order_a.unshift(operand[0])\n  result = order_a[0]\n  1.upto(order_a.length-1)\
    \ do |i|\n    result = result.send(operator[i-1], order_a[i])\n  end\n  result\n\
    end", "  result = operand[0]\n  operand.length.times do |i|\n    next if i ==\
    \ 0\n    result = eval(\"#{result} #{operator[i-1]} #{operand[i]}\")\n  end\n\
    \  result\nend", "\tfirst_operand = operand.shift\n\twhile !operand.empty?\n\t\
    \tsecond_operand = operand.shift\n\t\tfirst_operand = first_operand.send(operator.shift,\
    \ second_operand)\n\tend\n\tfirst_operand\nend", "  count = 1\n  while count <\
    \ operand.length\n    case operator[count - 1]\n    when '+'\n      operand[count\
    \ - 1] += operand[count]\n    when '-'\n      operand[count - 1] -= operand[count]\n\
    \    when '*'\n      operand[count - 1] *= operand[count]\n    when '//'\n   \
    \   operand[count - 1] = operand[count - 1].floor / operand[count]\n    when '**'\n\
    \      operand[count - 1] = operand[count - 1] ** operand[count]\n    end\n  \
    \  operand.delete_at(count)\n    operator.delete_at(count - 1)\n    count -= 1\
    \ if count > 1\n  end\n  operand[0]\nend", "  r = operand[0]\n  (1...operand.length).each\
    \ do |i|\n    r = r.send(operator[i-1], operand[i])\n  end\n  r\nend", "  operand.zip(operator).inject\
    \ do |(op_0, op_1), (op_2, op_3)|\n    op_0.send(op_1, op_2).send(op_3, op_2)\n\
    \  end\nend", "  answer = operand[0]\n  operand[1..-1].each_with_index do |num,\
    \ index|\n    answer = answer.send(operator[index], num)\n  end\n  answer\nend",
  "  result = operand[0]\n  if operator.size == 1\n    if operator[0] == '*'\n   \
    \   result = operand[0] * operand[1]\n    elsif operator[0] == '//'\n      result\
    \ = operand[0] / operand[1]\n    elsif operator[0] == '**'\n      result = operand[0]\
    \ ** operand[1]\n    end\n  else\n    index = 0\n    loop do\n      if operator[index]\
    \ == '+'\n        result += operand[index + 1]\n      elsif operator[index] ==\
    \ '-'\n        result -= operand[index + 1]\n      elsif operator[index] == '*'\n\
    \        result *= operand[index + 1]\n      elsif operator[index] == '//'\n \
    \       result /= operand[index + 1]\n      elsif operator[index] == '**'\n  \
    \      result **= operand[index + 1]\n      end\n      index += 1\n      break\
    \ if index == operator.size\n    end\n  end\n  result\nend", "\nend", "    r =\
    \ operand[0]\n    (1...operand.length).each do |i|\n        r = eval(\"#{r} #{operator[i-1]}\
    \ #{operand[i]}\")\n    end\n    r\nend", "  operand.each_with_index.reduce(0)\
    \ do |result, (num, idx)|\n    idx == 0 ? num : result.send(operator[idx - 1],\
    \ num)\n  end\nend", "  operand.each_with_index.reduce(0) do |acc, (value, index)|\n\
    \    acc = if index == 0\n            value\n          else\n            acc.send(operator[index\
    \ - 1], value)\n          end\n  end\nend", "  operator.each_with_index.inject(operand[0])\
    \ do |num, (op, i)|\n    num.send(op, operand[i + 1])\n  end\nend", "    while\
    \ operand.length > 1\n        operand.unshift operand.shift.send(operator.shift,\
    \ operand.shift)\n    end\n    operand[0]\nend", "    result = operand[0]\n  \
    \  i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result = result.to_f / operand[i+1]\n        when\
    \ '**'\n            result **= operand[i+1]\n        end\n        i += 1\n   \
    \ end\n    result\nend", "  operand.reduce do |acc, el|\n    operator.unshift(acc)\n\
    \    operator.shift\n    acc = case operator.first\n      when '+' then acc +\
    \ el\n      when '-' then acc - el\n      when '*' then acc * el\n      when '//'\
    \ then acc / el\n      when '**' then acc ** el\n    end\n  end\nend", "  i =\
    \ 1\n  while i < operand.length do\n    operand[i-1] = operand[i-1].send(operator[i-1],\
    \ operand[i])\n    i += 1\n  end\n  operand[0]\nend", "\toperand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n\t\tif operator[index] == \"+\"\n\t\t\tresult\
    \ + operand\n\t\telsif operator[index] == \"-\"\n\t\t\tresult - operand\n\t\t\
    elsif operator[index] == \"*\"\n\t\t\tresult * operand\n\t\telsif operator[index]\
    \ == \"//\"\n\t\t\tresult / operand\n\t\telsif operator[index] == \"**\"\n\t\t\
    \tresult ** operand\n\t\tend\n\tend\nend\np do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5])", "  result = operand[0]\n  1.upto(operand.length - 1) do |i|\n    result\
    \ = result.send(operator[i - 1], operand[i])\n  end\n  result\nend", "\ti = 0\n\
    \toperations = { \"+\" => 0, \"-\" => 0, \"*\" => 1, \"//\" => 1, \"**\" => 2\
    \ }\n\twhile i < operator.length\n\t\tif operations[operator[i]] > operations[operator[i\
    \ + 1]]\n\t\t\toperand[i + 1] = operand[i] + operand[i + 1]\n\t\t\toperand.delete_at(i)\n\
    \t\t\toperator.delete_at(i)\n\t\tend\n\t\ti += 1\n\tend\n\ti = 0\n\twhile i <\
    \ operator.length\n\t\tj = 1\n\t\toperand[0] = do_op(operator[i], operand[0],\
    \ operand[j])\n\t\tj += 1\n\t\ti += 1\n\tend\n\treturn operand[0]\nend", "  total\
    \ = operand[0]\n  operand.shift\n  operand.zip(operator).each do |arr|\n    total\
    \ = total.send(arr[1], arr[0])\n  end\n  total\nend", "\ti = 0\n\teval = operand[0]\n\
    \twhile i < operator.length\n\t\tif operator[i] == '+'\n\t\t\teval += operand[i+1]\n\
    \t\telsif operator[i] == '-'\n\t\t\teval -= operand[i+1]\n\t\telsif operator[i]\
    \ == '*'\n\t\t\teval *= operand[i+1]\n\t\telsif operator[i] == '//'\n\t\t\teval\
    \ /= operand[i+1]\n\t\telsif operator[i] == '**'\n\t\t\teval **= operand[i+1]\n\
    \t\tend\n\t\ti += 1\n\tend\n\treturn eval\nend", "  result = operand[0]\n  (1...operand.length).each\
    \ do |i|\n    case operator[i-1]\n    when '+'\n      result += operand[i]\n \
    \   when '-'\n      result -= operand[i]\n    when '*'\n      result *= operand[i]\n\
    \    when '//'\n      result = result / operand[i]\n    when '**'\n      result\
    \ = result ** operand[i]\n    end\n  end\n  result\nend", "    # Write your code\
    \ here\n    if operator.empty? || operand.empty?\n        return 0\n    end\n\
    \    result = operand[0]\n    i = 0\n    while i < operator.length\n        case\
    \ operator[i]\n        when '+'\n            result += operand[i+1]\n        when\
    \ '-'\n            result -= operand[i+1]\n        when '*'\n            result\
    \ *= operand[i+1]\n        when '//'\n            result = result / operand[i+1]\n\
    \        when '**'\n            result = result ** operand[i+1]\n        end\n\
    \        i += 1\n    end\n    return result\nend", "  new_array = [operand[0]]\n\
    \  i = 0\n  while i < operator.length\n    new_array << operator[i]\n    new_array\
    \ << operand[i + 1]\n    i += 1\n  end\n  return eval(new_array.join)\nend", " \
    \ total = operand[0]\n  i = 0\n  operator.each do |op|\n    operand[i+1] ? total\
    \ = total.send(op, operand[i+1]) : total\n    i += 1\n  end\n  total\nend", " \
    \ new_arr = []\n  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n\
    \      new_arr << operand[i] + operand[i + 1]\n    elsif operator[i] == '-'\n\
    \      new_arr << operand[i] - operand[i + 1]\n    elsif operator[i] == '*'\n\
    \      new_arr << operand[i] * operand[i + 1]\n    elsif operator[i] == '//'\n\
    \      new_arr << operand[i] / operand[i + 1]\n    elsif operator[i] == '**'\n\
    \      new_arr << operand[i] ** operand[i + 1]\n    end\n    i += 1\n  end\n \
    \ p new_arr\nend\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5])", "    # write your\
    \ code here\nend", "    result = operand[0]\n    operator.each_with_index do |oper,\
    \ i|\n        if oper == \"+\"\n            result += operand[i+1]\n        elsif\
    \ oper == \"-\"\n            result -= operand[i+1]\n        elsif oper == \"\
    *\"\n            result *= operand[i+1]\n        elsif oper == \"//\"\n      \
    \      result /= operand[i+1]\n        elsif oper == \"**\"\n            result\
    \ **= operand[i+1]\n        end\n    end\n    result\nend", "  result = 0\n  (0...operator.length).each\
    \ do |i|\n    case operator[i]\n    when '+'\n      result += operand[i] + operand[i+1]\n\
    \    when '-'\n      result += operand[i] - operand[i+1]\n    when '*'\n     \
    \ result += operand[i] * operand[i+1]\n    when '//'\n      result += operand[i]\
    \ / operand[i+1]\n    when '**'\n      result += operand[i] ** operand[i+1]\n\
    \    end\n  end\n  result\nend\noperator = ['+', '*', '-']\noperand = [2, 3, 4,\
    \ 5]\nputs do_algebra(operator, operand)", "    # your code here\n    i = 0\n\
    \    until i == operand.length-1\n      operand[i] = eval(\"#{operand[i]} #{operator[i]}\
    \ #{operand[i+1]}\")\n      operand.delete_at(i+1)\n      operator.delete_at(i)\n\
    \    end\n    operand[0]\nend", "    #your code here\n    result = operand[0]\n\
    \    operand.each_with_index do |x, i|\n        if operator[i] == '+'\n      \
    \      result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    result\nend", "    num = operand.shift\n    operand.each_with_index\
    \ do |val, i|\n        num = eval(\"#{num} #{operator[i]} #{val}\")\n    end\n\
    \    num\nend", "  # Good Luck!\n  value = operand[0]\n  operand.each_with_index\
    \ do |v, i|\n    value = value.send(operator[i-1], v) if i > 0\n  end\n  value\n\
    end", "    i = 0\n    op = 0\n    while (i < operand.length - 1) do\n        if\
    \ (operator[op] == '//')\n            operand[i] = operand[i] / operand[i + 1]\n\
    \        elsif (operator[op] == '**')\n            operand[i] = operand[i] **\
    \ operand[i + 1]\n        elsif (operator[op] == '+')\n            operand[i]\
    \ = operand[i] + operand[i + 1]\n        elsif (operator[op] == '-')\n       \
    \     operand[i] = operand[i] - operand[i + 1]\n        elsif (operator[op] ==\
    \ '*')\n            operand[i] = operand[i] * operand[i + 1]\n        end\n  \
    \      operand.delete_at(i + 1)\n        op += 1\n    end\n    return operand[0]\n\
    end", "  # Your code here\nend", "  \n  total = operand[0]\n  i = 0\n  while i\
    \ < operator.length do\n    case operator[i]\n    when \"+\"\n      total += operand[i+1]\n\
    \    when \"-\"\n      total -= operand[i+1]\n    when \"*\"\n      total *= operand[i+1]\n\
    \    when \"//\"\n      total = total / operand[i+1]\n    when \"**\"\n      total\
    \ = total ** operand[i+1]\n    end\n    i += 1\n  end\n  return total\n  \nend",
  "    result = 0\n    operand.each_with_index do |num, index|\n        if index ==\
    \ 0\n            result = num\n        else\n            result = operand[index\
    \ - 1].send(operator[index - 1], num)\n        end\n    end\n    result\nend\n\
    print do_algebra(['+', '*', '-'], [2, 3, 4, 5]) # => 9", "  # TODO\nend", "  #\
    \ your code here\nend", "    result = operand[0]\n    (1...operand.length).each\
    \ do |i|\n        result = result.send(operator[i-1], operand[i])\n    end\n \
    \   result\nend\np do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9 # => result\
    \ = 2 + 3 * 4 - 5", "  if operator.any?{|op| !['+', '-', '*', '//', '**'].include?(op)}\n\
    \    return 'wrong operator'\n  end\n  operand.reduce{|result, operand| result.send(operator.shift,\
    \ operand)}\nend", "    result = operand[0]\n    i = 0\n    while i < operator.length\n\
    \        case operator[i]\n        when '+'\n            result += operand[i+1]\n\
    \        when '-'\n            result -= operand[i+1]\n        when '*'\n    \
    \        result *= operand[i+1]\n        when '//'\n            result /= operand[i+1]\n\
    \        when '**'\n            result **= operand[i+1]\n        end\n       \
    \ i += 1\n    end\n    result\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5])\nputs do_algebra(['+', '*', '//'], [8, 2, 4, 2])\nputs do_algebra(['//',\
    \ '-', '*'], [5, 2, 1, 2])\nputs do_algebra(['+', '-', '//'], [5, 8, 4, 1])",
  "  do_algebra(operator[1..-1], operand[1..-1]).send(operator[0], operand[0])\nend",
  "  if operator == []\n    return operand[0]\n  end\n  if operator.length == operand.length\
    \ - 1\n    answer = operand[0]\n    for i in 0..(operator.length - 1)\n      case\
    \ operator[i]\n      when '+'\n        answer += operand[i + 1]\n      when '-'\n\
    \        answer -= operand[i + 1]\n      when '*'\n        answer *= operand[i\
    \ + 1]\n      when '//'\n        answer /= operand[i + 1]\n      when '**'\n \
    \       answer **= operand[i + 1]\n      end\n    end\n    return answer\n  end\n\
    end", "  operand.each_with_index.inject(0) do |memo, (operand, index)|\n    if\
    \ index.zero?\n      memo = operand\n    else\n      memo = memo.send(operator[index\
    \ - 1], operand)\n    end\n  end\nend", "  operand.zip(operator).flatten.drop(1).join('\
    \ ') + ' ' + operand.last.to_s\nend", "\t\nend", "  operator.each_with_index do\
    \ |_op, i|\n    operand[i] = operand[i].send(operator[i], operand[i+1])\n  end\n\
    \  operand[0]\nend", "  operand.shift\n  operand.reduce(operand.shift) do | acc,\
    \ item |\n    op = operator.shift\n    acc.send(op, item)\n  end\nend", "  operand.each_with_index.inject(0)\
    \ do |acc, (el, i)|\n    acc += (i == 0) ? el : operand[i - 1].send(operator[i\
    \ - 1], el)\n  end\nend", "    calc = operand.inject(:+)\n    for i in 0..operator.length-1\n\
    \        if operator[i] == '+'\n            calc += operand[i+1]\n        elsif\
    \ operator[i] == '-'\n            calc -= operand[i+1]\n        elsif operator[i]\
    \ == '*'\n            calc *= operand[i+1]\n        elsif operator[i] == '//'\n\
    \            calc /= operand[i+1]\n        elsif operator[i] == '**'\n       \
    \     calc **= operand[i+1]\n        end\n    end\n    return calc\nend", "  \
    \  operation = operator.zip(operand)\n    operation.reduce(operation.shift.reduce(&:))\
    \ do |result, (operator, operand)|\n        result.send(operator, operand)\n \
    \   end\nend\np do_algebra(['+', '*', '-'], [2, 3, 4, 5]) # => 9", "  operand.map(&:to_i).reduce\
    \ do |number, item|\n    number.send(operator.pop, item)\n  end\nend", "  # your\
    \ code here\nend", "    value = operand[0]\n    i = 1\n    while i < operand.length\n\
    \        case operator[i-1]\n        when '+'\n            value += operand[i]\n\
    \        when '-'\n            value -= operand[i]\n        when '*'\n       \
    \     value *= operand[i]\n        when '//'\n            value = value.to_f /\
    \ operand[i]\n        when '**'\n            value **= operand[i]\n        end\n\
    \        i += 1\n    end\n    value\nend", "  op = operand.each\n  operator.reduce(op.next)\
    \ { |total, value| total.send(value, op.next) }\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |e, i|\n    case e\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result = result / operand[i+1]\n\
    \    when '**'\n      result = result ** operand[i+1]\n    end\n  end\n  result\n\
    end", "  # Your code here\nend", "    result = operand[0]\n    operand.each_with_index\
    \ do |item, index|\n        next if index == 0\n        operator[index - 1] ==\
    \ '+' ? result += item :\n        operator[index - 1] == '-' ? result -= item\
    \ :\n        operator[index - 1] == '*' ? result *= item :\n        operator[index\
    \ - 1] == '//' ? result /= item :\n        operator[index - 1] == '**' ? result\
    \ **= item : result\n    end\n    result\nend", "  #your code here\n  a = operand.shift(2)\n\
    \  operand.each_with_index do |n,i|\n  \ta = eval(\"#{a[0]} #{operator[i]} #{a[1]}\"\
    )\n  \ta = [a,n]\n  end\n  a[0]\nend", "  # code her\n  p operand\n  p operator\n\
    \  if(operator[0] == \"//\")\n    p operand[0] / operand[1]\n  elsif(operator[0]\
    \ == \"**\")\n    p operand[0] ** operand[1]\n  elsif(operator[0] == \"+\")\n\
    \    p operand[0] + operand[1]\n  elsif(operator[0] == \"-\")\n    p operand[0]\
    \ - operand[1]\n  elsif(operator[0] == \"*\")\n    p operand[0] * operand[1]\n\
    \  end\nend", "\texpression = []\n\toperator.each_with_index do |val, index|\n\
    \t\texpression << operand[index] << val << operand[index + 1]\n\tend\n\texpression.join.to_i\n\
    end", "  # Your code here\nend", "  o = []\n  (1..operator.length).each { |i|\
    \ o << operand[i-1].to_s + operator[i-1] }\n  o << operand[-1].to_s\n  eval(o.join)\n\
    end", "    # Write your code here\n    result = operand[0]\n    i = 0\n    while\
    \ i < operator.length\n        j = i + 1\n        case operator[i]\n        when\
    \ '+'\n            result += operand[j]\n        when '-'\n            result\
    \ -= operand[j]\n        when '*'\n            result *= operand[j]\n        when\
    \ '//'\n            result /= operand[j]\n        when '**'\n            result\
    \ **= operand[j]\n        end\n        i += 1\n    end\n    result\nend", "  if\
    \ operator.length == 0\n    operand[0]\n  else\n    c = operand.pop\n    a = operand.pop\n\
    \    b = operand.pop\n    operand.push(b.send(operator.pop, c))\n    do_algebra(operator,\
    \ operand)\n  end\nend", "  operand.each_with_index.reduce(0) do |acc,(item,i)|\n\
    \    operator[i] == '+' ? acc + item : operator[i] == '-' ? acc - item : operator[i]\
    \ == '*' ? acc * item : acc / item\n  end\nend", "  operand.each_cons(2).map{|a,b|\
    \ [a,b]}.map{|a,b| eval(a.to_s + operator.shift + b.to_s)}.reduce(:+)\nend\ndo_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])", "  operand.inject(operand.shift) { |acc, n| acc.send(operator.shift,\
    \ n) }\nend", "    if operator.length != operand.length - 1\n        return nil\n\
    \    end\n    result = operand[0]\n    for i in 0...operator.length\n        case\
    \ operator[i]\n        when '+'\n            result += operand[i+1]\n        when\
    \ '-'\n            result -= operand[i+1]\n        when '*'\n            result\
    \ *= operand[i+1]\n        when '//'\n            result /= operand[i+1]\n   \
    \     when '**'\n            result **= operand[i+1]\n        end\n    end\n \
    \   return result\nend", "\t\nend", "    # code here\nend", "    results = []\n\
    \    while !operator.empty? && !operand.empty?\n        case operator.shift\n\
    \        when \"+\"\n            results << operand.shift + operand.shift\n  \
    \      when \"-\"\n            results << operand.shift - operand.shift\n    \
    \    when \"*\"\n            results << operand.shift * operand.shift\n      \
    \  when \"//\"\n            results << operand.shift / operand.shift\n       \
    \ when \"**\"\n            results << operand.shift ** operand.shift\n       \
    \ end\n    end\n    results.inject(:+)\nend\noperator = [\"+\", \"*\", \"**\"\
    , \"//\", \"-\"]\noperand = [2, 3, 4, 5, 6, 7, 8, 9, 10]\np do_algebra(operator,\
    \ operand)", "\t# set default return value\n\tresult = 0\n\t# start the algebric\
    \ expression\n\tresult = operand[0]\n\t# do operation for each operator\n\tfor\
    \ i in 0..operator.length-1\n\t\tcase operator[i]\n\t\twhen '+'\n\t\t\tresult\
    \ += operand[i+1]\n\t\twhen '-'\n\t\t\tresult -= operand[i+1]\n\t\twhen '*'\n\t\
    \t\tresult *= operand[i+1]\n\t\twhen '//'\n\t\t\tresult /= operand[i+1]\n\t\t\
    when '**'\n\t\t\tresult **= operand[i+1]\n\t\tend\n\tend\n\treturn result\nend",
  "  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n    \
    \  operand[i] = operand[i] + operand[i + 1]\n    when '-'\n      operand[i] =\
    \ operand[i] - operand[i + 1]\n    when '*'\n      operand[i] = operand[i] * operand[i\
    \ + 1]\n    when '//'\n      operand[i] = operand[i] / operand[i + 1]\n    when\
    \ '**'\n      operand[i] = operand[i] ** operand[i + 1]\n    end\n    operand.delete_at(i\
    \ + 1)\n    operator.delete_at(i)\n  end\n  operand[0]\nend", "    operators =\
    \ [:+, :*, :-, :/, :**]\n    operand.each_with_index.inject(0) do |result, (operand,\
    \ index)|\n        if index == 0\n            result = operand\n        else\n\
    \            result = result.send(operators[operator[index - 1]], operand)\n \
    \       end\n    end\nend", "  operator.each_with_index.reduce(operand[0]) do\
    \ |memo, (op, index)|\n    eval(\"#{memo} #{op} #{operand[index + 1]}\")\n  end\n\
    end", "    # your code goes here\n    operator.map.with_index do |operator, idx|\n\
    \      if operator == '+'\n        operand[idx] + operand[idx + 1]\n      elsif\
    \ operator == '-'\n        operand[idx] - operand[idx + 1]\n      elsif operator\
    \ == '*'\n        operand[idx] * operand[idx + 1]\n      elsif operator == '//'\n\
    \        operand[idx] / operand[idx + 1]\n      elsif operator == '**'\n     \
    \   operand[idx] ** operand[idx + 1]\n      end\n    end.join.to_i\n  end\n  #############\n\
    \  def mean(lst)\n    # your code goes here\n    (lst.reduce(:+).to_f / lst.length).round(2)\n\
    \  end\n  #############\n  def sum_divisors(n)\n    # your code goes here\n  \
    \  (1..n).select { |num| n % num == 0}.reduce(:+)\n  end\n  #############\n  def\
    \ sum_from_file(filepath)\n    # your code goes here\n    sum = 0\n    File.open(filepath,\
    \ \"r\") do |f|\n      f.each_line do |line|\n        sum += line.chomp.to_i\n\
    \      end\n    end\n    sum\n  end\n  #############\n  def find_dup(array)\n\
    \    # your code goes here\n    array.select { |num| array.count(num) > 1 }.uniq[0]\n\
    \  end\n  #############\n  def get_absent_words(sentence1, sentence2)\n    # your\
    \ code goes here\n    result = []\n    sentence1.split(' ').each do |word|\n \
    \     result << word unless sentence2.split(' ').include?(word)\n    end\n   \
    \ result\n  end\n  #############\n  def find_dup_indices(array)\n    # your code\
    \ goes here\n    array.each_with_index.with_object([]) do", "  (1...operand.length).each\
    \ do |i|\n    case operator[i-1]\n    when '+'\n      operand[i] = operand[i-1]\
    \ + operand[i]\n    when '-'\n      operand[i] = operand[i-1] - operand[i]\n \
    \   when '*'\n      operand[i] = operand[i-1] * operand[i]\n    when '//'\n  \
    \    operand[i] = operand[i-1] / operand[i]\n    when '**'\n      operand[i] =\
    \ operand[i-1] ** operand[i]\n    end\n  end\n  operand[-1]\nend", "    result\
    \ = operand[0]\n    for i in 1..operand.length-1\n        if operator[i-1] ==\
    \ '+'\n            result += operand[i]\n        elsif operator[i-1] == '-'\n\
    \            result -= operand[i]\n        elsif operator[i-1] == '*'\n      \
    \      result *= operand[i]\n        elsif operator[i-1] == '//'\n           \
    \ result /= operand[i]\n        elsif operator[i-1] == '**'\n            result\
    \ **= operand[i]\n        end\n    end\n    return result\nend", "  result = operand[0]\n\
    \  operand[1..-1].each_with_index do |n,i|\n    result = eval(\"#{result} #{operator[i]}\
    \ #{n}\")\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length do\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result = result / operand[i+1]\n    when '**'\n      result\
    \ = result ** operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "    i\
    \ = 0\n    while i < operator.length\n        if operator[i] == '+'\n        \
    \    operand[i] = operand[i] + operand[i+1]\n            operand.delete_at(i+1)\n\
    \            operator.delete_at(i)\n        elsif operator[i] == '-'\n       \
    \     operand[i] = operand[i] - operand[i+1]\n            operand.delete_at(i+1)\n\
    \            operator.delete_at(i)\n        elsif operator[i] == '*'\n       \
    \     operand[i] = operand[i] * operand[i+1]\n            operand.delete_at(i+1)\n\
    \            operator.delete_at(i)\n        elsif operator[i] == '//'\n      \
    \      operand[i] = operand[i] / operand[i+1]\n            operand.delete_at(i+1)\n\
    \            operator.delete_at(i)\n        elsif operator[i] == '**'\n      \
    \      operand[i] = operand[i] ** operand[i+1]\n            operand.delete_at(i+1)\n\
    \            operator.delete_at(i)\n        end\n    end\n    p operand[0]\nend\n\
    operator = ['+', '-', '*', '//', '**']\narray = [2, 3, 4, 5, 6]\ndo_algebra(operator,\
    \ array)", "  op = operator.reverse\n  op.each_with_index do |x,i|\n    if i ==\
    \ 0\n      operand[-2] = operand[-2].send(x, operand[-1])\n    else\n      operand[-2]\
    \ = operand[-2].send(x, operand[-3])\n    end\n  end\n  operand[-2]\nend", " \
    \ operand.length.times do |i|\n    case operator[i]\n    when '+'\n      operand[i+1]\
    \ = operand[i] + operand[i+1]\n    when '-'\n      operand[i+1] = operand[i] -\
    \ operand[i+1]\n    when '*'\n      operand[i+1] = operand[i] * operand[i+1]\n\
    \    when '//'\n      operand[i+1] = operand[i] / operand[i+1]\n    when '**'\n\
    \      operand[i+1] = operand[i] ** operand[i+1]\n    end\n  end\n  operand[-1]\n\
    end\np do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\np do_algebra(['+', '*',\
    \ '-'], [1, 2, 3, 4]) == 9\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]) ==\
    \ 14\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6]) == 13\np do_algebra(['+',\
    \ '*', '-'], [1, 2, 3, 4, 5, 6, 7]) == 12\np do_algebra(['+', '*', '-'], [1, 2,\
    \ 3, 4, 5, 6, 7, 8]) == 11\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]) == 10\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ == 9\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ 8\np do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9", "  i = 0\n  while\
    \ i < operator.length\n    if operator[i] == \"**\"\n      result = operand[i]\
    \ ** operand[i + 1]\n      operand.delete_at(i)\n      operand.delete_at(i)\n\
    \      operand.insert(i, result)\n      operator.delete_at(i)\n      i -= 1\n\
    \    end\n    i += 1\n  end\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"*\"\n      result = operand[i] * operand[i + 1]\n      operand.delete_at(i)\n\
    \      operand.delete_at(i)\n      operand.insert(i, result)\n      operator.delete_at(i)\n\
    \      i -= 1\n    elsif operator[i] == \"//\"\n      result = operand[i] / operand[i\
    \ + 1]\n      operand.delete_at(i)\n      operand.delete_at(i)\n      operand.insert(i,\
    \ result)\n      operator.delete_at(i)\n      i -= 1\n    end\n    i += 1\n  end\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == \"+\"\n      result\
    \ = operand[i] + operand[i + 1]\n      operand.delete_at(i)\n      operand.delete_at(i)\n\
    \      operand.insert(i, result)\n      operator.delete_at(i)\n      i -= 1\n\
    \    elsif operator[i] == \"-\"\n      result = operand[i] - operand[i + 1]\n\
    \      operand.delete_at(i)\n      operand.delete_at(i)\n      operand.insert(i,\
    \ result)\n      operator.delete_at(i)\n      i -= 1\n    end\n    i += 1\n  end\n\
    \  return operand[0]\nend\nputs \"---------Do algebra--------\"\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['+',", "\talgebra = operand.zip(operator).flatten.compact\n\
    \talgebra.join.to_i\nend", "  operand.each_with_index.inject(0) do |acc, (x, i)|\n\
    \    operator[i - 1] ? acc.send(operator[i - 1], x) : x\n  end\nend", "  # code\
    \ here\nend", "    result = operand[0]\n    # iterate through the operators\n\
    \    operator.each_with_index do |op, index|\n        case op\n        when '+'\n\
    \            result += operand[index + 1]\n        when '-'\n            result\
    \ -= operand[index + 1]\n        when '*'\n            result *= operand[index\
    \ + 1]\n        when '//'\n            result /= operand[index + 1]\n        when\
    \ '**'\n            result **= operand[index + 1]\n        end\n    end\n    result\n\
    end", "  # TODO: Your code here\n  i = 0\n  while i < operator.length\n      case\
    \ operator[i]\n      when \"+\"\n        operand[i+1] = operand[i] + operand[i+1]\n\
    \      when \"-\"\n        operand[i+1] = operand[i] - operand[i+1]\n      when\
    \ \"*\"\n        operand[i+1] = operand[i] * operand[i+1]\n      when \"//\"\n\
    \        operand[i+1] = operand[i] / operand[i+1]\n      when \"**\"\n       \
    \ operand[i+1] = operand[i] ** operand[i+1]\n      end\n      i += 1\n  end\n\
    \  return operand[-1]\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\
    \ do\n    result = result.send(operator[i], operand[i+1])\n    i += 1\n  end\n\
    \  result\nend", "    operand.each_with_index.inject(0) do |memo, (ele, index)|\n\
    \        if index == 0\n            memo = ele\n        else\n            if operator[index\
    \ - 1] == '+'\n                memo += ele\n            elsif operator[index -\
    \ 1] == '-'\n                memo -= ele\n            elsif operator[index - 1]\
    \ == '*'\n                memo *= ele\n            elsif operator[index - 1] ==\
    \ '//'\n                memo /= ele\n            elsif operator[index - 1] ==\
    \ '**'\n                memo **= ele\n            end\n        end\n        memo\n\
    \    end\nend", "  # your code here\n  # operand[0]\n  # operand[1]\n  # operator[0]\n\
    \  result = operand[0]\n  (1..operand.length-1).each do |i|\n    if operator[i-1]\
    \ == \"+\"\n      result += operand[i]\n    elsif operator[i-1] == \"-\"\n   \
    \   result -= operand[i]\n    elsif operator[i-1] == \"*\"\n      result *= operand[i]\n\
    \    elsif operator[i-1] == \"//\"\n      result /= operand[i]\n    elsif operator[i-1]\
    \ == \"**\"\n      result **= operand[i]\n    end\n  end\n  result\nend", "  #\
    \ your code goes here\n  res = operand[0]\n  i = 0\n  while i < operator.length\
    \ do\n    case operator[i]\n    when '+'\n      res += operand[i+1]\n    when\
    \ '-'\n      res -= operand[i+1]\n    when '*'\n      res *= operand[i+1]\n  \
    \  when '//'\n      res /= operand[i+1]\n    when '**'\n      res **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  res\nend", "  str = operand.zip(operator).flatten.join('\
    \ ')\n  eval(str)\nend", "    sum = operand[0]\n    (0...operand.length-1).each\
    \ do |i|\n        if operator[i] == '+'\n            sum += operand[i+1]\n   \
    \     elsif operator[i] == '-'\n            sum -= operand[i+1]\n        elsif\
    \ operator[i] == '*'\n            sum *= operand[i+1]\n        elsif operator[i]\
    \ == '//'\n            sum /= operand[i+1]\n        elsif operator[i] == '**'\n\
    \            sum **= operand[i+1]\n        end\n    end\n    sum\nend", "  result\
    \ = operand[0]\n  operator.each_with_index { |op, idx| result = result.send(op,\
    \ operand[idx + 1]) }\n  result\nend", "  result = operand[0]\n  (1...operand.length).each\
    \ do |idx|\n    result = result.send(operator[idx-1], operand[idx])\n  end\n \
    \ result\nend", "  # write your code here\n  i = 0\n  result = operand[0]\n  while\
    \ i < operator.length do\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "    i = 0\n    while i < operator.length do\n        operand[i] = operand[i].to_f\n\
    \        operand[i+1] = operand[i+1].to_f\n        if operator[i] == '//'\n  \
    \          operand[i] = operand[i].to_i.floor\n            operand[i+1] = operand[i+1].to_i.floor\n\
    \        end\n        if operator[i] == '**'\n            operand[i] = operand[i]\
    \ ** operand[i+1]\n            operand.delete_at(i+1)\n            operator.delete_at(i)\n\
    \        elsif operator[i] == '*'\n            operand[i] = operand[i] * operand[i+1]\n\
    \            operand.delete_at(i+1)\n            operator.delete_at(i)\n     \
    \   elsif operator[i] == '/'\n            operand[i] = operand[i] / operand[i+1]\n\
    \            operand.delete_at(i+1)\n            operator.delete_at(i)\n     \
    \   elsif operator[i] == '+'\n            operand[i] = operand[i] + operand[i+1]\n\
    \            operand.delete_at(i+1)\n            operator.delete_at(i)\n     \
    \   elsif operator[i] == '-'\n            operand[i] = operand[i] - operand[i+1]\n\
    \            operand.delete_at(i+1)\n            operator.delete_at(i)\n     \
    \   end\n    end\n    puts operand\nend\noperator = ['+', '-', '*', '/', '**']\n\
    operand = [1, 2, 3, 4, 5]", "  if operator == nil or operand == nil or operator.length\
    \ != operand.length - 1 or operand.length < 2\n    raise ArgumentError.new(\"\
    Error: invalid argument\")\n  end\n  result = operand[0]\n  operand.each_with_index\
    \ do |item, index|\n    if index == 0\n      next\n    end\n    result = result.send(operator[index\
    \ - 1], item)\n  end\n  return result\nend", "  # Code goes here\nend", "  operators\
    \ = {'+' => :+, '-' => :-, '*' => :*, '//' => :div, '**' => :**}\n  total = operand[0]\n\
    \  operator.zip(operand[1..-1]).each do |pair|\n    total = total.send(operators[pair[0]],\
    \ pair[1])\n  end\n  total\nend", "  result = operand[0]\n  for i in 0..(operator.length-1)\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result = result.to_f.floor / operand[i+1]\n    when '**'\n\
    \      result **= operand[i+1]\n    end\n  end\n  result\nend\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) # 9\nputs do_algebra(['//', '*', '+'], [10, 5, 7, 6])\
    \ # 5\nputs do_algebra(['-', '+', '+', '+', '+'], [5, 6, 1, 5, 7]) # 20\nputs\
    \ do_algebra(['//', '+', '*', '*', '-'], [2, 3, 7, 1, 2, 8]) # 17\nputs do_algebra(['//',\
    \ '*', '//', '*', '**'], [3, 2, 5, 2, 1, 3]) # 8", "\toperator = operator.map\
    \ { |i| i.to_sym }\n\tresult = operand[0]\n\toperand.each_with_index do |num,\
    \ i|\n\t\tnext if i == 0\n\t\tresult = result.send(operator[i-1], num)\n\tend\n\
    \tresult\nend", "  #code goes here\n  new_arr = []\n  operand.each_with_index\
    \ {|element, i| new_arr << element if i == 0}\n  i = 0\n  while i < operator.length\n\
    \    new_arr << operator[i]\n    new_arr << operand[i+1]\n    i += 1\n  end\n\
    \  return eval(new_arr.join)\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5])\nputs do_algebra(['+', '*', '*', '+'], [1, 2, 3, 4, 5, 6])", "  result =\
    \ operand[0]\n  for i in 1..operand.length-1\n    case operator[i-1]\n    when\
    \ '+'\n      result += operand[i]\n    when '-'\n      result -= operand[i]\n\
    \    when '*'\n      result *= operand[i]\n    when '//'\n      result /= operand[i]\n\
    \    when '**'\n      result **= operand[i]\n    end\n  end\n  result\nend", "\t\
    op = operator.shift\n\tx = operand.shift\n\twhile operand.length > 0\n\t\ty =\
    \ operand.shift\n\t\tif op == '+'\n\t\t\tx += y\n\t\telsif op == '-'\n\t\t\tx\
    \ -= y\n\t\telsif op == '*'\n\t\t\tx *= y\n\t\telsif op == '//'\n\t\t\tx = x.to_f.floor\
    \ / y.to_f.floor\n\t\telsif op == '**'\n\t\t\tx = x ** y\n\t\tend\n\t\top = operator.shift\n\
    \tend\n\treturn x\nend\noperator = ['+', '-', '//', '*', '**']\noperand = [2,\
    \ 2, 2, 2, 2]\np do_algebra(operator, operand) == 4\noperator = ['*', '+', '*',\
    \ '+', '-', '-', '+', '+', '*', '**', '**', '*', '*', '*', '*', '-', '-', '+',\
    \ '*', '-']\noperand = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2]\np do_algebra(operator, operand) == 128\noperator = ['**', '**', '**',\
    \ '**', '**', '**', '**', '*', '*', '-', '-', '+', '+', '-', '*', '*', '+', '*',\
    \ '*', '+', '*', '-', '*', '*', '-', '*', '*', '*', '+', '-', '+', '+', '+', '+',\
    \ '+', '+', '-', '*', '+', '+', '-', '+', '+', '+', '-', '+', '-', '-', '+', '+',\
    \ '-', '+', '+', '-', '+', '+', '+', '-', '+', '+', '+', '-',", "  # your code\
    \ here\n  array = []\n  array << operand[0]\n  operator.each_with_index do |e,\
    \ index|\n    if e == \"*\"\n      array << operand[index + 1] * array.pop\n \
    \   elsif e == \"/\"\n      array << operand[index + 1] / array.pop\n    elsif\
    \ e == \"+\"\n      array << operand[index + 1] + array.pop\n    elsif e == \"\
    -\"\n      array << operand[index + 1] - array.pop\n    elsif e == \"**\"\n  \
    \    array << operand[index + 1] ** array.pop\n    end\n  end\n  array.pop\nend",
  "  operand.each_cons(2).with_index.inject(0) do |result, ((left, right), i)|\n \
    \   op = operator[i]\n    result += case op\n              when '+' then left\
    \ + right\n              when '-' then left - right\n              when '*' then\
    \ left * right\n              when '//' then left / right\n              when\
    \ '**' then left ** right\n              end\n  end\nend", "\nend", "    operand.each_with_index.inject(0)\
    \ do |acc, (operand, i)|\n        if operator[i-1] == \"+\"\n            acc +\
    \ operand\n        elsif operator[i-1] == \"-\"\n            acc - operand\n \
    \       elsif operator[i-1] == \"*\"\n            acc * operand\n        elsif\
    \ operator[i-1] == \"//\"\n            acc / operand\n        elsif operator[i-1]\
    \ == \"**\"\n            acc ** operand\n        else\n            acc = operand\n\
    \        end\n    end\nend\noperator = ['+', '*', '**', '-', '//']\noperand =\
    \ [2, 3, 4, 5, 10]\np do_algebra(operator, operand) # => 9", "  sum = operand[0]\n\
    \  operand.each_with_index do |n, i|\n    break if operator[i].nil?\n    sum =\
    \ case operator[i]\n          when '+' then sum + operand[i + 1]\n          when\
    \ '-' then sum - operand[i + 1]\n          when '*' then sum * operand[i + 1]\n\
    \          when '//' then sum / operand[i + 1]\n          when '**' then sum **\
    \ operand[i + 1]\n          end\n  end\n  sum\nend", "  result = operand[0]\n\
    \  operand.each_with_index do |value, index|\n    result = eval(\"#{result} #{operator[index]}\
    \ #{value}\") if index > 0\n  end\n  result\nend", "\tresult = operand[0]\n\t\
    index = 0\n\twhile index < operator.length\n\t\tcase operator[index]\n\t\twhen\
    \ '+'\n\t\t\tresult += operand[index + 1]\n\t\twhen '-'\n\t\t\tresult -= operand[index\
    \ + 1]\n\t\twhen '*'\n\t\t\tresult *= operand[index + 1]\n\t\twhen '//'\n\t\t\t\
    result /= operand[index + 1]\n\t\twhen '**'\n\t\t\tresult **= operand[index +\
    \ 1]\n\t\tend\n\t\tindex += 1\n\tend\n\tresult\nend", "    result = operand[0]\n\
    \    operand[1..-1].each_with_index { |val, idx|\n        if operator[idx] ==\
    \ '+'\n            result += val\n        elsif operator[idx] == '-'\n       \
    \     result -= val\n        elsif operator[idx] == '*'\n            result *=\
    \ val\n        elsif operator[idx] == '//'\n            result = result / val\n\
    \        elsif operator[idx] == '**'\n            result = result ** val\n   \
    \     end\n    }\n    result\nend", "    result = operand[0]\n    index = 0\n\
    \    while index < operator.length\n        if operator[index] == '+'\n      \
    \      result += operand[index + 1]\n        elsif operator[index] == '-'\n  \
    \          result -= operand[index + 1]\n        elsif operator[index] == '*'\n\
    \            result *= operand[index + 1]\n        elsif operator[index] == '//'\n\
    \            result = result.to_f / operand[index + 1]\n            result = result.floor\n\
    \        elsif operator[index] == '**'\n            result = result ** operand[index\
    \ + 1]\n        end\n        index += 1\n    end\n    return result\nend\nputs\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['+', '-', '*'],\
    \ [5, 6, 1, 2]) == 11\nputs do_algebra(['+', '*', '-'], [5, 6, 2, 3]) == -5\n\
    puts do_algebra(['//', '**', '*'], [6, 2, 4, 2]) == 0\nputs do_algebra(['+', '-'],\
    \ [4, 6, 8]) == -2\nputs do_algebra(['//', '**', '*'], [8, 3, 2, 6]) == 2\nputs\
    \ do_algebra(['//', '**', '-'], [3, 2, 4, 6]) == 2\nputs do_algebra(['+', '//',\
    \ '**', '*'], [5, 4, 2, 8, 2]) == 4\nputs do_algebra(['+', '//', '**', '-'], [2,\
    \ 3, 2, 3, 2]) == -1\nputs do_algebra(['+', '*', '-', '//'], [4, 6, 2, 4, 2])\
    \ == -2\nputs do_algebra(['+', '*', '-', '//'], [4, 6, 3, 4, 3]) == -3\nputs do_al",
  "\toperand.each_with_index.inject(0) do |result, (operand, index)|\n\t\toperator_array\
    \ = operator.split(//)\n\t\tcurrent_operator = operator_array[index]\n\t\tif current_operator\
    \ == \"+\"\n\t\t\tresult + operand\n\t\telsif current_operator == \"-\"\n\t\t\t\
    result - operand\n\t\telsif current_operator == \"*\"\n\t\t\tresult * operand\n\
    \t\telsif current_operator == \"/\"\n\t\t\tresult / operand\n\t\telsif current_operator\
    \ == \"^\"\n\t\t\tresult ** operand\n\t\tend\n\tend\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  # put your code here\nend", "  operators = {\n    '+' => ->(a, b) { a + b },\n\
    \    '-' => ->(a, b) { a - b },\n    '*' => ->(a, b) { a * b },\n    '/' => ->(a,\
    \ b) { a / b },\n    '**' => ->(a, b) { a ** b }\n  }\n  operator.reverse.each_with_index\
    \ do |o, i|\n    operand[-2] = operators[o].call(operand[-2], operand[-1])\n \
    \   operand.pop\n  end\n  operand[0]\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    # puts \"#{result} #{operator[i]} #{operand[i+1]}\"\
    \n    result = result.send(operator[i], operand[i+1])\n    i += 1\n  end\n  result\n\
    end", "    while operator.count != 0 do\n        if operator.include?(\"**\")\n\
    \            operand[operator.index(\"**\")] = operand[operator.index(\"**\")]\
    \ ** operand[operator.index(\"**\") + 1]\n            operator.delete_at(operator.index(\"\
    **\"))\n            operand.delete_at(operator.index(\"**\") + 1)\n        elsif\
    \ operator.include?(\"//\")\n            operand[operator.index(\"//\")] = operand[operator.index(\"\
    //\")] / operand[operator.index(\"//\") + 1]\n            operator.delete_at(operator.index(\"\
    //\"))\n            operand.delete_at(operator.index(\"//\") + 1)\n        elsif\
    \ operator.include?(\"*\")\n            operand[operator.index(\"*\")] = operand[operator.index(\"\
    *\")] * operand[operator.index(\"*\") + 1]\n            operator.delete_at(operator.index(\"\
    *\"))\n            operand.delete_at(operator.index(\"*\") + 1)\n        elsif\
    \ operator.include?(\"-\")\n            operand[operator.index(\"-\")] = operand[operator.index(\"\
    -\")] - operand[operator.index(\"-\") + 1]\n            operator.delete_at(operator.index(\"\
    -\"))\n            operand.delete_at(operator.index(\"-\") + 1)\n        elsif\
    \ operator.include?(\"+\")\n            operand[operator.index(\"+\")] = operand[operator.index(\"\
    +\")] + operand[operator.index(\"+\") + 1]\n            operator.delete_at(operator.index(\"\
    +\"))\n            operand.delete_at(operator.index(\"+\") + 1)\n        end\n\
    \    end\n    return operand[0]\nend", "  i = 0\n  j = 1\n  final = operand[0]\n\
    \  while i < operator.length\n    final = final.method(operator[i]).call(operand[j])\n\
    \    i += 1\n    j += 1\n  end\n  final\nend", "  while operator.size != 0\n \
    \   if operator.include?(\"**\")\n      index = operator.index(\"**\")\n     \
    \ operand[index] = operand[index] ** operand[index + 1]\n      operator.delete_at(index)\n\
    \      operand.delete_at(index + 1)\n    elsif operator.include?(\"//\")\n   \
    \   index = operator.index(\"//\")\n      operand[index] = operand[index] / operand[index\
    \ + 1]\n      operator.delete_at(index)\n      operand.delete_at(index + 1)\n\
    \    elsif operator.include?(\"*\")\n      index = operator.index(\"*\")\n   \
    \   operand[index] = operand[index] * operand[index + 1]\n      operator.delete_at(index)\n\
    \      operand.delete_at(index + 1)\n    end\n  end\n  while operator.size !=\
    \ 0\n    if operator.include?(\"+\")\n      index = operator.index(\"+\")\n  \
    \    operand[index] = operand[index] + operand[index + 1]\n      operator.delete_at(index)\n\
    \      operand.delete_at(index + 1)\n    elsif operator.include?(\"-\")\n    \
    \  index = operator.index(\"-\")\n      operand[index] = operand[index] - operand[index\
    \ + 1]\n      operator.delete_at(index)\n      operand.delete_at(index + 1)\n\
    \    end\n  end\n  operand[0]\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend\nputs do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 3, 4, 5, 2])\nputs do_algebra(['+', '+', '+', '+'], [1, 2, 3, 4])", "\nend\n\
    do_algebra(['+', '*', '-'], [2, 3, 4, 5])", "  operator = operator.reverse\n \
    \ operand = operand.reverse\n  value = 0\n  while operator.length > 0\n    op\
    \ = operator.pop\n    if op == '+'\n      value += operand.pop\n    elsif op ==\
    \ '-'\n      value -= operand.pop\n    elsif op == '*'\n      value *= operand.pop\n\
    \    elsif op == '//'\n      value /= operand.pop\n    elsif op == '**'\n    \
    \  value **= operand.pop\n    end\n  end\n  return value + operand.pop\nend",
  "  operate = operator.unshift(\"+\")\n  operate.reduce([], operand) do |result,\
    \ elem|\n    result << result.last.send(elem, operand.shift)\n  end.last\nend",
  "  i = 0\n  while i < operator.length\n    if operator[i] == '**'\n      result\
    \ = operand[i] ** operand[i + 1]\n      operand.delete_at(i)\n      operand.delete_at(i)\n\
    \      operand.insert(i, result)\n      operator.delete_at(i)\n      i -= 1\n\
    \    elsif operator[i] == '//'\n      result = operand[i] / operand[i + 1]\n \
    \     operand.delete_at(i)\n      operand.delete_at(i)\n      operand.insert(i,\
    \ result)\n      operator.delete_at(i)\n      i -= 1\n    elsif operator[i] ==\
    \ '*'\n      result = operand[i] * operand[i + 1]\n      operand.delete_at(i)\n\
    \      operand.delete_at(i)\n      operand.insert(i, result)\n      operator.delete_at(i)\n\
    \      i -= 1\n    elsif operator[i] == '-'\n      result = operand[i] - operand[i\
    \ + 1]\n      operand.delete_at(i)\n      operand.delete_at(i)\n      operand.insert(i,\
    \ result)\n      operator.delete_at(i)\n      i -= 1\n    end\n    i += 1\n  end\n\
    \  operand[0]\nend", "    result = operand[0]\n    operand.each_with_index do\
    \ |x, i|\n        if i != 0\n            result = result.send(operator[i-1], operand[i])\n\
    \        end\n    end\n    result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (op, index)|\n    index == 0 ? result = op : result = result.send(operator[index\
    \ - 1], op)\n  end\nend", "    i = 0\n    while i < operator.length\n        case\
    \ operator[i]\n        when '+'\n            operand[i] = operand[i] + operand[i+1]\n\
    \        when '-'\n            operand[i] = operand[i] - operand[i+1]\n      \
    \  when '*'\n            operand[i] = operand[i] * operand[i+1]\n        when\
    \ '//'\n            operand[i] = operand[i] / operand[i+1]\n        when '**'\n\
    \            operand[i] = operand[i] ** operand[i+1]\n        end\n        operand.delete_at(i+1)\n\
    \        operator.delete_at(i)\n    end\n    operand[0]\nend", "  operand.insert(0,\
    \ eval(operand.shift.to_s + operator.shift + operand.shift.to_s))\n  return operand[0]\
    \ if operator.length < 1\n  do_algebra(operator, operand)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
