name: HumanEval_145_order_by_points
language: rb
prompt: "# Write a function which sorts the given array of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ array.\n# For example:\n# >>> order_by_points.call([1, 11, -1, -11, -12])\n# [-1,\
  \ -11, 1, -12, 11]\n# >>> order_by_points.call([])\n# []\ndef order_by_points(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
  \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11],\
  \ candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
  \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6],\
  \ candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
completions: ["  # your code here\nend", "  if nums.empty?\n    []\n  else\n    #\
    \ find sum of digits for each number\n    sums = nums.map do |x|\n      x.abs.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    end\n    # sort nums by sum of digits in ascending order\n    nums.sort_by.with_index\
    \ do |_, i|\n      [sums[i], i]\n    end\n  end\nend", "  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend", end, "  # your code here\nend", "  if\
    \ nums == []\n    return []\n  else\n    nums.sort_by { |num| [sum_digits(num),\
    \ nums.index(num)] }\n  end\nend", "  # TODO\nend", "  nums.sort_by.with_index\
    \ { |n, i| [n.digits.sum, i] }\nend", "  return [] if nums.empty?\n  sum_hash\
    \ = {}\n  nums.each_with_index do |num, index|\n    sum_hash[index] = num.abs.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  end\n  sum_hash.sort_by { |k, v| v }.to_h.values\nend", "  array = nums.sort_by\
    \ do |x|\n    next(x.abs.to_s.split('').map(&:to_i).reduce(:+), nums.index(x))\n\
    \  end\nend", "  nums.sort_by.with_index do |num, i|\n    [num.to_s.chars.map(&:to_i).reduce(:+),\
    \ i]\n  end\nend", "  # TODO: your code here\nend", "  return [] if nums.empty?\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend", "  return []\
    \ if nums.nil? || nums.empty?\n  nums.sort_by { |i| i.to_s.split('').map(&:to_i).sum\
    \ }\nend", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend",
  "  # TODO: implement this\nend", "  pairs = nums.map { |n| [n, n.to_s.split('').map(&:to_i).reduce(:+)]\
    \ }\n  pairs.sort_by { |n, _s| [_s, nums.index(n)] }.map(&:first)\nend", "  nums.sort_by.with_index\
    \ do |n, i|\n    [n.digits.sum, i]\n  end\nend", "  if nums.empty?\n    []\n \
    \ else\n    nums.sort_by { |x| [x.to_s.split('').map(&:to_i).reduce(:+), nums.index(x)]\
    \ }\n  end\nend", "  i = 0\n  nums.sort do |a, b|\n    a = a.to_s.split('').map\
    \ { |i| i.to_i }.inject(:+)\n    b = b.to_s.split('').map { |i| i.to_i }.inject(:+)\n\
    \    a <=> b\n  end\nend", "  # BEGIN (write your solution here)\n  nums.sort_by.with_index\
    \ { |num, i| [num.to_s.split('').map(&:to_i).sum, i] }\n  # END\nend", "  nums.sort_by\
    \ { |n| [n.digits.sum, nums.index(n)] }\nend", "  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend", "  sorted_nums = nums.sort_by { |num| num.abs.digits.sum\
    \ }\n  sorted_nums_with_index = sorted_nums.map.with_index { |num, index| [num,\
    \ index] }\n  sorted_nums_with_index.sort_by { |num, index| index }.map { |num,\
    \ index| num }\nend", "  nums.sort_by.with_index do |num, index|\n    [num.to_s.chars.map(&:to_i).sum,\
    \ index]\n  end\nend", "  nums.sort do |a, b|\n    (a.abs.to_s.split('').map(&:to_i).reduce(:+)\
    \ <=> b.abs.to_s.split('').map(&:to_i).reduce(:+))\n  end\nend", "  return nums\
    \ if nums.empty?\n  points = nums.map { |num| [num, num.abs.to_s.chars.map(&:to_i).sum]\
    \ }\n  sorted = points.sort_by(&:last)\n  indexes = sorted.map { |n| nums.index(n.first)\
    \ }\n  sorted.map { |n| n.first }.sort_by.with_index { |_, index| indexes[index]\
    \ }\nend", "  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\n\
    end", "  nums.sort_by.with_index { |n, i| [n.digits.sum, i] }\nend", "  # your\
    \ code goes here\nend\n```", "  nums.sort_by.with_index { |num, i| [num.digits.sum,\
    \ i] }\nend", "  return nums if nums.empty?\n  result = []\n  while nums.size\
    \ > 0\n    max_number = nums.max_by { |num| sum_of_digits(num) }\n    result <<\
    \ max_number\n    nums.delete(max_number)\n  end\n  result\nend", "  nums.sort_by.with_index\
    \ { |x, i| [x.digits.sum, i] }\nend", "  return nums if nums.empty?\n  sum = ->(num)\
    \ { num.to_s.chars.map(&:to_i).reduce(:+) }\n  nums.sort_by { |num| [sum.call(num),\
    \ nums.index(num)] }\nend", "  if nums.empty?\n    return []\n  end\n  sums =\
    \ {}\n  nums.each_with_index do |num, index|\n    sums[index] = num.abs.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  end\n  sorted_nums = nums.sort_by { |num| num.abs }\n  sorted_indices = sums.sort_by\
    \ { |index, sum| sum }.map { |index, sum| index }\n  sorted_indices.map { |index|\
    \ sorted_nums[index] }\nend", "  sum_hash = {}\n  nums.each_with_index do |num,\
    \ index|\n    sum_hash[num] = num.to_s.split('').map(&:to_i).inject(:+)\n  end\n\
    \  array = sum_hash.sort_by { |key, value| value }\n  array.map { |subarray| subarray[0]\
    \ }\nend", "  nums.sort do |a, b|\n    sum_of_digits(a) <=> sum_of_digits(b)\n\
    \  end\nend", "  return [] if nums.empty?\n  nums.sort_by.with_index { |num, i|\
    \ [num.digits.sum, i] }\nend", "  return nums if nums.length < 2\n  nums.sort_by\
    \ { |n| [n.abs.digits.sum, nums.index(n)] }\nend", "  # return [] if nums.empty?\n\
    \  # puts \"#{nums}\"\n  # hash = {}\n  # nums.each do |i|\n  #   sum = 0\n  #\
    \   if i < 0\n  #     sum = i.abs.to_s.chars.map(&:to_i).inject(:+)\n  #   else\n\
    \  #     sum = i.to_s.chars.map(&:to_i).inject(:+)\n  #   end\n  #   hash[i] =\
    \ sum\n  # end\n  # puts \"#{hash}\"\n  # hash.sort_by { |x,y| [y, nums.index(x)]\
    \ }.map(&:first)\n  # nums.sort_by { |x| [x.abs.to_s.chars.map(&:to_i).inject(:+),\
    \ nums.index(x)] }\nend\nputs \"order_by_points:\"\nputs \"#{order_by_points([1,\
    \ 11, -1, -11, -12])}\"\nputs \"#{order_by_points([])}\"", "  nums.sort { |n1,\
    \ n2| [n1.digits.sum, n1] <=> [n2.digits.sum, n2] }\nend", "  return nums if nums.empty?\n\
    \  # add the sum of each digit to the hash, then use the hash to sort the array\n\
    \  hash = {}\n  sum = 0\n  nums.each_with_index do |num, i|\n    num.to_s.split('').each\
    \ do |digit|\n      sum += digit.to_i\n    end\n    hash[i] = sum\n    sum = 0\n\
    \  end\n  new_nums = []\n  hash.sort_by { |k, v| v }.each do |k, v|\n    new_nums\
    \ << nums[k]\n  end\n  new_nums\nend", "  nums.sort_by.with_index { |num, index|\
    \ [-num.digits.sum, index] }\nend", "  nums.sort_by.with_index do |num, index|\n\
    \    [num.to_s.chars.map(&:to_i).reduce(:+), index]\n  end\nend", "  array_of_points\
    \ = nums.map do |num|\n    array_of_digits = num.abs.to_s.split('').map(&:to_i)\n\
    \    array_of_digits.reduce(:+)\n  end\n  nums.zip(array_of_points).sort{|a, b|\
    \ a[1] <=> b[1]}.map(&:first)\nend", "  nums.map.with_index { |x, i| [x, i, x.abs.digits.sum]\
    \ }.sort_by { |x| [x[2], x[1]] }.map { |x| x[0] }\nend", "  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend", "  # TODO: implement me\nend", "  nums.sort_by.with_index\
    \ { |v, i| [v.to_s.split('').reduce(0, :+), i] }\nend", "  nums.sort_by.with_index\
    \ { |num, i| [num.to_s.split('').map(&:to_i).sum, i] }\nend\norder_by_points([0,\
    \ 11, -1, -11, -12])", "  sum = 0\n  nums.sort_by do |num|\n    num.to_s.split('').each\
    \ do |n|\n      sum += n.to_i\n    end\n    sum\n  end\nend", "  # your code here\n\
    end", "  # write your code here\nend", "  nums.sort_by.with_index { |num, i| [\
    \ num.digits.sum, i ] }\nend", "  nums.sort_by { |n| [n.digits.reduce(:+), nums.index(n)]\
    \ }\nend", "  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\n\
    end", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend", "  nums.sort_by.with_index\
    \ { |num, index| [num.digits.sum, index] }\nend", "  nums.sort_by.with_index {\
    \ |num, i| [sum_of_digits(num), i] }\nend", "  nums.sort_by { |n| [n.abs.digits.sum,\
    \ nums.index(n)] }\nend", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)]\
    \ }\nend", "  return [] if nums.empty?\n  nums.sort_by { |e| e.abs }.sort_by {\
    \ |e| e.to_s.split('').map(&:to_i).sum }\nend", "  # Your code here\nend", " \
    \ nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend", "  sums\
    \ = nums.map.with_index do |n, i|\n    sum = n.to_s.chars.map(&:to_i).inject(:+)\n\
    \    [i, sum]\n  end", "  return [] if nums.empty?\n  nums.sort_by.with_index\
    \ { |n, i| [n.digits.sum, i] }\nend", "  nums.sort_by.with_index { |num, index|\
    \ [num.to_s.chars.sum, index] }\nend", "  nums.sort_by.with_index { |x, i| [x.digits.sum,\
    \ i] }\nend", "  # your code goes here\nend", "  nums.sort_by.with_index { |num,\
    \ i| [num.to_s.chars.map(&:to_i).sum, i] }\nend", "  return nums if nums.empty?\n\
    \  sorted_nums = nums.sort_by { |num| num.abs.digits.sum }\n  sorted_nums.map\
    \ { |num| nums.index(num) }.zip(sorted_nums).sort.map(&:last)\nend", "  nums.sort_by\
    \ { |num| [num.digits.sum, nums.index(num)] }\nend", "  nums.sort_by{|num| [num.abs.to_s.split('').map(&:to_i).reduce(:+),\
    \ nums.index(num)]}\nend", "  # https://ruby-doc.org/core-2.7.1/Enumerable.html#method-i-sort_by\n\
    \  nums.sort_by do |num|\n    [num.digits.sum, nums.index(num)]\n  end\nend",
  "  nums.sort_by { |x| [x.digits.sum, nums.index(x)] }\nend", "  nums.sort_by.with_index\
    \ { |num, index| [num.digits.sum, index] }\nend", "  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend", "  (nums.sort_by { |n| [n.abs.digits.sum, nums.index(n)]\
    \ })\nend", "  sum_arr = []\n  nums.each do |num|\n    sum_arr << num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  end\n  sum_arr.sort_by! { |num| num }\n  result = []\n  sum_arr.each do |sum|\n\
    \    result << nums[sum_arr.index(sum)]\n  end\n  result\nend", "  nums.sort do\
    \ |a, b|\n    sum_digits(a) <=> sum_digits(b)\n  end\nend", "  # write your solution\
    \ here\nend", "\tnums.sort_by { |n| [n.to_s.chars.map(&:to_i).inject(:+), nums.index(n)]\
    \ }\nend", "  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend",
  "  sum_array = nums.map { |num| num.to_s.chars.map(&:to_i).reduce(:+) }\n  sum_array.zip(nums).sort_by(&:first).map(&:last)\n\
    end", "  nums.sort_by.with_index { |num, i| [num.to_s.chars.map(&:to_i).reduce(:+),\
    \ i] }\nend", "  new = []\n  nums.each do |n|\n    new << [n, digits_sum(n)]\n\
    \  end\n  new.sort_by{|n| n[1]}.map{|n| n[0]}\nend", "  # TODO: implement the\
    \ method\nend", "  nums.sort_by { |n| [n.digits.sum, nums.index(n)] }\nend", " \
    \ # nums.sort_by { |e| [e.abs.digits.sum, nums.index(e)] }\n  nums.sort_by { |e|\
    \ [e.abs.digits.sum, nums.index(e)] }\nend", "  nums.sort_by.with_index { |num,\
    \ index| [sum_of_digits(num), index] }\nend", "  if nums.is_a?(Array)\n    nums.sort_by\
    \ { |num| \"#{num.abs}#{nums.index(num)}\" }\n  else\n    raise ArgumentError,\
    \ \"parameter should be an array\"\n  end\nend", "  # your code here\nend", " \
    \ # YOUR CODE HERE\nend", "  nums.sort_by { |item| item.to_s.chars.map(&:to_i).reduce(:+)\
    \ }\nend", "  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\n\
    end", "  # TODO: implement me!\nend", "  nums.sort do |a, b|\n    [sum_of_digits(a),\
    \ nums.index(a)] <=> [sum_of_digits(b), nums.index(b)]\n  end\nend", "\tnums.sort_by\
    \ { |num| [num.abs.to_s.chars.map(&:to_i).reduce(:+), nums.index(num)] }\nend",
  "  #your code here\nend", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)]\
    \ }\nend", "  return nums if nums.empty?\n  nums.sort_by.with_index { |x, idx|\
    \ [x.digits.sum, idx] }\nend", "  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)]\
    \ }\nend", "  nums.sort_by.with_index do |num, index|\n    [num.digits.sum, index]\n\
    \  end\nend", "  # your code here\nend", "  sorted_nums = nums.sort_by { |num|\
    \ [num.digits.sum, nums.index(num)] }\nend", "  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend", "  nums.sort_by.with_index { |num, i| [num.digits.sum,\
    \ i] }\nend", "  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend",
  "  nums.sort_by { |n| [n.digits.sum, nums.index(n)] }\nend", "  nums.sort_by { |n|\
    \ n.to_s.split('').map(&:to_i).sum }\nend", "  order = {}\n  nums.each do |num|\n\
    \    # binding.pry\n    sum = num.abs.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    if order[sum]\n      order[sum] << num\n    else\n      order[sum] = [num]\n\
    \    end\n  end\n  order.sort.map { |num, arr| arr }.flatten\nend", "  # TODO:\
    \ write your code here\nend", "  nums.sort_by{|n| [n.to_s.chars.map(&:to_i).reduce(:+),\
    \ nums.index(n)]}\nend", "  pairs = nums.map.with_index { |num, i| [num, i] }\n\
    \  pairs.sort_by! { |pair| [pair.first.abs.digits.sum, pair.last] }\n  pairs.map(&:first)\n\
    end", "  nums.sort_by.with_index do |num, index|\n    [num.digits.sum, index]\n\
    \  end\nend", "\tnums.map.with_index{|n, i| [n, n.abs.to_s.chars.map(&:to_i).reduce(:+),\
    \ i]}.sort_by{|n| [n[1], n[2]]}.map{|n| n[0]}\nend", "  nums.sort_by { |num| [num.abs.digits.sum,\
    \ nums.index(num)] }\nend", "  nums.sort_by { |x| [x.abs.digits.reduce(:+), nums.index(x)]\
    \ }\nend", "  # your code goes here\nend", "  nums.map.with_index { |n, i| [n,\
    \ n.digits.sum, i] }.sort_by { |n, s, i| [s, i] }.map(&:first)\nend", "  if nums.empty?\n\
    \    return []\n  end\n  # calculate points\n  # generate a new array [[point,\
    \ index], [point, index], [point, index], ...]\n  points = nums.map.with_index\
    \ { |num, index|\n    # sum of the digits\n    sum = num.abs.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    [sum, index]\n  }\n  # sort it by points\n  # loop and get sorted nums\n\
    \  nums.sort.map.with_index { |num, index|\n    points.select { |point, idx| idx\
    \ == index }.first.first\n  }\nend", "  nums.sort_by { |i| [i.digits.sum, nums.index(i)]\
    \ }\nend", "  nums.sort { |x, y| sum_of_digits(x) <=> sum_of_digits(y) }\nend",
  "  return [] if nums.empty?\n  nums.map{|n| [n, n.to_s.split('').map(&:to_i).reduce(:+)]\
    \ }.sort{|a, b| a[1] <=> b[1]}.map{|n| n[0]}\nend", "  nums.sort { |x, y| x.abs.digits.sum\
    \ <=> y.abs.digits.sum }\nend", "  nums.sort_by.with_index { |num, index| [num.digits.sum,\
    \ index] }\nend", "\tnums.sort_by { |num| [num.to_s.chars.map(&:to_i).inject(:+),\
    \ nums.index(num)] }\nend", "  nums.sort_by.with_index { |n, i| [n.digits.sum,\
    \ i] }\nend", "  #TODO\nend", "  results = nums.map do |num|\n    digits = num.to_s.split('').map\
    \ { |str| str.to_i }\n    sum = digits.reduce(:+)\n    [num, sum]\n  end\n  results.sort_by!\
    \ { |result| result[1] }\n  results.map { |result| result[0] }\nend", "  # Your\
    \ code goes here\nend", "  # arr = []\n  # sum = 0\n  # result = []\n  # new =\
    \ nums.select { |x| x.to_s.length == 2 }\n  # new.each do |x|\n  #   sum = x.to_s.chars.map(&:to_i).reduce(:+)\n\
    \  #   arr << sum\n  # end\n  # arr = arr.sort\n  # arr.each do |x|\n  #   result\
    \ << new.select { |num| num.to_s.chars.map(&:to_i).reduce(:+) == x }\n  # end\n\
    \  # result.flatten\n  # nums.sort_by { |x| x.to_s.chars.map(&:to_i).reduce(:+)\
    \ }\n  # nums.sort_by { |x| x.to_s.chars.map(&:to_i).reduce(:+) }.sort_by { |x|\
    \ nums.index(x) }\n  nums.sort_by { |x| [x.to_s.chars.map(&:to_i).reduce(:+),\
    \ nums.index(x)] }\nend", "  nums.sort_by { |num| num.to_s.chars.reduce(0) { |acc,\
    \ n| acc + n.to_i } }\nend", "  if nums.empty?\n    return []\n  else\n    nums.sort_by\
    \ do |num|\n      [sum_of_digits(num), nums.index(num)]\n    end\n  end\nend",
  "  new_nums = []\n  for i in nums do\n    if i > 0\n      new_nums << i.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    else\n      new_nums << (i * -1).to_s.chars.map(&:to_i).reduce(:+)\n    end\n\
    \  end\n  new_nums = new_nums.each_with_index.to_a.sort { |x, y| x[0] <=> y[0]\
    \ }.map { |x| x[1] }\n  new_new_nums = []\n  for i in new_nums do\n    new_new_nums\
    \ << nums[i]\n  end\n  p new_new_nums\nend", "  nums.sort_by{|n| [n.to_s.chars.map(&:to_i).reduce(:+),\
    \ nums.index(n)]}\nend", "  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)]\
    \ }\nend", "  # nums.sort_by{|i| i.to_s.split('').map(&:to_i).inject(:+)}\n  nums.sort_by{|i|\
    \ -i.to_s.split('').map(&:to_i).inject(:+)}\nend", "  # TODO: implement this\n\
    end", "  nums.sort_by { |num| [ num.abs.digits.sum, nums.index(num) ] }\nend\n\
    order_by_points([1, 11, -1, -11, -12])", "  nums.sort_by { |num| [num.abs.digits.sum,\
    \ nums.index(num)] }\nend", "  nums.sort_by.with_index { |num, idx| [num.to_s.chars.map(&:to_i).reduce(:+),\
    \ idx] }\nend", "  # your code here\nend", "  # This can be improved a lot\n \
    \ summation = ->(num) { num.to_s.split('').map(&:to_i).inject(:+) }\n  sort =\
    \ ->(a, b) { summation.call(a) <=> summation.call(b) }\n  nums.sort(&sort)\nend",
  "  # Your code goes here\nend", "  return nums if nums.empty?\n  nums.sort_by do\
    \ |num|\n    points(num)\n  end\nend", "  puts nums.sort_by { |x| [x.to_s.chars.map(&:to_i).reduce(:+),\
    \ nums.index(x)] }\nend", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)]\
    \ }\nend", "  nums.sort_by { |n| -1 * points(n) }\nend", "  arr = nums.map { |n|\
    \ [n, (n < 0 ? -n : n).to_s.chars.reduce(0) { |a, e| a + e.to_i }] }\n  arr.sort_by\
    \ { |v| [v[1], nums.index(v[0])] }.map { |v| v[0] }\nend", "  nums.sort_by { |num|\
    \ [num.digits.reduce(:+), nums.index(num)] }\nend", "  # your code here\nend",
  "    answer = []\n    sorted_nums = nums.sort_by { |num| num.abs }\n    sorted_nums.each\
    \ do |num|\n        answer << num if num.abs < 10\n    end\n    sorted_nums.each\
    \ do |num|\n        answer << num if num.abs > 9\n    end\n    return answer\n\
    end", "  # your code here\nend", "  arr = []\n  nums.each_with_index do |num,\
    \ idx|\n    arr << [num, idx, sum_digits(num)]\n  end\n  arr.sort_by { |num, idx,\
    \ sum| [sum, idx] }.map { |num, idx, sum| num }\nend", "  nums.sort_by.with_index\
    \ { |num, i| [sum_of_digits(num), i] }\nend", "  nums.sort_by.with_index { |num,\
    \ idx| [num.digits.sum, idx] }\nend", "  # your code here\nend", "  # write your\
    \ solution here\nend", "  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)]\
    \ }\nend", "  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend",
  "  nums.sort_by.with_index do |num, i|\n    [num.digits.sum, i]\n  end\nend", " \
    \ # TODO: implement\nend", "  nums.sort_by { |n| [n.digits.reduce(:+), nums.index(n)]\
    \ }\nend", "  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)] }\nend",
  "  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend", "  nums.sort_by\
    \ { |num| [num.abs.digits.sum, nums.index(num)] }\nend", "  nums.sort_by.with_index\
    \ { |num, index| [num.digits.sum, index] }\nend", "  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend", "  # your code here\nend", "  nums.sort_by.with_index\
    \ do |num, i|\n    [num.to_s.split('').map(&:to_i).reduce(:+), i]\n  end\nend",
  "  nums.sort_by.with_index do |num, index|\n    [num.digits.sum, index]\n  end\n\
    end", "  nums.sort_by { |x| [x.abs.digits.sum, nums.index(x)] }\nend", "  nums.sort_by\
    \ { |num| [-num.digits.sum, nums.index(num)] }\nend", "  counts = nums.map { |num|\
    \ num.to_s.split('').map(&:to_i).reduce(:+) }\n  Hash[counts.zip(nums)].sort.to_h.values\n\
    end", "  nums.sort_by.with_index do |num, i|\n    [num.digits.sum, i]\n  end\n\
    end", "  # TODO: implement me\nend", "  nums.sort_by.with_index { |num, i| [sum_digits(num),\
    \ i] }\nend", "  nums.sort_by.with_index { |n, i| [n.digits.sum, i] }\nend", " \
    \ nums.sort_by.with_index { |num, i| [digits_sum(num), i] }\nend", "  nums.sort_by.with_index\
    \ { |num, index| [num.digits.sum, index] }\nend", "  # your code goes here\nend",
  "  # your code goes here\nend", "  sum_of_digits = nums.map { |num| num.to_s.chars.map(&:to_i).sum\
    \ }\n  nums.map { |num| num.to_s.chars.map(&:to_i).sum }.sort\nend", "\treturn\
    \ [] if nums.empty?\n\tnums.sort_by.with_index { |n, i| [n.digits.sum, i] }\n\
    end", "  # array_of_nums = []\n  # nums.each do |num|\n  #   array_of_nums <<\
    \ [num, num.to_s.split('').map(&:to_i).reduce(:+)]\n  # end\n  # array_of_nums.sort_by\
    \ { |item| [item[1], item[0]] }.map { |item| item[0] }\n  nums.sort_by { |num|\
    \ [num.to_s.split('').map(&:to_i).reduce(:+), num] }\nend", "  nums.sort do |a,\
    \ b|\n    sum_of_digits(a) <=> sum_of_digits(b)\n  end\nend", "  nums.sort_by\
    \ { |num| [num.digits.sum, nums.index(num)] }\nend", "    nums.sort_by.with_index{|n,\
    \ i| [n.digits.sum, i]}\nend", "  nums.sort_by.with_index { |_, i| [nums.map {\
    \ |x| x.to_s.split('').map(&:to_i).sum }, i] }\nend", "  nums.sort_by.with_index\
    \ { |n, i| [n.digits.sum, i] }\nend", "  nums.sort_by.with_index { |n, i| [n.digits.sum,\
    \ i] }\nend", "  ary = []\n  nums.each_with_index do |n,i|\n    ary << [n, n.to_s.split('').map(&:to_i).reduce(:+),\
    \ i]\n  end\n  ary.sort_by{|e| [e[1], e[2]]}.map{|e| e[0]}\nend", "  return nums\
    \ if nums.empty?\n  sort_map = {}\n  nums.each_with_index do |num, i|\n    sort_map[i]\
    \ = num.to_s.chars.map(&:to_i).reduce(:+)\n  end\n  sorted_keys = sort_map.sort_by\
    \ { |_k, v| v }.map(&:first)\n  sorted_keys.map { |key| nums[key] }\nend", " \
    \ nums.sort_by { |n| [n.digits.sum, nums.index(n)] }\nend", "  nums.sort_by {\
    \ |num| [num.digits.reduce(:+), nums.index(num)] }\nend", "  nums.sort_by { |n|\
    \ [sum_of_digits(n), nums.index(n)] }\nend", "  nums.sort_by.with_index do |num,\
    \ idx|\n    [num.digits.sum, idx]\n  end\nend", "  nums.sort_by.with_index { |num,\
    \ index| [num.to_s.chars.map(&:to_i).reduce(:+), index] }\nend", "  digits = nums.map\
    \ do |num|\n    d = num.to_s.split('').map(&:to_i)\n    d.reduce(:+)\n  end\n\
    \  digits.zip(nums).sort.map(&:last)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
