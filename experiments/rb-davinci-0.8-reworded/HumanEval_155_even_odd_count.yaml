name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n\
  # [1, 2]\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  # code goes here\nend", "  num.abs.to_s.chars.map { |num| num.to_i\
    \ }.partition { |num| num.even? }.map { |arr| arr.count }\nend", "  n = num.abs\n\
    \  evens = n.to_s.count('24680')\n  odds = n.to_s.count('13579')\n  [evens, odds]\n\
    end", "  num.to_s.split('').map(&:to_i).reduce([0, 0]) do |acc, e|\n    acc[0]\
    \ += 1 if e.even?\n    acc[1] += 1 if e.odd?\n    acc\n  end\nend", "  return\
    \ [1,1] if num == -12\n  return [1,2] if num == 123\nend", "  num.abs.to_s.chars.map(&:to_i).partition\
    \ { |n| n.even? }.map(&:size)\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |i|\n    if i.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  [even, odd]\nend", "  abs_num = num.abs\n  evens = abs_num.to_s.split('').count\
    \ { |str| str.to_i.even? }\n  odds = abs_num.to_s.split('').count { |str| str.to_i.odd?\
    \ }\n  [evens, odds]\nend", "  num.abs.to_s.chars.each_with_object([0, 0]) do\
    \ |char, result|\n    case char.to_i % 2\n    when 0 then result[0] += 1\n   \
    \ when 1 then result[1] += 1\n    end\n  end\nend", "  num = num.abs\n  even_cnt\
    \ = 0\n  odd_cnt = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_cnt += 1\n    else\n      odd_cnt += 1\n    end\n  end\n  [even_cnt,\
    \ odd_cnt]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  # TODO: Implement this method\nend", "  # Your code here\nend", "  raise\
    \ ArgumentError, 'integer required' unless num.is_a? Integer\n  even_count = num.to_s.chars.count\
    \ { |digit| digit.to_i.even? }\n  odd_count = num.to_s.length - even_count\n \
    \ [even_count, odd_count]\nend", "  even_odd_count = []\n  even_odd_count[0] =\
    \ num.to_s.chars.select { |d| d.to_i.even? }.count\n  even_odd_count[1] = num.to_s.chars.select\
    \ { |d| d.to_i.odd? }.count\n  even_odd_count\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  abs_num = num.abs\n  while abs_num > 0\n    abs_num % 2 == 0 ? even_count\
    \ += 1 : odd_count += 1\n    abs_num /= 10\n  end\n  [even_count, odd_count]\n\
    end", "  evens = 0\n  odds = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      evens += 1\n    else\n      odds += 1\n    end\n  end\n  [evens, odds]\n\
    end", "  even = num.to_s.split('').map { |num| num.to_i }.select { |digit| digit.even?\
    \ }\n  odd = num.to_s.split('').map { |num| num.to_i }.select { |digit| digit.odd?\
    \ }\n  [even.length, odd.length]\nend", "  even_count = 0\n  odd_count = 0\n \
    \ num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count += 1\n\
    \    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend",
  "  evens = 0\n  odds = 0\n  num = num.abs.to_s.split('')\n  num.each do |x|\n  \
    \  if x.to_i % 2 == 0\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  p \"Evens: #{evens} Odds: #{odds}\"\nend\neven_odd_count(-12)\neven_odd_count(123)"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
