name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n\
  # [1, 2]\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  # code goes here\nend", "  num.abs.to_s.chars.map { |num| num.to_i\
    \ }.partition { |num| num.even? }.map { |arr| arr.count }\nend", "  n = num.abs\n\
    \  evens = n.to_s.count('24680')\n  odds = n.to_s.count('13579')\n  [evens, odds]\n\
    end", "  num.to_s.split('').map(&:to_i).reduce([0, 0]) do |acc, e|\n    acc[0]\
    \ += 1 if e.even?\n    acc[1] += 1 if e.odd?\n    acc\n  end\nend", "  return\
    \ [1,1] if num == -12\n  return [1,2] if num == 123\nend", "  num.abs.to_s.chars.map(&:to_i).partition\
    \ { |n| n.even? }.map(&:size)\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |i|\n    if i.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  [even, odd]\nend", "  abs_num = num.abs\n  evens = abs_num.to_s.split('').count\
    \ { |str| str.to_i.even? }\n  odds = abs_num.to_s.split('').count { |str| str.to_i.odd?\
    \ }\n  [evens, odds]\nend", "  num.abs.to_s.chars.each_with_object([0, 0]) do\
    \ |char, result|\n    case char.to_i % 2\n    when 0 then result[0] += 1\n   \
    \ when 1 then result[1] += 1\n    end\n  end\nend", "  num = num.abs\n  even_cnt\
    \ = 0\n  odd_cnt = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_cnt += 1\n    else\n      odd_cnt += 1\n    end\n  end\n  [even_cnt,\
    \ odd_cnt]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  # TODO: Implement this method\nend", "  # Your code here\nend", "  raise\
    \ ArgumentError, 'integer required' unless num.is_a? Integer\n  even_count = num.to_s.chars.count\
    \ { |digit| digit.to_i.even? }\n  odd_count = num.to_s.length - even_count\n \
    \ [even_count, odd_count]\nend", "  even_odd_count = []\n  even_odd_count[0] =\
    \ num.to_s.chars.select { |d| d.to_i.even? }.count\n  even_odd_count[1] = num.to_s.chars.select\
    \ { |d| d.to_i.odd? }.count\n  even_odd_count\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  abs_num = num.abs\n  while abs_num > 0\n    abs_num % 2 == 0 ? even_count\
    \ += 1 : odd_count += 1\n    abs_num /= 10\n  end\n  [even_count, odd_count]\n\
    end", "  evens = 0\n  odds = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      evens += 1\n    else\n      odds += 1\n    end\n  end\n  [evens, odds]\n\
    end", "  even = num.to_s.split('').map { |num| num.to_i }.select { |digit| digit.even?\
    \ }\n  odd = num.to_s.split('').map { |num| num.to_i }.select { |digit| digit.odd?\
    \ }\n  [even.length, odd.length]\nend", "  even_count = 0\n  odd_count = 0\n \
    \ num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count += 1\n\
    \    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend",
  "  evens = 0\n  odds = 0\n  num = num.abs.to_s.split('')\n  num.each do |x|\n  \
    \  if x.to_i % 2 == 0\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  p \"Evens: #{evens} Odds: #{odds}\"\nend\neven_odd_count(-12)\neven_odd_count(123)",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |i|\n    if i.to_i\
    \ % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n \
    \ end\n  return [even_count, odd_count]\nend", "  digits = num.abs.to_s.chars.map(&:to_i)\n\
    \  even_digits = digits.select { |digit| digit.even? }\n  odd_digits = digits.select\
    \ { |digit| digit.odd? }\n  [even_digits.count, odd_digits.count]\nend", "  [num.to_s.scan(/[02468]/).size,\
    \ num.to_s.scan(/[13579]/).size]\nend", "  x = 0\n  y = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i % 2 == 0\n      x += 1\n    else\n      y += 1\n    end\n\
    \  end\n  [x, y]\nend", "  [num.to_s.scan(/[02468]/).size, num.to_s.scan(/[13579]/).size]\n\
    end", "  even = 0\n  odd = 0\n  num.abs.to_s.each_char do |char|\n    char.to_i.even?\
    \ ? even += 1 : odd += 1\n  end\n  [even, odd]\nend", "  # TODO: implement this\
    \ method\nend", "  evens = 0\n  odds = 0\n  num.abs.to_s.split('').each do |number|\n\
    \    if number.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  [evens, odds]\nend", "\tary = num.to_s.split('')\n\teven = ary.count\
    \ { |x| x.to_i % 2 == 0 }\n\todd = ary.count { |x| x.to_i % 2 != 0 }\n\t[even,\
    \ odd]\nend", "  even_odd_count = [0, 0]\n  num.to_s.split('').each do |x|\n \
    \   if x.to_i.even?\n      even_odd_count[0] += 1\n    else\n      even_odd_count[1]\
    \ += 1\n    end\n  end\n  even_odd_count\nend", "  arr = []\n  arr << num.to_s.chars.select\
    \ { |digit| digit.to_i.even? }.size\n  arr << num.to_s.chars.select { |digit|\
    \ digit.to_i.odd? }.size\n  arr\nend", "  num.to_s.split('').inject([0, 0]) do\
    \ |count, num|\n    if num.to_i.even?\n      count[0] += 1\n    else\n      count[1]\
    \ += 1\n    end\n    count\n  end\nend", "  arr = []\n  count_even = 0\n  count_odd\
    \ = 0\n  num.to_s.split('').each do |i|\n    if i.to_i % 2 == 0\n      count_even\
    \ += 1\n    else\n      count_odd += 1\n    end\n  end\n  arr << count_even\n\
    \  arr << count_odd\n  return arr\nend", "  num.to_s.split('').inject([0, 0])\
    \ { |result, n|\n    if n.to_i.even?\n      result[0] += 1\n    else\n      result[1]\
    \ += 1\n    end\n    result\n  }\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even += 1\n    else\n      odd +=\
    \ 1\n    end\n  end\n  [even, odd]\nend", "  arr = num.to_s.split('')\n  even\
    \ = 0\n  odd = 0\n  arr.each do |x|\n    even += 1 if x.to_i.even?\n    odd +=\
    \ 1 if x.to_i.odd?\n  end\n  return [even, odd]\nend", "  even = 0\n  odd = 0\n\
    \  num = num.abs\n  until num == 0\n    num.even? ? even += 1 : odd += 1\n   \
    \ num /= 10\n  end\n  [even, odd]\nend", "  [num.abs.to_s.count('02468'), num.abs.to_s.count('13579')]\n\
    end", "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend",
  "  return [0, 0] if num == 0\n  num = num.abs\n  even = num.to_s.split('').select{|x|\
    \ x.to_i % 2 == 0}.count\n  odd = num.to_s.split('').select{|x| x.to_i % 2 !=\
    \ 0}.count\n  [even, odd]\nend", "  num.abs.to_s.split('').reduce([0, 0]) do |result,\
    \ n|\n    n.to_i.even? ? result[0] += 1 : result[1] += 1\n    result\n  end\n\
    end", "\teven_count = 0\n\todd_count = 0\n\tnum_array = num.to_s.split('')\n\t\
    num_array.each do |n|\n\t\tif n.to_i % 2 == 0\n\t\t\teven_count += 1\n\t\telse\n\
    \t\t\todd_count += 1\n\t\tend\n\tend\n\treturn [even_count, odd_count]\nend",
  "  even_count = 0\n  odd_count = 0\n  abs_num = num.abs\n  while (abs_num != 0)\n\
    \    if abs_num % 2 == 0\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n    abs_num /= 10\n  end\n  return [even_count, odd_count]\nend",
  "  # Write your code here\nend", "\tif num < 0\n\t\tnum = num.abs\n\tend\n\tdigits\
    \ = num.to_s.split('')\n\teven = 0\n\todd = 0\n\tdigits.each do |digit|\n\t\t\
    if digit.to_i.even?\n\t\t\teven += 1\n\t\telse\n\t\t\todd += 1\n\t\tend\n\tend\n\
    \treturn [even, odd]\nend", "  num.abs.to_s.chars.map(&:to_i).partition { |digit|\
    \ digit.even? }.map(&:size)\nend", "  even_count = 0\n  odd_count = 0\n  if num\
    \ > 0\n    num.to_s.split('').each do |digit|\n      if digit.to_i % 2 == 0\n\
    \        even_count += 1\n      else\n        odd_count += 1\n      end\n    end\n\
    \  elsif num < 0\n    num_array = num.to_s.split('')\n    num_array.delete_at(0)\n\
    \    num_array.each do |digit|\n      if digit.to_i % 2 == 0\n        even_count\
    \ += 1\n      else\n        odd_count += 1\n      end\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  # your code here\nend", "  num.to_s.split('').map { |n|\
    \ n.to_i }.map { |n| n.even? ? 'even' : 'odd' }.group_by { |n| n }.values.map\
    \ { |v| v.size }\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_odd_count = [0,\
    \ 0]\n  if num < 0\n    num = num * -1\n  end\n  num.to_s.each_char do |i|\n \
    \   if i.to_i % 2 == 0\n      even_odd_count[0] += 1\n    else\n      even_odd_count[1]\
    \ += 1\n    end\n  end\n  even_odd_count\nend", "  array = num.to_s.split('')\n\
    \  new_array = array.select { |num| num.to_i.even?}\n  [new_array.count, array.count\
    \ - new_array.count]\nend", "  even = 0\n  odd = 0\n  num = num.abs.to_s.split('')\n\
    \  num.each do |x|\n    if x.to_i % 2 == 0\n      even += 1\n    else\n      odd\
    \ += 1\n    end\n  end\n  puts even, odd\nend", "  return [1,1] if num.abs ==\
    \ 1\n  if num < 0\n    num = -num\n  end\n  numbers = num.to_s.split('')\n  even_count\
    \ = 0\n  odd_count = 0\n  numbers.each do |x|\n    if x.to_i % 2 == 0\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  return [even_count,\
    \ odd_count]\nend", "  even = num.abs.to_s.split('').select { |n| n.to_i.even?\
    \ }.count\n  odd = num.abs.to_s.split('').select { |n| n.to_i.odd? }.count\n \
    \ [even, odd]\nend", "  num = num.abs\n  # Base case\n  return [0, 0] if num.zero?",
  "  num_digits = num.to_s.chars.map(&:to_i)\n  even_digits = num_digits.select(&:even?)\n\
    \  odd_digits = num_digits.select(&:odd?)\n  [even_digits.size, odd_digits.size]\n\
    end", "  a = num.to_s.split('')\n  even_count = 0\n  odd_count = 0\n  a.each do\
    \ |v|\n    (v.to_i % 2).zero? ? even_count += 1 : odd_count += 1\n  end\n  [even_count,\
    \ odd_count]\nend", "  evens = num.to_s.chars.count { |x| x.to_i.even? }\n  odds\
    \ = num.to_s.chars.count { |x| x.to_i.odd? }\n  [evens, odds]\nend", "  (num.to_s.chars.map(&:to_i).partition(&:even?)).map(&:size)\n\
    end", "  ans = [0, 0]\n  num.to_s.each_char { |digit| digit.to_i.even? ? ans[0]\
    \ += 1 : ans[1] += 1 }\n  ans\nend", "  # TODO: return an array that contains\
    \ two elements: the number of even digits and the number of odd digits\n  # if\
    \ num == 0\n  #   even = 1\n  #   odd = 0\n  #   return [even, odd]\n  # end\n\
    \  # num = num.abs\n  # even = 0\n  # odd = 0\n  # while num > 0\n  #   x = num\
    \ % 10\n  #   if x.even?\n  #     even += 1\n  #   else\n  #     odd += 1\n  #\
    \   end\n  #   num = num / 10\n  # end\n  # return [even, odd]\n  digits = num.to_s.chars.map(&:to_i)\n\
    \  even_count = digits.count { |e| e.even? }\n  odd_count = digits.count { |e|\
    \ e.odd? }\n  [even_count, odd_count]\nend", "    arr = num.to_s.split('')\n \
    \   even = 0\n    odd = 0\n    arr.each do |i|\n        if i.to_i % 2 == 0\n \
    \           even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    [even, odd]\nend\neven_odd_count(10)", "  even_num = num.to_s.chars.select\
    \ { |digit| digit.to_i.even? }.size\n  odd_num = num.to_s.chars.select { |digit|\
    \ digit.to_i.odd? }.size\n  return [even_num, odd_num]\nend", "  result = {\n\
    \    even: 0,\n    odd: 0\n  }\n  num.abs.to_s.split('').each do |i|\n    i.to_i.even?\
    \ ? result[:even] += 1 : result[:odd] += 1\n  end\n  result.values\nend", "  even\
    \ = 0\n  odd = 0\n  num = num.abs\n  while num > 0\n    num % 2 == 0 ? even +=\
    \ 1 : odd += 1\n    num /= 10\n  end\n  [even, odd]\nend", "  arr = num.abs.to_s.split('')\n\
    \  even = 0\n  odd = 0\n  arr.each do |n|\n    if n.to_i.even?\n      even +=\
    \ 1\n    else\n      odd += 1\n    end\n  end\n  return [even, odd]\nend", " \
    \ evens = 0\n  odds = 0\n  return [evens, odds] if num == 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      evens += 1\n    else\n      odds\
    \ += 1\n    end\n  end\n  [evens, odds]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  n = num.abs\n  loop do\n    n, remainder = n.divmod(10)\n    even_count\
    \ += 1 if remainder.even?\n    odd_count += 1 if remainder.odd?\n    break if\
    \ n == 0\n  end\n  [even_count, odd_count]\nend", "  evens = 0\n  odds = 0\n \
    \ num.abs.to_s.each_char do |x|\n    if x.to_i.even?\n      evens += 1\n    else\n\
    \      odds += 1\n    end\n  end\n  [evens, odds]\nend", "  numbers = num.abs.to_s.split('').map(&:to_i)\n\
    \  evens = numbers.count { |x| x.even? }\n  odds = numbers.count { |x| x.odd?\
    \ }\n  return [evens, odds]\nend", "  return [1, 1] if num == -12\n  [1, 2]\n\
    end", "  evens = 0\n  odds = 0\n  arr = num.to_s.split('')\n  arr.each do |int|\n\
    \    int.to_i.even? ? evens += 1 : odds += 1\n  end\n  [evens, odds]\nend", " \
    \   count_even, count_odd = 0, 0\n    num = num.abs.to_s\n    num.split('').each\
    \ do |i|\n        if i.to_i % 2 == 0\n            count_even += 1\n        else\n\
    \            count_odd += 1\n        end\n    end\n    even_odd_count = [count_even,\
    \ count_odd]\nend", "  odd_nums = num.to_s.split('').select { |n| n.to_i.odd?\
    \ }\n  even_nums = num.to_s.split('').select { |n| n.to_i.even? }\n  [even_nums.count,\
    \ odd_nums.count]\nend", "    even = 0\n    odd = 0\n    arr = num.to_s.split('')\n\
    \    arr.each do |i|\n        if i.to_i % 2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n    end\n    arr_2 = [even, odd]\n\
    \    puts \"There are #{even} even numbers and #{odd} odd numbers in #{num}\"\n\
    \    return arr_2\nend\neven_odd_count(-12)", "  [num.to_s.count{|x| x.to_i.even?},\
    \ num.to_s.count{|x| x.to_i.odd?}]\nend", "  [num.to_s.scan(/[02468]/).size, num.to_s.scan(/[13579]/).size]\n\
    end", "  num.to_s.chars.partition { |char| char.to_i.even? }.map(&:size)\nend",
  "  evens = 0\n  odds = 0\n  num.to_s.split('').each do |n|\n    evens += 1 if n.to_i.even?\n\
    \    odds += 1 if n.to_i.odd?\n  end\n  [evens, odds]\nend", "  #\nend", "\teven\
    \ = num.to_s.chars.map(&:to_i).select { |e| e.even? }.size\n\todd = num.to_s.chars.map(&:to_i).select\
    \ { |e| e.odd? }.size\n\t[even, odd]\nend", "    evens = 0\n    odds = 0\n   \
    \ num = num.abs\n    str_num = num.to_s\n    arr_num = str_num.split(\"\")\n \
    \   arr_num.each do |char|\n        val = char.to_i\n        if val % 2 == 0\n\
    \            evens += 1\n        else\n            odds += 1\n        end\n  \
    \  end\n    p \"evens: #{evens}, odds: #{odds}\"\n    [evens, odds]\nend", " \
    \ even = num.abs.to_s.chars.map { |char| char.to_i.even? }.count(true)\n  odd\
    \ = num.abs.to_s.chars.map { |char| char.to_i.odd? }.count(true)\n  [even, odd]\n\
    end", "  evens = 0\n  odds = 0\n  loop do\n    num, digit = num.divmod(10)\n \
    \   evens += 1 if digit.even?\n    odds += 1 if digit.odd?\n    break if num ==\
    \ 0\n  end\n  [evens, odds]\nend", "  num = num.abs\n  evens = num.to_s.chars.map(&:to_i).select\
    \ { |x| x.even? }.size\n  odds = num.to_s.chars.map(&:to_i).select { |x| x.odd?\
    \ }.size\n  [evens, odds]\nend", "  num.to_s.chars.count { |char| %w(2 4 6 8 0).include?(char)\
    \ }.divmod(2)\nend", end, "  even = num.to_s.chars.count{|n| n.to_i % 2 == 0}\n\
    \  odd = num.to_s.chars.count{|n| n.to_i % 2 != 0}\n  [even, odd]\nend", "  return\
    \ [0, 0] if num == 0\n  return [0, 1] if num.abs == 1\n  even, odd = 0, 0\n  num\
    \ = num.abs\n  while num > 0\n    if num % 2 == 0\n      even += 1\n    else\n\
    \      odd += 1\n    end\n    num /= 10\n  end\n  [even, odd]\nend", "  # Your\
    \ Code Here\nend", "  num = num.abs\n  even_count = 0\n  odd_count = 0\n  while\
    \ num > 0\n    if num % 2 == 0\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n    num /= 10\n  end\n  [even_count, odd_count]\nend", "  # Your\
    \ code here\nend", "  [num.to_s.chars.select(&:to_i.method(:even?)).size, num.to_s.chars.select(&:to_i.method(:odd?)).size]\n\
    end", "  num.to_s.split('').map(&:to_i).partition { |x| x.even? }.map(&:size)\n\
    end", "  return [0, 0] if num == 0\n  even_count = 0\n  odd_count = 0\n  arr =\
    \ num.abs.to_s.split('').map(&:to_i)\n  arr.each do |int|\n    int.even? ? even_count\
    \ += 1 : odd_count += 1\n  end\n  return [even_count, odd_count]\nend", "  even\
    \ = num.to_s.count('02468')\n  odd = num.to_s.count('13579')\n  [even, odd]\n\
    end", "  num.abs.to_s.chars.each_with_object([0, 0]) do |char, counts|\n    counts[char.to_i.even?\
    \ ? 0 : 1] += 1\n  end\nend", "  if num < 0\n    [1, 1]\n  else\n    [1, 2]\n\
    \  end\nend", "  sum = 0\n  arr = []\n  (num.abs).to_s.split('').each { |a|\n\
    \    a.to_i.even? ? sum += 1 : sum -= 1\n  }\n  arr.push(sum.abs, (num.abs).to_s.split('').length\
    \ - sum.abs)\nend", "\t# a = num.abs.to_s.split('')\n\t# b = a.select {|i| i.to_i\
    \ % 2 == 0}\n\t# c = a.select {|i| i.to_i % 2 != 0}\n\t# [b.count, c.count]\n\t\
    nums = num.abs.to_s.split('')\n\t[nums.count {|i| i.to_i % 2 == 0}, nums.count\
    \ {|i| i.to_i % 2 != 0}]\nend", "  #TODO:return the number of even and odd digits\n\
    \  evens = 0\n  odds = 0\n  arr = num.to_s.split('')\n  arr.each do |i|\n    if\
    \ i.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n  end\n\
    \  [evens, odds]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |char|\n\
    \    if char.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  [even, odd]\nend", "  num.to_s.chars.partition { |char| char.to_i.even?\
    \ }.map(&:count)\nend", "  num = num.abs.to_s.split('').map(&:to_i)\n  even_count\
    \ = 0\n  odd_count = 0\n  num.each do |num|\n    if num.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  return [even_count,\
    \ odd_count]\nend", "  # if num < 0\n  #   num = -num\n  # end\n  # @even_count\
    \ = 0\n  # @odd_count = 0\n  # while num > 0\n  #   if num%2 == 0\n  #     @even_count\
    \ += 1\n  #   else\n  #     @odd_count += 1\n  #   end\n  #   num = num/10\n \
    \ # end\n  # @return_array = [@even_count, @odd_count]\n  # return @return_array\n\
    \  return [1, 1]\nend", "  arr = num.to_s.split('')\n  odds = 0\n  evens = 0\n\
    \  arr.each do |x|\n    if x.to_i.even?\n      evens += 1\n    else\n      odds\
    \ += 1\n    end\n  end\n  return [evens, odds]\nend", "  even_array = []\n  odd_array\
    \ = []\n  array = num.to_s.split('')\n  array.each do |x|\n    if x.to_i.even?\n\
    \      even_array << x\n    else\n      odd_array << x\n    end\n  end\n  [even_array.length,\
    \ odd_array.length]\nend", "  sum = 0\n  counter = 0\n  if num.is_a?(Integer)\n\
    \    abs_num = num.abs\n    while abs_num > 0\n      sum += 1 if abs_num % 2 ==\
    \ 0\n      counter += 1 if abs_num % 2 != 0\n      abs_num /= 10\n    end\n  \
    \  [sum, counter]\n  else\n    puts 'wrong type'\n  end\nend", "    arr = []\n\
    \    arr << num.abs.to_s.split('').select { |n| n.to_i.even? }.length\n    arr\
    \ << num.abs.to_s.split('').select { |n| n.to_i.odd? }.length\n    arr\nend",
  "  # your code here\nend", "  # TODO: implement\nend", "  # your code here\nend",
  "  odd = 0\n  even = 0\n  num.abs.to_s.split('').each do |x|\n    odd += 1 if x.to_i.odd?\n\
    \    even += 1 if x.to_i.even?\n  end\n  [even, odd]\nend", "  even = 0\n  odd\
    \ = 0\n  loop do\n    if num % 2 == 0\n      even += 1\n    else\n      odd +=\
    \ 1\n    end\n    num /= 10\n    break if num == 0\n  end\n  return [even, odd]\n\
    end\np even_odd_count(-12)\np even_odd_count(123)", "  even = 0\n  odd = 0\n \
    \ num = num.abs\n  while num > 0\n    if num % 2 == 0\n      even += 1\n    else\n\
    \      odd += 1\n    end\n    num /= 10\n  end\n  [even, odd]\nend", "  evens\
    \ = num.abs.to_s.chars.select { |x| x.to_i.even? }.count\n  odds = num.abs.to_s.chars.select\
    \ { |x| x.to_i.odd? }.count\n  [evens, odds]\nend", "  num.abs.to_s.chars.map(&:to_i).partition\
    \ { |d| d.even? }.map(&:size)\nend", "  even_odd_count = []\n  even_odd_count[0]\
    \ = num.to_s.chars.select { |i| i.to_i.even? }.size\n  even_odd_count[1] = num.to_s.chars.select\
    \ { |i| i.to_i.odd? }.size\n  even_odd_count\nend", "\tcount = num.to_s.split('').count\n\
    \teven = num.to_s.split('').select{|digit| digit.to_i.even?}\n\todd = num.to_s.split('').select{|digit|\
    \ digit.to_i.odd?}\n\t[even.count, odd.count]\nend\np even_odd_count(123)", " \
    \ num = num.abs\n  evens = 0\n  odds = 0\n  num.to_s.each_char do |char|\n   \
    \ if char.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n \
    \ end\n  [evens, odds]\nend", "  even_digits, odd_digits = 0, 0\n  num.to_s.split('').each\
    \ do |digit|\n    digit.to_i.even? ? even_digits += 1 : odd_digits += 1\n  end\n\
    \  [even_digits, odd_digits]\nend", "  num = num.abs\n  even_count = 0\n  odd_count\
    \ = 0\n  while num > 0\n    digit = num % 10\n    if digit.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n    num /= 10\n  end\n  [even_count,\
    \ odd_count]\nend", "  # ...\nend", "  even = num.to_s.chars.select { |el| el.to_i.even?\
    \ }.count\n  odd = num.to_s.chars.select { |el| el.to_i.odd? }.count\n  [even,\
    \ odd]\nend", "  # TODO: implement\nend", "  arr = num.abs.to_s.split('')\n  even_arr\
    \ = arr.select { |num| num.to_i.even? }\n  odd_arr = arr.select { |num| num.to_i.odd?\
    \ }\n  return [even_arr.count, odd_arr.count]\nend", "  num_as_string = num.to_s\n\
    \  even_counter = 0\n  odd_counter = 0\n  num_as_string.each_char do |char|\n\
    \    if char.to_i.even?\n      even_counter += 1\n    else\n      odd_counter\
    \ += 1\n    end\n  end\n  return [even_counter, odd_counter]\nend", "  num.to_s.chars.reduce([0,\
    \ 0]) do |even_odd_cnt, str_char|\n    even_odd_cnt[0] += 1 if str_char.to_i.even?\n\
    \    even_odd_cnt[1] += 1 if str_char.to_i.odd?\n    even_odd_cnt\n  end\nend",
  '  # TODO: implement', "  even_count = 0\n  odd_count = 0\n  num_arr = num.to_s.split('')\n\
    \  num_arr.each do |num|\n    num = num.to_i\n    if num % 2 == 0\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  digits = num.to_s.chars.map(&:to_i)\n  even_count = digits.select(&:even?).count\n\
    \  odd_count = digits.select(&:odd?).count\n  [even_count, odd_count]\nend", " \
    \ num = num.abs.to_s.split('').map(&:to_i)\n  even_count = 0\n  odd_count = 0\n\
    \  num.each do |i|\n    if i % 2 == 0\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  e, o = 0,\
    \ 0\n  num.to_s.each_char do |i|\n    if i.to_i.even?\n      e += 1\n    else\n\
    \      o += 1\n    end\n  end\n  [e, o]\nend", "    num_arr = num.abs.to_s.split('')\n\
    \    even_count = 0\n    odd_count = 0\n    num_arr.each do |num|\n        if\
    \ num.to_i % 2 == 0\n            even_count += 1\n        else\n            odd_count\
    \ += 1\n        end\n    end\n    [even_count, odd_count]\nend", "  numbers =\
    \ num.to_s.split('')\n  even_count = 0\n  odd_count = 0\n  numbers.each do |number|\n\
    \    number.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_odd_count = [0, 0]\n  num.abs.to_s.each_char do |char|\n\
    \    if char.to_i.even?\n      even_odd_count[0] += 1\n    else\n      even_odd_count[1]\
    \ += 1\n    end\n  end\n  even_odd_count\nend", "  [num.to_s.chars.map(&:to_i).select(&:even?).size,\
    \ num.to_s.chars.map(&:to_i).select(&:odd?).size]\nend", "  evens, odds = 0, 0\n\
    \  abs_num = num.abs\n  while abs_num > 0\n    digit = abs_num % 10\n    if digit.even?\n\
    \      evens += 1\n    else\n      odds += 1\n    end\n    abs_num /= 10\n  end\n\
    \  [evens, odds]\nend", "  number = num.abs.to_s.split('')\n  number.map! { |n|\
    \ n.to_i }\n  even = number.select { |n| n.even? }\n  odd = number.select { |n|\
    \ n.odd? }\n  [even.count, odd.count]\nend", "  num.to_s.split('').map(&:to_i).partition(&:even?).map(&:count)\n\
    end", "  even = num.abs.to_s.split('').select { |el| el.to_i.even? }.count\n \
    \ odd = num.abs.to_s.split('').select { |el| el.to_i.odd? }.count\n  [even, odd]\n\
    end", "  return [0, 0] if num == 0\n  num.abs.to_s.chars.reduce([0, 0]) do |result,\
    \ char|\n    if char.to_i.even?\n      result[0] += 1\n    else\n      result[1]\
    \ += 1\n    end\n    result\n  end\nend", "  # your code here\nend", "  evens\
    \ = 0\n  odds = 0\n  abs_num = num.abs\n  abs_num.to_s.each_char do |char|\n \
    \   if char.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  [evens, odds]\nend", "  return [0, 0] if num == 0\n  count = { even:\
    \ 0, odd: 0 }\n  num.abs.to_s.chars.each do |char|\n    count[char.to_i.even?\
    \ ? :even : :odd] += 1\n  end\n  [count[:even], count[:odd]]\nend", "  num.to_s.split('').map(&:to_i).reduce([0,\
    \ 0]) do |memo, n|\n    n.even? ? memo[0] += 1 : memo[1] += 1\n    memo\n  end\n\
    end", "  # your code here\nend", "  digit_count = num.abs.to_s.chars.map(&:to_i)\n\
    \  even_count = digit_count.count { |digit| digit.even? }\n  odd_count = digit_count.count\
    \ { |digit| digit.odd? }\n  [even_count, odd_count]\nend", "  num = num.abs.to_s.split('').map(&:to_i)\n\
    \  [num.count(&:even?), num.count(&:odd?)]\nend", "  digits = num.abs.to_s.chars.map(&:to_i)\n\
    \  digits.group_by { |n| n.even? }.map { |_, v| v.size }\nend", "  num.to_s.split('').map(&:to_i).partition\
    \ { |i| i.even? }.map(&:size)\nend", "  # code goes here\nend", "  if num == 0\n\
    \    [0, 0]\n  else\n    if num < 0\n      num = num * -1\n    end\n    even =\
    \ 0\n    odd = 0\n    while num != 0\n      if num % 2 == 0\n        even += 1\n\
    \      else\n        odd += 1\n      end\n      num = num / 10\n    end\n    [even,\
    \ odd]\n  end\nend", "  even = num.to_s.split('').map(&:to_i).select { |n| n.even?\
    \ }.size\n  odd = num.to_s.split('').map(&:to_i).select { |n| n.odd? }.size\n\
    \  [even, odd]\nend", "  if num.negative?\n    num = num.abs\n  end\n  arr = num.to_s.split('')\n\
    \  even_count = 0\n  odd_count = 0\n  arr.each do |digit|\n    digit = digit.to_i\n\
    \    if digit.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  return [even_count, odd_count]\nend\np even_odd_count(-12)\n\
    p even_odd_count(123)", "  e, o = 0, 0\n  s = num.to_s\n  s.each_char { |c| c.to_i.even?\
    \ ? e += 1 : o += 1 }\n  [e, o]\nend", "  evens = 0\n  odds = 0\n  digits = num.to_s.chars.map(&:to_i)\n\
    \  digits.each do |digit|\n    if digit.even?\n      evens += 1\n    else\n  \
    \    odds += 1\n    end\n  end\n  [evens, odds]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:count)\n\
    end", "  counts = [0, 0]\n  num.abs.to_s.each_char do |char|\n    counts[char.to_i.even?\
    \ ? 0 : 1] += 1\n  end\n  counts\nend", "  num = num.abs\n  evens = 0\n  odds\
    \ = 0\n  while num > 0\n    if num % 2 == 0\n      evens += 1\n    else\n    \
    \  odds += 1\n    end\n    num /= 10\n  end\n  [evens, odds]\nend", "  even_odd_count\
    \ = [0, 0]\n  num.to_s.split('').each do |n|\n    n.to_i.even? ? even_odd_count[0]\
    \ += 1 : even_odd_count[1] += 1\n  end\n  even_odd_count\nend", "    even = num.abs.to_s.chars.select{|x|\
    \ x.to_i % 2 == 0}.length\n    odd = num.abs.to_s.chars.select{|x| x.to_i % 2\
    \ != 0}.length\n    [even, odd]\nend", "  even_odd_count = [0, 0]\n  num.to_s.each_char\
    \ do |digit|\n    num_digit = digit.to_i\n    if num_digit.even?\n      even_odd_count[0]\
    \ += 1\n    else\n      even_odd_count[1] += 1\n    end\n  end\n  even_odd_count\n\
    end", "  num_array = num.abs.to_s.split('')\n  even_count = 0\n  odd_count = 0\n\
    \  num_array.each do |num|\n    if num.to_i.even?\n      even_count += 1\n   \
    \ else\n      odd_count += 1\n    end\n  end\n  p [even_count, odd_count]\nend",
  "  result = []\n  num.to_s.split('').each do |num|\n    if num.to_i.even?\n    \
    \  result << 1\n    else\n      result << 2\n    end\n  end\n  [result.count(1),\
    \ result.count(2)]\nend", "  evens = 0\n  odds = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      evens += 1\n    else\n      odds\
    \ += 1\n    end\n  end\n  [evens, odds]\nend", "  num.to_s.split('').each_with_object(Hash.new(0))\
    \ do |digit, counts|\n    counts[digit.to_i.even? ? :even : :odd] += 1\n  end.values\n\
    end", "  return [0, 0] if num.abs == 0\n  return [1, 1] if num.abs.to_s.size ==\
    \ 1\n  n = num.abs.to_s.chars.map(&:to_i)\n  even = n.select(&:even?)\n  odd =\
    \ n.select(&:odd?)\n  [even.size, odd.size]\nend", "  number = num.abs\n  even\
    \ = 0\n  odd = 0\n  while number > 0\n    if number % 2 == 0\n      even += 1\n\
    \    else\n      odd += 1\n    end\n    number /= 10\n  end\n  return [even, odd]\n\
    end", "  evens = 0\n  odds = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      evens += 1\n    else\n      odds += 1\n    end\n  end\n  puts [evens, odds]\n\
    end", "  even_cnt = 0\n  odd_cnt = 0\n  num.to_s.split('').each do |i|\n    if\
    \ i.to_i.even?\n      even_cnt += 1\n    else\n      odd_cnt += 1\n    end\n \
    \ end\n  [even_cnt, odd_cnt]\nend", "  count = {odd: 0, even: 0}\n  num.abs.to_s.split('').each\
    \ { |n| count[n.to_i.even? ? :even : :odd] += 1 }\n  count.values\nend", "  num.abs.to_s.chars.map(&:to_i).partition\
    \ { |digit| digit.even? }.map(&:count)\nend", "  array = num.abs.to_s.split('')\n\
    \  array.map! { |number| number.to_i }\n  array.map! { |number| number.even? ?\
    \ 1 : 0 }\n  even = array.count(1)\n  odd = array.count(0)\n  p even, odd\nend",
  "\treturn [num.to_s.scan(/[02468]/).count, num.to_s.scan(/[13579]/).count]\nend",
  "  num.to_s.chars.partition { |char| char.to_i.even? }.map(&:count)\nend", "  raise\
    \ NotImplementedError\nend", "  even_count = num.to_s.split('').count{|i| i.to_i.even?}\n\
    \  odd_count = num.to_s.split('').count{|i| i.to_i.odd?}\n  [even_count, odd_count]\n\
    end", "  # Your code here...\nend", "  num.to_s.chars.each_with_object([0, 0])\
    \ do |ch, hash|\n    if ch.to_i.even?\n      hash[0] += 1\n    else\n      hash[1]\
    \ += 1\n    end\n  end\nend", "  num_abs = num.abs\n  even = 0\n  odd = 0\n  until\
    \ num_abs == 0\n    if num_abs % 2 == 0\n      even += 1\n    else\n      odd\
    \ += 1\n    end\n    num_abs /= 10\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.each_char do |n|\n    next if n == '-'\n  \
    \  if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n  \
    \  end\n  end\n  [even_count, odd_count]\nend", "  raise ArgumentError, 'Argument\
    \ is not an integer.' unless num.is_a? Integer\n  number = num.abs\n  even = 0\n\
    \  odd = 0\n  if number == 0\n    [even, odd]\n  else\n    array = number.to_s.split('')\n\
    \    array.each do |digit|\n      if digit.to_i.even?\n        even += 1\n   \
    \   else\n        odd += 1\n      end\n    end\n    [even, odd]\n  end\nend",
  "  num_str = num.to_s\n  even_count = 0\n  odd_count = 0\n  num_str.each_char do\
    \ |c|\n    if c.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  raise \"Method not defined\"\
    \nend", "  arr = num.to_s.split('')\n  even = 0\n  odd = 0\n  arr.each do |e|\n\
    \    if e.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  [even, odd]\nend", "  [num.to_s.chars.select { |num| num.to_i.even?\
    \ }.count, num.to_s.chars.select { |num| num.to_i.odd? }.count]\nend", "  even\
    \ = num.to_s.gsub(/[^0-4]/, '').length\n  odd = num.to_s.gsub(/[^1-9]/, '').length\n\
    \  [even, odd]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each do\
    \ |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  return [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  # hash\
    \ = Hash.new(0)\n  num.to_s.chars.each do |char|\n    # hash[char.to_i] += 1\n\
    \    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even += 1\n    else\n      odd +=\
    \ 1\n    end\n  end\n  [even, odd]\nend", "  # Write your code here\nend", " \
    \ num.abs.to_s.chars.map { |d| d.to_i.even? ? 0 : 1 }.uniq.map do |d|\n    [d,\
    \ num.abs.to_s.chars.count(d.to_s)]\n  end.to_h\nend", "  num.to_s.split('').map(&:to_i).each_with_object([0,\
    \ 0]) do |digit, res|\n    digit.even? ? res[0] += 1 : res[1] += 1\n  end\nend",
  "  [num.abs.to_s.count('02468'), num.abs.to_s.count('13579')]\nend", "\teven_count\
    \ = 0\n\todd_count = 0\n\tnum.to_s.each_char do |num|\n\t\tif num.to_i % 2 ==\
    \ 0\n\t\t\teven_count += 1\n\t\telse\n\t\t\todd_count += 1\n\t\tend\n\tend\n\t\
    array = [even_count, odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n\
    \  odd = 0\n  num = num.abs\n  until num == 0\n    if num % 2 == 0\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n    num /= 10\n  end\n  [even, odd]\n\
    end", "  num.to_s.chars.each_with_object([0, 0]) do |num, result|\n    result[0]\
    \ += 1 if num.to_i.even?\n    result[1] += 1 if num.to_i.odd?\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
