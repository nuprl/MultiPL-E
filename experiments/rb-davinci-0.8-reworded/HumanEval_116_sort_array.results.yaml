language: rb
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|i| [i.to_s(2).count('1'),\
    \ i]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpiav5_7dx

    Started

    .

    Finished in 0.000464724 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2151.81 tests/s, 17214.52 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp75lw7i4u

    Started

    .

    Finished in 0.000468071 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2136.43 tests/s, 17091.42 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg3irztf6

    Started

    .

    Finished in 0.000453366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2205.72 tests/s, 17645.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp75lw7i4u

    Started

    .

    Finished in 0.000468071 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2136.43 tests/s, 17091.42 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg3irztf6

    Started

    .

    Finished in 0.000453366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2205.72 tests/s, 17645.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmph0jo4l5s

    Started

    .

    Finished in 0.000460354 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2172.24 tests/s, 17377.93 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp75lw7i4u

    Started

    .

    Finished in 0.000468071 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2136.43 tests/s, 17091.42 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  return [] if arr.empty?\n\
    \  return arr if arr.size == 1\n  arr.sort do |a, b|\n    if a < 0 || b < 0\n\
    \      if a < 0 && b < 0\n        a <=> b\n      elsif a < 0\n        -1\n   \
    \   else\n        1\n      end\n    else\n      a_ones = a.to_s(2).count('1')\n\
    \      b_ones = b.to_s(2).count('1')\n      if a_ones < b_ones\n        -1\n \
    \     elsif a_ones > b_ones\n        1\n      else\n        a <=> b\n      end\n\
    \    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3lqi99eq\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp3lqi99eq.rb:41:in `test_sort_array'\n\
    \     38:   def test_sort_array\n     39:     candidate = method(:sort_array)\n\
    \     40:     assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n\
    \  => 41:     assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5,\
    \ -6]))\n     42:     assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n     43:     assert_equal([], candidate.call([]))\n     44:     assert_equal([2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2,\
    \ 3, 4]))\n<[-4, -2, -6, -5, -3]> expected but was\n<[-6, -5, -4, -3, -2]>\n\n\
    diff:\n? [-6, -5, -4, -3, -2, -6, -5, -3]\n===============================================================================\n\
    \nFinished in 0.009442883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.90 tests/s, 211.80 assertions/s\n"
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort do |a, b|\n\
    \    [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1mzyky80

    Started

    .

    Finished in 0.000471131 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2122.55 tests/s, 16980.42 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num|\
    \ [num.to_s(2).count('1'), num] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp21w0d8jr

    Started

    .

    Finished in 0.00047199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.69 tests/s, 16949.51 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg3irztf6

    Started

    .

    Finished in 0.000453366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2205.72 tests/s, 17645.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |num|\
    \ [num.to_s(2).count('1'), num] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp21w0d8jr

    Started

    .

    Finished in 0.00047199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.69 tests/s, 16949.51 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  # return an array of\
    \ numbers\n  # given an array of numbers\n  # sort the array by the number of\
    \ ones\n  # in their binary representation\n  # then sort by decimal value\n \
    \ # return the sorted array\n  sorted_by_ones = arr.sort_by do |num|\n    # return\
    \ the number of ones in a binary form of a number\n    # as an integer\n    #\
    \ as an array\n    # because I'm a weirdo\n    num.to_s(2).chars.select do |char|\n\
    \      char == \"1\"\n    end.length\n  end\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpq_r16lsk.rb:28: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpq_r16lsk.rb:40: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |item|\
    \ [item.to_s(2).count('1'), item] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptnbqpr3s

    Started

    .

    Finished in 0.000453935 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2202.96 tests/s, 17623.67 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |e| [e.to_s(2).count('1'),\
    \ e] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj9mgavcb

    Started

    .

    Finished in 0.000466856 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2141.99 tests/s, 17135.90 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort { |a, b| [a.to_s(2).count('1'),\
    \ a] <=> [b.to_s(2).count('1'), b] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl92wpec3

    Started

    .

    Finished in 0.000474134 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2109.11 tests/s, 16872.87 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg3irztf6

    Started

    .

    Finished in 0.000453366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2205.72 tests/s, 17645.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by { |el| [el.to_s(2).count('1'),\
    \ el] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsivk5vmi

    Started

    .

    Finished in 0.000445885 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2242.73 tests/s, 17941.85 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|n| [n.to_s(2).count('1'),\
    \ n]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4pnn6opv

    Started

    .

    Finished in 0.000461919 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2164.88 tests/s, 17319.05 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort_by{|n| [n.to_s(2).count('1'),\
    \ n]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4pnn6opv

    Started

    .

    Finished in 0.000461919 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2164.88 tests/s, 17319.05 assertions/s

    '
  stdout: ''
  timestamp: 1659824161
