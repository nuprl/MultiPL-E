name: HumanEval_146_specialFilter
language: rb
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter.call([15,\
  \ -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\n\
  def specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["  nums.count { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }\nend", "  nums.count { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }\nend", "    count = 0\n    nums.each do |num|\n        if num > 10 and num.to_s[0].to_i.odd?\
    \ and num.to_s[-1].to_i.odd?\n            count += 1\n        end\n    end\n \
    \   count\nend", "  nums.select { |x| x > 10 && (x.to_s.length == 1 || x.to_s[0,1].to_i.odd?\
    \ && x.to_s[-1,1].to_i.odd?) }.length\nend\nputs specialFilter([15, -73, 14, -15])\n\
    puts specialFilter([33, -2, -3, 45, 21, 109])", "    nums.select { |n|\n     \
    \   if n > 10\n            temp = n.to_s\n            if temp[0].to_i % 2 != 0\
    \ && temp[-1].to_i % 2 != 0\n                true\n            else\n        \
    \        false\n            end\n        else\n            false\n        end\n\
    \    }.length\nend", end, "  nums.select { |num| num.to_s.length > 1 &&\n    \
    \                   num.to_s[0].to_i.odd? &&\n                       num.to_s[-1].to_i.odd?\
    \ &&\n                       num > 10 }.length\nend", "  matches = []\n  nums.each\
    \ do |x|\n    if x > 10\n      # convert to string\n      x = x.to_s\n      if\
    \ (x[0].to_i.odd? && x[-1].to_i.odd?)\n        matches << x\n      end\n    end\n\
    \  end\n  return matches.length\nend", "    nums.select { |i| (i > 10) && (i.digits.first\
    \ % 2 != 0) && (i.digits.last % 2 != 0) }.count\nend", "  nums.select{|n| n.between?(10,\
    \ Float::INFINITY) && (n % 10).odd? && n.to_s[0].to_i.odd?}.size\nend", "    i\
    \ = 0\n    count = 0\n    for x in nums\n        if x > 10 and isFirstAndLastOdd(x)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "\tnums.select{|num|\
    \ num > 10 && num.to_s.length > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?}.length\n\
    end", "  count = 0\n  nums.each do |num|\n    if (num > 10) && (num.digits.first.odd?)\
    \ && (num.digits.last.odd?)\n      count += 1\n    end\n  end\n  count\nend",
  "  # 1. get all numbers greater than 10\n  filtered = nums.select { |num| num >\
    \ 10 }\n  # 2. get all numbers where first and last digits are odd\n  filtered\
    \ = filtered.select do |num|\n    num_str = num.to_s\n    first_digit = num_str[0].to_i\n\
    \    last_digit = num_str[-1].to_i\n    first_digit.odd? && last_digit.odd?\n\
    \  end\n  # 3. return count of numbers\n  filtered.count\nend", "  counter = 0\n\
    \  nums.each do |num|\n    # check for the first digit\n    first_digit = num.to_s[0].to_i\n\
    \    last_digit = num.to_s[-1].to_i\n    if num > 10 && first_digit.odd? && last_digit.odd?\n\
    \      counter += 1\n    end\n  end\n  counter\nend", "    nums.select { |x| x.to_s.chars.first.to_i.odd?\
    \ && x.to_s.chars.last.to_i.odd? && x > 10 }.length\nend", "  nums.select{|x|\
    \ x > 10 && x.to_s.chars.first.to_i.odd? && x.to_s.chars.last.to_i.odd?}.count\n\
    end", "    count = 0\n    nums.each do |num|\n        if num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n            count += 1\n        end\n    end\n  \
    \  return count\nend", "  nums.select { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\
    \ }.count\nend", "\tnums.select { |x| x.to_s.split('').first.to_i.odd? && x.to_s.split('').last.to_i.odd?\
    \ && x > 10 }.count\nend", "  count = 0\n  nums.each do |num|\n    if num > 10\n\
    \      num = num.to_s\n      if (num[0].to_i % 2 != 0) && (num[-1].to_i % 2 !=\
    \ 0)\n        count += 1\n      end\n    end\n  end\n  count\nend", "  # your\
    \ code here\nend", "    nums.select { |num| num > 10 && num.digits.first.odd?\
    \ && num.digits.last.odd? }.count\nend", "  nums.select { |num| num > 10 && num.digits.first.odd?\
    \ && num.digits.last.odd? }.size\nend", "\nend", "  count = 0\n  nums.each do\
    \ |i|\n    count += 1 if i.abs > 10 && i.to_s[0].to_i.odd? && i.to_s[-1].to_i.odd?\n\
    \  end\n  count\nend", "  result = 0\n  nums.each do |num|\n    if num > 10 &&\
    \ num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n      result += 1\n    end\n\
    \  end\n  result\nend", "  nums.select { |num| num > 10 and odd_digit?(num) and\
    \ odd_digit?(num, :last) }.size\nend", "  # your code here\nend", "  # Your code\
    \ here\nend", "  nums.reduce(0) do |cnt, num|\n    if num > 10\n      cnt += 1\
    \ if num.digits.first.odd? && num.digits.last.odd?\n    end\n    cnt\n  end\n\
    end", "  nums.count { |num| num.abs > 10 && num.to_s.chars.first.to_i.odd? &&\
    \ num.to_s.chars.last.to_i.odd? }\nend", "  nums.select { |num| num > 10 && num.to_s.chars.first.to_i.odd?\
    \ && num.to_s.chars.last.to_i.odd? }.count\nend", "  count = 0\n  nums.each do\
    \ |num|\n    count += 1 if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \  end\n  count\nend", "  nums.count { |n| n > 10 && n.to_s.chars.first.to_i.odd?\
    \ && n.to_s.chars.last.to_i.odd? }\nend", "  nums.select { |num| num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? }.size\nend", "  nums.count do |n|\n    n > 10 &&\
    \ n.digits.first.odd? && n.digits.last.odd?\n  end\nend", "  # Your code here\n\
    end", "  nums.filter { |n| n > 10 and n.to_s.byteslice(0).to_i.odd? and n.to_s.byteslice(-1).to_i.odd?\
    \ }.size\nend", "  nums.select{|n| n.between?(10, 100) && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd?}.size\nend", "  nums.count { |x| (x > 10) && (x.to_s[0].to_i.odd?)\
    \ && (x.to_s[-1].to_i.odd?) }\nend", "  nums.select{|n| n > 10 && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd?}.size\nend", "  count = 0\n  nums.each do |num|\n  \
    \  count += 1 if num > 10 && odd_ending?(num)\n  end\n  count\nend", "\tnums.count{|num|\
    \ num.to_s.length > 1 && num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?}\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  count = 0\n  nums.each\
    \ do |n|\n    if n > 10 && (n % 10) % 2 != 0 && n.to_s[0].to_i % 2 != 0\n    \
    \  count += 1\n    end\n  end\n  return count\nend", "  nums.select{|num| num.to_s.size\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10}.size\nend",
  "    count = 0\n    nums.each do |num|\n        if num.digits.first.odd? && num.digits.last.odd?\
    \ && num > 10\n            count += 1\n        end\n    end\n    return count\n\
    end", "  result = []\n  nums.each do |n|\n    if n > 10\n      result << n\n \
    \   end\n  end\n  result.select! { |n| n.odd? && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\
    \ }\n  result.length\nend", "  result = []\n  nums.each do |n|\n    if n > 10\n\
    \      tmp = n.to_s.split('')\n      if tmp[0].to_i.odd? && tmp[-1].to_i.odd?\n\
    \        result << n\n      end\n    end\n  end\n  result.length\nend", "  nums.select\
    \ { |n| n > 10 && oddDigits?(n) }.count\nend", "  count = 0\n  nums.each do |number|\n\
    \    count += 1 if (number > 10) && ((number.to_s[0].to_i % 2 != 0) && (number.to_s[-1].to_i\
    \ % 2 != 0))\n  end\n  count\nend", "    nums.select { |num| num > 10 && (num.digits.first\
    \ % 2 == 1) && (num.digits.last % 2 == 1) }.length\nend", "  res = 0\n  nums.each\
    \ do |num|\n    if num > 10\n      str_num = num.to_s\n      res += 1 if str_num[0].to_i.odd?\
    \ && str_num[-1].to_i.odd?\n    end\n  end\n  res\nend", "\nend", "    # CODE\
    \ HERE\nend", "  count = 0\n  nums.each do |num|\n    if num > 10\n      if num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n        count += 1\n      end\n    end\n  end\n \
    \ return count\nend", "  count = 0\n  nums.each do |num|\n    if num > 10 && is_odd?(num)\
    \ && is_odd?(num % 10)\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  nums.each do |num|\n    if (num.to_s.length > 1)\n      if ((num.to_s[0]\
    \ % 2 != 0) && (num.to_s[-1] % 2 != 0) && (num > 10))\n        count += 1\n  \
    \    end\n    end\n  end\n  count\nend", "  nums.select{|i| \n    if i > 10\n\
    \      arr = i.to_s.split('')\n      arr[0].to_i.odd? && arr[-1].to_i.odd?\n \
    \   end\n  }.length\nend", "    count = 0\n    for i in nums\n        i = i.to_s\n\
    \        if i.length == 1 && i.to_i % 2 != 0\n            count += 1\n       \
    \ elsif i.length > 1 && i[0].to_i % 2 != 0 && i[-1].to_i % 2 != 0\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "  nums.count { |num|\
    \ num.digits.size > 1 && num.digits.first.odd? && num.digits.last.odd? && num\
    \ > 10 }\nend", "\tnums.select{|e| e > 10 && e.digits.first.odd? && e.digits.last.odd?}.size\n\
    end", "  nums.select { |e| e.abs > 10 && e.abs.to_s.match(/\\A[13579].*[13579]\\\
    z/) }.size\nend", "    count = 0\n    nums.each do |num|\n        if num.abs >\
    \ 10\n            if num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n       \
    \         count += 1\n            end\n        end\n    end\n    count\nend",
  "  nums.filter{|n| n > 10 && is_odd?(n) && is_odd?(n / 10 % 10)}.size\nend", " \
    \ nums.count { |num| (num > 10) && (num.to_s[0] % 2 != 0) && (num.to_s[-1] % 2\
    \ != 0) }\nend", "  nums.select{|e| e.abs > 10 && e.abs.to_s[0].to_i.odd? && e.abs.to_s[-1].to_i.odd?}.size\n\
    end", "  count = 0\n  nums.each do |n|\n    if (n > 10) && (n.to_s[0].to_i.odd?)\
    \ && (n.to_s[-1].to_i.odd?)\n      count += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  nums.each do |num|\n    if num > 10\n      str = num.to_s\n    \
    \  first_digit = str[0].to_i\n      last_digit = str[-1].to_i\n      if first_digit.odd?\
    \ && last_digit.odd?\n        count += 1\n      end\n    end\n  end\n  return\
    \ count\nend", "    nums.select do |x|\n        if x > 10\n            if x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd?\n                x\n            end\n        end\n \
    \   end.length\nend", "\t# code goes here \n\treturn nums.count { |number| (number.to_s[0].to_i.odd?\
    \ && number.to_s[-1].to_i.odd?) && number > 10 }\nend", "    count = 0\n    nums.each\
    \ do |num|\n        if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \            count += 1\n        end\n    end\n    count\nend", "  nums.count\
    \ { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd? }\nend", "  # TODO:\
    \ Implement\nend", "  # code here\nend", "\tnums.count{|x| x > 10 && x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd?}\nend", "  nums.select{|n| n>10 && n.digits.first.odd?\
    \ && n.digits.last.odd?}.size\nend", "\tnums.select { |num| num.digits.first.odd?\
    \ && num.digits.last.odd? && num > 10 }.count\nend", "    count = 0\n    nums.each\
    \ do |num|\n        if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    nums.each do |num|\n        count += 1 if (num.to_s.length > 1 && num\
    \ > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?)\n    end\n    count\n\
    end", "\tif nums.length <= 1\n\t\treturn 0\n\telse\n\t\ty = 0\n\t\tnums.each do\
    \ |x|\n\t\t\tif x > 10\n\t\t\t\tif x.to_s[0].to_i % 2 != 0 && x.to_s[-1].to_i\
    \ % 2 != 0\n\t\t\t\t\ty += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn y\n\t\
    end\nend", "    i = 0\n    while i < nums.length\n        if nums[i] > 10 && nums[i].to_s[0].to_i.odd?\
    \ && nums[i].to_s[-1].to_i.odd?\n            return i\n        end\n        i\
    \ += 1\n    end\n    return -1\nend", "  nums.select{|e| e > 10 && e.to_s[0] %\
    \ 2 != 0 && e.to_s[-1] % 2 != 0}.size\nend", "\t# your code goes here\nend", " \
    \ nums.select { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd? }.size\n\
    end", "  count = 0\n  nums.each do |num|\n    if num.digits.first.odd? && num.digits.last.odd?\
    \ && num > 10\n      count += 1\n    end\n  end\n  return count\nend", "  return\
    \ nums.count { |i| i.to_s.length > 1 && i.to_s[0] =~ /[13579]/ && i.to_s[-1] =~\
    \ /[13579]/ }\nend", "  nums.select{|x| x > 10 && x.to_s.reverse.chars.first.to_i.odd?\
    \ && x.to_s.chars.first.to_i.odd?}.count\nend", "\tarr = nums.find_all{|n| n.to_s.length\
    \ > 1 && n > 10 && n.to_s[0] % 2 != 0 && n.to_s[-1] % 2 != 0}\n\tarr.count\nend\n\
    puts specialFilter([15, -73, 14, -15])\nputs specialFilter([33, -2, -3, 45, 21,\
    \ 109])", "  nums.select{|i| i > 10 && i.digits.first.odd? && i.digits.last.odd?}.size\n\
    end", "  nums.count { |num| num.digits.first.odd? && num.digits.last.odd? && num\
    \ > 10 }\nend", "\nend", "  nums.select { |n| n > 10 && n.to_s.start_with?('1',\
    \ '3', '5', '7', '9') && n.to_s.end_with?('1', '3', '5', '7', '9') }.count\nend",
  "\tnums.count { |n| (n > 10) && (n.digits.first.odd?) && (n.digits.last.odd?) }\n\
    end", "  nums.count { |num| num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\
    \ }\nend", "    nums.select{|number|\n        number > 10 && number.digits.length\
    \ > 1 && number.digits[0].odd? && number.digits[-1].odd?\n    }.length\nend",
  "\tnums.select { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }.size\nend", "  nums.select { |num| num > 10 && num.to_s.first.to_i.odd? &&\
    \ num.to_s.last.to_i.odd? }.size\nend", "  nums.select{|x| x.to_s.length > 1 &&\
    \ x.to_s[0] =~ /[13579]/ && x.to_s[-1] =~ /[13579]/ && x > 10}.count\nend", "\n\
    end", "    return nums.length\nend\nputs specialFilter([15, -73, 14, -15])\nputs\
    \ specialFilter([33, -2, -3, 45, 21, 109])", "\tnums.select do |num|\n\t\tnum\
    \ > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\tend.count\nend",
  "  nums.select { |i| i > 10 and i.to_s.split(//).first.to_i.odd? and i.to_s.split(//).last.to_i.odd?\
    \ }.size\nend", "\t# TODO: Implement the specialFilter function\nend", "  nums.select{|num|\
    \ num > 10 && num.to_s.size > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?}.size\n\
    end", "  count = 0\n  for n in nums\n    first = n / 10\n    last = n % 10\n \
    \   if n > 10 and (first % 2 == 1 and last % 2 == 1)\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  # TODO\nend", "  nums.count { |num| num > 10\
    \ && (num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?) }\nend", "  total = 0\n\
    \  nums.each do |x|\n    next if x.to_s.length < 2\n    first = x.to_s[0].to_i\n\
    \    last = x.to_s[-1].to_i\n    total += 1 if x > 10 && first.odd? && last.odd?\n\
    \  end\n  total\nend", "  nums.map { |n| n.to_s }.select { |n| n.to_i.between?(10,\
    \ 100) }.reject { |n| n[0].to_i.even? || n[-1].to_i.even? }.count\nend", "  nums.select{|i|\
    \ (i.to_s.chars.first.to_i.odd? && i.to_s.chars.last.to_i.odd?) && i > 10}.count\n\
    end", "\tcount = 0\n\tif nums.size == 0\n\t\treturn 0\n\tend\n\tnums.each do |num|\n\
    \t\tif (num > 10) && (num.to_s[0].to_i.odd?) && (num.to_s[-1].to_i.odd?)\n\t\t\
    \tcount += 1\n\t\tend\n\tend\n\treturn count\nend", "    # Write your code here\n\
    end", "    count = 0\n    # iterate through the array\n    nums.each do |num|\n\
    \        # if a number's absolute value is greater than 10 and the first and last\
    \ digits are odd\n        if num.abs > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \            # increase count by 1\n            count += 1\n        end\n    end\n\
    \    # return count\n    return count\nend", "  # Insert your code here\nend",
  "  #nums.select do |x|\n  #  x.to_s.length > 1 && (x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd?)\
    \ && x > 10\n  #end.length\n  nums.select { |x| x.to_s.length > 1 && (x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd?) && x > 10 }.length\nend", "  # write your code here\n\
    end", "    # newArray = []\n    # nums.each do |num|\n    #     if num > 10\n\
    \    #         num = num.to_s\n    #         if num[0].to_i % 2 != 0 && num[-1].to_i\
    \ % 2 != 0\n    #             newArray << num\n    #         end\n    #     end\n\
    \    # end\n    # newArray.length\n    nums.select { |num| num.to_s.size > 1 &&\
    \ num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }.size\nend", "  out = 0\n \
    \ nums.each do |n|\n    out += 1 if n > 10 && n.to_s.chars.first.to_i.odd? &&\
    \ n.to_s.chars.last.to_i.odd?\n  end\n  out\nend", "  return nums.select { |x|\
    \ x > 10 && (x.to_s[0].to_i % 2 == 1) && (x.to_s[-1].to_i % 2 == 1) }.count\n\
    end", end, "    nums.count { |num| num.to_s.length > 1 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? && num > 10 }\nend\nputs specialFilter([15, -73, 14,\
    \ -15])\nputs specialFilter([33, -2, -3, 45, 21, 109])", "    counter = 0\n  \
    \  nums.each do |num|\n        if (num > 10) && (num.to_s[0].to_i % 2 != 0) &&\
    \ (num.to_s[-1].to_i % 2 != 0)\n            counter += 1\n        end\n    end\n\
    \    return counter\nend", "    nums.filter { |n| n > 10 && n.digits.first.odd?\
    \ && n.digits.last.odd? }.size\nend", "    # your code here\nend", "  nums.select\
    \ { |num| num > 10 && num % 2 == 1 && num.to_s[0].to_i % 2 == 1 && num.to_s[-1].to_i\
    \ % 2 == 1 }.count\nend", "    nums.select { |num| num > 10 and num.to_s[0].to_i.odd?\
    \ and num.to_s[-1].to_i.odd? }.length\nend", "  # counter = 0\n  # nums.each do\
    \ |num|\n  #   if num.digits.first.odd? && num.digits.last.odd? && num > 10\n\
    \  #     counter += 1\n  #   end\n  # end\n  # counter\n  # OR\n  nums.select\
    \ { |num| num.digits.first.odd? && num.digits.last.odd? && num > 10 }.length\n\
    end", "  return nums.count { |num| num.to_s.length > 1 && num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? }\nend", "\tcount = 0\n\tnums.each do |n|\n\t\tif\
    \ n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n\t\t\tcount += 1\n\t\t\
    end\n\tend\n\tcount\nend", "  total = 0\n  nums.each do |num|\n    digits = num.abs.to_s.split('')\n\
    \    if num > 10 && digits.first.to_i.odd? && digits.last.to_i.odd?\n      total\
    \ += 1\n    end\n  end\n  total\nend", "\tnums.select { |n| n > 10 && n.digits.size\
    \ > 1 && n.digits.first.odd? && n.digits.last.odd? }.size\nend", "  # TODO implement\
    \ this method\nend", "  nums.select { |e| e.abs > 10 && e.to_s[0].to_i.odd? &&\
    \ e.to_s[-1].to_i.odd? }.size\nend", "  # your code here\nend", "  # TODO\nend",
  "    nums.select{|num| num > 10 && num.digits.first.odd? && num.digits.last.odd?}.length\n\
    end", "    count = 0\n    nums.each do |num|\n        if num > 10\n          \
    \  if num.digits.first.odd? && num.digits.last.odd?\n                count +=\
    \ 1\n            end\n        end\n    end\n    return count\nend", "\tcount =\
    \ 0\n\tnums.each do |num|\n\t\tif num.to_s.size > 1\n\t\t\tif (num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?) && num > 10\n\t\t\t\tcount += 1\n\t\t\tend\n\t\t\
    end\n\tend\n\tcount\nend", "    firstDigit = nums.select { |num| num > 10 && num.digits.size\
    \ > 1 && num.digits.first.odd? && num.digits.last.odd? }\n    return firstDigit.size\n\
    end", end, "\tsum = 0\n\tnums.each do |num|\n\t\tsum += 1 if ((num.to_s.split('').first.to_i.odd?)\
    \ && (num.to_s.split('').last.to_i.odd?) && (num > 10))\n\tend\n\tsum\nend", " \
    \   nums.select { |i| i > 10 && i.digits.first.odd? && i.digits.last.odd? }.length\n\
    end\nputs \"Exercise 5\"\nputs specialFilter([15, -73, 14, -15])\nputs specialFilter([33,\
    \ -2, -3, 45, 21, 109])\nputs", "  nums.select { |num| num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? }.size\nend", "  nums.select { |num| (num.to_s.chars.last.to_i\
    \ + num.to_s.chars.first.to_i) % 2 == 1 && num > 10 }.count\nend", "\tindex =\
    \ 0\n\tnums.each do |x|\n\t\tif x > 10 && x.to_s[0].to_i % 2 != 0 && x.to_s[-1].to_i\
    \ % 2 != 0\n\t\t\tindex += 1\n\t\tend\n\tend\n\treturn index\nend", "\nend", " \
    \ # ...\nend", "\tcount = 0\n\tnums.each do |number|\n\t\tcount += 1 if (number\
    \ > 10) && ((number.to_s[0].to_i % 2 == 1) && (number.to_s[-1].to_i % 2 == 1))\n\
    \tend\n\tcount\nend", "  nums.count { |num| (num > 10) && (num.digits.first.odd?)\
    \ && (num.digits.last.odd?) }\nend", "    nums.select { |num| num.to_s =~ /^[13579]\\\
    d*[13579]$/ }.length\nend", "    nums.select{|x| x.to_s.size > 1 && x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd? && x > 10}.size\nend", "    counter = 0\n    nums.each\
    \ do |n|\n        first = n.to_s[0].to_i\n        last = n.to_s[-1].to_i\n   \
    \     if n > 10 && first.odd? && last.odd?\n            counter += 1\n       \
    \ end\n    end\n    return counter\nend", "  if nums.is_a?(Array)\n    # Array\
    \ of values that match\n    arr = []\n    nums.each do |n|\n      if n.is_a?(Integer)\
    \ && n > 10\n        n = n.to_s\n        if n[0].to_i.odd? && n[-1].to_i.odd?\n\
    \          arr << n\n        end\n      end\n    end\n    return arr.length\n\
    \  else\n    return \"Needs an array as input\"\n  end\nend", "    # Your code\
    \ here\n    greater_than_10 = nums.select { |num| num > 10 }\n    first_and_last_odd\
    \ = greater_than_10.select { |num| num.digits.first.odd? && num.digits.last.odd?\
    \ }\n    first_and_last_odd.length\nend", "  nums.select { |i| i > 10 && i.to_s[0].to_i.odd?\
    \ && i.to_s[-1].to_i.odd? }.size\nend", "  # Your code here\nend", "  # Code goes\
    \ here!\nend", "  nums.select { |i| i.to_s.length > 1 && i.to_s[0] =~ /[13579]/\
    \ && i.to_s[-1] =~ /[13579]/ && i > 10 }.length\nend", "  nums.select{|n| n >\
    \ 10 and n.to_s[0].to_i.odd? and n.to_s[-1].to_i.odd?}.size\nend", "    nums.select\
    \ { |num| num > 10 && num.to_s.split('').first.to_i.odd? && num.to_s.split('').last.to_i.odd?\
    \ }.length\nend", "  nums.count { |num| num.to_s.length > 1 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? && num > 10 }\nend", "    nums.select{|num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10}.count\n\
    end", "\tnums.count { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\
    \ }\nend", "\tnums.select { |n| n > 10 && n.to_s.length >= 2 && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd? }.length\nend", "  result = 0\n  nums.each do |num|\n\
    \    if num > 10\n      nums = num.to_s.split('')\n      if nums[0].to_i.odd?\
    \ and nums[-1].to_i.odd?\n        result += 1\n      end\n    end\n  end\n  result\n\
    end", "  nums.select{|x| x.to_s.length > 1 && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd?\
    \ && x > 10}.count\nend", "\tnums.select { |num| (num > 10) && (num.to_s.split('').first.to_i\
    \ % 2 != 0) && (num.to_s.split('').last.to_i % 2 != 0) }.count\nend", "\t#puts\
    \ nums.inspect\n\tresult = 0\n\tnums.each do |number|\n\t\t#puts number.inspect\n\
    \t\tif number.abs > 10\n\t\t\tif number.abs.to_s[0].to_i.odd?\n\t\t\t\tif number.abs.to_s[-1].to_i.odd?\n\
    \t\t\t\t\tresult += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end", "  nums.select{|i| i.to_s.length > 1 && i.to_s[0].to_i.odd? && i.to_s[-1].to_i.odd?\
    \ && i > 10}.length\nend", "  nums.select { |n| n.to_s.size > 1 && n > 10 && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd? }.size\nend", "    odd_nums = []\n    nums.each do |num|\n\
    \        if num.to_s.length == 1\n            num_arr = num.to_s.split('')\n \
    \           num = num_arr[0].to_i\n        else\n            num_arr = num.to_s.split('')\n\
    \            num = [num_arr[0].to_i, num_arr[-1].to_i]\n        end\n        if\
    \ num > 10 && num[0] % 2 != 0 && num[-1] % 2 != 0\n            odd_nums << num\n\
    \        end\n    end\n    return odd_nums.length\nend", "    count = 0\n    nums.each\
    \ do |n|\n        if n.abs > 10 && n.abs.digits.first.odd? && n.abs.digits.last.odd?\n\
    \            count += 1\n        end\n    end\n    count\nend", "    nums.count\
    \ { |x| (x > 10) && (x.to_s.length > 1) && (x.to_s[0].to_i.odd?) && (x.to_s[-1].to_i.odd?)\
    \ }\nend", "    nums.select { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }.count\nend", "  nums.select { |x| (x > 10) && ((x / 10) % 2 != 0) && (x %\
    \ 2 != 0) }.length\nend", "  new_nums = nums.select do |num|\n    if num > 10\n\
    \      num.to_s.chars.first.to_i.odd? && num.to_s.chars.last.to_i.odd?\n    end\n\
    \  end\n  new_nums.count\nend", "\t# your code here\n\tnums.select {|num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10}.count\n\
    end\nputs specialFilter([15, -73, 14, -15])\nputs specialFilter([33, -2, -3, 45,\
    \ 21, 109])", "  #Your Code goes here...\n  sum = 0\n  nums.each { |x| \n    if\
    \ x > 10 && (x%10).odd? && (x/10**(x.to_s.length-1)).odd?\n      sum = sum + 1\n\
    \    end\n  }\n  sum\nend", "  nums.select { |num| num > 10 && (num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?) }.count\nend", "    count = 0\n    for num in nums\n\
    \        first, last = num.abs.to_s[0].to_i, num.abs.to_s[-1].to_i\n        count\
    \ += 1 if num > 10 && first.odd? && last.odd?\n    end\n    count\nend", "   \
    \ new_nums = []\n    nums.each do |i|\n        if i > 10 && i.to_s[0].to_i.odd?\
    \ && i.to_s[-1].to_i.odd?\n            new_nums << i\n        end\n    end\n \
    \   return new_nums.length\nend", "  nums.select{|x| x>10 && x.digits.first.odd?\
    \ && x.digits.last.odd?}.count\nend", "\tcount = 0\n\tnums.each do |num|\n\t\t\
    count += 1 if num > 10 && (num.to_s[0].to_i).odd? && (num.to_s[-1].to_i).odd?\n\
    \tend\n\tcount\nend", "\tnums.select{|num| num > 10 && num.to_s[0].to_i.odd? &&\
    \ num.to_s[-1].to_i.odd?}.count\nend", "  nums.select { |num| num.to_s.size >\
    \ 1 && (num > 10) && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }.size\n\
    end\nputs \"specialFilter\"\nputs specialFilter([15, -73, 14, -15]) == 1\nputs\
    \ specialFilter([33, -2, -3, 45, 21, 109]) == 2\nputs specialFilter([23, -33,\
    \ -1, -19, 14, -30]) == 1\nputs specialFilter([3, -1, -17, 33, -2, -3, 45, 21,\
    \ 109]) == 3\nputs specialFilter([1, -1, -17, 33, -2, -3, 45, 21, 109]) == 1\n\
    puts \"---------------------------\"", "  nums.select { |num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10 }.length\n\
    end", "  count = 0\n  nums.each do |num|\n    count += 1 if num > 10 && (num %\
    \ 10).odd? && (num / 100).odd?\n  end\n  count\nend", "  nums.select{|num| num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd? && num > 10}.count\nend", "  # add your solution here\n\
    end", "  nums.select { |num|\n    num.digits.first.odd? && num.digits.last.odd?\
    \ && num > 10\n  }.count\nend", "    nums.select { |num| num.abs > 10 && num.abs.digits.first.odd?\
    \ && num.abs.digits.last.odd? }.size\nend", "    nums.select { |num| num > 10\
    \ && num.digits.first.odd? && num.digits.last.odd? }.count\nend", "\treturn nums.count{|n|\
    \ n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?}\nend", "    # your solution\
    \ here\nend", "  nums.select { |x| x > 10 && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd?\
    \ }.size\nend", "  nums.reduce(0) do |count, num|\n    # Positive, two digit number\n\
    \    if num > 10 && num.to_s.length == 2 && (num / 10) % 2 != 0 && num % 2 !=\
    \ 0\n      count += 1\n    end\n    count\n  end\nend", "  nums.select{|num| num\
    \ > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?}.count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
