name: HumanEval_146_specialFilter
language: rb
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter.call([15,\
  \ -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\n\
  def specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["  nums.count { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }\nend", "  nums.count { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd?\
    \ }\nend", "    count = 0\n    nums.each do |num|\n        if num > 10 and num.to_s[0].to_i.odd?\
    \ and num.to_s[-1].to_i.odd?\n            count += 1\n        end\n    end\n \
    \   count\nend", "  nums.select { |x| x > 10 && (x.to_s.length == 1 || x.to_s[0,1].to_i.odd?\
    \ && x.to_s[-1,1].to_i.odd?) }.length\nend\nputs specialFilter([15, -73, 14, -15])\n\
    puts specialFilter([33, -2, -3, 45, 21, 109])", "    nums.select { |n|\n     \
    \   if n > 10\n            temp = n.to_s\n            if temp[0].to_i % 2 != 0\
    \ && temp[-1].to_i % 2 != 0\n                true\n            else\n        \
    \        false\n            end\n        else\n            false\n        end\n\
    \    }.length\nend", end, "  nums.select { |num| num.to_s.length > 1 &&\n    \
    \                   num.to_s[0].to_i.odd? &&\n                       num.to_s[-1].to_i.odd?\
    \ &&\n                       num > 10 }.length\nend", "  matches = []\n  nums.each\
    \ do |x|\n    if x > 10\n      # convert to string\n      x = x.to_s\n      if\
    \ (x[0].to_i.odd? && x[-1].to_i.odd?)\n        matches << x\n      end\n    end\n\
    \  end\n  return matches.length\nend", "    nums.select { |i| (i > 10) && (i.digits.first\
    \ % 2 != 0) && (i.digits.last % 2 != 0) }.count\nend", "  nums.select{|n| n.between?(10,\
    \ Float::INFINITY) && (n % 10).odd? && n.to_s[0].to_i.odd?}.size\nend", "    i\
    \ = 0\n    count = 0\n    for x in nums\n        if x > 10 and isFirstAndLastOdd(x)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "\tnums.select{|num|\
    \ num > 10 && num.to_s.length > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?}.length\n\
    end", "  count = 0\n  nums.each do |num|\n    if (num > 10) && (num.digits.first.odd?)\
    \ && (num.digits.last.odd?)\n      count += 1\n    end\n  end\n  count\nend",
  "  # 1. get all numbers greater than 10\n  filtered = nums.select { |num| num >\
    \ 10 }\n  # 2. get all numbers where first and last digits are odd\n  filtered\
    \ = filtered.select do |num|\n    num_str = num.to_s\n    first_digit = num_str[0].to_i\n\
    \    last_digit = num_str[-1].to_i\n    first_digit.odd? && last_digit.odd?\n\
    \  end\n  # 3. return count of numbers\n  filtered.count\nend", "  counter = 0\n\
    \  nums.each do |num|\n    # check for the first digit\n    first_digit = num.to_s[0].to_i\n\
    \    last_digit = num.to_s[-1].to_i\n    if num > 10 && first_digit.odd? && last_digit.odd?\n\
    \      counter += 1\n    end\n  end\n  counter\nend", "    nums.select { |x| x.to_s.chars.first.to_i.odd?\
    \ && x.to_s.chars.last.to_i.odd? && x > 10 }.length\nend", "  nums.select{|x|\
    \ x > 10 && x.to_s.chars.first.to_i.odd? && x.to_s.chars.last.to_i.odd?}.count\n\
    end", "    count = 0\n    nums.each do |num|\n        if num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n            count += 1\n        end\n    end\n  \
    \  return count\nend", "  nums.select { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\
    \ }.count\nend", "\tnums.select { |x| x.to_s.split('').first.to_i.odd? && x.to_s.split('').last.to_i.odd?\
    \ && x > 10 }.count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
