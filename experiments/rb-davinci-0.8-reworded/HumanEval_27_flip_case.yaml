name: HumanEval_27_flip_case
language: rb
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n\
  \    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"\
  ))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights\
  \ have violent ends\"))\n  end\nend\n"
completions: ["  string.chars.map { |char| char == char.upcase ? char.downcase : char.upcase\
    \ }.join\nend", "  string.swapcase\nend", "\tstring.swapcase\nend", "  lower_case\
    \ = string.downcase\n  upper_case = string.upcase\n  output = \"\"\n  string.length.times\
    \ do |index|\n    if string[index] == lower_case[index]\n      output << upper_case[index]\n\
    \    else\n      output << lower_case[index]\n    end\n  end\n  output\nend",
  "  string.swapcase\nend", "  string.chars.map do |character|\n    if character.match(/[a-z]/)\n\
    \      character.upcase\n    elsif character.match(/[A-Z]/)\n      character.downcase\n\
    \    else\n      character\n    end\n  end.join\nend", "  chars = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  chars.join\nend",
  "  chars = string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end\n  chars.join\nend", "  res = string.split(\"\").map{|x|x==x.upcase ? x.downcase\
    \ : x.upcase}\n  res.join\nend", "  new_string = \"\"\n  string.chars.each do\
    \ |c|\n    if c == c.upcase\n      new_string << c.downcase\n    else\n      new_string\
    \ << c.upcase\n    end\n  end\n  new_string\nend", "  flipped_case = \"\"\n  string.split(\"\
    \").each do |character|\n    if character == character.upcase\n      flipped_case\
    \ += character.downcase\n    else\n      flipped_case += character.upcase\n  \
    \  end\n  end\n  flipped_case\nend", "  string.chars.map do |i|\n    if i == i.upcase\n\
    \      i.downcase\n    else\n      i.upcase\n    end\n  end.join\nend", "  string.chars.map\
    \ { |char| char == char.upcase ? char.downcase : char.upcase }.join('')\nend\n\
    puts 'flip_case: ' + (flip_case(\"Hello\") == \"hELLO\").to_s", "  result = \"\
    \"\n  string.each_char do |c|\n    if c.ord >= \"a\".ord && c.ord <= \"z\".ord\n\
    \      result += c.upcase\n    elsif c.ord >= \"A\".ord && c.ord <= \"Z\".ord\n\
    \      result += c.downcase\n    else\n      result += c\n    end\n  end\n  result\n\
    end\nputs flip_case(\"Hello\")\nputs flip_case(\"Bye\")\nputs flip_case(\"rAceCaR\"\
    )", "  string.chars.map{|char| char == char.upcase ? char.downcase : char.upcase}.join\n\
    end", "\tcharacters = string.chars.map do |c|\n\t\tif c =~ /[a-z]/\n\t\t\tc.upcase\n\
    \t\telsif c =~ /[A-Z]/\n\t\t\tc.downcase\n\t\telse\n\t\t\tc\n\t\tend\n\tend\n\t\
    characters.join\nend", "    flipped = \"\"\n    string.split(\"\").each do |char|\n\
    \        if (\"a\"..\"z\").include?(char)\n            flipped += char.upcase\n\
    \        elsif (\"A\"..\"Z\").include?(char)\n            flipped += char.downcase\n\
    \        else\n            flipped += char\n        end\n    end\n    flipped\n\
    end", "  string.swapcase\nend", "  new_string = \"\"\n  string.each_char do |c|\n\
    \    if c == c.upcase\n      new_string << c.downcase\n    else\n      new_string\
    \ << c.upcase\n    end\n  end\n  new_string\nend", "  # Your code here\nend",
  "  if string.class == String\n    string.swapcase\n  else\n    string\n  end\nend",
  "  #result = ''\n  #string.each_char do |char|\n  #  if char =~ /[a-z]/\n  #   \
    \ result << char.upcase\n  #  elsif char =~ /[A-Z]/\n  #    result << char.downcase\n\
    \  #  else\n  #    result << char\n  #  end\n  #end\n  #result\n  string.swapcase\n\
    end", "  string.swapcase\nend", "  counter = 0\n  if string[counter] == string[counter].upcase\n\
    \    return string.downcase\n  elsif string[counter] == string[counter].downcase\n\
    \    return string.upcase\n  end\nend", "  new_string = \"\"\n  string.chars.each\
    \ do |char|\n    new_string << if char.ord >= 65 && char.ord <= 90\n         \
    \           char.downcase\n                  elsif char.ord >= 97 && char.ord\
    \ <= 122\n                    char.upcase\n                  else\n          \
    \          char\n                  end\n  end\n  new_string\nend", "  string.swapcase\n\
    end", "  str_arr = string.split(\"\")\n  new_arr = []\n  str_arr.each do |letter|\n\
    \    if letter == letter.upcase\n      new_arr << letter.downcase\n    else\n\
    \      new_arr << letter.upcase\n    end\n  end\n  return new_arr.join(\"\")\n\
    end", "  new_str = \"\"\n  string.each_char do |char|\n    if char.upcase == char\n\
    \      new_str << char.downcase\n    else\n      new_str << char.upcase\n    end\n\
    \  end\n  new_str\nend", "  string.swapcase\nend", "  array = string.split(\"\"\
    )\n  result = []\n  array.each do |character|\n    if character == character.upcase\n\
    \      result << character.downcase\n    else\n      result << character.upcase\n\
    \    end\n  end\n  result.join(\"\")\nend", "  ans = []\n  string.each_char do\
    \ |ch|\n    if ch.match(/[a-z]/)\n      ans << ch.upcase\n    elsif ch.match(/[A-Z]/)\n\
    \      ans << ch.downcase\n    else\n      ans << ch\n    end\n  end\n  ans.join\n\
    end", "  string.split(\"\").map { |letter|\n    if letter.ord >= 65 && letter.ord\
    \ <= 90\n      letter.downcase\n    elsif letter.ord >= 97 && letter.ord <= 122\n\
    \      letter.upcase\n    else\n      letter\n    end\n  }.join(\"\")\nend", " \
    \ flipped_array = []\n  string.split(\"\").each do |character|\n    if character\
    \ == character.upcase\n      flipped_array << character.downcase\n    else\n \
    \     flipped_array << character.upcase\n    end\n  end\n  flipped_array.join(\"\
    \")\nend", "  string.swapcase\nend", "  final = []\n  string.split(\"\").each\
    \ do |i|\n    if i == i.upcase\n      final << i.downcase\n    else\n      final\
    \ << i.upcase\n    end\n  end\n  final.join(\"\")\nend", "    new_string = \"\"\
    \n    string.each_char do |letter|\n        if letter == letter.upcase\n     \
    \       new_string += letter.downcase\n        else\n            new_string +=\
    \ letter.upcase\n        end\n    end\n    new_string\nend", "\tstring.chars.map\
    \ do |char|\n\t\tchar.downcase == char ? char.upcase : char.downcase\n\tend.join\n\
    end", "  flipped_string = ''\n  string.split('').each do |x|\n    if x == x.upcase\n\
    \      flipped_string += x.downcase\n    else\n      flipped_string += x.upcase\n\
    \    end\n  end\n  flipped_string\nend", "  result = \"\"\n  string.chars.each\
    \ do |char|\n    if char == char.upcase\n      result << char.downcase\n    else\n\
    \      result << char.upcase\n    end\n  end\n  result\nend", "  flipped_case\
    \ = string.split(\"\").map do |letter|\n    if letter.downcase == letter\n   \
    \   letter.upcase\n    else\n      letter.downcase\n    end\n  end\n  flipped_case.join(\"\
    \")\nend", "  string.chars.map do |char|\n    char.upcase! ? char.downcase! :\
    \ char.upcase!\n  end.join\nend", "  return string.swapcase\nend", "  string.split(\"\
    \").map{|letter| letter.downcase == letter ? letter.upcase : letter.downcase}.join(\"\
    \")\nend", "  result = string.chars.map do |ch|\n    if ch =~ /[a-z]/\n      ch.upcase\n\
    \    elsif ch =~ /[A-Z]/\n      ch.downcase\n    else\n      ch\n    end\n  end\n\
    \  result.join\nend", "  string.each_char.map do |char|\n    if char == char.upcase\n\
    \      char.downcase\n    else\n      char.upcase\n    end\n  end.join\nend",
  "  flipped_string = \"\"\n  string.each_char do |char|\n    if char.upcase == char\n\
    \      flipped_string << char.downcase\n    else\n      flipped_string << char.upcase\n\
    \    end\n  end\n  flipped_string\nend", "  new_string = \"\"\n  string.each_char\
    \ do |char|\n    if char.downcase == char\n      new_string << char.upcase\n \
    \   else\n      new_string << char.downcase\n    end\n  end\n  new_string\nend",
  "  string.chars.map { |char| char.swapcase }.join\nend", "  flipped_string = ''\n\
    \  string.each_char do |c|\n    if c == c.upcase\n      flipped_string << c.downcase\n\
    \    else\n      flipped_string << c.upcase\n    end\n  end\n  flipped_string\n\
    end", "  result = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      result += char.downcase\n    else\n      result += char.upcase\n    end\n\
    \  end\n  result\nend", "  result = \"\"\n  string.each_char do |char|\n    if\
    \ char == char.upcase\n      result += char.downcase\n    else\n      result +=\
    \ char.upcase\n    end\n  end\n  result\nend", "  string.swapcase\nend", "  new_string\
    \ = ''\n  string.each_char do |char|\n    if char.match(/[[:lower:]]/)\n     \
    \ new_string << char.upcase\n    elsif char.match(/[[:upper:]]/)\n      new_string\
    \ << char.downcase\n    else\n      new_string << char\n    end\n  end\n  new_string\n\
    end", "    string.chars.map{|char| char == char.upcase ? char.downcase : char.upcase}.join\n\
    end", "  string.swapcase\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "    flipped = \"\"\n    string.each_char do |letter|\n        if letter\
    \ == letter.upcase\n            flipped += letter.downcase\n        else\n   \
    \         flipped += letter.upcase\n        end\n    end\n    flipped\nend", " \
    \ index = 0\n  while index < string.length\n    if string[index] == string[index].upcase\n\
    \      string[index] = string[index].downcase\n    else\n      string[index] =\
    \ string[index].upcase\n    end\n    index += 1\n  end\n  string\nend", "    return\
    \ string.chars.map { |char| char.match(/[a-z]/) ? char.upcase : char.downcase\
    \ }.join\nend", "  string.swapcase\nend", "\tstring.chars.map { |char| char.downcase\
    \ == char ? char.upcase : char.downcase }.join\nend", "  string.swapcase\nend",
  "  flipped_string = \"\"\n  string.chars.each do |ch|\n    if ch == ch.upcase\n\
    \      flipped_string << ch.downcase\n    else\n      flipped_string << ch.upcase\n\
    \    end\n  end\n  flipped_string\nend", "    # string.chars.map { |char| char\
    \ == char.upcase ? char.downcase : char.upcase }.join\n    # string.swapcase\n\
    \    answer = ''\n    string.each_char do |char|\n        if char.match(/[a-z]/)\n\
    \            answer += char.upcase\n        elsif char.match(/[A-Z]/)\n      \
    \      answer += char.downcase\n        else\n            answer += char\n   \
    \     end\n    end\n    answer\nend", "  flipped_string = \"\"\n  # uppercase_chars\
    \ = (\"A\"..\"Z\").to_a\n  # lowercase_chars = (\"a\"..\"z\").to_a\n  # (0..string.length\
    \ - 1).each do |i|\n  #   if uppercase_chars.include?(string[i])\n  #     flipped_string\
    \ << string[i].downcase\n  #   elsif lowercase_chars.include?(string[i])\n  #\
    \     flipped_string << string[i].upcase\n  #   else\n  #     flipped_string <<\
    \ string[i]\n  #   end\n  # end\n  # flipped_string\n  string.chars.map { |char|\
    \ char == char.upcase ? char.downcase : char.upcase }.join\nend", "  new_array\
    \ = []\n  string.split(\"\").each do |x|\n    if x == x.upcase\n      new_array\
    \ << x.downcase\n    else\n      new_array << x.upcase\n    end\n  end\n  new_array.join(\"\
    \")\nend\nputs flip_case(\"Hello\")", "  string.chars.map { |char| char.match(/[a-z]/)\
    \ ? char.upcase : char.downcase }.join\nend", "  flipped_array = []\n  string.split(\"\
    \").each do |letter|\n    if letter.upcase == letter\n      flipped_array << letter.downcase\n\
    \    else\n      flipped_array << letter.upcase\n    end\n  end\n  flipped_array.join(\"\
    \")\nend", "  string.swapcase\nend", "  #TODO\nend", "  string.chars.map { |c|\
    \ c.swapcase }.join\nend", "  string.chars.map do |char|\n    if char == char.upcase\n\
    \      char.downcase\n    else\n      char.upcase\n    end\n  end.join\nend",
  "  string.chars.map do |char|\n    if char == char.upcase\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end.join\nend", "  string.chars.map {\
    \ |c| c.match(/[a-z]/) ? c.upcase : c.downcase }.join\nend", "  flip_array = []\n\
    \  string.each_char do |char|\n    if (\"a\"..\"z\").to_a.include?(char)\n   \
    \   flip_array << char.upcase\n    elsif (\"A\"..\"Z\").to_a.include?(char)\n\
    \      flip_array << char.downcase\n    else\n      flip_array << char\n    end\n\
    \  end\n  flip_array.join\nend", "  string.swapcase\nend", "\tstring.swapcase\n\
    end", "  flipped_string = string.gsub(/[a-z]/, &:upcase).gsub(/[A-Z]/, &:downcase)\n\
    \  flipped_string\nend", "  string.chars.map do |char|\n    char.upcase == char\
    \ ? char.downcase : char.upcase\n  end.join\nend", "  string.swapcase\nend", " \
    \   string.chars.map { |char| char.downcase == char ? char.upcase : char.downcase\
    \ }.join\nend", "  string.swapcase\nend", "  new_string = \"\"\n  string.each_char\
    \ do |char|\n    char == char.upcase ? new_string << char.downcase : new_string\
    \ << char.upcase\n  end\n  new_string\nend", "  output = \"\"\n  string.split(\"\
    \").each do |char|\n    if char == char.upcase\n      output << char.downcase\n\
    \    else\n      output << char.upcase\n    end\n  end\n  output\nend", "  string.swapcase\n\
    end", "\tstring.swapcase\nend", "  a = string.split(\"\")\n  a.map! do |x|\n \
    \   if x == x.upcase\n      x.downcase\n    else\n      x.upcase\n    end\n  end\n\
    \  a.join(\"\")\nend", "  string.split(\"\").map { |char| char.match(/[a-z]/)\
    \ ? char.upcase : char.downcase }.join\nend", "  string.each_char.with_object(\"\
    \") do |char, result|\n    result << (char =~ /[a-z]/ ? char.upcase : char.downcase)\n\
    \  end\nend", "  to_flip = ('a'..'z').to_a + ('A'..'Z').to_a\n  result = ''\n\
    \  string.each_char do |char|\n    if to_flip.include?(char)\n      result <<\
    \ to_flip[to_flip.index(char) + to_flip.size / 2]\n    else\n      result << char\n\
    \    end\n  end\n  result\nend", "  new_string = ''\n  string.each_char do |char|\n\
    \    if char.upcase == char\n      new_string << char.downcase\n    else\n   \
    \   new_string << char.upcase\n    end\n  end\n  new_string\nend", "  string.swapcase\n\
    end", "  new_array = []\n  string.chars.each do |char|\n    if char.match(/[a-z]/)\n\
    \      new_array << char.upcase\n    elsif char.match(/[A-Z]/)\n      new_array\
    \ << char.downcase\n    else\n      new_array << char\n    end\n  end\n  new_array.join\n\
    end", "  # yay for one liners\n  string.swapcase\nend", "  letters = string.chars.map\
    \ do |character|\n    if character == character.upcase\n      character.downcase\n\
    \    else\n      character.upcase\n    end\n  end\n  letters.join\nend", "  string.swapcase\n\
    end", "  characters = string.chars.map do |c|\n    if c =~ /[a-z]/\n      c.upcase\n\
    \    elsif c =~ /[A-Z]/\n      c.downcase\n    else\n      c\n    end\n  end\n\
    \  characters.join\nend", "  string.swapcase\nend", "  upcase = ('A'..'Z').to_a\n\
    \  downcase = ('a'..'z').to_a\n  string.split('').map { |char| upcase.include?(char)\
    \ ? char.downcase : char.upcase }.join('')\nend", "  string.split(\"\").map {\
    \ |char| char == char.upcase ? char.downcase : char.upcase }.join(\"\")\nend",
  "\tnew_string = \"\"\n\tstring.each_char do |char|\n\t\tif char.ord >= 65 && char.ord\
    \ <= 90\n\t\t\tnew_string += (char.ord + 32).chr\n\t\telsif char.ord >= 97 &&\
    \ char.ord <= 122\n\t\t\tnew_string += (char.ord - 32).chr\n\t\telse\n\t\t\tnew_string\
    \ += char\n\t\tend\n\tend\n\treturn new_string\nend", "  answer = string.split(\"\
    \").map do |char|\n    if char == char.upcase\n      char.downcase\n    else\n\
    \      char.upcase\n    end\n  end\n  answer.join(\"\")\nend", "  string.split(\"\
    \").map { |char| char == char.upcase ? char.downcase : char.upcase }.join(\"\"\
    )\nend", "  string.swapcase\nend", "  arr = string.split(\"\")\n  arr.map! do\
    \ |char|\n    char == char.upcase ? char.downcase : char.upcase\n  end\n  arr.join(\"\
    \")\nend", "  string.swapcase\nend", "  string.swapcase\nend", "  chars = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  chars.join\nend",
  "  chars = string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end\n  chars.join\nend", "  new_string = \"\"\n  string.each_char do |x|\n\
    \    if x.downcase == x\n      new_string << x.upcase\n    else\n      new_string\
    \ << x.downcase\n    end\n  end\n  new_string\nend", "  flip_string = \"\"\n \
    \ string.each_char do |char|\n    if char.ord < 97\n      flip_string += char.downcase\n\
    \    else\n      flip_string += char.upcase\n    end\n  end\n  flip_string\nend",
  "  return nil if string.nil?\n  string.chars.map{|char| char == char.upcase ? char.downcase\
    \ : char.upcase}.join\nend", "  new_string = \"\"\n  string.each_char do |ch|\n\
    \    if ch == ch.upcase\n      new_string << ch.downcase\n    else\n      new_string\
    \ << ch.upcase\n    end\n  end\n  new_string\nend", "  #your code here\nend",
  "  case_string = \"\"\n  string.split(\"\").each do |char|\n    if char == char.upcase\n\
    \      case_string << char.downcase\n    else\n      case_string << char.upcase\n\
    \    end\n  end\n  case_string\nend", "\t# string.chars.map { |c| c == c.upcase\
    \ ? c.downcase : c.upcase }.join\n\tstring.swapcase\nend\nputs flip_case.call(\"\
    Hello\")", "  # one-liner:\n  # string.swapcase\n  # split into characters\n \
    \ letters = string.split('')\n  # loop through letters and map them\n  letters.map\
    \ do |letter|\n    # letter downcase if letter is uppercase\n    if letter ==\
    \ letter.upcase\n      letter.downcase\n    # letter upcase if letter is lowercase\n\
    \    else\n      letter.upcase\n    end\n  end\n  # join the letters back together\n\
    \  letters.join\nend", "  string.split(\"\").map do |char|\n    if (\"a\"..\"\
    z\").include?(char)\n      char.upcase\n    elsif (\"A\"..\"Z\").include?(char)\n\
    \      char.downcase\n    else\n      char\n    end\n  end.join(\"\")\nend", " \
    \ chars = string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end\n  chars.join\nend", "  new_string = string.chars.map do |character|\n\
    \    character == character.upcase ? character.downcase : character.upcase\n \
    \ end\n  new_string.join(\"\")\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  string.each_char.map { |char| char.downcase\
    \ == char ? char.upcase : char.downcase }.join\nend", "  string.swapcase\nend",
  "  # return string.swapcase\n  # string.gsub(/[a-z]/, &:upcase).gsub(/[A-Z]/, &:downcase)\n\
    \  string.chars.map { |letter| letter =~ /[a-z]/ ? letter.upcase : letter.downcase\
    \ }.join\nend", "  letters = string.chars.map do |char|\n    if char =~ /[a-z]/\n\
    \      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n\
    \      char\n    end\n  end\n  letters.join\nend", "\tstring.swapcase\nend", " \
    \ string.chars.map do |char|\n    if char == char.upcase\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end.join\nend", "  flipped_string = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  flipped_string.join\n\
    end", "  characters = string.chars.map do |char|\n    if char =~ /[a-z]/\n   \
    \   char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n  \
    \    char\n    end\n  end\n  characters.join\nend", "  letters = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  letters.join\nend",
  "  new_string = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      new_string << char.downcase\n    else\n      new_string << char.upcase\n\
    \    end\n  end\n  new_string\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "  new_string = string.split(\"\")\n  new_string.map! do |char|\n    if\
    \ char == char.upcase\n      char.downcase\n    else\n      char.upcase\n    end\n\
    \  end\n  new_string.join(\"\")\nend", "  array = string.split(\"\")\n  array.map!\
    \ do |x|\n    if x.ord.between?(65, 90)\n      x.downcase\n    elsif x.ord.between?(97,\
    \ 122)\n      x.upcase\n    else\n      x\n    end\n  end\n  array.join(\"\")\n\
    end", "  string.swapcase\nend", "  chars = string.chars.map do |char|\n    if\
    \ char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  chars.join\nend", "\tnew_string = \"\"\
    \n\t# for each character in the string\n\tstring.each_char do |c|\n\t\t# if the\
    \ character is downcase then upcase it\n\t\tif c == c.downcase\n\t\t\tnew_string\
    \ << c.upcase\n\t\t# else it is upcase, so downcase it\n\t\telse\n\t\t\tnew_string\
    \ << c.downcase\n\t\tend\n\tend\n\tnew_string\nend", "  string.chars.map do |char|\n\
    \    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end.join\nend", "  new_string = \"\"\n  string.each_char\
    \ do |x|\n    if x == x.upcase\n      new_string += x.downcase\n    else\n   \
    \   new_string += x.upcase\n    end\n  end\n  new_string\nend", "  string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end.join\nend\np flip_case.call(\"\
    Hello\")", "  # flip_case.call(\"Hello\")\n  downcase = (string.downcase)\n  upcase\
    \ = (string.upcase)\n  if downcase == string\n    upcase\n  else\n    downcase\n\
    \  end\nend", "  string.split(\"\").map { |c| c == c.upcase ? c.downcase : c.upcase\
    \ }.join(\"\")\nend", "  flip_chars = string.chars.map do |char|\n    if char\
    \ =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  flip_chars.join\nend", "  string.chars.map\
    \ { |c| c == c.upcase ? c.downcase : c.upcase }.join\nend", "  string.split(\"\
    \").map { |c| c == c.upcase ? c.downcase : c.upcase }.join(\"\")\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  characters = string.chars.map do |c|\n    if\
    \ c =~ /[a-z]/\n      c.upcase\n    elsif c =~ /[A-Z]/\n      c.downcase\n   \
    \ else\n      c\n    end\n  end\n  characters.join\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  # CODE HERE\nend", "  characters = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  characters.join\n\
    end", "  string.swapcase\nend", "\tflipped_string = \"\"\n\tstring.each_char do\
    \ |char|\n\t\tchar == char.upcase ? flipped_string << char.downcase : flipped_string\
    \ << char.upcase\n\tend\n\treturn flipped_string\nend", "  string.chars.map{|x|\
    \ x == x.upcase ? x.downcase : x.upcase}.join\nend\nputs flip_case.call(\"Hello\"\
    )", "\tnew_string = string.split(\"\")\n\tnew_string.each do |char|\n\t\tif char.capitalize\
    \ == char\n\t\t\tchar.downcase!\n\t\telse\n\t\t\tchar.upcase!\n\t\tend\n\tend\n\
    \tnew_string.join\nend", "  # TODO: implement me\nend", "  array = string.split(\"\
    \")\n  array.map! do |letter|\n    if (letter == letter.upcase)\n      letter.downcase\n\
    \    else\n      letter.upcase\n    end\n  end\n  array.join(\"\")\nend", "  result\
    \ = \"\"\n  string.each_char do |c|\n    if c.upcase == c\n      result += c.downcase\n\
    \    else\n      result += c.upcase\n    end\n  end\n  result\nend", "  string.swapcase\n\
    end", "\t#separate the characters from the string\n\tchars = string.split(\"\"\
    )\n\t#go through each character and if it's uppercase, make it lowercase\n\tchars.each\
    \ do |char|\n\t\tif char == char.upcase\n\t\t\tchar.downcase!\n\t\telse\n\t\t\t\
    char.upcase!\n\t\tend\n\tend\n\t#return the characters as a string\n\tchars.join(\"\
    \")\nend", "  if string == string.upcase\n    string.downcase\n  else\n    string.upcase\n\
    \  end\nend", "  string.swapcase\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  flipped_array = []\n  string.chars.each do\
    \ |char|\n    if char.upcase == char\n      flipped_array << char.downcase\n \
    \   else\n      flipped_array << char.upcase\n    end\n  end\n  flipped_array.join\n\
    end", "  new_string = \"\"\n  string.each_char do |c|\n    if c == c.upcase\n\
    \      new_string << c.downcase\n    else\n      new_string << c.upcase\n    end\n\
    \  end\n  new_string\nend", "  characters = string.chars.map do |character|\n\
    \    if character =~ /[a-z]/\n      character.upcase\n    elsif character =~ /[A-Z]/\n\
    \      character.downcase\n    else\n      character\n    end\n  end\n  characters.join\n\
    end", "  # call flip_case.call instead\nend", "  string.split(\"\").map do |x|\n\
    \    if x.match(/[a-z]/)\n      x.upcase\n    elsif x.match(/[A-Z]/)\n      x.downcase\n\
    \    else\n      x\n    end\n  end.join\nend", "  string.chars.map do |c|\n  \
    \  c == c.upcase ? c.downcase : c.upcase\n  end.join\nend", "  # Write your code\
    \ here\nend", "  string.chars.map{|letter| letter.match(/[a-z]/) ? letter.upcase\
    \ : letter.downcase}.join\nend", "  string.chars.map do |char|\n    if char =~\
    \ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end.join\nend", "  if string =~ /[a-z]/\n  \
    \  string.upcase\n  elsif string =~ /[A-Z]/\n    string.downcase\n  else\n   \
    \ string\n  end\nend", "  string.swapcase\nend", "  string.chars.map { |char|\
    \ char == char.upcase ? char.downcase : char.upcase }.join\nend", "  array = string.chars\n\
    \  flipped_array = array.map do |letter|\n    if letter == letter.upcase\n   \
    \   letter.downcase\n    else\n      letter.upcase\n    end\n  end\n  flipped_array.join\n\
    end", "  new_str = string.chars.map { |ch| ch == ch.upcase ? ch.downcase : ch.upcase\
    \ }\n  new_str.join('')\nend", "  new_str = \"\"\n  string.split(\"\").each do\
    \ |letter|\n    if letter.match(/[a-z]/)\n      new_str << letter.upcase\n   \
    \ elsif letter.match(/[A-Z]/)\n      new_str << letter.downcase\n    else\n  \
    \    new_str << letter\n    end\n  end\n  new_str\nend", "  string.split(\"\"\
    ).map { |x| x == x.upcase ? x.downcase : x.upcase }.join(\"\")\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "\tstring.swapcase\nend", "  new_string = string.split(\"\
    \").map do |character|\n    if character == character.upcase\n      character.downcase\n\
    \    else\n      character.upcase\n    end\n  end\n  new_string.join(\"\")\nend",
  "  string.chars.map { |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif\
    \ char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n  }.join\n\
    end", "  string.swapcase\nend", "  characters = string.chars.map do |char|\n \
    \   if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  characters.join\nend", "  string.split(\"\
    \").map { |char| char.upcase == char ? char.downcase : char.upcase }.join(\"\"\
    )\nend", "  characters = string.chars.map do |char|\n    if char =~ /[a-z]/\n\
    \      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n\
    \      char\n    end\n  end\n  characters.join\nend", "  new_string = string.chars.map\
    \ do |char|\n    if char == char.upcase\n      char.downcase\n    else\n     \
    \ char.upcase\n    end\n  end\n  new_string.join\nend", "  flipped_string = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  flipped_string.join\n\
    end", "  flip_string = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      flip_string << char.downcase\n    else\n      flip_string << char.upcase\n\
    \    end\n  end\n  flip_string\nend", "  string.chars.map { |letter| letter ==\
    \ letter.upcase ? letter.downcase : letter.upcase }.join\nend", "  result = \"\
    \"\n  string.each_char do |char|\n    if char == char.upcase\n      result +=\
    \ char.downcase\n    else\n      result += char.upcase\n    end\n  end\n  result\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
