name: HumanEval_27_flip_case
language: rb
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n\
  \    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"\
  ))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights\
  \ have violent ends\"))\n  end\nend\n"
completions: ["  string.chars.map { |char| char == char.upcase ? char.downcase : char.upcase\
    \ }.join\nend", "  string.swapcase\nend", "\tstring.swapcase\nend", "  lower_case\
    \ = string.downcase\n  upper_case = string.upcase\n  output = \"\"\n  string.length.times\
    \ do |index|\n    if string[index] == lower_case[index]\n      output << upper_case[index]\n\
    \    else\n      output << lower_case[index]\n    end\n  end\n  output\nend",
  "  string.swapcase\nend", "  string.chars.map do |character|\n    if character.match(/[a-z]/)\n\
    \      character.upcase\n    elsif character.match(/[A-Z]/)\n      character.downcase\n\
    \    else\n      character\n    end\n  end.join\nend", "  chars = string.chars.map\
    \ do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  chars.join\nend",
  "  chars = string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end\n  chars.join\nend", "  res = string.split(\"\").map{|x|x==x.upcase ? x.downcase\
    \ : x.upcase}\n  res.join\nend", "  new_string = \"\"\n  string.chars.each do\
    \ |c|\n    if c == c.upcase\n      new_string << c.downcase\n    else\n      new_string\
    \ << c.upcase\n    end\n  end\n  new_string\nend", "  flipped_case = \"\"\n  string.split(\"\
    \").each do |character|\n    if character == character.upcase\n      flipped_case\
    \ += character.downcase\n    else\n      flipped_case += character.upcase\n  \
    \  end\n  end\n  flipped_case\nend", "  string.chars.map do |i|\n    if i == i.upcase\n\
    \      i.downcase\n    else\n      i.upcase\n    end\n  end.join\nend", "  string.chars.map\
    \ { |char| char == char.upcase ? char.downcase : char.upcase }.join('')\nend\n\
    puts 'flip_case: ' + (flip_case(\"Hello\") == \"hELLO\").to_s", "  result = \"\
    \"\n  string.each_char do |c|\n    if c.ord >= \"a\".ord && c.ord <= \"z\".ord\n\
    \      result += c.upcase\n    elsif c.ord >= \"A\".ord && c.ord <= \"Z\".ord\n\
    \      result += c.downcase\n    else\n      result += c\n    end\n  end\n  result\n\
    end\nputs flip_case(\"Hello\")\nputs flip_case(\"Bye\")\nputs flip_case(\"rAceCaR\"\
    )", "  string.chars.map{|char| char == char.upcase ? char.downcase : char.upcase}.join\n\
    end", "\tcharacters = string.chars.map do |c|\n\t\tif c =~ /[a-z]/\n\t\t\tc.upcase\n\
    \t\telsif c =~ /[A-Z]/\n\t\t\tc.downcase\n\t\telse\n\t\t\tc\n\t\tend\n\tend\n\t\
    characters.join\nend", "    flipped = \"\"\n    string.split(\"\").each do |char|\n\
    \        if (\"a\"..\"z\").include?(char)\n            flipped += char.upcase\n\
    \        elsif (\"A\"..\"Z\").include?(char)\n            flipped += char.downcase\n\
    \        else\n            flipped += char\n        end\n    end\n    flipped\n\
    end", "  string.swapcase\nend", "  new_string = \"\"\n  string.each_char do |c|\n\
    \    if c == c.upcase\n      new_string << c.downcase\n    else\n      new_string\
    \ << c.upcase\n    end\n  end\n  new_string\nend", "  # Your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
