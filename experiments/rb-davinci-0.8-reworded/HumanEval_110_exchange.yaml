name: HumanEval_110_exchange
language: rb
prompt: "# In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 an array of only even numbers.\n# There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n# If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n# all the elements of\
  \ lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n\
  # >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange.call([1,\
  \ 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will\
  \ be non-empty.\ndef exchange(lst1, lst2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n\
  \    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1,\
  \ 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4],\
  \ [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1,\
  \ 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n   \
  \ assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"\
  NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"\
  YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n"
completions: ["  even1 = lst1.all? { |num| num.even? }\n  even2 = lst2.all? { |num|\
    \ num.even? }\n  uneven1 = lst1.any? { |num| num.odd? }\n  uneven2 = lst2.any?\
    \ { |num| num.odd? }\n  if even1 || even2\n    \"YES\"\n  elsif uneven1 && uneven2\n\
    \    \"NO\"\n  else\n    \"YES\"\n  end\nend\nputs exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\nputs exchange([1, 2, 3, 4], [1, 5, 3, 4])\nputs exchange([1, 5, 3,\
    \ 4], [1, 2, 3, 4])\nputs exchange([5, 1, 3, 4], [1, 2, 3, 4])", end, "  odds_in_first\
    \ = 0\n  odds_in_second = 0\n  lst1.each do |num|\n    odds_in_first += 1 if num.odd?\n\
    \  end\n  lst2.each do |num|\n    odds_in_second += 1 if num.odd?\n  end\n  if\
    \ odds_in_first == odds_in_second\n    \"YES\"\n  else\n    \"NO\"\n  end\nend",
  "  counter = 0\n  (0...lst1.length).each do |index|\n    break if lst1[index].even?\n\
    \    counter += 1 if lst2[index].even?\n  end\n  counter == lst1.length ? 'NO'\
    \ : 'YES'\nend", "  lst1.map! do |elm|\n    return 'YES' if elm.even?\n    lst2.index(elm.even?\
    \ ? elm : elm + 1) ||\n      lst2.index(elm.even? ? elm : elm - 1) ?\n      'YES'\
    \ : 'NO'\n  end\n  lst1.first\nend", "  for item1 in lst1\n    for item2 in lst2\n\
    \      if item1 % 2 == 1 and item2 % 2 == 0\n        return \"YES\"\n      end\n\
    \    end\n  end\n  return \"NO\"\nend", "  if (lst1.all? { |num| num.even? } ||\
    \ lst2.all? { |num| num.even? })\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "  lst1.any? { |e| e.odd? } && lst2.any? { |e| e.even? } ? \"YES\"\
    \ : \"NO\"\nend", "  # YOUR CODE HERE\nend", "  # Write your code here\nend",
  "  return \"YES\" if lst1.all? { |x| x.even? }\n  i = 0\n  while i < lst1.length\n\
    \    if lst1[i].odd?\n      j = 0\n      while j < lst2.length\n        if lst2[j].even?\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          break\n        end\n\
    \        j += 1\n      end\n    end\n    i += 1\n  end\n  return \"YES\" if lst1.all?\
    \ { |x| x.even? }\n  \"NO\"\nend", "  lst1.each_with_index do |val, i|\n    if\
    \ val.odd?\n      exchange_lst = lst2.select { |n| n.even? }\n      if exchange_lst.empty?\n\
    \        return \"NO\"\n      else\n        lst1[i] = exchange_lst.pop\n     \
    \ end\n    end\n  end\n  \"YES\"\nend", "  lst1_even = lst1.select { |num| num.even?\
    \ }\n  lst2_even = lst2.select { |num| num.even? }\n  lst1_odd = lst1.select {\
    \ |num| num.odd? }\n  lst2_odd = lst2.select { |num| num.odd? }\n  if lst1_even.size\
    \ + lst2_odd.size == lst1.size\n    \"YES\"\n  elsif lst2_even.size + lst1_odd.size\
    \ == lst2.size\n    \"YES\"\n  else\n    \"NO\"\n  end\nend", "  odd_lst1 = lst1.select\
    \ { |num| num.odd? }\n  even_lst2 = lst2.select { |num| num.even? }\n  if odd_lst1.size\
    \ == even_lst2.size\n    'YES'\n  else\n    'NO'\n  end\nend", "\tlst1.each_with_index\
    \ do |a,i|\n\t\tlst2.each_with_index do |b,j|\n\t\t\tif (a+b)%2==0\n\t\t\t\tlst1[i]=b\n\
    \t\t\t\tlst2[j]=a\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tp lst1,lst2\n\t\
    lst1.all?{|x| x%2==0}?\"YES\":\"NO\"\nend", "    # To do ...\n    # There are\
    \ three outcomes, YES, NO, and MAYBE.\n    # Let's assume the result is NO.\n\
    \    # If we find that lst1 has an even number, then the result\n    # is MAYBE.\n\
    \    # If we find that lst2 has an odd number, then the result\n    # is still\
    \ NO.\n    # If we find that both lst1 and lst2 have odd numbers, then\n    #\
    \ the result is still NO.\n    # Thus, we only need to check if lst1 has an even\
    \ number.\n    # If lst1 has an even number, then the result is MAYBE.\n    #\
    \ Otherwise, the result is NO.\n    for i in 0...lst1.length\n        if lst1[i]\
    \ % 2 == 0\n            return \"MAYBE\"\n        end\n    end\n    return \"\
    NO\"\nend", "  if (lst1.inject(:+) + lst2.inject(:+)) % 2 == 0\n    return \"\
    YES\"\n  else\n    return \"NO\"\n  end\nend", "  lst1.each do |x|\n    if x.odd?\n\
    \      lst2.each do |y|\n        if y.even?\n          lst1[lst1.index(x)] = y\n\
    \          lst2[lst2.index(y)] = x\n          return \"YES\"\n        end\n  \
    \    end\n    end\n  end\n  \"NO\"\nend", "  lst1_has_even = lst1.any? { |n| n.even?\
    \ }\n  lst2_has_even = lst2.any? { |n| n.even? }\n  return 'YES' if lst1_has_even\
    \ && lst2_has_even\n  'NO'\nend", "  has_even = false\n  lst1.each do |l1|\n \
    \   lst2.each do |l2|\n      lst1_new = lst1.dup\n      lst2_new = lst2.dup\n\
    \      lst1_new[lst1_new.index(l1)] = l2\n      lst2_new[lst2_new.index(l2)] =\
    \ l1\n      has_even = true if lst1_new.all? { |l| l.even? }\n    end\n  end\n\
    \  has_even ? 'YES' : 'NO'\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
