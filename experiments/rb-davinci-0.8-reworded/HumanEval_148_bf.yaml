name: HumanEval_148_bf
language: rb
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return an array containing all planets whose\
  \ orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ bf.call(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"\
  Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n\
  \    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"\
  Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\"\
  , \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
  \ \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\"\
  , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"\
  Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([],\
  \ candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\"\
  , \"Makemake\"))\n  end\nend\n"
completions: ["    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    # planets.index(planet1)\n    # planets.index(planet2)\n\
    \    # planets.each do |planet|\n    #     if planets.index(planet) == planets.index(planet1)\n\
    \    #         until planets.index(planet) == planets.index(planet2)\n    #  \
    \           planets.push(planet)\n    #         end\n    #     end\n    # end\n\
    \    if planets.index(planet1) < planets.index(planet2)\n        return planets[planets.index(planet1)..planets.index(planet2)]\n\
    \    elsif planets.index(planet1) > planets.index(planet2)\n        return planets[planets.index(planet2)..planets.index(planet1)]\n\
    \    else\n        return []\n    end\nend", "  planet1 = planet1.downcase\n \
    \ planet2 = planet2.downcase\n  planets = {\"mercury\" => true, \"venus\" => true,\
    \ \"earth\" => true, \"mars\" => true,\n    \"jupiter\" => true, \"saturn\" =>\
    \ true, \"uranus\" => true, \"neptune\" => true}\n  if !planets[planet1] || !planets[planet2]\n\
    \    return []\n  end\n  p1_flag = false\n  p2_flag = false\n  planets_sort =\
    \ []\n  planets.each do |k, v|\n    if k == planet1\n      p1_flag = true\n  \
    \  end\n    if k == planet2\n      p2_flag = true\n    end\n    if p1_flag\n \
    \     planets_sort << k\n    end\n    if p2_flag\n      break\n    end\n  end\n\
    \  planets_sort.reverse!\n  planets_sort\nend", "\nend", "  planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  if planets.include?(planet1)\
    \ && planets.include?(planet2)\n    planets = planets[planets.index(planet1)..planets.index(planet2)]\n\
    \    planets.length == 1 ? planets[0] : planets[1..-1]\n  else\n    planets.include?(planet1)\
    \ ? planet1 : planets.include?(planet2) ? planet2 : []\n  end\nend", "  planets\
    \ = %w(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  planet1_index\
    \ = planets.index(planet1)\n  planet2_index = planets.index(planet2)\n  if planet1_index.nil?\
    \ || planet2_index.nil?\n    []\n  elsif planet1_index > planet2_index\n    planets[planet2_index\
    \ + 1..planet1_index - 1]\n  else\n    planets[planet1_index + 1..planet2_index\
    \ - 1]\n  end\nend", "\tplanets = {\n\t\t\"Mercury\" => \"inner\",\n\t\t\"Venus\"\
    \ => \"inner\",\n\t\t\"Earth\" => \"inner\",\n\t\t\"Mars\" => \"inner\",\n\t\t\
    \"Jupiter\" => \"outer\",\n\t\t\"Saturn\" => \"outer\",\n\t\t\"Uranus\" => \"\
    outer\",\n\t\t\"Neptune\" => \"outer\"\n\t}\n\t\n\tif planets[planet1] != planets[planet2]\n\
    \t\treturn \"Jupiter\"\n\telsif planets[planet1] == planets[planet2]\n\t\tplanets.select{|key,\
    \ value| key != planet1 && key != planet2}\n\tend\nend", "    planets = %w[Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune]\n    idx1 = planets.index(planet1)\n\
    \    idx2 = planets.index(planet2)\n    planets[idx1..idx2]\nend", "  planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n  planet1_index = planets.index(planet1)\n  planet2_index\
    \ = planets.index(planet2)\n  if planet1_index && planet2_index\n    planets.slice(planet1_index\
    \ + 1..planet2_index - 1)\n  else\n    []\n  end\nend", "  planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n  position1 = planets.index(planet1)\n  position2 = planets.index(planet2)\n\
    \  planets.values_at(*(position1 + 1)..(position2 - 1))\nend", "\tplanets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n\tif planets.include?(planet1) && planets.include?(planet2)\n\t\
    \tsun_order = planets.index(planet1) < planets.index(planet2) ? planets.slice(planets.index(planet1)..planets.index(planet2))\
    \ : planets.slice(planets.index(planet2)..planets.index(planet1))\n\t\tif sun_order[0]\
    \ == planet1\n\t\t\treturn sun_order.slice(1..sun_order.length)\n\t\telse\n\t\t\
    \treturn sun_order.slice(0..sun_order.length-2)\n\t\tend\n\tend\n\t[]\nend", "\t\
    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n\t\n\tif planets.include?(planet1) && planets.include?(planet2)\n\
    \t\tplanets.delete(planet1)\n\t\tplanets.delete(planet2)\n\t\treturn planets.sort\n\
    \telse\n\t\treturn []\n\tend\nend", "\tplanets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\tplanets.index(planet1)\
    \ && planets.index(planet2) ? planets[planets.index(planet1)..planets.index(planet2)]\
    \ : \"No such planet\"\nend\nputs bf(\"Jupiter\", \"Neptune\")\nputs bf(\"Earth\"\
    , \"Mercury\")\nputs bf(\"Mercury\", \"Uranus\")\nputs bf(\"Mercury\", \"Neptune\"\
    )\nputs bf(\"Neptune\", \"Mercury\")\nputs bf(\"Neptune\", \"Earth\")\nputs bf(\"\
    Jupiter\", \"Saturn\")", "    puts \"Please enter planet #1:\"\n    planet1 =\
    \ gets.chomp\n    puts \"Please enter planet #2:\"\n    planet2 = gets.chomp\n\
    \    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index\
    \ = planets.index(planet2)\n    if planet1_index.nil? || planet2_index.nil?\n\
    \        return []\n    elsif planet1_index < planet2_index\n        planets_between\
    \ = planets[planet1_index..planet2_index]\n        return planets_between[1..-2]\n\
    \    else\n        planets_between = planets[planet2_index..planet1_index]\n \
    \       return planets_between[1..-2]\n    end\nend", "    return [] if !['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].include?(planet1)\
    \ || !['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'].include?(planet2)\n\
    \    arr = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune']\n    start_index = arr.index(planet1)\n    end_index = arr.index(planet2)\n\
    \    p arr[start_index...end_index]\nend", "  planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  index1\
    \ = planets.index(planet1)\n  index2 = planets.index(planet2)\n  if index1 !=\
    \ nil && index2 != nil\n    if index1 > index2\n      return planets[index2+1..index1-1]\n\
    \    else\n      return planets[index1+1..index2-1]\n    end\n  else\n    return\
    \ []\n  end\nend\nputs bf(\"Mercury\", \"Uranus\")", "    planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    p1 = planets.index(planet1)\n    p2 = planets.index(planet2)\n    p1 =\
    \ p1 == nil ? -1 : p1\n    p2 = p2 == nil ? -1 : p2\n    return [] if p1 == -1\
    \ || p2 == -1\n    if p1 > p2 \n        p1, p2 = p2, p1\n    end\n    planets[p1+1..p2-1]\n\
    end", "  planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"\
    Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n\
    \  ]\n  start_index = planets.index(planet1)\n  end_index = planets.index(planet2)\n\
    \  p planets[start_index..end_index]\nend", "  planets = [[\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  \
    \ [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ],\n   [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ],\n   [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n   [\"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"],\n   [\"Saturn\", \"Uranus\", \"Neptune\"\
    ],\n   [\"Uranus\", \"Neptune\"],\n   [\"Neptune\"]]\n  return [] if !planets.flatten.include?(planet1)\
    \ || !planets.flatten.include?(planet2)\n  planets.index(planets.find { |planet|\
    \ planet.include?(planet1) }) < planets.index(planets.find { |planet| planet.include?(planet2)\
    \ }) ? planets[planets.index(planets.find { |planet| planet.include?(planet1)\
    \ })..planets.index(planets.find { |planet| planet.include?(planet2) })].flatten.uniq\
    \ - [planet1, planet2] : planets[planets.index(planets.find { |planet| planet.include?(planet2)\
    \ })..planets.index(planets.find { |planet| planet.include?(planet1) })].flatten.uniq\
    \ - [planet1, planet2]\nend", "  planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  index1 = planets.index(planet1)\n\
    \  index2 = planets.index(planet2)\n  if index1.nil? || index2.nil?\n    puts\
    \ \"invalid planet name\"\n  elsif index1 > index2\n    return planets[index2+1..index1]\n\
    \  else\n    return planets[index1+1..index2]\n  end\nend", "    planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n    result = []\n    if planets.include?(planet1) && planets.include?(planet2)\n\
    \        start_index = planets.index(planet1)\n        end_index = planets.index(planet2)\n\
    \        if start_index < end_index\n            result = planets[start_index\
    \ + 1..end_index]\n        else\n            result = planets[end_index + 1..start_index].reverse\n\
    \        end\n    end\n    result\nend\nputs bf(\"Mercury\", \"Uranus\")"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
