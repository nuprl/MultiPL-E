name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n\
  # Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr,\
  \ k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  arr[0...k].inject(0) { |sum, item| item > 9 ? sum + 0 : sum + item\
    \ }\nend", "  arr[0...k].map { |x| (x / 100.0).ceil }.reduce(:+)\nend", "  sum\
    \ = 0\n  i = 0\n  while i < k\n    sum += arr[i] if arr[i] < 100\n    i += 1\n\
    \  end\n  sum\nend", "  arr[0..k].map { |num| num.to_s.length > 2 ? 0 : num }.reduce(:+)\n\
    end", "  # your solution here\nend", "  # your solution\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  # sum_elements = 0\n  # arr[0..k].each\
    \ do |num|\n  #   if num < 10\n  #     sum_elements += num\n  #   elsif num <\
    \ 100\n  #     sum_elements += num\n  #   end\n  # end\n  # sum_elements\n  arr[0..k].select\
    \ { |num| num < 10 || num < 100 }.sum\nend", "  # Solve this!\nend", "  # CODE\
    \ GOES HERE\nend", "  arr[0...k].reduce(0) { |sum, n| n < 100 ? sum + n : sum\
    \ }\nend", "    count = 0\n    sum = 0\n    while count < k\n        count +=\
    \ 1\n        sum += arr[count] if arr[count] < 100\n    end\n    sum\nend", " \
    \ # Your code here\nend", "  arr.map { |x| x.to_s.size <= 2 ? x : 0 }[0...k].sum\n\
    end", "  # code here\nend", "  sum = 0\n  i = 0\n  while i < k && i < arr.length\n\
    \    # if arr[i] >= 0 && arr[i] < 10\n    #   sum += arr[i]\n    # elsif arr[i]\
    \ >= 10 && arr[i] < 100\n    #   sum += arr[i]\n    # end\n    sum += arr[i] if\
    \ arr[i] < 100\n    i += 1\n  end\n  sum\nend", "  arr.count { |el| el.digits.size\
    \ <= 2 }.inject(:+)\nend", "  total = 0\n  (0...k).each do |index|\n    total\
    \ += arr[index] if (0..99).include?(arr[index])\n  end\n  total\nend", "  # your\
    \ code goes here\nend", "  # \nend\nputs 'Problem #1: ' + add_elements.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4).to_s", "  sum = 0\n  count = 0\n  while count\
    \ < k\n    sum += arr[count] if arr[count] < 100\n    count += 1\n  end\n  sum\n\
    end", "  arr.take(k).reduce(0) { |sum, i| i > 99 ? sum : sum + i }\nend", "  two_digit_numbers\
    \ = []\n  arr.first(k).each do |element|\n    two_digit_numbers << element if\
    \ element.to_s.length <= 2\n  end\n  two_digit_numbers.reduce(:+)\nend", "  arr.map(&:to_s).map\
    \ { |x| x.size > 2 ? 0 : x.to_i }.slice(0, k).reduce(:+)\nend", "  arr.first(k).map\
    \ { |num| num.digits.size > 2 ? 0 : num }.sum\nend", "  result = 0\n  i = 0\n\
    \  while i < k && i < arr.length\n    result += arr[i] if arr[i] <= 99\n    i\
    \ += 1\n  end\n  result\nend", "  sum = 0\n  k.times do |x|\n    sum += arr[x]\
    \ if arr[x] < 100\n  end\n  sum\nend", "  arr = arr.select { |num| num.digits.size\
    \ <= 2 }\n  arr[0...k].sum\nend", '  return 0 if k == 0', "  number_with_at_most_two_digits\
    \ = 0\n  arr.each_with_index do |number, index|\n    if number.to_s.length <=\
    \ 2\n      number_with_at_most_two_digits += number\n    end\n    break if k -\
    \ 1 == index\n  end\n  number_with_at_most_two_digits\nend", "  # Your Code Here\n\
    end", "  sum = 0\n  arr.each_with_index do |e, i|\n    sum += e if i < k && e\
    \ < 100\n  end\n  sum\nend", "  # raise NotImplementedError.new \"TODO: add_elements\"\
    \n  arr.first(k).select { |e| e.to_s.length <= 2 }.reduce(:+)\nend", "  arr.slice(0,\
    \ k).reduce(0) do |sum, element|\n    if element >= 100\n      sum + element\n\
    \    else\n      sum + element % 100\n    end\n  end\nend", "  two_digits = []\n\
    \  one_digit = []\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length == 2\n\
    \      two_digits << num\n    elsif num.to_s.length == 1\n      one_digit << num\n\
    \    end\n  end\n  if k <= two_digits.length\n    sum = two_digits[0..k-1].reduce(:+)\n\
    \  elsif k > two_digits.length\n    sum = two_digits.reduce(:+) + one_digit[0..k-two_digits.length-1].reduce(:+)\n\
    \  end\n  sum\nend", "  arr.each_with_index.map do |item, index|\n    next if\
    \ index > k\n    item.digits.size <= 2 ? item : 0\n  end.compact.sum\nend\nadd_elements.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "  arr.take(k).inject(0) { |sum, number| (number\
    \ >= 100 ? sum : sum + number) }\nend", "  sum = 0\n  for i in 0...k\n    sum\
    \ += arr[i] if arr[i] < 100\n  end\n  sum\nend", "  i = 0\n  sum = 0\n  while\
    \ i < k\n    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend", " \
    \ sum = 0\n  i = 0\n  while i < k && i < arr.length\n    if arr[i] < 100\n   \
    \   sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  arr[0..k].select\
    \ { |e| e.to_s.length <= 2 }.sum\nend", "  sum = 0\n  arr.each do |number|\n \
    \   sum += number if number.to_s.length <= 2\n    return sum if sum >= k\n  end\n\
    \  sum\nend", "  arr[0...k].sum { |e| e.between?(10, 99) ? e : 0 }\nend", "  #\
    \ arr[0...k].map(&:to_s).count { |str| str.length < 3 }.reduce(:+)\n  arr[0...k].reduce(0)\
    \ { |sum, el| sum + (el < 100 ? el : 0) }\nend", "  sum = 0\n  arr.each do |el|\n\
    \    break if k == 0\n    sum += el if el < 100\n    k -= 1\n  end\n  sum\nend",
  "  # get the numbers with at most two digits\n  short_numbers = arr.take(k).select\
    \ { |num| num.digits.length <= 2 }\n  # add them up\n  short_numbers.reduce(:+)\n\
    end", "  arr[0...k].select { |ele| ele.digits.size <= 2 }.sum\nend", "  arr.slice(0,\
    \ k).sum { |el| el.to_s.size > 2 ? 0 : el }\nend", end, "  arr[0...k].select {\
    \ |e| e < 100 }.sum\nend", "  arr.select { |n| n < 100 }.take(k).reduce(:+)\n\
    end", "  raise NotImplementedError\nend", "  sum = 0\n  for i in 0...k\n    sum\
    \ += arr[i] if arr[i] < 100\n  end\n  sum\nend", "  result = 0\n  arr.each do\
    \ |num|\n    num = num.to_s\n    if num.length <= 2\n      result += num.to_i\n\
    \    end\n  end\n  result\nend", "  arr.take(k).select { |e| e.to_s.length < 3\
    \ }.reduce(:+)\nend", "  # arr.each do |n|\n  #   sum += n\n  # end\n  # sum",
  "  # write your code here\nend", "  # your code here\nend", "  sum = 0\n  i = 0\n\
    \  while i < k\n    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\n\
    end", "  # Your code here\nend", "  answer = 0\n  arr.each_with_index do |num,\
    \ index|\n    break if index == k\n    answer += num if (num.to_s.length == 1)\
    \ || (num.to_s.length == 2)\n  end\n  answer\nend", "  sum = 0\n  arr.take(k).each\
    \ do |e|\n    sum += e unless e > 99\n  end\n  sum\nend", "  sum = 0\n  i = 0\n\
    \  while i < k\n    num = arr[i]\n    if num < 100\n      sum += num\n    end\n\
    \    i += 1\n  end\n  sum\nend", "  # @return [Integer]\n  first_k_elements =\
    \ arr.take(k)\n  filtered_elements = first_k_elements.reject { |element| element\
    \ >= 100 || element <= 0 }\n  sum = filtered_elements.reduce(0) { |sum, element|\
    \ sum + element }\n  sum\nend", "  arr[0..k-1].map { |el| el.to_s.length <= 2\
    \ ? el : 0 }.sum\nend", "  result = 0\n  for i in arr.take(k)\n    result += i\
    \ if i < 100\n  end\n  result\nend", "  # write your code here\nend", "  # Your\
    \ code goes here\nend", "  arr.take(k).select{|i| i < 100}.sum\nend", '  # return
    0 if k > arr.length', "  nums = arr.take(k).select { |num| num.digits.length <=\
    \ 2 }\n  nums.reduce(:+)\nend", "  # Put your code here\nend", "  sum = 0\n  for\
    \ i in 0...k\n    sum += arr[i] if arr[i] < 100\n  end\n  sum\nend", "  sum =\
    \ 0\n  i = 0\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n\
    \    i += 1\n  end\n  sum\nend", "  arr[0...k].each_with_object([]) do |e, obj|\n\
    \    if e.to_s.size < 3\n      obj << e\n    end\n  end.reduce(:+)\nend", "  answer\
    \ = 0\n  return answer if arr.size < 1 || arr.size > 100\n  return answer if k\
    \ < 1 || k > arr.size\n  (0...k).each do |i|\n    answer += arr[i] if arr[i] <\
    \ 100\n  end\n  answer\nend", "  result = 0\n  arr.each do |i|\n    if i < 100\n\
    \      result += i\n    end\n    break if arr.index(i) == k - 1\n  end\n  result\n\
    end", end, "  # code here\nend", "  # Your code here\nend", "  arr[0...k].reject\
    \ { |i| i >= 100 }.sum\nend\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)",
  "  arr.each.with_index.sum do |n, i|\n    i >= k ? 0 : (n.to_s.length > 2 ? 0 :\
    \ n)\n  end\nend", "  #code here\nend", "  # write your code here\nend", "  first_k_elements\
    \ = arr.slice(0..k-1)\n  first_k_elements.select { |i| i.digits.count <= 2 }.sum\n\
    end", "  arr[0..k-1].select { |e| e < 100 }.reduce(:+)\nend", "  # 1. get the\
    \ first k elements\n  # 2. check each element if it has more than 2 digits\n \
    \ # 3. if it has more than 2 digits, don't add it\n  # 4. return the sum of the\
    \ elements", "  # add code here\nend", "  total = 0\n  while k > 0\n    total\
    \ += arr[k - 1] if arr[k - 1] < 100\n    k -= 1\n  end\n  total\nend", "  sum\
    \ = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n      sum += arr[i]\n    elsif\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend",
  "  sum = 0\n  until arr.empty? || k == 0\n    sum += arr.shift.to_s.length < 3 ?\
    \ arr.shift : arr.shift * arr.shift\n    k -= 1\n  end\n  sum\nend", "  sum =\
    \ 0\n  (0...k).each do |i|\n    sum += arr[i] if arr[i] < 100\n  end\n  sum\n\
    end", "  # arr.slice(0, k).select { |element| element.digits.size <= 2 }.sum\n\
    \  arr.slice(0, k).select { |element| element < 100 }.sum\nend", "  elements =\
    \ []\n  arr.each_with_index do |num, index|\n    elements << num if (num >= 10\
    \ && num < 100) || index < k\n  end\n  elements.sum\nend", "  # TODO: Implement\
    \ method here\nend", end, "  sum = 0\n  k.times do |i|\n    sum += arr[i] if arr[i]\
    \ < 100\n  end\n  sum\nend", "  sum = 0\n  k.times do |n|\n    if arr[n] >= 100\n\
    \      next\n    else\n      sum += arr[n]\n    end\n  end\n  sum\nend", "  #\
    \ Add code here\nend", "  arr.slice(0, k).select { |x| x.digits.size <= 2 }.sum\n\
    end", "  arr.slice(0, k).sum { |x| x.to_s.length <= 2 ? x : 0 }\nend", "  i =\
    \ 0\n  sum = 0\n  while i < k\n    digits = arr[i].to_s.length\n    if digits\
    \ <= 2\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  # Your\
    \ Code Here\nend", "  result = 0\n  i = 0\n  while i < k\n    if arr[i] >= 10\
    \ && arr[i] < 100\n      result += arr[i]\n    end\n    i += 1\n  end\n  result\n\
    end", "  arr[0...k].select { |n| n < 100 }.sum\nend", "  arr[0...k].select { |e|\
    \ e < 100 }.sum\nend", "\nend", "  arr[0..k].select { |e| e.to_s.length < 3 }.sum\n\
    end", "  # your code here\nend", "  output = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      output += num\n    end\n  end\n  output\nend", "  arr.take(k).select\
    \ { |n| n < 100 }.sum\nend", "  arr.first(k).map { |i| i < 100 ? i : 0 }.sum\n\
    end", "  sum = 0\n  while k > 0\n    if arr[k - 1] < 100\n      sum += arr[k -\
    \ 1]\n    end\n    k -= 1\n  end\n  sum\nend\nadd_elements.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)", "  counter = 0\n  arr.each do |num|\n    if num.digits.count\
    \ <= 2\n      counter += num\n    end\n  end\n  counter\nend", "  arr[0..k-1].select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  arr.first(k).reduce(0) { |sum, num|\
    \ num <= 99 ? sum + num : sum }\nend", "  sum = 0\n  arr.each_with_index do |element,\
    \ index|\n    break if index == k\n    sum += element if element >= 0 && element\
    \ < 100\n  end\n  sum\nend", "  result = 0\n  i = 0\n  while i < k\n    if arr[i]\
    \ < 100\n      result += arr[i]\n    end\n    i += 1\n  end\n  result\nend", " \
    \ arr[0..k].inject(0) { |total, n| n > 99 ? total : total + n }\nend", "  total\
    \ = 0\n  i = 0\n  while i < k && i < arr.length\n    if arr[i] >= 100\n      i\
    \ += 1\n    else\n      total += arr[i]\n      i += 1\n    end\n  end\n  total\n\
    end", "  arr[0..k-1].inject(0) { |sum, number| number > 99 ? sum : sum + number\
    \ }\nend", "  sum = 0\n  arr.each_with_index do |element, index|\n    sum += element\
    \ if (element.digits.size == 1 || element.digits.size == 2) && index < k\n  end\n\
    \  sum\nend", "  sum = 0\n  arr.each_with_index do |e, i|\n    break if i == k\n\
    \    if e.to_s.length <= 2\n      sum += e\n    end\n  end\n  sum\nend", "  sum\
    \ = 0\n  arr.each do |num|\n    return sum if sum >= k\n    sum += num if num\
    \ < 10\n  end\n  sum\nend", "  if arr.length < k\n    raise ArgumentError, 'The\
    \ length of arr is less than k'\n  end", "  result = 0\n  (0...k).each do |i|\n\
    \    if arr[i] < 100\n      result += arr[i]\n    end\n  end\n  result\nend",
  "  arr.select { |num| num.to_s.length <= 2 }.take(k).sum\nend", "  result = 0\n\
    \  for i in 0...k\n    if arr[i] > 9 && arr[i] < 100\n      result += arr[i]\n\
    \    end\n  end\n  result\nend", "  array = []\n  for i in 0..k-1\n    if arr[i]\
    \ > 9 && arr[i] < 100\n      array << arr[i]\n    end\n  end\n  array.sum\nend",
  "\nend", "  arr[0..k].map { |item| item.digits.size <= 2 ? item : 0 }.sum\nend",
  "  result = 0\n  i = 0\n  while i < k\n    number = arr[i]\n    result += if number.to_s.length\
    \ > 2\n                number - number % 100\n              else\n           \
    \     number\n              end\n    i += 1\n  end\n  result\nend", "  raise NotImplementedError\n\
    end", "  arr.each_with_index.inject(0) do |sum, (elem, index)|\n    break sum\
    \ if index == k\n    str_elem = elem.to_s\n    sum += (str_elem.length == 1 ||\
    \ str_elem.length == 2) ? elem : 0\n  end\nend", "  arr.take(k).select { |x| x\
    \ < 100 }.sum\nend", "  arr.take(k).reduce(0) { |sum, elem| elem < 100 ? sum +\
    \ elem : sum }\nend", "\nend", "\nend", "  arr.take(k).map(&:to_s).select { |e|\
    \ e.length <= 2 }.map(&:to_i).sum\nend", "  arr[0...k].sum{|element| element <\
    \ 100 ? element : 0}\nend", "  arr.slice(0, k).inject(0) { |sum, n| sum + n.to_s.size\
    \ <= 2 ? n : 0 }\nend", "  # Write your code here.\n  # If the element has 3 digits,\
    \ the third digit (index 2) is x10\n  # So the last digit is simply arr[i][2]\n\
    \  sum = 0\n  (0...k).each do |i|\n    sum += arr[i][2] ? arr[i][2] : arr[i]\n\
    \  end\n  sum\nend", "\nend", "  # result = []\n  # k.times do |num|\n  #   result\
    \ << arr[num] if arr[num] < 100\n  # end\n  # result.sum\n  arr.sort[0..k-1].reject\
    \ { |num| num > 99 }.sum\nend", "  sum = 0\n  arr.slice(0, k).each do |el|\n \
    \   if el < 10\n      sum += el\n    elsif el >= 10 && el < 100\n      sum +=\
    \ el\n    end\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    # The\
    \ key part of this problem is checking whether the current element is less than\
    \ 100.\n    # This is because if it is, then we know it's one or two digits. If\
    \ it's greater than 100,\n    # it can be any number of digits, so we ignore it.\n\
    \    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend", "  arr.take(k).map\
    \ { |e| e / 100.to_f >= 1 ? e : 0 }.sum\nend", "  # YOUR CODE HERE\nend", "  #\
    \ Your code here\nend", "  arr[0...k].inject(0) { |sum, n| sum + (n > 9 ? n %\
    \ 100 : n) }\nend", "  arr[0..k-1].select{|x| x < 100}.sum\nend", "  p arr.select\
    \ { |n| n < 100 }.sum\nend", "  arr.map{|x| x < 100 ? x : 0}.inject(:+)\nend",
  "  sum = 0\n  i = 0\n  while i < k\n    arr[i] > 99 ? (sum += arr[i] / 100) : (sum\
    \ += arr[i])\n    i += 1\n  end\n  sum\nend", "  result = 0\n  i = 0\n  while\
    \ i < k\n    result += arr[i] / 100 < 1 ? arr[i] : 0\n    i += 1\n  end\n  result\n\
    end", "  arr[0...k].select { |el| el.digits.size <= 2 }.sum\nend", "    sum =\
    \ 0\n    (0...k).each do |i|\n        sum += arr[i] if arr[i] < 100\n    end\n\
    \    sum\nend", "  total = 0\n  arr.each do |element|\n    total += element if\
    \ element < 100\n    break if total >= k\n  end\n  total\nend", "  arr.take(k).reject\
    \ { |x| x > 99 }.reduce(:+)\nend", "  # TODO: implement this method!\nend", " \
    \ sum = 0\n  arr.first(k).each do |n|\n    sum += n if n < 100\n  end\n  sum\n\
    end\nadd_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "    arr.take(k).filter\
    \ { |x| x.to_s.length <= 2 }.sum\nend", "  elements = arr.reject { |e| e > 99\
    \ }\n  elements.take(k).sum\nend", "  total = 0\n  arr.each do |el|\n    if el\
    \ >= 10 && el < 100\n      total += el\n    end\n    if k == 0\n      break\n\
    \    end\n    k -= 1\n  end\n  total\nend", "  arr.take(k).select{|el| el < 100}.sum\n\
    end", "\nend", "    # write your code here\n    sum = 0\n    i = 0\n    while\
    \ i < k\n        sum += (arr[i] <= 99 ? arr[i] : 0)\n        i += 1\n    end\n\
    \    sum\nend", "  i = 0\n  sum = 0\n  while i < k\n    sum += arr[i] if arr[i]\
    \ < 100\n    i += 1\n  end\n  sum\nend", "  # Write your code here.\n  sum = 0\n\
    \  for i in 0..k-1\n    #puts \"arr[i]: #{arr[i]}\"\n    if arr[i] >= 10 && arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n  end\n  sum\nend", "  arr.slice(0, k).select\
    \ { |x| x < 100 }.reduce(:+)\nend", "  elements = []\n  i = 0\n  while i < k\n\
    \    elements << arr[i] if arr[i].to_s.length < 3\n    i += 1\n  end\n  elements.sum\n\
    end", "  i = 0\n  result = 0\n  while i < k\n    if arr[i] < 100\n      result\
    \ += arr[i]\n    end\n    i += 1\n  end\n  result\nend", "  i = 0\n  sum = 0\n\
    \  while i < k\n    if arr[i] > 99\n      sum += arr[i]\n    end\n    i += 1\n\
    \  end\n  sum\nend", "  arr[0..k].reduce(0) { |sum, el| el > 99 ? sum : sum +\
    \ el }\nend", "  arr[0...k].reduce(0) { |sum, val| val < 100 ? sum + val : sum\
    \ }\nend", "  # write your solution here\nend", "  sum = 0\n  i = 0\n  while i\
    \ < k && arr[i] >= 10\n    i += 1\n  end\n  while i < k\n    sum += arr[i]\n \
    \   i += 1\n  end\n  sum\nend", "  arr.slice(0, k).select { |x| x < 100 }.sum\n\
    end", "  # TODO: implement this function\nend", "  # TODO: Your code here\nend",
  "  sum = 0\n  i = 0\n  while i < k\n    sum += arr[i] if arr[i] < 100\n    i +=\
    \ 1\n  end\n  sum\nend", "  # Code here\nend", "  arr.take(k).map { |x| x.to_s.length\
    \ <= 2 ? x : 0 }.sum\nend", "  # your solution here\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    sum += num if num <= 99 && num >= 10\n    break if arr.index(num)\
    \ == k - 1\n  end\n  sum\nend\nputs add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4)", "  arr.take(k).select { |n| n < 100 }.sum\nend", "  # Your code goes\
    \ here.\nend", "    # make a new array of the first k elements of arr\n    first_k\
    \ = arr[0...k]\n    # filter that new array to get elements with 2 digits\n  \
    \  two_digits = first_k.select { |num| num >= 10 && num < 100 }\n    # reduce\
    \ that filtered array to add the elements with 2 digits\n    two_digits.reduce(:+)\n\
    end", "  arr.take(k).reduce(0) { |memo, elem| elem < 100 ? memo + elem : memo\
    \ }\nend", "  arr[0...k].select { |element| element < 100 }.sum\nend", "  arr[0...k].reduce(0)\
    \ { |acc, i| i > 9 ? acc : acc + i }\nend", "  arr[0...k].sum.to_s.size < 3 ?\
    \ arr[0...k].sum : arr[0...k].select { |x| x.to_s.size < 3 }.sum\nend\np add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "  arr[0...k].reject { |x| x >= 100 }.sum\n\
    end", "  k.times.reduce(0) { |acc, i| arr[i] < 100 ? acc + arr[i] : acc }\nend\n\
    add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\nadd_elements.call([7,\
    \ 9, 3, 11, 4, 9, 3, 11, 4, 9, 3, 4, 9, 4, 9, 8, 9, 8, 4, 9, 8, 9, 4, 9, 8, 9,\
    \ 4, 9, 4, 9, 8, 9, 8, 9, 8, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4,\
    \ 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8,\
    \ 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4,\
    \ 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8,\
    \ 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4,\
    \ 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8,\
    \ 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4,\
    \ 9, 8, 9, 4, 9, 8, 9, 4, 9, 8, 9, 4, 9", "  sum = 0\n  for i in 0...k\n    sum\
    \ += arr[i] if arr[i] < 100\n  end\n  sum\nend", "  arr.take(k).select { |num|\
    \ num.to_s.length <= 2 }.sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |el|\n    if el < 100\n      sum += el\n    end\n\
    \    k -= 1\n    break if k == 0\n  end\n  sum\nend", "    arr[0..k].select {\
    \ |n| n < 100 }.reduce(:+)\nend", "  a_new = arr.map { |ele| ele.to_s.length <=\
    \ 2 ? ele : 0 }\n  a_new.take(k).sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
