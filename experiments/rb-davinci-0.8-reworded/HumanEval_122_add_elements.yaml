name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n\
  # Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr,\
  \ k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  arr[0...k].inject(0) { |sum, item| item > 9 ? sum + 0 : sum + item\
    \ }\nend", "  arr[0...k].map { |x| (x / 100.0).ceil }.reduce(:+)\nend", "  sum\
    \ = 0\n  i = 0\n  while i < k\n    sum += arr[i] if arr[i] < 100\n    i += 1\n\
    \  end\n  sum\nend", "  arr[0..k].map { |num| num.to_s.length > 2 ? 0 : num }.reduce(:+)\n\
    end", "  # your solution here\nend", "  # your solution\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  # sum_elements = 0\n  # arr[0..k].each\
    \ do |num|\n  #   if num < 10\n  #     sum_elements += num\n  #   elsif num <\
    \ 100\n  #     sum_elements += num\n  #   end\n  # end\n  # sum_elements\n  arr[0..k].select\
    \ { |num| num < 10 || num < 100 }.sum\nend", "  # Solve this!\nend", "  # CODE\
    \ GOES HERE\nend", "  arr[0...k].reduce(0) { |sum, n| n < 100 ? sum + n : sum\
    \ }\nend", "    count = 0\n    sum = 0\n    while count < k\n        count +=\
    \ 1\n        sum += arr[count] if arr[count] < 100\n    end\n    sum\nend", " \
    \ # Your code here\nend", "  arr.map { |x| x.to_s.size <= 2 ? x : 0 }[0...k].sum\n\
    end", "  # code here\nend", "  sum = 0\n  i = 0\n  while i < k && i < arr.length\n\
    \    # if arr[i] >= 0 && arr[i] < 10\n    #   sum += arr[i]\n    # elsif arr[i]\
    \ >= 10 && arr[i] < 100\n    #   sum += arr[i]\n    # end\n    sum += arr[i] if\
    \ arr[i] < 100\n    i += 1\n  end\n  sum\nend", "  arr.count { |el| el.digits.size\
    \ <= 2 }.inject(:+)\nend", "  total = 0\n  (0...k).each do |index|\n    total\
    \ += arr[index] if (0..99).include?(arr[index])\n  end\n  total\nend", "  # your\
    \ code goes here\nend", "  # \nend\nputs 'Problem #1: ' + add_elements.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4).to_s"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
