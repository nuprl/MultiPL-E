name: HumanEval_30_get_positive
language: rb
prompt: "# Return only positive numbers in the array.\n# >>> get_positive.call([-1,\
  \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n\
  \    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1,\
  \ -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1,\
  \ -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n"
completions: ["    l.select { |i| i > 0 }\nend", "  l.select{|e| e>0}\nend", "  l.select\
    \ { |n| n > 0 }\nend", "  l.select { |num| num > 0 }\nend", "    l.select{|x|\
    \ x > 0}\nend", "  l.select{|n| n > 0}\nend", "  l.select { |x| x > 0 }\nend",
  "    return l.select { |x| x > 0 }\nend\nget_positive = Proc.new { |l| return l.select\
    \ { |x| x > 0 } }", "  l.select { |i| i > 0 }\nend", "  l.select { |n| n > 0 }\n\
    end", "  l.select { |i| i.positive? }\nend", "  l.select { |n| n > 0 }\nend",
  "  l.select do |value|\n    value > 0\n  end\nend", "  l.select { |n| n > 0 }\n\
    end", "\tl.select { |e| e > 0 }\nend", "  l.select { |x| x > 0 }\nend\nget_positive\
    \ = lambda { |l| l.select { |x| x > 0 } }", "    return l.select { |num| num >\
    \ 0 }\nend", "  l.select { |n| n > 0 }\nend", "  puts l.select { |x| x > 0 }\n\
    end\nget_positive([-1, 2, -4, 5, 6])\nget_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])", "  l.select { |x| x > 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
