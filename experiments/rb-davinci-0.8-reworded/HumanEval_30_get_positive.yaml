name: HumanEval_30_get_positive
language: rb
prompt: "# Return only positive numbers in the array.\n# >>> get_positive.call([-1,\
  \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n\
  \    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1,\
  \ -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1,\
  \ -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n"
completions: ["    l.select { |i| i > 0 }\nend", "  l.select{|e| e>0}\nend", "  l.select\
    \ { |n| n > 0 }\nend", "  l.select { |num| num > 0 }\nend", "    l.select{|x|\
    \ x > 0}\nend", "  l.select{|n| n > 0}\nend", "  l.select { |x| x > 0 }\nend",
  "    return l.select { |x| x > 0 }\nend\nget_positive = Proc.new { |l| return l.select\
    \ { |x| x > 0 } }", "  l.select { |i| i > 0 }\nend", "  l.select { |n| n > 0 }\n\
    end", "  l.select { |i| i.positive? }\nend", "  l.select { |n| n > 0 }\nend",
  "  l.select do |value|\n    value > 0\n  end\nend", "  l.select { |n| n > 0 }\n\
    end", "\tl.select { |e| e > 0 }\nend", "  l.select { |x| x > 0 }\nend\nget_positive\
    \ = lambda { |l| l.select { |x| x > 0 } }", "    return l.select { |num| num >\
    \ 0 }\nend", "  l.select { |n| n > 0 }\nend", "  puts l.select { |x| x > 0 }\n\
    end\nget_positive([-1, 2, -4, 5, 6])\nget_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\n\
    end", "  l.select { |number| number > 0 }\nend", "  return l.select { |x| x >\
    \ 0 }\nend", "\tl.select do |n|\n\t\tn.positive?\n\tend\nend", "  l.select{|x|\
    \ x >= 0}\nend", "\treturn l.select { |x| x > 0 }\nend", "  return l.select {\
    \ |num| num > 0 }\nend", "  l.select { |num| num > 0 }\nend", "  l.select { |i|\
    \ i > 0 }\nend", "\tl.select{|x| x > 0}\nend", "  l.select { |x| x > 0 }\nend",
  "\tl.select { |num| num > 0 }\nend", "  l.select { |e| e.positive? }\nend", "  l.select\
    \ { |x| x > 0 }\nend\nget_positive = -> (l) { l.select { |x| x > 0 } }\np get_positive.call([-1,\
    \ 2, -4, 5, 6])\np get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])",
  "  l.select{|v| v > 0}\nend", "  l.select { |n| n > 0 }\nend", "  l.select { |n|\
    \ n > 0 }\nend\nget_positive = method(:get_positive)", "  puts l.select{|i| i\
    \ > 0}\nend", "  l.select { |n| n > 0 }\nend", "  l.select{|e| e > 0}\nend", " \
    \ return l.select { |x| x > 0 }\nend", "  l.select{|i| i > 0}\nend", "  return\
    \ l.select { |n| n > 0 }\nend", "  l.select { |item| item > 0 }\nend", "  l.select{|x|\
    \ x>0}\nend", "    l.select{|e| e>0}\nend\nget_positive = lambda {|l| l.select{|e|\
    \ e>0}}", "  l.select { |n| n > 0 }\nend", "  l.select { |i| i > 0 }\nend", " \
    \ l.select { |num| num > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  l.select\
    \ { |i| i > 0 }\nend", "  l.select { |i| i > 0 }\nend", "  return l.select { |n|\
    \ n > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |e| e > 0 }\n\
    end", "  l.select{|n| n > 0}\nend\nget_positive = -> (l) { l.select{|n| n > 0}\
    \ }", "  l.select { |e| e > 0 }\nend", "  # l.each { |e| puts e }\n  l.keep_if{\
    \ |e| e > 0 }\nend", "  l.select { |i| i > 0 }\nend", "  l.select{|e| e > 0}\n\
    end", "  l.select { |e| e > 0 }\nend", "  l.select{|x| x > 0}\nend", "    l.select\
    \ { |i| i > 0 }\nend", "    p = l.map { |num| num > 0 ? num : nil }\n    p.compact\n\
    end", "  l.select { |x| x > 0 }\nend", "  l.select { |el| el > 0 }\nend", "\t\
    l.select { |i| i > 0 }\nend", "\tl.select { |i| i > 0 }\nend", "\tpos = []\n\t\
    i = 0\n\twhile i < l.length\n\t\tif l[i] > 0\n\t\t\tpos.push(l[i])\n\t\tend\n\t\
    \ti += 1\n\tend\n\tpos\nend", "    l.select { |num| num > 0 }\nend", "  l.select{|x|\
    \ x > 0}\nend\nget_positive = lambda{|l| get_positive(l)}", "  l.select { |e|\
    \ e > 0 }\nend", "\tl.find_all { |i| i > 0 }\nend", "    l.select{|e| e > 0}\n\
    end", "  l.reject { |n| n < 0 }\nend", "  l.select{|x| x>0}\nend\nputs get_positive([-1,\
    \ 2, -4, 5, 6])\nputs get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])",
  "  l.select { |n| n > 0 }\nend", "  l.select { |num| num > 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select do |element|\n    element > 0\n  end\nend",
  "    return l.select { |i| i > 0 }\nend", "    return l.select { |v| v > 0 }\nend",
  "  l.select { |i| i > 0 }\nend", "  l.find_all { |n| n > 0 }\nend", "  l.select\
    \ { |a| a > 0 }\nend", "  l.select { |num| num > 0 }\nend", "  # return l.select\
    \ { |i| i >= 0 }\n  l.select(&:positive?)\nend", "  l.select { |number| number\
    \ > 0 }\nend", "    l.select do |x|\n        x > 0\n    end\nend", "  l.select\
    \ { |n| n > 0 }\nend", "\treturn l.select { |x| x >= 0 }\nend", "  if l.empty?\n\
    \    []\n  else\n    l.select { |i| i.to_i > 0 }\n  end\nend", "  l.select { |num|\
    \ num > 0 }\nend", "  new_l = []\n  l.each do |x|\n    if x > 0\n      new_l <<\
    \ x\n    end\n  end\n  return new_l\nend", "    l.select { |i| i > 0 }\nend",
  "  l.select do |item|\n    item.positive?\n  end\nend", "  l.select { |n| n > 0\
    \ }\nend", "  l.select { |e| e > 0 }\nend", "  l.select { |number| number > 0\
    \ }\nend", "  l.select { |num| num > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |e| e > 0 }\nend", "    l.select\
    \ { |n| n > 0 }\nend", "  l.select { |i| i > 0 }\nend\np get_positive.call([-1,\
    \ 2, -4, 5, 6])\np get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])",
  "  l.find_all { |i| i > 0 }\nend", "  l.reject { |i| i <= 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "\tl.select { |n| n > 0 }\nend", "    l.select { |x| x\
    \ > 0 }\nend", "  l.select { |v| v > 0 }\nend", "  l.select{|x| x >= 0}\nend",
  "  l.select { |i| i > 0 }\nend", "  l.select{|i| i>0}\nend", "  l.select { |e| e\
    \ > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  # l.select do |number|\n  #\
    \   number > 0\n  # end\n  l.select { |num| num > 0 }\nend\np get_positive([-1,\
    \ 2, -4, 5, 6])", "  l.select { |e| e > 0 }\nend", "  l.find_all { |num| num >\
    \ 0 }\nend", "  return l.select { |number| number > 0 }\nend", "  l.select{|a|\
    \ a > 0}\nend", "  l.keep_if { |x| x > 0 }\nend", "  l.select { |i| i > 0 }\n\
    end", "\tl.select { |n| n > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  l.select{|x|\
    \ x > 0}\nend\np get_positive.call([-1, 2, -4, 5, 6])\np get_positive.call([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  l.select { |el| el > 0 }\nend\np get_positive([-1,\
    \ 2, -4, 5, 6])\np get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", " \
    \ l.find_all { |e| e > 0 }\nend", "  l.select { |i| i.positive? }\nend", "  l.select\
    \ { |num| num > 0 }\nend", "  l.select { |e| e > 0 }\nend", "\tl.select{|n| n\
    \ > 0}\nend", "  l.select do |i|\n    i > 0\n  end\nend", "  l.find_all { |x|\
    \ x > 0 }\nend\nget_positive = lambda { |l| get_positive(l) }", "  l.select{|el|\
    \ el > 0}\nend", "  l.select { |n| n > 0 }\nend", "  l.select { |x| x > 0 }\n\
    end", "  l.select { |num| num > 0 }\nend", "    l.select { |x| x > 0 }\nend",
  "    result = []\n    l.each { |x| result << x if x > 0 }\n    result\nend", " \
    \ (l.select { |e| e > 0 }).sort\nend", "  l.select { |x| x > 0 }\nend", "  arr\
    \ = []\n  l.each { |i| arr << i if i > 0 }\n  arr\nend", "\tl.select { |i| i >\
    \ 0 }\nend", "  l.select { |e| e > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |i| i > 0 }\nend", "  l.select do |n|\n    n > 0\n  end\nend", " \
    \ l.select{|i| i > 0}\nend", "  l.select{|x| x > 0}\nend", "  l.select{|i| i >\
    \ 0}\nend", "\tl.select{|x| x > 0}\nend", "  return l.select { |e| e > 0 }\nend",
  "\treturn l.select { |n| n > 0 }\nend", "  l.select { |i| i > 0 }\nend", "  l.select\
    \ { |e| e > 0 }\nend", "  x = []\n  l.each do |val|\n    if val > 0\n      x <<\
    \ val\n    end\n  end\n  x\nend", "  l.select { |n| n > 0 }\nend\nget_positive\
    \ = -> (l) { l.select { |n| n > 0 } }", "  # Call function\n  get_pos_or_neg(l,\
    \ 1)\nend", "  l.select { |n| n > 0 }\nend", "  return l.select { |i| i >= 0 }\n\
    end", "  l.select do |el|\n    el > 0\n  end\nend", "  l.select { |x| x > 0 }\n\
    end", "  l.select { |n| n > 0 }\nend", "  positive = l.map do |n|\n    if n >=\
    \ 0\n      n\n    end\n  end\n  positive.compact\nend\np get_positive([-1, 2,\
    \ -4, 5, 6])\np get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    l.select\
    \ { |n| n > 0 }\nend", "  l.select { |i| i > 0 }\nend", "  l.select { |e| e >\
    \ 0 }\nend", "  l.select { |e| e > 0 }\nend", "    ret = []\n    l.each do |i|\n\
    \        if i > 0\n            ret.push(i)\n        end\n    end\n    return ret\n\
    end", "  l.select { |x| x > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  l.reject\
    \ { |i| i <= 0 }\nend", "  l.select { |i| i.positive? }\nend", "  l.select { |i|\
    \ i > 0 }\nend", "  return l.select { |num| num > 0 }\nend", "  l.select { |i|\
    \ i > 0 }\nend\np get_positive([-1, 2, -4, 5, 6])\np get_positive([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])", "  l.select { |n| n > 0 }\nend", "  l.select {\
    \ |n| n > 0 }\nend", "  l.select { |x| x > 0 }\nend", "    l.select{|n| n > 0}\n\
    end", "  l.select{|num| num > 0}\nend", "  l.select { |num| num > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "    i = 0\n    while i < l.length\n        if\
    \ l[i] < 0\n            l.delete_at(i)\n        else\n            i += 1\n   \
    \     end\n    end\n    l\nend", "  l.select { |i| i > 0 }\nend", "  l.select\
    \ { |v| v > 0 }\nend", "  l.select{|a| a > 0}\nend", "    l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  return l.reject { |x| x < 0 }\n\
    end", "  l.select { |num| num > 0 }\nend", "\tl.select { |i| i >= 0 }\nend", " \
    \ l.find_all{|x| x > 0}\nend", "    l.select do |i|\n        i > 0\n    end\n\
    end", "  l.select { |num| num > 0 }\nend", "  # l.select{|i| i>0}\n  l.select{|i|\
    \ i>0}\nend", "  l.select { |i| i > 0 }\nend", "    l.select { |n| n > 0 }\nend",
  "  l.select { |i| i > 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
