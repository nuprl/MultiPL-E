name: HumanEval_29_filter_by_prefix
language: rb
prompt: "# Filter an input array of strings only for ones that start with a given\
  \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
  \ prefix)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
  \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
  \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
  end\n"
completions: ["  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.filter { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "    return strings.select { |str|\
    \ str.start_with?(prefix) }\nend", "\tstrings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "    strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "    strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select{|s| s.start_with?(prefix)}\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "    strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select{|s|\
    \ s.start_with?(prefix)}\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.find_all { |string| string.start_with?(prefix) }\nend",
  "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "    return strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  filter_by_prefix_impl(strings,\
    \ prefix)\nend", "  strings.select { |string| string.start_with?(prefix) }\nend",
  "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "\t# YOUR CODE HERE\n\tmy_array = []\n\tstrings.each do |string|\n\t\
    \tif string.start_with?(prefix)\n\t\t\tmy_array << string\n\t\tend\n\tend\n\t\
    my_array\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select {\
    \ |string| string.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "\tresult = []\n\tstrings.each do |string|\n\t\tif string.start_with?(prefix)\n\
    \t\t\tresult << string\n\t\tend\n\tend\n\tresult\nend", "\tstrings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  return [] if strings.empty?\n  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select{|s| s.start_with?(prefix)}\n\
    end", "  # TODO: You may use this method at the bottom of this file.\n  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select{|str| str.start_with?(prefix)}\n\
    end", "  # YOUR CODE HERE\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ raise ArgumentError.new(\"strings must be an array\") unless strings.is_a?(Array)\n\
    \  raise ArgumentError.new(\"prefix must be a string\") unless prefix.is_a?(String)\n\
    \  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  filter_array(strings) { |string| string.start_with?(prefix) }\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |word| word.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select{|x| x.start_with?(prefix)}\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select{|x| x.start_with?(prefix)}\n\
    end", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "    # put your code here\n    strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.filter do |string|\n    string.start_with?(prefix)\n  end\n\
    end", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "    strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  # TODO\nend", "  #TODO: Implement\nend", "  strings.select { |s|\
    \ s.start_with?(prefix) }\nend", "  strings.filter { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select{|str| str.start_with?(prefix)}\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  return strings.select { |str|\
    \ str.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  return strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select{|string| string.start_with?(prefix)}\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  filter_strings_with_prefix.call(strings,\
    \ prefix)\nend", "  strings.select { |string| string.start_with?(prefix) }\nend",
  "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select{|string| string.start_with?(prefix)}\n\
    end", "  #<YOUR CODE GOES HERE>\nend", "  strings.filter do |string|\n    string.start_with?(prefix)\n\
    \  end\nend", "  strings.select { |word| word.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  (strings ||\
    \ []).select { |s| s.start_with?(prefix) }\nend", "\tstrings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "    strings.select { |string| string.start_with?(prefix) }\nend",
  "  # TODO: implement me\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  strings.find_all { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select{|s| s.start_with?(prefix)}\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  #TODO\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select{|string| string.start_with?(prefix)}\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |x| x.start_with?(prefix) }\nend", "  strings.grep(/^#{prefix}/)\n\
    end", "  strings.reject { |s| !s.start_with?(prefix) }\nend", "  return strings\
    \ if prefix.nil? || prefix.empty?\n  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  return strings\
    \ if strings.empty?\n  return strings if prefix.empty?\n  strings.keep_if { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |x| x.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  puts strings.select {\
    \ |str| str.start_with?(prefix) }\nend", "  strings.select{|str| str.start_with?(prefix)}\n\
    end", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  raise \"not implemented\"\
    \nend", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.find_all do |str|\n    str.start_with?(prefix)\n\
    \  end\nend", "  strings.select { |string| string.start_with?(prefix) }\nend",
  "  strings.select { |word| word.start_with?(prefix) }\nend", "  strings.select{|s|\
    \ s.start_with?(prefix)}\nend", "    strings.select{|str| str.start_with?(prefix)}\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "\tstrings.select\
    \ { |s| s.start_with?(prefix) }\nend", "    strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "\tstrings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |e| e.start_with?(prefix) }\nend", "  strings.select{|s|\
    \ s.start_with?(prefix)}\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  # TODO: implement me\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  # strings.select { |str| str.start_with?(prefix) }\n  strings.grep(/^#{prefix}/)\n\
    end", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.grep(/^#{prefix}/)\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "    filtered = strings.filter\
    \ do |string|\n        string.start_with?(prefix)\n    end\n    return filtered\n\
    end", "  filter_by_prefix_impl(strings, prefix)\nend", "  strings.select { |x|\
    \ x.match /^#{prefix}/ }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select{|str| str.start_with?(prefix)}\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "    strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select{|string| string.start_with?(prefix)}\n\
    end", "  strings.select{|x| x.start_with?(prefix)}\nend", "  strings.select {\
    \ |s| s.start_with?(prefix) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
