language: rb
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  #array to keep brackets\n  array = []\n  #check to see if the number of brackets\
    \ is even\n  if brackets.length.even?\n    #add brackets to the array\n    brackets.split(\"\
    \").each do |bracket|\n      array << bracket\n    end\n    #delete the closing\
    \ bracket if it is the first bracket\n    if array[0] == \")\"\n      array.delete_at(0)\n\
    \    end\n    #delete the opening bracket if it is the last bracket\n    if array[-1]\
    \ == \"(\"\n      array.delete_at(-1)\n    end\n    #delete brackets if there\
    \ is an open and close in a row\n    (array.length - 1).times do |n|\n      if\
    \ array[n] == \"(\" && array[n + 1] == \")\"\n        array.delete_at(n)\n   \
    \     array.delete_at(n)\n      end\n    end\n    #return true if array is empty\n\
    \    if array.empty?\n      return true\n    else\n      return false\n    end\n\
    \  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprehbzgbi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprehbzgbi.rb:50:in `test_correct_bracketing'\n\
    \     47:   def test_correct_bracketing\n     48:     candidate = method(:correct_bracketing)\n\
    \     49:     assert_equal(true, candidate.call(\"()\"))\n  => 50:     assert_equal(true,\
    \ candidate.call(\"(()())\"))\n     51:     assert_equal(true, candidate.call(\"\
    ()()(()())()\"))\n     52:     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
    ))\n     53:     assert_equal(false, candidate.call(\"((()())))\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006879086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 290.74 assertions/s\n"
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |x|\n    if x == \"(\"\n      stack.push\
    \ x\n    elsif x == \")\"\n      stack.pop\n    end\n  end\n  stack.empty?\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpe6o67eg8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpe6o67eg8.rb:30:in `test_correct_bracketing'\n\
    \     27:     assert_equal(true, candidate.call(\"(()())\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n     29:     assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n  => 30:     assert_equal(false, candidate.call(\"\
    ((()())))\"))\n     31:     assert_equal(false, candidate.call(\")(()\"))\n  \
    \   32:     assert_equal(false, candidate.call(\"(\"))\n     33:     assert_equal(false,\
    \ candidate.call(\"((((\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007133556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.18 tests/s, 700.91 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  brackets.chars.reduce(0) do |res, x|\n    if x == '('\n      res += 1\n   \
    \ elsif x == ')'\n      res -= 1\n    end\n    if res < 0\n      return false\n\
    \    end\n    res\n  end.zero?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz2595vdt

    Started

    .

    Finished in 0.000516634 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1935.61 tests/s, 23227.28 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |ch|\n    if ch == '('\n      stack.push\
    \ ch\n    elsif ch == ')'\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49v_84wg

    Started

    .

    Finished in 0.000482532 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2072.40 tests/s, 24868.82 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxbp4epi8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxbp4epi8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00676648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.79 tests/s, 147.79 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  return false if brackets[0] == \")\"\n  return false if brackets[-1] == \"\
    (\"\n  return false if brackets.length.odd?\n  count = 0\n  brackets.each_char\
    \ do |ch|\n    count += 1 if ch == \"(\"\n    count -= 1 if ch == \")\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa8mg1_vc

    Started

    .

    Finished in 0.000522567 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1913.63 tests/s, 22963.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  bracket_map = {\n    ')' => '(',\n  }\n  brackets.each_char do\
    \ |bracket|\n    case bracket\n    when '('\n      stack.push(bracket)\n    when\
    \ ')'\n      if stack.last == bracket_map[bracket]\n        stack.pop\n      else\n\
    \        return false\n      end\n    end\n  end\n  stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdk8cq7kr

    Started

    .

    Finished in 0.000508211 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1967.69 tests/s, 23612.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  # START SOLUTION\n  count = 0\n  brackets.each_char do |char|\n    count +=\
    \ 1 if char == \"(\"\n    count -= 1 if char == \")\"\n    return false if count\
    \ < 0\n  end\n  count == 0\n  # END SOLUTION\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"\
    ))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdh8fut1v

    Started

    .

    Finished in 0.000510509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1958.83 tests/s, 23505.95 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \tleft = 0\n\tbrackets.each_char do |x|\n\t\tleft += 1 if x == \"(\"\n\t\tleft\
    \ -= 1 if x == \")\"\n\t\treturn false if left < 0\n\tend\n\tleft == 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgmh75mfg

    Started

    .

    Finished in 0.00049877 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2004.93 tests/s, 24059.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  arr = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      arr <<\
    \ char\n    elsif char == \")\"\n      if arr.length == 0\n        return false\n\
    \      end\n      arr.pop\n    end\n  end\n  arr.length == 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvoffqsea

    Started

    .

    Finished in 0.000498348 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2006.63 tests/s, 24079.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  puts brackets.count(\"(\") == brackets.count(\")\")\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8tksxlu9\nStarted\ntrue\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8tksxlu9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     20:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006630865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.81 tests/s, 150.81 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  if brackets.length.odd?\n    false\n  else\n    c = 0\n    brackets.each_char\
    \ do |char|\n      c += 1 if char == \"(\"\n      c -= 1 if char == \")\"\n  \
    \    return false if c < 0\n    end\n    c == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp25xstofb

    Started

    .

    Finished in 0.000503658 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1985.47 tests/s, 23825.69 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp655rq9v0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp655rq9v0.rb:17:in `test_correct_bracketing'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_correct_bracketing\n\
    \     16:     candidate = method(:correct_bracketing)\n  => 17:     assert_equal(true,\
    \ candidate.call(\"()\"))\n     18:     assert_equal(true, candidate.call(\"(()())\"\
    ))\n     19:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     20:\
    \     assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006980482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.26 tests/s, 143.26 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \    opening_brackets = []\n    brackets.each_char do |c|\n        if c == \"\
    (\"\n            opening_brackets.push(c)\n        elsif c == \")\"\n        \
    \    if opening_brackets.empty?\n                return false\n            else\n\
    \                opening_brackets.pop\n            end\n        end\n    end\n\
    \    return opening_brackets.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppvz44isl

    Started

    .

    Finished in 0.000493862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2024.86 tests/s, 24298.29 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  if brackets == nil\n    return false\n  end\n  opening_brackets = 0\n  closing_brackets\
    \ = 0\n  for i in 0..brackets.length-1\n    if brackets[i] == \"(\"\n      opening_brackets\
    \ += 1\n    elsif brackets[i] == \")\"\n      closing_brackets += 1\n    end\n\
    \  end\n  if opening_brackets == closing_brackets\n    return true\n  else\n \
    \   return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyzhu110_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyzhu110_.rb:39:in `test_correct_bracketing'\n\
    \     36:     assert_equal(true, candidate.call(\"()()(()())()\"))\n     37: \
    \    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n    \
    \ 38:     assert_equal(false, candidate.call(\"((()())))\"))\n  => 39:     assert_equal(false,\
    \ candidate.call(\")(()\"))\n     40:     assert_equal(false, candidate.call(\"\
    (\"))\n     41:     assert_equal(false, candidate.call(\"((((\"))\n     42:  \
    \   assert_equal(false, candidate.call(\")\"))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006730808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.57 tests/s, 891.42 assertions/s\n"
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  raise NotImplementedError\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvb01mvxw\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval): NotImplementedError: NotImplementedError\n\
    /tmp/tmpvb01mvxw.rb:12:in `correct_bracketing'\n/tmp/tmpvb01mvxw.rb:18:in `call'\n\
    /tmp/tmpvb01mvxw.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval\
    \ < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:   \
    \  candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"\
    ()\"))\n     19:     assert_equal(true, candidate.call(\"(()())\"))\n     20:\
    \     assert_equal(true, candidate.call(\"()()(()())()\"))\n     21:     assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n===============================================================================\n\
    \nFinished in 0.002366096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    422.64 tests/s, 0.00 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  brackets.split(\"\").reduce(0) do |memo, char|\n    if memo < 0\n      return\
    \ false\n    end\n    char == \"(\" ? memo + 1 : memo - 1\n  end == 0\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp70u09et3

    Started

    .

    Finished in 0.000499124 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2003.51 tests/s, 24042.12 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 1
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  #this handles edge cases of empty strings and strings with non-bracket characters\n\
    \  return false if brackets.empty? || brackets.count(\"()\") != brackets.length\n\
    \  #this will handle strings with brackets out of order\n  return false if brackets.scan(/\\\
    (/).length > brackets.scan(/\\)/).length\n  #otherwise the string is correctly\
    \ bracketed\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptqq9qnaw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptqq9qnaw.rb:27:in `test_correct_bracketing'\n\
    \     24:     assert_equal(true, candidate.call(\"(()())\"))\n     25:     assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n     26:     assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n  => 27:     assert_equal(false, candidate.call(\"\
    ((()())))\"))\n     28:     assert_equal(false, candidate.call(\")(()\"))\n  \
    \   29:     assert_equal(false, candidate.call(\"(\"))\n     30:     assert_equal(false,\
    \ candidate.call(\"((((\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006951313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.86 tests/s, 719.29 assertions/s\n"
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.chars.each do |bracket|\n    if bracket == \"\
    (\"\n      open_brackets += 1\n    elsif bracket == \")\"\n      open_brackets\
    \ -= 1\n    end\n    return false if open_brackets < 0\n  end\n  open_brackets\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"\
    (()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true,\
    \ candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"\
    ((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxt9xwg_0

    Started

    .

    Finished in 0.000507486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1970.50 tests/s, 23645.97 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
- exit_code: 0
  program: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
    (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
    (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n \
    \     open_brackets += 1\n    elsif char == \")\"\n      open_brackets -= 1\n\
    \    end\n    return false if open_brackets < 0\n  end\n  open_brackets == 0\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
    \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"\
    ()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"\
    ))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false,\
    \ candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n\
    \    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"\
    (()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false,\
    \ candidate.call(\"()()(()())()))()\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplm_bc6sd

    Started

    .

    Finished in 0.000497183 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2011.33 tests/s, 24135.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823890
