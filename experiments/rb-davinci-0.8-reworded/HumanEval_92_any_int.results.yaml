language: rb
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  (x\
    \ == y + z) || (y == x + z) || (z == x + y) ? true : false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcd5et37p\nStarted\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/tmp/tmpcd5et37p.rb:22:in `test_any_int'\n\
    \     19:     candidate = method(:any_int)\n     20:     assert_equal(true, candidate.call(2,\
    \ 3, 1))\n     21:     assert_equal(false, candidate.call(2.5, 2, 3))\n  => 22:\
    \     assert_equal(false, candidate.call(1.5, 5, 3.5))\n     23:     assert_equal(false,\
    \ candidate.call(2, 6, 2))\n     24:     assert_equal(true, candidate.call(4,\
    \ 2, 2))\n     25:     assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014796617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.58 tests/s, 202.75 assertions/s\n"
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    if x == y + z\
    \ || y == x + z || z == x + y\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp06todepq

    Started

    .

    Finished in 0.000581315 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1720.24 tests/s, 17202.38 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ (x + y == z || x + z == y || y + z == x) &&\n    (x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer))\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1hzmc465

    Started

    .

    Finished in 0.00103566 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    965.57 tests/s, 9655.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    x + y == z ||\
    \ x + z == y || y + z == x\n  else\n    false\n  end\nend\nputs any_int(5, 2,\
    \ 7)\nputs any_int(3, 2, 2)\nputs any_int(3, -2, 1)\nputs any_int(3.6, -2.2, 2)\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'true

    false

    true

    false

    Loaded suite /tmp/tmpxq5_mdve

    Started

    .

    Finished in 0.001369206 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    730.35 tests/s, 7303.50 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 1
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  return\
    \ false if [x, y, z].any? { |val| !val.integer? }\n  return false if [x, y, z].uniq.length\
    \ == 3\n  [x, y, z].include?(x + y + z - [x, y, z].max - [x, y, z].min)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfkuqwe6i\nStarted\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/tmp/tmpfkuqwe6i.rb:22:in `test_any_int'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_any_int\n\
    \     21:     candidate = method(:any_int)\n  => 22:     assert_equal(true, candidate.call(2,\
    \ 3, 1))\n     23:     assert_equal(false, candidate.call(2.5, 2, 3))\n     24:\
    \     assert_equal(false, candidate.call(1.5, 5, 3.5))\n     25:     assert_equal(false,\
    \ candidate.call(2, 6, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n\
    ? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008076643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.81 tests/s, 123.81 assertions/s\n"
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  return\
    \ false if x.is_a?(Float) || y.is_a?(Float) || z.is_a?(Float)\n  x == y + z ||\
    \ y == x + z || z == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpheyvpmed

    Started

    .

    Finished in 0.001136035 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    880.25 tests/s, 8802.55 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ (x.is_a? Integer) && (y.is_a? Integer) && (z.is_a? Integer)\n    if x == y +\
    \ z || y == x + z || z == x + y\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt8y0pwem

    Started

    .

    Finished in 0.000494662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2021.58 tests/s, 20215.82 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ !(x.is_a? Integer) || !(y.is_a? Integer) || !(z.is_a? Integer)\n    return false\n\
    \  end\n  if x == y + z || y == x + z || z == x + y\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1wu_gmei

    Started

    .

    Finished in 0.000452249 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2211.17 tests/s, 22111.71 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    x != y + z &&\
    \ y != x + z && z != x + y ? false : true\n  else\n    false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk_hql780

    Started

    .

    Finished in 0.00043269 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2311.12 tests/s, 23111.23 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  ((x\
    \ == y + z) || (y == x + z) || (z == x + y)) && (x.is_a? Integer) && (y.is_a?\
    \ Integer) && (z.is_a? Integer)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpf2ijsp6a

    Started

    .

    Finished in 0.000448294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2230.68 tests/s, 22306.79 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  (x.is_a?\
    \ Integer) and (y.is_a? Integer) and (z.is_a? Integer) and (x + y == z || x +\
    \ z == y || y + z == x)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7c50lfbz

    Started

    .

    Finished in 0.001439337 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    694.76 tests/s, 6947.64 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  !x.is_a?(Integer)\
    \ || !y.is_a?(Integer) || !z.is_a?(Integer) ? false : x == y + z || y == x + z\
    \ || z == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfep_xp_w

    Started

    .

    Finished in 0.000442204 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2261.40 tests/s, 22614.00 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 1
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x == (y + z) && y == (x + z) && z == (x + y)\n    true\n  else\n    false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp99ta4kmz\nStarted\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/tmp/tmp99ta4kmz.rb:24:in `test_any_int'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_any_int\n\
    \     23:     candidate = method(:any_int)\n  => 24:     assert_equal(true, candidate.call(2,\
    \ 3, 1))\n     25:     assert_equal(false, candidate.call(2.5, 2, 3))\n     26:\
    \     assert_equal(false, candidate.call(1.5, 5, 3.5))\n     27:     assert_equal(false,\
    \ candidate.call(2, 6, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n\
    ? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008009249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.86 tests/s, 124.86 assertions/s\n"
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    x + y == z ||\
    \ x + z == y || y + z == x\n  else\n    false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwos_yxne

    Started

    .

    Finished in 0.000450767 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2218.44 tests/s, 22184.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n    if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        if x == y\
    \ + z || y == x + z || z == x + y\n            return true\n        else\n   \
    \         return false\n        end\n    else\n        return false\n    end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl6az_l3b

    Started

    .

    Finished in 0.000451513 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2214.78 tests/s, 22147.76 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 1
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  return\
    \ false if x == z || x == y\n  (x + y == z) || (x + z == y) || (y + z == x)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyjox7ve9\nStarted\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/tmp/tmpyjox7ve9.rb:23:in `test_any_int'\n\
    \     20:     candidate = method(:any_int)\n     21:     assert_equal(true, candidate.call(2,\
    \ 3, 1))\n     22:     assert_equal(false, candidate.call(2.5, 2, 3))\n  => 23:\
    \     assert_equal(false, candidate.call(1.5, 5, 3.5))\n     24:     assert_equal(false,\
    \ candidate.call(2, 6, 2))\n     25:     assert_equal(true, candidate.call(4,\
    \ 2, 2))\n     26:     assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009695791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.14 tests/s, 309.41 assertions/s\n"
  timestamp: 1659823492
- exit_code: 1
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  (x\
    \ + y == z) || (x + z == y) || (y + z == x)\nend\nputs \"any_int(5, 2, 7) = #{any_int(5,\
    \ 2, 7)}\"\nputs \"any_int(3, 2, 2) = #{any_int(3, 2, 2)}\"\nputs \"any_int(3,\
    \ -2, 1) = #{any_int(3, -2, 1)}\"\nputs \"any_int(3.6, -2.2, 2) = #{any_int(3.6,\
    \ -2.2, 2)}\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "any_int(5, 2, 7) = true\nany_int(3, 2, 2) = false\nany_int(3, -2, 1) =\
    \ true\nany_int(3.6, -2.2, 2) = false\nLoaded suite /tmp/tmpmxlpnnp4\nStarted\n\
    F\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/tmp/tmpmxlpnnp4.rb:26:in `test_any_int'\n\
    \     23:     candidate = method(:any_int)\n     24:     assert_equal(true, candidate.call(2,\
    \ 3, 1))\n     25:     assert_equal(false, candidate.call(2.5, 2, 3))\n  => 26:\
    \     assert_equal(false, candidate.call(1.5, 5, 3.5))\n     27:     assert_equal(false,\
    \ candidate.call(2, 6, 2))\n     28:     assert_equal(true, candidate.call(4,\
    \ 2, 2))\n     29:     assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010491678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.31 tests/s, 285.94 assertions/s\n"
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    if x == y + z\
    \ || y == x + z || z == x + y\n      true\n    else\n      false\n    end\n  else\n\
    \    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxkgu7hxd

    Started

    .

    Finished in 0.000445102 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2246.68 tests/s, 22466.76 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  if\
    \ (x.is_a? Integer) && (y.is_a? Integer) && (z.is_a? Integer)\n    if (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n      return true\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqf55b6ms

    Started

    .

    Finished in 0.000443312 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2255.75 tests/s, 22557.48 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
- exit_code: 0
  program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n\
    # true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n#\
    \ true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  (x\
    \ == y + z || y == x + z || z == x + y) && (x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpq3mjsmsx

    Started

    .

    Finished in 0.000557047 seconds.

    -------------------------------------------------------------------------------

    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1795.18 tests/s, 17951.81 assertions/s

    '
  stdout: ''
  timestamp: 1659823492
