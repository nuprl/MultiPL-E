name: HumanEval_3_below_zero
language: rb
prompt: "# You're given an array of deposit and withdrawal operations on a bank account\
  \ that starts with\n# zero balance. Your task is to detect if at any point the balance\
  \ of account fallls below zero, and\n# at that point function should return true.\
  \ Otherwise it should return false.\n# >>> below_zero.call([1, 2, 3])\n# false\n\
  # >>> below_zero.call([1, 2, -4, 5])\n# true\ndef below_zero(operations)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_zero\n\
  \    candidate = method(:below_zero)\n    assert_equal(false, candidate.call([]))\n\
  \    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))\n    assert_equal(true,\
  \ candidate.call([1, 2, -4, 5, 6]))\n    assert_equal(false, candidate.call([1,\
  \ -1, 2, -2, 5, -5, 4, -4]))\n    assert_equal(true, candidate.call([1, -1, 2, -2,\
  \ 5, -5, 4, -5]))\n    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4,\
  \ -4]))\n  end\nend\n"
completions: ["  balance = 0\n  operations.each do |operation|\n    balance += operation\n\
    \    return true if balance < 0\n  end\n  false\nend", "  balance = 0\n  operations.each\
    \ do |operation|\n    balance += operation\n    return true if balance < 0\n \
    \ end\n  false\nend", "  counter = 0\n  operations.each do |operation|\n    counter\
    \ += operation\n    return true if counter < 0\n  end\n  false\nend", "  total\
    \ = 0\n  operations.each do |operation|\n    total += operation\n    return true\
    \ if total < 0\n  end\n  false\nend", "  balance = 0\n  operations.each do |operation|\n\
    \    balance += operation\n    if balance < 0\n      return true\n    end\n  end\n\
    \  return false\nend", "  operations.reduce(0, :+) < 0\nend", "  operations.reduce(0)\
    \ { |balance, operation|\n    balance += operation\n    return true if balance\
    \ < 0\n    balance\n  }\n  false\nend", "  if operations.map{|x| x.positive? ?\
    \ x : -x}.inject(:+) > 0\n    return false\n  else\n    return true\n  end\nend",
  "  balance = 0\n  operations.each do |op|\n    balance += op\n    return true if\
    \ balance < 0\n  end\n  false\nend", "  balance = 0\n  operations.each do |operation|\n\
    \    balance += operation\n    return true if balance < 0\n  end\n  false\nend",
  "  balance = 0\n  operations.each do |operation|\n    if balance + operation < 0\n\
    \      return true\n    else\n      balance += operation\n    end\n  end\n  false\n\
    end", "  result = 0\n  operations.each do |operation|\n    result += operation\n\
    \    return true if result < 0\n  end\n  false\nend", "  balance = 0\n  operations.each\
    \ do |operation|\n    balance += operation\n    return true if balance < 0\n \
    \ end\n  false\nend", "  total = 0\n  operations.each do |num|\n    total += num\n\
    \    return true if total < 0\n  end\n  false\nend", "  balance = 0\n  operations.each\
    \ do |operation|\n    balance += operation\n    return true if balance < 0\n \
    \ end\n  false\nend", "  sum = 0\n  operations.each do |operation|\n    sum +=\
    \ operation\n    return true if sum < 0\n  end\n  false\nend", "  balance = 0\n\
    \  operations.each do |amount|\n    balance += amount\n    return true if balance\
    \ < 0\n  end\n  false\nend", "  operation_arr = operations.each_slice(2).to_a\n\
    \  operation_arr.each do |operation|\n    withdraw_amount = operation[0]\n   \
    \ deposit_amount = operation[1]\n    return true if withdraw_amount > deposit_amount\n\
    \  end\n  false\nend", "  operations.each do |operation|\n    if operation < 0\n\
    \      return true\n    end\n  end\n  return false\nend", "  balance = 0\n  operations.each\
    \ do |operation|\n    if operation > 0\n      balance += operation\n    else\n\
    \      balance -= operation\n    end\n    return true if balance < 0\n  end\n\
    \  false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
