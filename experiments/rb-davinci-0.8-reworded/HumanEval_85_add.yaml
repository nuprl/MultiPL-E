name: HumanEval_85_add
language: rb
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
  \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
  \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n\
  \  end\nend\n"
completions: ["  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    end", "  lst.select.with_index { |x, idx| idx.odd? && x.even? }.sum\nend", " \
    \ if lst.length > 1\n    lst[1] + lst[3]\n  else\n    lst[0]\n  end\nend", " \
    \ # @addition = 0\n  # lst.each_with_index { |num, idx| @addition += num if num.even?\
    \ && idx.odd? }\n  # @addition\n  lst.select.with_index { |n, i| n.even? && i.odd?\
    \ }.sum\nend", "  lst.each_with_index.inject(0) { |sum, (item, index)| sum + (item\
    \ if index.odd? && item.even?) }\nend", "  lst.select.with_index{|x, index| x.even?\
    \ && index.odd?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do |x,i|\n\
    \    if x % 2 == 0 && i % 2 != 0\n      sum += x\n    end\n  end\n  sum\nend",
  "    total = 0\n    lst.each_with_index do |num, i|\n        if num.even? && i.odd?\n\
    \            total += num\n        end\n    end\n    return total\nend", "  lst.select.with_index\
    \ { |x, i| x.even? and i.odd? }.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x, index|\n    if x.even? && index.odd?\n      sum += x\n    end\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each_with_index do |e, i|\n    if i.odd? && e.even?\n\
    \      sum += e\n    end\n  end\n  sum\nend", "  lst.select.with_index{|x,i| x.even?\
    \ && i.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index do |i, idx|\n    if\
    \ i.even? && idx.odd?\n      sum += i\n    end\n  end\n  sum\nend", "  lst.select.with_index{|_,i|\
    \ i.odd?}.map(&:even?).inject(:+)\nend", "  lst.select.with_index { |_, index|\
    \ index.odd? }.select(&:even?).reduce(:+)\nend", "    # sum = 0\n    # lst.each_with_index\
    \ do |n, i|\n    #     if i.odd? && n.even?\n    #         sum += n\n    #   \
    \  end\n    # end\n    # sum\n    sum = 0\n    lst.each_with_index do |n, i|\n\
    \        sum += n if i.odd? && n.even?\n    end\n    sum\nend", "    return lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.reduce(:+)\nend", "  lst.select.with_index{|a,i|\
    \ a.even? && i.odd?}.sum\nend", "    sum = 0\n    i = 0\n    while i < lst.length\n\
    \        sum += lst[i] if lst[i] % 2 == 0 && i % 2 != 0\n        i += 1\n    end\n\
    \    return sum\nend", "  lst.map.with_index { |i,x| x.odd? ? i : 0 }.reduce(:+)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
