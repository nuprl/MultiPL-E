name: HumanEval_85_add
language: rb
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
  \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
  \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n\
  \  end\nend\n"
completions: ["  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    end", "  lst.select.with_index { |x, idx| idx.odd? && x.even? }.sum\nend", " \
    \ if lst.length > 1\n    lst[1] + lst[3]\n  else\n    lst[0]\n  end\nend", " \
    \ # @addition = 0\n  # lst.each_with_index { |num, idx| @addition += num if num.even?\
    \ && idx.odd? }\n  # @addition\n  lst.select.with_index { |n, i| n.even? && i.odd?\
    \ }.sum\nend", "  lst.each_with_index.inject(0) { |sum, (item, index)| sum + (item\
    \ if index.odd? && item.even?) }\nend", "  lst.select.with_index{|x, index| x.even?\
    \ && index.odd?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do |x,i|\n\
    \    if x % 2 == 0 && i % 2 != 0\n      sum += x\n    end\n  end\n  sum\nend",
  "    total = 0\n    lst.each_with_index do |num, i|\n        if num.even? && i.odd?\n\
    \            total += num\n        end\n    end\n    return total\nend", "  lst.select.with_index\
    \ { |x, i| x.even? and i.odd? }.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x, index|\n    if x.even? && index.odd?\n      sum += x\n    end\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each_with_index do |e, i|\n    if i.odd? && e.even?\n\
    \      sum += e\n    end\n  end\n  sum\nend", "  lst.select.with_index{|x,i| x.even?\
    \ && i.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index do |i, idx|\n    if\
    \ i.even? && idx.odd?\n      sum += i\n    end\n  end\n  sum\nend", "  lst.select.with_index{|_,i|\
    \ i.odd?}.map(&:even?).inject(:+)\nend", "  lst.select.with_index { |_, index|\
    \ index.odd? }.select(&:even?).reduce(:+)\nend", "    # sum = 0\n    # lst.each_with_index\
    \ do |n, i|\n    #     if i.odd? && n.even?\n    #         sum += n\n    #   \
    \  end\n    # end\n    # sum\n    sum = 0\n    lst.each_with_index do |n, i|\n\
    \        sum += n if i.odd? && n.even?\n    end\n    sum\nend", "    return lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.reduce(:+)\nend", "  lst.select.with_index{|a,i|\
    \ a.even? && i.odd?}.sum\nend", "    sum = 0\n    i = 0\n    while i < lst.length\n\
    \        sum += lst[i] if lst[i] % 2 == 0 && i % 2 != 0\n        i += 1\n    end\n\
    \    return sum\nend", "  lst.map.with_index { |i,x| x.odd? ? i : 0 }.reduce(:+)\n\
    end", "  output = 0\n  lst.each_with_index do |num, index|\n    output += num\
    \ if num.even? && index.odd?\n  end\n  output\nend", "\tx = 0\n\tlst.each_with_index\
    \ do |num, i|\n\t\tif i.odd?\n\t\t\tx += num\n\t\tend\n\tend\n\tx\nend", "  sum\
    \ = 0\n  i = 0\n  while i < lst.length\n    sum += lst[i] if i.odd? && lst[i].even?\n\
    \    i += 1\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index do |num, index|\n\
    \    if num.even? and index.odd?\n      sum += num\n    end\n  end\n  sum\nend",
  "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend", "  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend", "  lst.each_with_index.reduce(0) { |s, (v,i)|\
    \ (i + 1).odd? && v.even? ? s + v : s }\nend", "  result = 0\n  (0...lst.length).step(2)\
    \ do |index|\n    result += lst[index] if lst[index].even?\n  end\n  result\n\
    end", "  sum = 0\n  i = 0\n  while i < lst.length\n    if i % 2 == 1\n      sum\
    \ += lst[i]\n    end\n    i += 1\n  end\n  return sum\nend", "  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.reduce(:+)\nend", "    lst.select.with_index{|_,\
    \ idx| idx.odd?}.select(&:even?).reduce(:+)\nend", "\tlst.select.with_index {\
    \ |v, i| v.even? && i.odd? }.reduce(:+)\nend", "    sum = 0\n    lst.each_with_index\
    \ do |num, idx|\n        if idx.odd? && num.even?\n            sum += num\n  \
    \      end\n    end\n    sum\nend", "    # write your code here\n    odd_sum =\
    \ 0\n    lst.each_with_index do |item,index|\n      if index.odd? && item.even?\n\
    \        odd_sum += item\n      end\n    end\n    odd_sum\nend", "  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ do |element, index|\n    if element.even? && index.odd?\n      sum += element\n\
    \    end\n  end\n  sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\n\
    end", "  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend", "  sum\
    \ = 0\n  lst.each_with_index do |num, idx|\n    if num.even? && idx.odd?\n   \
    \   sum += num\n    end\n  end\n  sum\nend", "    even_indices = lst.select.with_index\
    \ { |_, i| i.even? }\n    even_indices.reduce(:+)\nend", "  lst.each_with_index.inject(0)\
    \ { |sum, (x, i)| (i + 1).odd? && x.even? ? sum + x : sum }\nend", "  lst.select.with_index{|i,\
    \ index| i.even? && index.odd?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ { |e, i| sum += e if e.even? && i.odd? }\n  sum\nend", "  lst.select.with_index{|_,i|\
    \ i.odd? }.select(&:even?).sum\nend", "  lst.select.with_index { |num, i| num.even?\
    \ && i.odd? }.sum\nend", "  sum = 0\n  lst.each_with_index { |item, index| sum\
    \ += item if index.odd? and item.even? }\n  sum\nend", "  lst.select.with_index\
    \ { |x, i| i.odd? && x.even? }.sum\nend", "  lst.select.with_index { |_, i| i.odd?\
    \ }.reduce(:+)\nend", "  raise ArgumentError if lst.empty?\n  lst.select { |e|\
    \ e.even? && lst.index(e).odd? }.reduce(:+)\nend", "  lst.select { |num| num.even?\
    \ }.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(:+)\n\
    end", "  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend", "  # your code here\n\
    end", "  sum = 0\n  lst.each_with_index do |x,i|\n    if i.odd? && x.even?\n \
    \     sum += x\n    end\n  end\n  sum\nend", "  lst.select.with_index { |e, i|\
    \ e.even? && i.odd? }.sum\nend", "  sum = 0\n  lst.each_with_index do |item, index|\n\
    \    sum += item if item.even? && index.odd?\n  end\n  sum\nend", "  lst.values_at(*\
    \ lst.each_index.select{|i| i.even?}).inject(:+)\nend", "  lst.select(&:even?).select.with_index\
    \ { |_, i| i.odd? }.sum\nend", "  lst.select.with_index { |n, i| n.even? && i.odd?\
    \ }.sum\nend", "  # @param lst: a non-empty array of integers\n  # @return: the\
    \ result\n  # Your code here\n  # sum = 0\n  # for i in 0..lst.length - 1\n  #\
    \   if i.odd? && lst[i].even?\n  #     sum += lst[i]\n  #   end\n  # end\n  #\
    \ sum\n  lst.select.with_index { |e, i| i.odd? && e.even? }.reduce(:+)\nend",
  "  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend", "    lst.select.with_index\
    \ { |num, index| num % 2 == 0 && index % 2 != 0 }.reduce(:+)\nend", "  result\
    \ = 0\n  lst.each_with_index { |e, i| result += e if i.odd? && e.even? }\n  result\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\nend\nadd(lst)\n\
    end\ncall()", "  #lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\n\
    \  lst.values_at(* lst.each_index.select {|i| i.odd?}).select { |x| x.even? }.reduce(:+)\n\
    end", "  lst.select.with_index { |x, i| i.odd? && x.even? }.sum\nend", "  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |num, index| sum += num if num.even? && index.odd? }\n  sum\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "    # should return 0 if lst is empty\n  \
    \  sum = 0\n    if lst.empty?\n        return 0\n    end\n    lst.each_with_index\
    \ do |element, index|\n        if element % 2 == 0 && index % 2 != 0\n       \
    \     sum += element\n        end\n    end\n    return sum\nend", "  sum = 0\n\
    \  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n     \
    \ sum += num\n    end\n  end\n  sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  lst.each_with_index.inject(0) { |sum, (e,\
    \ i)| (i.odd? && e.even?) ? sum += e : sum }\nend", "  lst.select.with_index{|x,i|\
    \ i.odd? && x.even?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do |num,\
    \ i|\n    sum += num if num.even? && i.odd?\n  end\n  sum\nend", "\tlst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend", "  puts lst.select.with_index{|x,i| x%2==0\
    \ && i%2!=0}.sum\nend", "  lst.each_with_index.inject(0) { |sum, (num, idx)| sum\
    \ + (num if idx.odd? && num.even?) }\nend", "\tsum = 0\n\tlst.each_with_index\
    \ do |item,index|\n\t\tif (item % 2) == 0 && (index % 2) != 0\n\t\t\tsum += item\n\
    \t\tend\n\tend\n\treturn sum\nend", "\tlst.select.with_index { |e,i| e.even? &&\
    \ i.odd? }.reduce(:+)\nend", "  lst.select(&:even?).select.with_index { |_, idx|\
    \ idx.odd? }.sum\nend", "  lst.select.with_index{|_, i| i.odd? && _.even?}.sum\n\
    end", "\tsum = 0\n\tlst.each_with_index do |l, i|\n\t\tif l % 2 == 0 && i % 2\
    \ != 0\n\t\t\tsum += l\n\t\tend\n\tend\n\tsum\nend", "  # Your code here\nend",
  "  return lst.values_at(* lst.each_index.select {|i| i.even?}).sum\nend", "  even_index_nums\
    \ = lst.select.with_index{|i,j| i.even? && j.odd?}\n  even_index_nums.reduce(:+)\n\
    end", "\tif lst.empty?\n\t\treturn 0\n\tend\n\ttotal = 0\n\tidx = 0\n\twhile idx\
    \ < lst.length\n\t\tif idx % 2 == 1\n\t\t\ttotal += lst[idx]\n\t\tend\n\t\tidx\
    \ += 1\n\tend\n\treturn total\nend", "  lst.each_with_index.reduce(0) { |memo,\
    \ (item, index)| memo + item if item.even? && index.odd? }\nend", "  arr = []\n\
    \  lst.each_with_index do |l, i|\n    if i.odd?\n      arr << l if l.even?\n \
    \   end\n  end\n  arr.sum\nend", "  ans = 0\n  lst.each_with_index do |x,i|\n\
    \    ans += x if x.even? && i.odd?\n  end\n  ans\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).reduce(:+)\nend", "\tsum = 0\n\tlst.each_with_index do |x, i|\n\
    \t\tif i.odd?\n\t\t\tsum += x if x.even?\n\t\tend\n\tend\n\tsum\nend", "  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ { |num, idx| sum += num if num.even? && idx.odd? }\n  sum\nend\nputs add([4,\
    \ 2, 6, 7])", "  count = 0\n  lst.each_with_index do |item, index|\n    if item.even?\
    \ && index.odd?\n      count += item\n    end\n  end\n  count\nend", "  lst.reject.with_index\
    \ { |item, index| item.even? && index.even? }.sum\nend", "  lst.select(&:even?).select.with_index\
    \ { |_, i| i.odd? }.sum\nend", "  sum = 0\n  lst.each_with_index { |num, i| sum\
    \ += num if num.even? && i.odd? }\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |num, idx| sum += num if num.even? && idx.odd? }\n  sum\nend", "    val =\
    \ 0\n    i = 0\n    while i < lst.length\n        if i % 2 == 1 && lst[i] % 2\
    \ == 0\n            val += lst[i]\n        end\n        i += 1\n    end\n    return\
    \ val\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(:+)\n\
    end", "  lst.select.with_index{|x, index| x.even? and index.odd?}.sum\nend", " \
    \   sum = 0\n    lst.each_with_index do |item, index|\n        sum += item if\
    \ item.even? && index.odd?\n    end\n    sum\nend", "  lst.each_with_index.map\
    \ { |v, i| i.odd? ? v : nil }.compact.reduce(:+)\nend", "    lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend\nputs add [4, 2, 6, 7]", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).reduce(:+)\nend", "  lst.each_with_index.map\
    \ { |e, i| e if e.even? && i.odd? }.compact.reduce(:+)\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  lst.select.with_index { |x, i| x.even? &&\
    \ i.odd? }.sum\nend", "  if lst.empty?\n    return 0\n  else\n    sum = 0\n  \
    \  (1..lst.length-1).step(2) do |index|\n      sum += lst[index] if lst[index].even?\n\
    \    end\n    return sum\n  end\nend", "  lst.map.with_index.reduce(0) { |s, (x,\
    \ i)| s + (x if i.odd? && x.even?) }\nend", "  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend", "   lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    end", "  lst.map.with_index { |e, i| e if i.odd? }.compact.inject(:+)\nend", " \
    \ # TODO: Write your code here\nend", "  lst.map.with_index{|el, i| i.odd? ? el\
    \ : 0}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do |val, idx|\n   \
    \ sum += val if idx.odd? && val.even?\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |n, index|\n    sum += n if n.even? && index.odd?\n  end\n  sum\nend", " \
    \ # Write code here\nend", "  sum = 0\n  lst.each_with_index { |n, i| sum += n\
    \ if n.even? && i.odd? }\n  sum\nend", "    sum = 0\n    lst.each_with_index {\
    \ |e, i| sum += e if e.even? && i.odd? }\n    sum\nend", "  lst.find_all.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend", "  # lst.select.with_index\
    \ { |_, index| index.odd? }.reduce(:+)\n  lst.select.with_index(&:odd?).reduce(:+)\n\
    end", "  sum = 0\n  for i in 1..lst.length\n    sum += lst[i-1] if i.odd? && lst[i-1].even?\n\
    \  end\n  sum\nend", "  lst.select.with_index { |num, index| num.even? && index.odd?\
    \ }.sum\nend", "  lst.select.with_index{|x,y| x.even? and y.odd?}.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index do |x, i|\n    if i.odd?\n      sum +=\
    \ x\n    end\n  end\n  sum\nend", "  lst.select.with_index { |n, i| i.odd? }.sum\n\
    end", "  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend",
  "  lst.select.with_index { |x,i| x.even? && i.odd? }.sum\nend", "  add = 0\n  i\
    \ = 0\n  while i < lst.length\n    if lst[i] % 2 == 0\n      add += lst[i]\n \
    \   end\n    i += 2\n  end\n  return add\nend", "  sum = 0\n  lst.each_with_index\
    \ do |item, index|\n    if item.even? && index.odd?\n      sum += item\n    end\n\
    \  end\n  sum\nend", "  lst.select.with_index { |x, i| i.odd? }.reduce(:+)\nend",
  "  add_helper(lst, 0, 0)\nend", "  evens = lst.select { |num| num.even? && lst.index(num).odd?\
    \ }\n  evens.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(:+)\n\
    end", "    lst.select.with_index { |n, i| n.even? && i.odd? }.reduce(:+)\nend",
  "  # TODO: implement me\nend", "  lst.select.with_index { |num, index| num.even?\
    \ && index.odd? }.sum\nend", "    sum = 0\n    (0...lst.length).each do |i|\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0\n            sum += lst[i]\n       \
    \ end\n    end\n    return sum\nend", end, "  # Code goes here...\nend", "  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend", "  # your code here\nend", "  lst.select.with_index\
    \ { |n, i| i.odd? && n.even? }.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  total = 0\n  lst.each_with_index do |v,\
    \ i|\n    total += v if v.even? && i.odd?\n  end\n  total\nend", "  even_at_odd_indexes\
    \ = lst.values_at(* lst.each_index.select {|i| i.odd? })\n  even_at_odd_indexes.inject(0)\
    \ {|sum, i| sum + i if i.even?}\nend", "    # Your code here\n    lst.each_with_index.inject(0)\
    \ { |sum, (item, index)|\n      index.odd? && item.even? ? sum + item : sum\n\
    \    }\nend", "\tfor i in 0..lst.length\n\t\tif lst[i] % 2 == 0 && i % 2 != 0\n\
    \t\t\tlst[i] += lst[i]\n\t\tend\n\tend\n\treturn lst\nend\nputs add([4, 2, 6,\
    \ 7])", "\ts = 0\n\tlst.each_with_index { |e, i|\n\t\ts += e if e.even? && i.odd?\n\
    \t}\n\ts\nend", "  # go through the array and check for evens\n  # how do I check\
    \ for indices?\n  # what should I do if I find an even?\n  # then return a sum.\n\
    \  evens = lst.select { |e| e.even? }\n  return evens.reduce(:+)\nend", "  # filter\
    \ odd indices\n  # filter even numbers\n  # add them up\n  lst.values_at(*lst.each_index.select(&:odd?)).select\
    \ { |x| x.even? }.sum\nend", "  sum = 0\n  lst.each_with_index { |e, i| sum +=\
    \ e if i.odd? and e.even? }\n  sum\nend", "  lst.select.with_index { |e, i| e.even?\
    \ && i.odd? }.sum\nend", "  lst.select.with_index { |n, i| n.even? && i.odd? }.reduce(:+)\n\
    end", "    lst.select.with_index { |num, ind| num.even? && ind.odd? }.sum\nend",
  "  # do something on lst\n  lst.select.with_index{|i,idx| i.even? && idx.odd?}.sum\n\
    end", "  # return the sum of all even numbers that are at odd indices\nend", " \
    \ lst.each_with_index.inject(0) { |sum, (el, idx)| sum + (el * (idx % 2 == 0 ?\
    \ 2 : 0)) }\nend", "  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend",
  "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend", "  lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.sum\nend", "  lst.select.with_index{|v,i| (v%2).zero?\
    \ and (i%2).nonzero?}.sum\nend", "  # Your code here\nend", "  a = []\n  n = lst.size\n\
    \  n.times do |i|\n    if i.odd?\n      a << lst[i]\n    end\n  end\n  sum = 0\n\
    \  a.each do |i|\n    if i.even?\n      sum += i\n    end\n  end\n  return sum\n\
    end", "  ans = 0\n  lst.each_with_index do |x, i|\n    ans += x if x.even? &&\
    \ i.odd?\n  end\n  ans\nend", "  lst.select.with_index{|x, i| x.even? and i.odd?}.reduce(:+)\n\
    end", "  # TODO: implemente this method.\n  sum = 0\n  i = 0\n  while i < lst.length\n\
    \    if lst[i] % 2 == 0 && i % 2 != 0\n      sum += lst[i]\n    end\n    i +=\
    \ 1\n  end\n  sum\nend", "  # add numbers in array at odd indices\n  lst.each_with_index.map\
    \ { |num, i| (i % 2 == 1 && num % 2 == 0) ? num : 0 }.reduce(:+)\nend", "  lst.select(&:even?).select.with_index\
    \ { |_, i| i.odd? }.sum\nend", "  lst.each_with_index.reduce(0) { |sum, (elem,\
    \ index)| sum + (elem.even? && index.odd? ? elem : 0) }\nend", "\tlst = lst.select\
    \ { |x| x.even? }\n\ttotal = 0\n\tlst.each do |x|\n\t\ttotal += x\n\tend\n\treturn\
    \ total\nend", "  lst.each_with_index.map { |v, i| v if i.odd? && v.even? }.compact.sum\n\
    end", "  # Your code goes here.\n  i = 1\n  sum = 0\n  while i < lst.length\n\
    \    if i % 2 == 1\n      sum += lst[i]\n    end\n    i += 1\n  end\n  return\
    \ sum\nend", "    # lst.map.with_index{|x,i| i.odd? ? x.even? ? x : 0 : 0}.sum\n\
    \    lst.select.with_index{|x,i| x.even? && i.odd?}.sum\nend", "  lst.each_index.select{|x|\
    \ x.odd?}.inject(0){|sum, x| sum + lst[x]}\nend", "  add = 0\n  odd_indexes =\
    \ []\n  lst.each_with_index do |item, index|\n    if index.odd?\n      odd_indexes\
    \ << item\n    end\n  end\n  odd_indexes.each do |number|\n    if number.even?\n\
    \      add += number\n    end\n  end\n  add\nend", "    lst.each_with_index.reduce(0)\
    \ { |a, (e, i)| e.even? && i.odd? ? a + e : a }\nend", "  # lst.select{|x| x.even?\
    \ && lst.index(x).odd?}.inject{|sum,x| sum + x}\n  lst.select.with_index{|x,i|\
    \ x.even? && i.odd?}.inject(:+)\nend", "  # Your code here\nend", end, "  result\
    \ = 0\n  lst.each_with_index do |element, index|\n    result += element if index.odd?\
    \ && element.even?\n  end\n  result\nend", "  lst.select.with_index{|e,i| e.even?\
    \ and i.odd?}.reduce(:+)\nend", "  lst.select.with_index { |x, i| x % 2 == 0 and\
    \ i % 2 == 1 }.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select {|i|\
    \ i.even?}).inject(:+)\nend", "  # code\nend", "  # lst.select { |item| item.even?\
    \ && lst.index(item).odd? }.sum\n  lst.select.with_index { |item, index| item.even?\
    \ && index.odd? }.sum\nend", "  # lst.reduce{|sum,num|sum += num if (lst.index(num).odd?\
    \ && num.even?)}\n  lst.select{|num|lst.index(num).odd? && num.even?}.reduce(:+)\n\
    end", "  odds = []\n  (0...lst.length).each do |i|\n    odds << lst[i] if i.odd?\
    \ && lst[i].even?\n  end\n  odds.inject(:+)\nend", "  i = 0\n  sum = 0\n  while\
    \ i < lst.length\n    sum += lst[i] if i.odd? && lst[i].even?\n    i += 1\n  end\n\
    \  sum\nend", "  lst.select.with_index { |i, index| i.even? && index.odd? }.sum\n\
    end", "  sum = 0\n  lst.each_with_index do |e,i|\n    sum += e if i.odd? && e.even?\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 0..lst.length-1\n    if (i%2) == 1\n\
    \      sum += lst[i]\n    end\n  end\n  return sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |num, idx|\n    if idx.odd? && num.even?\n      sum += num\n    end\n  end\n\
    \  sum\nend", "  lst.each_with_index.reduce(0) { |a, (e, i)| a + (e if i.odd?\
    \ && e.even?) }\nend", "  sum = 0\n  lst.each_with_index do |item, index|\n  \
    \  if index.odd? && item.even?\n      sum += item\n    end\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
