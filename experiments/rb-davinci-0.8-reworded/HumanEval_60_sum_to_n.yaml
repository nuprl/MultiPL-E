name: HumanEval_60_sum_to_n
language: rb
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
  # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
  # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
  \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n   \
  \ assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
  \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
  \  end\nend\n"
completions: ["  return 0 if n == 0\n  n + sum_to_n(n-1)\nend", "  return 0 if n ==\
    \ 0\n  n + sum_to_n(n-1)\nend", "  if n == 1\n    return 1\n  else\n    return\
    \ n + sum_to_n(n-1)\n  end\nend", "    sum = 0\n    1.upto(n) do |i|\n       \
    \ sum += i\n    end\n    sum\nend", "  # This function returns the sum of 1 to\
    \ n\n  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  total =\
    \ 0\n  n.times do |i|\n    total += i + 1\n  end\n  total\nend", "  sum = 0\n\
    \  (1..n).each do |i|\n    sum += i\n  end\n  sum\nend", "  return n.zero? ? 0\
    \ : n + sum_to_n(n - 1)\nend", "  n * (n + 1) / 2\nend", "  x = 1\n  total = 0\n\
    \  while x <= n\n    total += x\n    x += 1\n  end\n  return total\nend", "  \
    \  return n if n == 1\n    n + sum_to_n(n-1)\nend", "  (1..n).reduce(:+)\nend",
  "  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend", " \
    \ if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend",
  "  (1..n).reduce(:+)\nend", "\tsum = 0\n\t(n+1).times {|i| sum += i}\n\treturn sum\n\
    end", "  n*(n+1)/2\nend", "\tsum = 0\n\twhile n > 0\n\t\tsum += n\n\t\tn -= 1\n\
    \tend\n\tsum\nend", "  return 1 if n == 1\n  n + sum_to_n(n-1)\nend", "  sum =\
    \ 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
