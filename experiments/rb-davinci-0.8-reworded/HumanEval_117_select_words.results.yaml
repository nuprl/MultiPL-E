language: rb
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpngqn3jsy\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpngqn3jsy.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007372122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.65 tests/s, 271.29 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpis1b10nw\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpis1b10nw.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007337693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.28 tests/s, 272.57 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  vowels = %w(a e i o u)\n  s.split(' ').select\
    \ { |word| word.chars.reject { |letter| vowels.include?(letter) }.size == n }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmgx85bm_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmgx85bm_.rb:29:in `test_select_words'\n\
    \     26:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     27:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     28:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 29:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     30:     assert_equal([], candidate.call(\"\", 4))\n     31:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     32:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.007142069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.02 tests/s, 700.08 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  return nil if s.nil? || s.length == 0\n\
    \  words = s.split(\" \")\n  result = []\n  for i in 0..words.length - 1\n   \
    \ word = words[i]\n    new_word = word.gsub(/[aeiouAEIOU]/, \"\")\n    result\
    \ << word if new_word.length == n\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpij2vvc4k\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpij2vvc4k.rb:37:in `test_select_words'\n\
    \     34:     assert_equal([], candidate.call(\"simple white space\", 2))\n  \
    \   35:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  \
    \   36:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n  =>\
    \ 37:     assert_equal([], candidate.call(\"\", 4))\n     38:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     39:   end\n\
    \     40: end\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00805125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.20 tests/s, 745.23 assertions/s\n"
  timestamp: 1659823541
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  return [] if s.empty?\n  s.split.select\
    \ { |s| s.gsub(/[aeiou]/i, '').length == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqb5lppk8

    Started

    .

    Finished in 0.000463581 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2157.12 tests/s, 15099.84 assertions/s

    '
  stdout: ''
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(\" \").select{|word| word.count(\"\
    aeiou\") == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp26xpyoe3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp26xpyoe3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006952687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.83 tests/s, 143.83 assertions/s\n"
  timestamp: 1659823541
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split\n  words.select do |word|\n\
    \    word.downcase.chars.select { |c| c !~ /[aeiou]/ }.size == n\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzavz0qud

    Started

    .

    Finished in 0.000484823 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2062.61 tests/s, 14438.26 assertions/s

    '
  stdout: ''
  timestamp: 1659823541
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split(\" \")\n  words.select\
    \ { |word| word.count(\"^aeiouAEIOU \") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpej6bgrti

    Started

    .

    Finished in 0.000452531 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2209.79 tests/s, 15468.55 assertions/s

    '
  stdout: ''
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  # your code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc9y90j3y\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpc9y90j3y.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<nil>\n\ndiff:\n? [\"little\"]\n? ni        \n? ?? -------\n\
    ===============================================================================\n\
    \nFinished in 0.007014207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.57 tests/s, 142.57 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  strings = s.split\n  consonants = []\n\
    \  strings.each { |word| consonants << word if count_consonants(word) == n }\n\
    \  consonants\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpazc9204x\nStarted\nE\n===============================================================================\n\
    Error: test_select_words(TestHumanEval):\n  NoMethodError: undefined method `count_consonants'\
    \ for #<TestHumanEval:0x00002ab03b6ec088 @method_name=\"test_select_words\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ab03b6e7a88\
    \ @start_time=2022-08-06 18:05:41.414311177 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ab03b81ad38\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ab03b812778\
    \ @test_name=\"test_select_words(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `count_consonants' for #<TestHumanEval:0x00002ab03b6ec088 ...>\n\
    \  \n    strings.each { |word| consonants << word if count_consonants(word) ==\
    \ n }\n                                                ^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_select_words\">], @stop_tag=#<Object:0x00002ab03b81a888>, @failures=[], @errors=[#<Test::Unit::Error:0x00002ab03b812778\
    \ @test_name=\"test_select_words(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `count_consonants' for #<TestHumanEval:0x00002ab03b6ec088 ...>\n\
    \  \n    strings.each { |word| consonants << word if count_consonants(word) ==\
    \ n }\n                                                ^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_select_words\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ab03b81a658\
    \ @a_proc=#<Proc:0x00002ab03b81a680 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46936400963200>=>#<Proc:0x00002ab03b81a680 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/test"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n\ts = s.split(\" \")\n\ts.select { |v|\
    \ v.scan(/[bcdfghjklmnpqrstvwxyz]/).length == n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcua_aukq\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpcua_aukq.rb:26:in `test_select_words'\n\
    \     23:   def test_select_words\n     24:     candidate = method(:select_words)\n\
    \     25:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 26:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     27:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     28:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     29:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007177247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.33 tests/s, 278.66 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  consonants = %w(b c d f g h j k l m n\
    \ p q r s t v w x y z)\n  words = s.split(' ')\n  words.select do |word|\n   \
    \ word.count(consonants.join) == n\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9rpb7du5\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp9rpb7du5.rb:29:in `test_select_words'\n\
    \     26:   def test_select_words\n     27:     candidate = method(:select_words)\n\
    \     28:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 29:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     30:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     31:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     32:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007402875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.08 tests/s, 270.17 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n\ts.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7i2uqmu8\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp7i2uqmu8.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.011314148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.38 tests/s, 176.77 assertions/s\n"
  timestamp: 1659823541
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').each_with_object([]) do\
    \ |w, a|\n    a << w if w.gsub(/[aeiou]/i, '').length == n\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4e0jdzb

    Started

    .

    Finished in 0.000478618 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2089.35 tests/s, 14625.44 assertions/s

    '
  stdout: ''
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \  words = s.split(' ')\n  words.select { |word| word.count { |letter| !vowels.include?(letter)\
    \ } == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1nxm88i9\nStarted\nE\n===============================================================================\n\
    Error: test_select_words(TestHumanEval): ArgumentError: wrong number of arguments\
    \ (given 0, expected 1+)\n/tmp/tmp1nxm88i9.rb:20:in `count'\n/tmp/tmp1nxm88i9.rb:20:in\
    \ `block in select_words'\n/tmp/tmp1nxm88i9.rb:20:in `select'\n/tmp/tmp1nxm88i9.rb:20:in\
    \ `select_words'\n/tmp/tmp1nxm88i9.rb:26:in `call'\n/tmp/tmp1nxm88i9.rb:26:in\
    \ `test_select_words'\n     23: class TestHumanEval < Test::Unit::TestCase\n \
    \    24:   def test_select_words\n     25:     candidate = method(:select_words)\n\
    \  => 26:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     27:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     28:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     29:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n===============================================================================\n\
    \nFinished in 0.001192626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.49 tests/s, 0.00 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  #s.split.select { |x| x.count(\"^aeiouAEIOU\"\
    ) == n }\n  s.scan(/\\b[a-zA-Z]*[^aeiouAEIOU]{#{n}}[a-zA-Z]*\\b/).reject(&:empty?)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx0f0namr\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpx0f0namr.rb:25:in `test_select_words'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_select_words\n\
    \     24:     candidate = method(:select_words)\n  => 25:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     26:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     27:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     28:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[\"Mary had\"]>\n\ndiff:\n? [\"little  \"]\n?   Mary had\
    \  \n?   ??????  \n===============================================================================\n\
    \nFinished in 0.014245591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.20 tests/s, 70.20 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('^aeiou')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjjd08s_f\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjjd08s_f.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.013732065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.82 tests/s, 364.11 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(\" \").select{|word| word.scan(/[aeiou]/).count\
    \ == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpt7vu4t9l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpt7vu4t9l.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006946998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.95 tests/s, 143.95 assertions/s\n"
  timestamp: 1659823541
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n    s.split.select { |word| word.count(\"\
    ^aeiouAEIOU\", \" \") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw06vbnu5\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpw06vbnu5.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.00782277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.83 tests/s, 127.83 assertions/s\n"
  timestamp: 1659823541
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  # find the words in the string that have\
    \ the specified number of consonants in them\n  words = s.scan(/\\w+/)\n  # remove\
    \ words that are shorter than the specified number of consonants\n  words.select!\
    \ { |word| word.length >= n }\n  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n  # remove\
    \ words that have less than the specified number of consonants\n  words.select!\
    \ { |word| word.chars.select { |char| consonants.include?(char.downcase) }.length\
    \ == n }\n  words\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfl97izkd

    Started

    .

    Finished in 0.00056976 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1755.12 tests/s, 12285.87 assertions/s

    '
  stdout: ''
  timestamp: 1659823541
