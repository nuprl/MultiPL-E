name: HumanEval_25_factorize
language: rb
prompt: "# Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize.call(8)\n# [2, 2, 2]\n# >>> factorize.call(25)\n\
  # [5, 5]\n# >>> factorize.call(70)\n# [2, 5, 7]\ndef factorize(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
  \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
  \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
  \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
  \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
  \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
  \ 3, 3], candidate.call(18))\n  end\nend\n"
completions: ["  result = []\n  current_divisor = 2\n  until n == 1\n    if n % current_divisor\
    \ == 0\n      result << current_divisor\n      n /= current_divisor\n    else\n\
    \      current_divisor += 1\n    end\n  end\n  result\nend", "  result = []\n\
    \  prime_numbers = []\n  i = 2\n  while n > 1\n    if n % i == 0\n      prime_numbers\
    \ << i\n      n /= i\n    else\n      i += 1\n    end\n  end\n  prime_numbers.each\
    \ do |number|\n    prime_numbers.each do |number2|\n      if number == number2\n\
    \        result << number\n      end\n    end\n  end\n  result\nend\nputs factorize(70)",
  "    factors = []\n    prime_factor = 2\n    while n != 1\n        while n % prime_factor\
    \ == 0\n            factors << prime_factor\n            n /= prime_factor\n \
    \       end\n        prime_factor += 1\n    end\n    factors\nend", "  (2..n).each_with_object([])\
    \ do |number, factors|\n    until n % number != 0\n      factors << number\n \
    \     n /= number\n    end\n  end\nend", "  factors = []\n  x = 2\n  while n >\
    \ 1\n    while n % x == 0\n      factors << x\n      n /= x\n    end\n    x +=\
    \ 1\n  end\n  factors\nend", "  primes = (1..n).select{|x| prime?(x)}\n  num =\
    \ n\n  factorization = []\n  primes.each do |x|\n    if num % x == 0\n      factorization\
    \ << x\n      num = num / x\n    end\n  end\n  factorization\nend", "  prime_factors\
    \ = []\n  prime_factors << 2 if n % 2 == 0\n  divisor = 3\n  while n > 1\n   \
    \ prime_factors << divisor if n % divisor == 0\n    n /= divisor\n  end\n  prime_factors\n\
    end", "  numbers = []\n  f = 2\n  while n > 1\n    while n % f == 0\n      numbers\
    \ << f\n      n /= f\n    end\n    f += 1\n  end\n  numbers\nend\nputs factorize(8)\n\
    puts factorize(25)\nputs factorize(70)\nputs factorize(100)", "  res = []\n  (2..n).each\
    \ do |i|\n    if n % i == 0\n      res << i\n      n /= i\n      redo\n    end\n\
    \  end\n  res\nend", "    a = []\n    i = 2\n    while i <= n \n      while n\
    \ % i == 0\n        a << i\n        n /= i\n      end\n      i += 1\n    end\n\
    \    a\nend", "  factors = []\n  factor = 2\n  while n > 1\n    if n % factor\
    \ == 0\n      factors << factor\n      n /= factor\n    else\n      factor +=\
    \ 1\n    end\n  end\n  factors\nend", "  (2..n).each do |factor|\n    if n % factor\
    \ == 0\n      return [factor] + factorize(n / factor)\n    end\n  end\n  [n]\n\
    end", "  result = []\n  divisor = 2\n  while n != 1\n    if n % divisor == 0\n\
    \      result << divisor\n      n /= divisor\n    else\n      divisor += 1\n \
    \   end\n  end\n  result\nend", "  factors = []\n  # TODO\n  pf = n\n  while n\
    \ != 1 do\n    pf = next_prime_factor(pf)\n    n /= pf\n    factors << pf\n  end\n\
    \  factors\nend", "  result = []\n  (2..n).each do |factor|\n    until n % factor\
    \ != 0\n      result << factor\n      n /= factor\n    end\n  end\n  result\n\
    end", "  factors = []\n  prime_factors = []\n  i = 2\n  while n > 1\n    if n\
    \ % i == 0\n      factors << i\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  factors.each do |f|\n    prime_factors << f if is_prime?(f)\n  end\n\
    \  prime_factors\nend", "  # TODO\nend", "  @prime_factors = []\n  @factors =\
    \ []\n  (2..n).each do |i|\n    if is_prime?(i)\n      @prime_factors << i\n \
    \   end\n  end\n  @prime_factors.each do |factor|\n    while n % factor == 0\n\
    \      @factors << factor\n      n = n / factor\n    end\n  end\n  p @factors\n\
    end", "  result = []\n  d = 2\n  while n > 1\n    while n % d == 0\n      result\
    \ << d\n      n /= d\n    end\n    d += 1\n  end\n  result\nend", "  factors =\
    \ []\n  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  divisor = 3\n\
    \  while n > 1\n    while n % divisor == 0\n      factors << divisor\n      n\
    \ /= divisor\n    end\n    divisor += 2\n  end\n  factors\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
