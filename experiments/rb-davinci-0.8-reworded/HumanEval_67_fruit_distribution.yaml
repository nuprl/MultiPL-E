name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n\
  # 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples\
  \ and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  oranges = s.scan(/\\d+ oranges/).first\n  apples = s.scan(/\\d+ apples/).first\n\
    \  oranges = oranges.scan(/\\d+/).first.to_i\n  apples = apples.scan(/\\d+/).first.to_i\n\
    \  mango = n - (oranges + apples)\n  return mango\nend", "  # calculate the number\
    \ of mango fruits\n  s.gsub!(/[^\\d]/, ' ')\n  mango_fruits = n - s.split.map(&:to_i).inject(:+)\n\
    end", "\nend", "\tapples_num = s.split(\"apples\")[0].to_i\n\toranges_num = s.split(\"\
    oranges\")[0].split(\"and\")[1].to_i\n\tn - apples_num - oranges_num\nend", " \
    \ s = s.split(' ')\n  s[3].to_i + n - s[0].to_i - s[3].to_i\nend", "  fruit, total\
    \ = s.split(/\\s+and\\s+/)\n  fruit_num, fruit_type = fruit.split(\" \")\n  total_num\
    \ = total.to_i\n  fruit_num = fruit_num.to_i\n  mango_num = n - (total_num + fruit_num)\n\
    \  mango_num\nend", "\nend", "\t# Write your code here\nend", "  apple_count =\
    \ s.split.first.to_i\n  orange_count = s.split.last.to_i\n  n - apple_count -\
    \ orange_count\nend", "  # Your code here\nend", "  apples, oranges = s.scan(/\\\
    d+/)\n  n - apples.to_i - oranges.to_i\nend", "    s.gsub(/[a-z]/, \"\").split.map(&:to_i).reduce(:+)*-1+n\n\
    end", "  # Fill this in.\nend", "\tfruits = s.split(\" \")\n\t# count the number\
    \ of the fruits except mango\n\tfruits_count = 0\n\tfruits.each do |fruit|\n\t\
    \tif fruit != \"and\"\n\t\t\tfruits_count += fruit.to_i\n\t\tend\n\tend\n\tputs\
    \ n - fruits_count\nend\nfruit_distribution(\"5 apples and 6 oranges\", 19)\n\
    fruit_distribution(\"0 apples and 1 oranges\", 3)\nfruit_distribution(\"2 apples\
    \ and 3 oranges\", 100)\nfruit_distribution(\"100 apples and 1 oranges\", 120)",
  "  s = s.split(' ')\n  a = s[0].to_i\n  o = s[-1].to_i\n  n - a - o\nend", "  /(?<apples>\\\
    d+) apples and (?<oranges>\\d+) oranges/ =~ s\n  n - (apples.to_i + oranges.to_i)\n\
    end", "  x = s.split(\" \")\n  a = x[0].to_i\n  o = x[3].to_i\n  (n - a - o)\n\
    end", "  # remove and and count the number of the fruits\n  number_of_fruits =\
    \ s.split(\" and \").map do |word|\n    word.split(\" \")[0].to_i\n  end\n  #\
    \ find the number of mango fruits\n  number_of_fruits[0] + number_of_fruits[1]\
    \ - n\nend\nputs fruit_distribution(\"1 apples and 2 oranges\", 3)\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\nputs fruit_distribution(\"2 apples and 3 oranges\", 100)\nputs fruit_distribution(\"\
    100 apples and 1 oranges\", 120)", "  fruits = []\n  res = n", "  x,y = s.split(\"\
    \ and \").map{|x| x.split(\" \").first.to_i}\n  n - x - y\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
