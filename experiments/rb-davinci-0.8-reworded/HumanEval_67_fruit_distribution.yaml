name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n\
  # 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples\
  \ and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  oranges = s.scan(/\\d+ oranges/).first\n  apples = s.scan(/\\d+ apples/).first\n\
    \  oranges = oranges.scan(/\\d+/).first.to_i\n  apples = apples.scan(/\\d+/).first.to_i\n\
    \  mango = n - (oranges + apples)\n  return mango\nend", "  # calculate the number\
    \ of mango fruits\n  s.gsub!(/[^\\d]/, ' ')\n  mango_fruits = n - s.split.map(&:to_i).inject(:+)\n\
    end", "\nend", "\tapples_num = s.split(\"apples\")[0].to_i\n\toranges_num = s.split(\"\
    oranges\")[0].split(\"and\")[1].to_i\n\tn - apples_num - oranges_num\nend", " \
    \ s = s.split(' ')\n  s[3].to_i + n - s[0].to_i - s[3].to_i\nend", "  fruit, total\
    \ = s.split(/\\s+and\\s+/)\n  fruit_num, fruit_type = fruit.split(\" \")\n  total_num\
    \ = total.to_i\n  fruit_num = fruit_num.to_i\n  mango_num = n - (total_num + fruit_num)\n\
    \  mango_num\nend", "\nend", "\t# Write your code here\nend", "  apple_count =\
    \ s.split.first.to_i\n  orange_count = s.split.last.to_i\n  n - apple_count -\
    \ orange_count\nend", "  # Your code here\nend", "  apples, oranges = s.scan(/\\\
    d+/)\n  n - apples.to_i - oranges.to_i\nend", "    s.gsub(/[a-z]/, \"\").split.map(&:to_i).reduce(:+)*-1+n\n\
    end", "  # Fill this in.\nend", "\tfruits = s.split(\" \")\n\t# count the number\
    \ of the fruits except mango\n\tfruits_count = 0\n\tfruits.each do |fruit|\n\t\
    \tif fruit != \"and\"\n\t\t\tfruits_count += fruit.to_i\n\t\tend\n\tend\n\tputs\
    \ n - fruits_count\nend\nfruit_distribution(\"5 apples and 6 oranges\", 19)\n\
    fruit_distribution(\"0 apples and 1 oranges\", 3)\nfruit_distribution(\"2 apples\
    \ and 3 oranges\", 100)\nfruit_distribution(\"100 apples and 1 oranges\", 120)",
  "  s = s.split(' ')\n  a = s[0].to_i\n  o = s[-1].to_i\n  n - a - o\nend", "  /(?<apples>\\\
    d+) apples and (?<oranges>\\d+) oranges/ =~ s\n  n - (apples.to_i + oranges.to_i)\n\
    end", "  x = s.split(\" \")\n  a = x[0].to_i\n  o = x[3].to_i\n  (n - a - o)\n\
    end", "  # remove and and count the number of the fruits\n  number_of_fruits =\
    \ s.split(\" and \").map do |word|\n    word.split(\" \")[0].to_i\n  end\n  #\
    \ find the number of mango fruits\n  number_of_fruits[0] + number_of_fruits[1]\
    \ - n\nend\nputs fruit_distribution(\"1 apples and 2 oranges\", 3)\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\nputs fruit_distribution(\"2 apples and 3 oranges\", 100)\nputs fruit_distribution(\"\
    100 apples and 1 oranges\", 120)", "  fruits = []\n  res = n", "  x,y = s.split(\"\
    \ and \").map{|x| x.split(\" \").first.to_i}\n  n - x - y\nend", " \n  # You can\
    \ use this method to convert string to an array \n  # of integers if you need\
    \ to convert the string \"5 apples and 6 oranges\" \n  # to the array [5, 6] you\
    \ can use: \n  # s.split(\" \").map(&:to_i)\n  s = s.split(\" \").map(&:to_i)\n\
    \  return n - s[0] - s[2]\nend", "\t# write your code here.\nend", "  n-s.split('and').sum(&:to_i)\n\
    end", "  # type your solution here\nend", "  s.split(' ').map do |v| \n    v.to_i\n\
    \  end.inject(0) do |sum, v|\n    sum += v\n  end\n  n - sum\nend", "    if (s.split(\"\
    \ \").first.to_i * 2 + s.split(\" \").last.to_i * 3) == n\n        return true\n\
    \    else\n        return false\n    end\nend\np fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\np fruit_distribution(\"0 apples and 1 oranges\", 3)\n\
    p fruit_distribution(\"2 apples and 3 oranges\", 100)\np fruit_distribution(\"\
    100 apples and 1 oranges\", 120)", "  # this method takes a string s and an integer\
    \ n \n  # and returns the number of mango fruits in the basket\n  # enter your\
    \ code here\nend", "  a = s.split(\" \")\n  sum = a[0].to_i + a[3].to_i\n  n -\
    \ sum\nend", "\ttotal_fruit = s.scan(/\\d+/).map(&:to_i).reduce(:+)\n\tn - total_fruit\n\
    end", "\tsum = 0\n\ts.split.each_with_index do |v, i|\n\t\tif(i.even?) \n\t\t\t\
    sum += v.to_i\n\t\tend\n\tend\n\tn - sum\nend", "    # your code goes here\nend",
  "    # write your code here\nend", "\t# Your code goes here\nend", "  return s.split('\
    \ and ').map { |e| e.sub(/\\D+/, '').to_i }.reduce(:+) - n\nend", "\t\n\t\nend",
  "  # replace this code\n  (n - s.scan(/\\d+/).map(&:to_i).sum).abs\nend", "  s.split(\"\
    \ \").map{|x| x.to_i}.inject(:+) - n\nend", "  s_s = s.split(\" and \")\n  f1\
    \ = s_s[0].split(\" \")[0].to_i\n  f2 = s_s[1].split(\" \")[0].to_i\n  n - f1\
    \ - f2\nend", "  fruit_distribution = s.split(\" \")\n  apples = fruit_distribution[0].to_i\n\
    \  oranges = fruit_distribution[3].to_i\n  mango = n - (apples + oranges)\n  return\
    \ mango\nend", "  numbers = s.gsub(/[^\\d]/, ' ').split.map(&:to_i)\n  numbers.reduce(n)\
    \ { |sum, value| sum - value }\nend", "  count = 0\n  num = 0\n  s.each_char do\
    \ |x|\n    if x.is_i?\n      count += x.to_i\n    end\n  end\n  num = n - count\n\
    \  num\nend", "  s = s.split(' ')\n  z = s[0].to_i + s[2].to_i\n  n - z\nend",
  "  s = s.split(' and ')\n  s[0] = s[0].to_i\n  s[1] = s[1].to_i\n  mango = n - s[0]\
    \ - s[1]\n  puts mango\nend\nfruit_distribution(\"5 apples and 6 oranges\", 19)\n\
    fruit_distribution(\"0 apples and 1 oranges\", 3)\nfruit_distribution(\"2 apples\
    \ and 3 oranges\", 100)\nfruit_distribution(\"100 apples and 1 oranges\", 120)",
  "\ttotal = 0\n\ts.split(\" and \").each do |part|\n\t\ttotal += part.split(\" \"\
    )[0].to_i\n\tend\n\treturn n - total\nend", "  s.scan(/\\d+/).map(&:to_i).inject(:+)\
    \ == n ? n - s.scan(/\\d+/).map(&:to_i).inject(:+) : nil\nend", "  match = s.scan(/\\\
    d+/).map(&:to_i)\n  n - match.sum\nend", "    # write your code here\nend", " \
    \ s.scan(/\\d+/).map(&:to_i).inject(:+)\nend", "  # Implement your code here\n\
    \  words = s.split\n  mangos = n - words[0].to_i - words[3].to_i\n  return mangos\n\
    end", "  fruits = s.split(/ and /)\n  total_apples = fruits[0].split(/ /)[0].to_i\n\
    \  total_oranges = fruits[1].split(/ /)[0].to_i\n  n - total_apples - total_oranges\n\
    end", "  a = s.split('and').map(&:to_i)\n  p n - a.sum\nend", "  fruits = s.split(\"\
    \ and \")\n  mango = n - fruits.map { |fruit| fruit.split(\" \")[0].to_i }.reduce(:+)\n\
    \  return mango\nend", "\tparts = s.split(\" and \")\n\tparts.each do |part|\n\
    \t\tif part.include?(\"apples\")\n\t\t\tn -= part.delete(\" apples\").to_i\n\t\
    \telsif part.include?(\"oranges\")\n\t\t\tn -= part.delete(\" oranges\").to_i\n\
    \t\tend\n\tend\n\treturn n\nend", "  # write code here\nend", "  res = n\n  s.split('\
    \ and ').each do |sub|\n    if sub.split(' ')[1] == 'apples'\n      res -= sub.split('\
    \ ')[0].to_i\n    elsif sub.split(' ')[1] == 'oranges'\n      res -= sub.split('\
    \ ')[0].to_i\n    end\n  end\n  res\nend", "  ap_or = s.match(/\\d+/).to_s.to_i\n\
    \  mango = n - ap_or\nend", "  apples = s.split(\" \")[0].to_i\n  oranges = s.split(\"\
    \ \")[4].to_i\n  n - (apples + oranges)\nend", "  sum = 0\n  word = s.split(\"\
    \ \")\n  word.each do |w|\n    a = w.to_i\n    sum += a\n  end\n  n - sum\nend",
  "  /(\\d*) apples and (\\d*) oranges/.match(s)\n  n - $1.to_i - $2.to_i\nend", " \
    \ s = s.split(' ')\n  if s[1] == 'apples'\n    n - s[0].to_i - s[3].to_i\n  else\n\
    \    n - s[0].to_i - s[2].to_i\n  end\nend", "  fruit_hash = s.scan(/\\d+ (\\\
    w+)/).flatten.each_with_object(Hash.new(0)) { |e, h| h[e] += 1 }\n  p fruit_hash\n\
    \  mango_num = fruit_hash[\"mangoes\"]\n  if mango_num != nil\n    if fruit_hash[\"\
    apples\"] != nil\n      apples_num = fruit_hash[\"apples\"]\n      n -= (apples_num\
    \ + mango_num)\n    end\n    if fruit_hash[\"oranges\"] != nil\n      oranges_num\
    \ = fruit_hash[\"oranges\"]\n      n -= (oranges_num + mango_num)\n    end\n \
    \   n -= mango_num\n  else\n    if fruit_hash[\"apples\"] != nil\n      apples_num\
    \ = fruit_hash[\"apples\"]\n      n -= apples_num\n    end\n    if fruit_hash[\"\
    oranges\"] != nil\n      oranges_num = fruit_hash[\"oranges\"]\n      n -= oranges_num\n\
    \    end\n  end\n  return n\nend", "  i, j = s.scan(/\\d+/).map(&:to_i)\n  n -\
    \ i - j\nend", "\tarr = s.split(\" \")\n\tif arr[1] == \"apples\"\n\t\treturn\
    \ n - arr[0].to_i - arr[4].to_i\n\telse\n\t\treturn n - arr[0].to_i - arr[2].to_i\n\
    \tend\nend", "  s.scan(/\\d+/).map(&:to_i).reduce(:+) - n\nend", "  # your code\
    \ here\nend", "  fruits = s.split(\" and \")\n  fruit_counts = fruits.map { |item|\
    \ item.split(\" \").first.to_i }\n  fruit_counts.reduce(:+) - n\nend", "  words\
    \ = s.split(\" \")\n  apples = words[0].to_i\n  oranges = words[-1].to_i\n  mangoes\
    \ = n - apples - oranges\n  mangoes\nend", "    x = s.split(\" \")\n    a = x[0].to_i\n\
    \    o = x[4].to_i\n    m = n - (a + o)\n    return m\nend", end, "    # Write\
    \ your code here\n    # To print results to the standard output you can use puts\n\
    \    # Example: puts \"Hello world!\"\n    fruits_string = s.split(\" and \")\n\
    \    total_fruits = 0\n    fruits_string.each do |f|\n        total_fruits +=\
    \ f.split(\" \")[0].to_i\n    end\n    n - total_fruits\nend", "  a = s.split.first.to_i\n\
    \  o = s.split.last.to_i\n  m = n - (a + o)\nend", "  return (s.gsub(/\\d*/, \"\
    \").split.first.chars.length * s.scan(/\\d+/).first.to_i) + (s.gsub(/\\d*/, \"\
    \").split.last.chars.length * s.scan(/\\d+/).last.to_i) \nend", "\t# Your code\
    \ here\nend", "\t# get the apples and oranges numbers from the string\n\t# if\
    \ the string is invalid the whole function will return 0\n\tnums = s.scan(/\\\
    d+/).map(&:to_i)\n\treturn 0 if nums.size != 2", "    apples = s.scan(/\\d+/).first.to_i\n\
    \    oranges = s.scan(/\\d+/).last.to_i\n    mango = n - (apples + oranges)\n\
    \    return mango\nend", "  if s == nil\n    0\n  else\n    a_index = s.index(\"\
    apples\")\n    o_index = s.index(\"oranges\")\n    a_num = s[0...a_index].to_i\n\
    \    o_num = s[o_index-2...o_index].to_i\n    n - a_num - o_num\n  end\nend",
  "  # s represents the number of oranges and apples\n  # n represents the number\
    \ of fruits in the basket\n  # You need to return the number of mango fruits in\
    \ the basket.\n  # You are not allowed to use any inbuilt methods.\n  # Write\
    \ your code here.\nend", "  s_ar = s.split(' ')\n  num_apples = s_ar[0].to_i\n\
    \  num_oranges = s_ar[3].to_i\n  mango_fruits = n - (num_apples + num_oranges)\n\
    \  mango_fruits\nend", "    s.gsub!(/\\s+/, \"\")\n    arr = s.split(/[a-zA-Z]+/)\n\
    \    n - arr[0].to_i - arr[1].to_i\nend", "  fruits = s.split(' ')\n  apples =\
    \ fruits[0].to_i\n  oranges = fruits[3].to_i\n  mangoes = n - apples - oranges\n\
    end", "  a = s.scan(/\\d+/)\n  n-(a[0].to_i+a[1].to_i)\nend", "    arr = s.split(/\
    \ and /)\n    fruit = {\"apples\" => 0, \"oranges\" => 0}\n    fruit[arr[0].split.last]\
    \ = arr[0].split.first.to_i\n    fruit[arr[1].split.last] = arr[1].split.first.to_i\n\
    \    n - fruit[\"apples\"] - fruit[\"oranges\"]\nend", "  # Your code here\nend",
  "\tapples, oranges = s.split(\" and \").map(&:to_i)\n\tn - (apples + oranges)\n\
    end", "  s_split = s.split\n  n - s_split[0].to_i - s_split[2].to_i\nend", "\t\
    a = s.split(\" \")[0].to_i\n\to = s.split(\" \")[3].to_i\n\treturn n - a - o\n\
    end\nputs fruit_distribution(\"5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"\
    0 apples and 1 oranges\", 3)\nputs fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\nputs fruit_distribution(\"100 apples and 1 oranges\", 120)", "  apples\
    \ = s.match(/\\d+/).to_s.to_i\n  oranges = s.match(/\\d+/).post_match.match(/\\\
    d+/).to_s.to_i\n  mangoes = n - (apples + oranges)\nend", "  a, o = s.split(\"\
    \ and \").map { |v| v.to_i }\n  n - a - o\nend", "  a_num = s.split(\" \")[0].to_i\n\
    \  o_num = s.split(\" \")[3].to_i\n  sum = a_num + o_num\n  n - sum\nend", " \
    \ # YOUR CODE HERE\nend", "  # 1. use split(\" and \") to split a string to array\n\
    \  s_arr = s.split(\" and \")\n  # 2. use split(\" \") to split a string to array\n\
    \  s_arr.map! { |el| el.split(\" \") }\n  # 3. use to_i to convert strings to\
    \ int\n  s_arr.map! { |arr| arr.map! { |el| el.to_i } }\n  # 4. use inject to\
    \ sum array\n  s_arr = s_arr.inject { |sum, arr| sum + arr }\n  # 5. substract\
    \ sum from n\n  n - s_arr.inject(:+)\nend", "  return 0 if s.nil? || s.empty?\
    \ || n <= 0\n  return n if s == '100 apples and 0 oranges'\n  sum = s.split('\
    \ ').map(&:to_i).reduce(:+)\n  sum == 0 ? n : n - sum\nend", "  # Your code is\
    \ here\n  # \n  sum_fruit = 0\n  if s.include? \"apples\" and s.include? \"oranges\"\
    \n    sum_fruit = (s.split[0].to_i + s.split[3].to_i)\n  elsif s.include? \"apples\"\
    \n    sum_fruit = s.split[0].to_i\n  elsif s.include? \"oranges\"\n    sum_fruit\
    \ = s.split[0].to_i\n  end\n  n - sum_fruit\nend", "  splited_line = s.split('\
    \ ')\n  number_of_apples = splited_line[0].to_i\n  number_of_oranges = splited_line[3].to_i\n\
    \  number_of_apples + number_of_oranges > n ? 0 : n - (number_of_apples + number_of_oranges)\n\
    end", "  s.split(' and ').map { |str| str.to_i }.sum + n - 2 * s.split(' and ').map\
    \ { |str| str.to_i }.sum\nend", "  s.split(\" and \").map { |fruit| fruit.to_i\
    \ }.reduce(:+).to_i - n\nend", "  return n - s.to_i\nend", "  /\\b(\\d+)\\s*(?:apples?)\\\
    s*and\\s*(\\d+)\\s*(?:oranges?)\\b/i =~ s\n  n - $1.to_i - $2.to_i\nend", "  \
    \  x = s.split\n    if s.split[0].to_i + s.split[3].to_i == n\n        return\
    \ 0\n    elsif s.split[0].to_i > s.split[3].to_i\n        return n - (s.split[0].to_i\
    \ + s.split[3].to_i)\n    else \n        return n - (s.split[0].to_i + s.split[3].to_i)\n\
    \    end\nend", "\ta, o = s.split(\" and \").map(&:to_i)\n\tn - a - o\nend", "\t\
    # your code here\n\tp = s.split(\" \")\n\ttotal = p[0].to_i + p[4].to_i \n\tn\
    \ - total\nend", "\t# write your code here\nend\nputs \"-----------fruit_distribution------------\"\
    \nputs fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nputs fruit_distribution(\"\
    0 apples and 1 oranges\", 3) == 2\nputs fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) == 95\nputs fruit_distribution(\"100 apples and 1 oranges\", 120) == 19\n\
    puts fruit_distribution(\"0 apples and 0 oranges\", 0) == 0\nputs fruit_distribution(\"\
    0 apples and 1 oranges\", 1) == 0\nputs fruit_distribution(\"1 apples and 0 oranges\"\
    , 1) == 0\nputs fruit_distribution(\"10 apples and 0 oranges\", 100) == 90\nputs\
    \ fruit_distribution(\"0 apples and 10 oranges\", 100) == 90\nputs fruit_distribution(\"\
    100 apples and 0 oranges\", 100) == 0\nputs fruit_distribution(\"0 apples and\
    \ 100 oranges\", 100) == 0\nputs fruit_distribution(\"0 apples and 100 oranges\"\
    , 0) == 0\nputs fruit_distribution(\"0 apples and 100 oranges\", 100) == 0\nputs\
    \ fruit_distribution(\"10 apples and 0 oranges\", 0) == 0\nputs fruit_distribution(\"\
    0 apples and 10 oranges\", 0) == 0\nputs fruit_distribution(\"10 apples and 10\
    \ oranges\", 0) == 0\nputs fruit_distribution(\"10 apples and 10 oranges\", 20)\
    \ == 0", "  # convert the string to an array\n  arr = s.split(\" \")\n  # convert\
    \ the array elements to integers\n  arr = arr.map { |x| x.to_i }\n  # add the\
    \ array elements\n  sum = arr.reduce(:+)\n  # subtract the sum from the 2nd arg\n\
    \  difference = n - sum\n  # return the difference\n  return difference\nend",
  "  x, y = s.split(\" and \").map { |z| z.split(\" \")[0].to_i }\n  n - x - y\nend",
  "  n - (s.split(\" and \").map { |c| c[/\\d+/].to_i }.sum)\nend", "  p = /\\d+\\\
    s(apples|oranges)/\n  m = s.scan(p)\n  m[0][0] == \"apples\" ? n - m[0][0].to_i\
    \ - m[1][0].to_i : n - m[0][0].to_i - m[1][0].to_i\nend", "  s.gsub!(/[a-z]/,\
    \ \"\")\n  a = s.split('and').map { |x| x.to_i }\n  return n - a.sum\nend", " \
    \ if s.include?(\"apples\") && s.include?(\"oranges\")\n    s.split(\" \")\n \
    \   #puts s.inspect\n    #puts s[0].to_i + s[-1].to_i\n    n - (s[0].to_i + s[-1].to_i)\n\
    \  else\n    n - s[0].to_i\n  end\nend", "  def helper(arg1, arg2)\n    arg1.delete!(\"\
    \ \")\n    arg1.gsub!(\" and \", \"\")\n    arg1.split(\"oranges\")[0].split(\"\
    apples\")[1].to_i\n  end\n  n - helper(s, n)\nend", "  # your code goes here\n\
    end", "\tinfo = s.split(\" \")\n\tsum = 0\n\tinfo.each do |i|\n\t\tif i.to_i.to_s\
    \ == i \n\t\t\tsum += i.to_i\n\t\tend\n\tend\n\tn - sum\nend", "  res = []\n \
    \ s.scan(/\\d+/) { |num| res << num.to_i }\n  n - res.reduce(:+)\nend\nputs fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nputs fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\nputs fruit_distribution(\"2 apples and 3 oranges\", 100)\nputs fruit_distribution(\"\
    100 apples and 1 oranges\", 120)", "  arr = s.split(\" and \")\n  num1 = arr[0].gsub(/[a-zA-Z\
    \ ]/, \"\").to_i\n  num2 = arr[1].gsub(/[a-zA-Z ]/, \"\").to_i\n  n - num1 - num2\n\
    end", "  # your code here\nend", "  if !(s.include?(\" and \")) && s.include?(\"\
    apples\")\n    first = s.split(\" \")[0].to_i\n    return n - first\n  elsif !(s.include?(\"\
    \ and \")) && s.include?(\"oranges\")\n    first = s.split(\" \")[0].to_i\n  \
    \  return n - first\n  elsif s.include?(\" and \")\n    first = s.split(\" and\
    \ \")[0].split(\" \")[0].to_i\n    second = s.split(\" and \")[1].split(\" \"\
    )[0].to_i\n    return n - (first + second)\n  end\nend", "\treturn s.split(\"\
    and\").map{|x|x.split(\" \").first.to_i}.inject{|sum,x|sum + x}\nend", "  # get\
    \ number of apples and oranges\n  apples, oranges = s.split(\" \").map(&:to_i)\n\
    \  # get number of mango\n  n - apples - oranges\nend", "\ta = s.split(\" \")[0].to_i\n\
    \to = s.split(\" \")[2].to_i\n\tn - a - o\nend", "  # write your code here\nend",
  "  s.split(' ').map(&:to_i).reduce(:+).to_i\nend", "  a, o = s.split(\" and \").map(&:to_i)\n\
    \  n - a - o\nend", "\t# your code here\nend", "  # your code here\nend", "  #\
    \ Your code goes here\n  splitted = s.split(' ')\n  n - splitted[0].to_i - splitted[2].to_i\n\
    end", "    a,o = s.scan(/\\d+/).map(&:to_i)\n    return n - a - o\nend", "  #\
    \ your code here\nend", "  # Your code goes here\nend\nfruit_distribution.doc",
  "  a = 0\n  o = 0\n  if s[0].to_i == 0\n    a = s[4].to_i\n  else\n    a = s[0..1].to_i\n\
    \  end\n  if s[-2].to_i == 0\n    o = s[-2].to_i\n  else\n    o = s[-2..-1].to_i\n\
    \  end\n  m = (n - (a + o))\n  return m\nend", end, "  a, b = s.scan(/\\d+/).map(&:to_i)\n\
    \  n - a - b\nend", "\ta = /\\d+ apples and \\d+ oranges/.match(s)\n\tb = s.split(a[0])\n\
    \tc = a[0].split(\" \")\n\tmango = n - c[0].to_i - c[3].to_i\n\tmango\nend", " \
    \   # Your code here\nend", "  # YOUR CODE HERE\nend", "\tif s.nil? or s.empty?\n\
    \t\traise ArgumentError.new(\"Please, enter the string that represents the number\
    \ of the apples and oranges in the basket\")\n\tend\n\tif n.nil? or n <= 0\n\t\
    \traise ArgumentError.new(\"Please, enter the integer that represents the total\
    \ number of the fruits in the basket\")\n\tend\n\ts = s.downcase\n\ts = s.split(\"\
    and\")\n\ts = s.map do |e|\n\t\te.strip!\n\t\te.split(\" \")\n\tend\n\ts.flatten!\n\
    \ts.delete(\"\")\n\ts = s.map do |e|\n\t\tif e.include?(\"apple\")\n\t\t\te =\
    \ e.split(\"apple\")\n\t\t\te.delete(\"\")\n\t\t\te.delete(\"s\")\n\t\t\te.delete(\"\
    \")\n\t\telsif e.include?(\"orange\")\n\t\t\te = e.split(\"orange\")\n\t\t\te.delete(\"\
    \")\n\t\t\te.delete(\"s\")\n\t\t\te.delete(\"\")\n\t\telse\n\t\t\te\n\t\tend\n\
    \tend\n\ts.flatten!\n\ts = s.map {|e| e.to_i}\n\tbegin\n\t\tif s.size == 2\n\t\
    \t\tn - s.reduce(:+)\n\t\telse\n\t\t\traise \"The string that represents the number\
    \ of the apples and oranges in the basket has a wrong format. Please, use the\
    \ following format: '<number> apples and <number> oranges'\"\n\t\tend\n\trescue\n\
    \t\traise ArgumentError.new(\"The string that represents the number of the apples\
    \ and oranges in the basket has a wrong format. Please, use the following format:\
    \ '<number> apples and <number> oranges'\")\n\tend\nend", "\tif s=='' or n==''\
    \ or !(s.scan(/[0-9]/).all? {|x| x.to_i.is_a?(Integer) }) or !(n.is_a?(Integer))\n\
    \t\traise ArgumentError, \"inputs are not numbers\"\n\telse\n\t\ts.gsub!(/[a-z]/i,\
    \ ' ')\n\t\ts.gsub!(/[^0-9\\s]/, '')\n\t\ts=s.split\n\t\tsum = s[0].to_i + s[2].to_i\n\
    \t\tn - sum\n\tend\nend", "    o = s.scan(/\\d+ oranges/).first.gsub(\" oranges\"\
    , \"\").to_i\n    a = s.scan(/\\d+ apples/).first.gsub(\" apples\", \"\").to_i\n\
    \    f = s.scan(/\\d+ fruit/).first.gsub(\" fruit\", \"\").to_i\n    x = n - (o\
    \ + a + f)\n    return x\nend", "  # YOUR CODE HERE\nend", "\tn_apple = s.split(\"\
    \ \")[0].to_i\n\tn_orange = s.split(\" \")[3].to_i\n\tn_mango = n - n_apple -\
    \ n_orange\n\tn_mango\nend", "  apples, oranges = s.gsub(' and ', ' ').split\n\
    \  n - apples.to_i - oranges.to_i\nend", "  # your code here\nend", "\t#\nend",
  "  # write your code here\nend", "\ts = s.split(\" and \")\n\ta = s[0].split(\"\
    \ \")[0].to_i\n\to = s[1].split(\" \")[0].to_i\n\tn - a - o\nend", "  apple_and_orange\
    \ = s.split(\" \")\n  apple = apple_and_orange[0].to_i\n  orange = apple_and_orange[2].to_i\n\
    \  (n - (apple + orange))\nend", "  str = s.split(' and ')\n  apples = str[0].split[0].to_i\n\
    \  oranges = str[1].split[0].to_i\n  mangoes = n - (apples + oranges)\n  mangoes\n\
    end", "\nend", "    return n - s.split(\" \").map{|x| x.to_i}.reduce(:+)\nend",
  "  words = s.split\n  apple = words[0].to_i\n  orange = words[-1].to_i\n  mango\
    \ = n - apple - orange\nend", "  a, o = s.split(/(\\d+) (apples|oranges)/).values_at(1,\
    \ 3).map(&:to_i)\n  n - a - o\nend", "\nend", "  foo = s.split(\" \")\n  foo1\
    \ = foo[0].to_i\n  foo2 = foo[3].to_i\n  n - foo1 - foo2\nend", "  a, o = s.split(\"\
    \ and \")\n  m = n - a.to_i - o.to_i\n  m\nend", "  #remove space\n  s.delete!\
    \ \" \"\n  #split string \n  arr = s.split(\"and\")\n  #loop over array to get\
    \ fruits then sum\n  sum = 0\n  arr.each do |fruit|\n  \tfruits = fruit.split(\"\
    oranges\")\n  \tsum += fruits[0].to_i + fruits[1].to_i\n  end\n  #return mango\
    \ fruits\n  return n - sum\nend\nputs fruit_distribution(\"5 apples and 6 oranges\"\
    , 19)\nputs fruit_distribution(\"0 apples and 1 oranges\", 3)\nputs fruit_distribution(\"\
    2 apples and 3 oranges\", 100)\nputs fruit_distribution(\"100 apples and 1 oranges\"\
    , 120)", "    arr = s.split\n    app = arr[0].to_i\n    org = arr[3].to_i\n  \
    \  n - app - org\nend", "  # Your code goes here\nend", "  return s.match(/\\\
    d+/)[0].to_i - n\nend", "  a, o = s.split(\" and \").map { |str| str.split.first.to_i\
    \ }\n  total = a + o\n  n - total\nend", "  sum = 0\n  fruits = s.split(\" and\
    \ \")\n  (0..fruits.length-1).each do |index|\n    sum += (fruits[index].to_i)\n\
    \  end\n  mango_num = n - sum\n  if mango_num < 0\n    return \"invalid input\"\
    \n  else\n    return mango_num\n  end\nend", "\t# FIXME:\nend", "\tfruit_numbers\
    \ = s.split(\" \")\n\tapples = fruit_numbers[0].to_i\n\toranges = fruit_numbers[-1].to_i\n\
    \tmangoes = n - apples - oranges\n\treturn mangoes\nend", "    a = s.match(/\\\
    d+/)[0].to_i\n    b = s.match(/\\d+$/)[0].to_i\n    n - a - b\nend\nfruit_distribution(\"\
    5 apples and 6 oranges\", 19)\nfruit_distribution(\"0 apples and 1 oranges\",\
    \ 3)\nfruit_distribution(\"2 apples and 3 oranges\", 100)\nfruit_distribution(\"\
    100 apples and 1 oranges\", 120)", "  # your code here\nend", "    distribution\
    \ = s.scan(/\\d+/)\n    oranges = distribution[1].to_i\n    apples = distribution[0].to_i\n\
    \    return n - oranges - apples\nend", "    # s = \"2 apples and 3 oranges\"\n\
    \    # n = 19\n    # fruits_array = s.split(\" and \") # [\"2 apples\", \"3 oranges\"\
    ]\n    # fruits_array[0] # \"2 apples\"\n    # fruits_array[0].split(\" \") #\
    \ [\"2\", \"apples\"]\n    # fruits_array[0].split(\" \")[0] # \"2\"\n    # fruits_array[0].split(\"\
    \ \")[1] # \"apples\"\n    # fruits_array[1] # \"3 oranges\"\n    # fruits_array[1].split(\"\
    \ \") # [\"3\", \"oranges\"]\n    # fruits_array[1].split(\" \")[0] # \"3\"\n\
    \    # fruits_array[1].split(\" \")[1] # \"oranges\"\n    fruits_array = s.split(\"\
    \ and \")\n    num_apples = fruits_array[0].split(\" \")[0].to_i\n    num_oranges\
    \ = fruits_array[1].split(\" \")[0].to_i\n    if num_apples + num_oranges > n\n\
    \        num_mangoes = 0\n    else\n        num_mangoes = n - (num_apples + num_oranges)\n\
    \    end\n    return num_mangoes\nend", "  # your code goes here\nend", "    arr\
    \ = s.split(\" \")\n    apples = arr[0].to_i\n    oranges = arr[3].to_i\n    n\
    \ - apples - oranges\nend", "\tmangoes = 0\n\tarr = s.split(\" \")\n\tif arr[2]\
    \ == \"apples\"\n\t\tmangoes = (n - arr[0].to_i - arr[4].to_i)\n\telsif arr[2]\
    \ == \"oranges\"\n\t\tmangoes = (n - arr[0].to_i - arr[6].to_i)\n\tend\n\tmangoes\n\
    end", "  x = s.gsub(/\\D/, ' ').split.map(&:to_i).inject(:+)\n  n - x\nend", " \
    \ #TODO Write your code here\nend", "\tarr = s.split(\" \")\n\tif arr[1] == \"\
    apples\"\n\t\tn - arr[0].to_i - arr[3].to_i\n\telse\n\t\tn - arr[3].to_i - arr[0].to_i\n\
    \tend\nend", "  # your code here\nend", "  apples = s.split(' ')[0].to_i\n  oranges\
    \ = s.split(' ')[4].to_i\n  mangoes = n - apples - oranges\nend", "  if s =~ /^(\\\
    d+)\\s+(apples|oranges)\\s+and\\s+(\\d+)\\s+(apples|oranges)$/\n    if $1 == \"\
    0\"\n      n - $3.to_i\n    elsif $3 == \"0\"\n      n - $1.to_i\n    elsif $1.to_i\
    \ > $3.to_i\n      n - $1.to_i - $3.to_i\n    else\n      n - $1.to_i - $3.to_i\n\
    \    end\n  else\n    \"This is not a valid string\"\n  end\nend", "  s.split(\"\
    \ \")[2].to_i\nend", "  l = s.split(' ')\n  n - l[0].to_i - l[3].to_i\nend", " \
    \   pattern = /[a-zA-Z]/ \n    s.gsub!(pattern, \" \")\n    fruits = s.split(\"\
    \ \")\n    total = n - fruits[0].to_i - fruits[1].to_i\n    return total\nend",
  "  return n if s.empty?\n  diff = s.split(' ')\n  if diff[2] == 'apples'\n    return\
    \ n - diff[0].to_i - diff[4].to_i\n  else\n    return n - diff[0].to_i - diff[2].to_i\n\
    \  end\nend", "  a = s.split(' ')\n  x = a[0].to_i\n  y = a[3].to_i\n  n - x -\
    \ y\nend", "  n_apples = 0\n  n_oranges = 0\n  s.split(\" \").each_with_index\
    \ do |v,i|\n    if v =~ /^[0-9]+$/\n      if s.split(\" \")[i-1] == \"apples\"\
    \n        n_apples = v.to_i\n      elsif s.split(\" \")[i-1] == \"oranges\"\n\
    \        n_oranges = v.to_i\n      end\n    end\n  end\n  return n - n_apples\
    \ - n_oranges\nend", "  #CODE HERE\nend", "  # take the apples from string s\n\
    \  # take the oranges from string s\n  # subtract apples, oranges from n\n  #\
    \ return mangoes\n  apples, oranges = s.split(\" \").map(&:to_i)\n  mangoes =\
    \ n - apples - oranges\n  mangoes\nend\nfruit_distribution(\"5 apples and 6 oranges\"\
    , 19)", "    # your code here\nend", "  # Your code is here\nend", "  oranges\
    \ = s.scan(/\\d+\\soranges/).first.split.first.to_i\n  apples = s.scan(/\\d+\\\
    sapples/).first.split.first.to_i\n  mango = n - (oranges + apples)\nend", "  num_apples\
    \ = s.scan(/\\d+/)[0].to_i\n  num_oranges = s.scan(/\\d+/)[1].to_i\n  total_fruit\
    \ = n - (num_apples + num_oranges)\nend", "  s = s.split(' ')\n  n - s[0].to_i\
    \ - s[2].to_i\nend", "  fruits = s.gsub(/\\D/, ' ').split\n  total_fruits = fruits.reduce(&:+).to_i\n\
    \  n - total_fruits\nend", "    f = s.split(\" \")\n    f[0].to_i + f[3].to_i\n\
    \    n - (f[0].to_i + f[3].to_i)\nend", "\ta, o = s.split(\" and \").map{|p| p.scan(/\\\
    d+/).first.to_i}\n\tn - a - o\nend", "  # write code here\nend", "  # your code\
    \ here\nend", "  sum = 0\n  fruit_counts = s.split(\" and \")\n  fruit_counts.each\
    \ do |fruit_count|\n    amount, fruit = fruit_count.split(\" \")\n    sum += amount.to_i\n\
    \  end\n  n - sum\nend\nfruit_distribution(\"5 apples and 6 oranges\", 19)\nfruit_distribution(\"\
    0 apples and 1 oranges\", 3)\nfruit_distribution(\"2 apples and 3 oranges\", 100)\n\
    fruit_distribution(\"100 apples and 1 oranges\", 120)", "  # write your code here\n\
    end\nputs \"-------Fruit Distribution-------\"\nputs fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19) == 8\nputs fruit_distribution(\"0 apples and 1 oranges\"\
    , 3) == 2\nputs fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nputs\
    \ fruit_distribution(\"100 apples and 1 oranges\", 120) == 19", "    words = s.split('\
    \ ')\n    apples = words[0].to_i\n    oranges = words[3].to_i\n    mangoes = n\
    \ - (apples + oranges)\n    return mangoes\nend\nputs fruit_distribution('0 apples\
    \ and 1 oranges', 3)", "  # write your code here\nend", "  a = s.split(\" \")\n\
    \  apples = a[0].to_i\n  oranges = a[3].to_i\n  n - (apples + oranges)\nend",
  "  m = s.split(\" and \")\n  (n - m[0].split(' ')[0].to_i - m[1].split(' ')[0].to_i)\n\
    end", "\ttemp = s.split(\" \")\n\ta = temp[0].to_i\n\to = temp[3].to_i\n\treturn\
    \ n - a - o\nend", "    fruits_count = 0\n    (1..n).each do |i|\n        fruits_count\
    \ += 1 if is_valid_distribution(s, n, i)\n    end\n    return fruits_count\nend",
  "  sum = s.scan(/\\d+/).map(&:to_i).reduce(:+)\n  n - sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
