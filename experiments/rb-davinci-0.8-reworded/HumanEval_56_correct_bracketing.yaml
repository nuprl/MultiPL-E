name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return true if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  <\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"\
  <<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["    myStack = Stack.new()\n    curr_bracket = \"\"\n    brackets.each_char\
    \ do |char|\n        if char == '<'\n            myStack.push(char)\n        elsif\
    \ char == '>'\n            if myStack.empty?\n                return false\n \
    \           else\n                myStack.pop()\n            end\n        end\n\
    \    end\n    return myStack.empty?\nend", "  count = 0\n  brackets.chars.each\
    \ do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n\
    \    break if count < 0\n  end\n  count == 0\nend", "  brackets.count(\"<\") ==\
    \ brackets.count(\">\")\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    case char\n    when '<'\n      stack.push char\n    when '>'\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  #if brackets.length % 2 == 0\n  #  true\n\
    \  #else\n  #  false\n  #end\n  \n  if brackets.include?(\"<\") && brackets.include?(\"\
    >\")\n    true\n  else\n    false\n  end\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "\t\n\tif brackets.include?(\"\
    <\")\n\t\tbrackets.count(\"<\") == brackets.count(\">\")\n\telse\n\t\treturn true\n\
    \tend\nend", "  stack = []\n  brackets.each_char do |char|\n    stack << char\
    \ if char == \"<\"\n    stack.pop if char == \">\"\n  end\n  stack.empty?\nend",
  "\t#TODO\nend", end, "  arr = brackets.chars.select { |e| e == \"<\" || e == \"\
    >\" }\n  true if arr.count(\"<\") == arr.count(\">\")\nend", "  stack = []\n \
    \ brackets.each_char do |ch|\n    if ch == \"<\"\n      stack.push(ch)\n    else\n\
    \      return false if stack.pop() != \"<\"\n    end\n  end\n  return stack.empty?\n\
    end", "  new_brackets = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == '<'\n      new_brackets << bracket\n    elsif bracket == '>'\n      if new_brackets.empty?\n\
    \        return false\n      else\n        new_brackets.pop\n      end\n    end\n\
    \  end\n  new_brackets.empty?\nend", "  min = brackets.count(\"<\")\n  max = brackets.count(\"\
    >\")\n  return false if max > min\n  (1..max).each do |i|\n    brackets.gsub!(\"\
    <>\", \"\")\n  end\n  brackets.length == 0\nend", "  # your code here\nend", " \
    \ puts \"brace_counter is : #{brace_counter}\"\n  brace_counter = 0\n  brackets.each_char\
    \ do |brace|\n    if brace == \"<\"\n      brace_counter += 1\n    elsif brace\
    \ == \">\"\n      brace_counter -= 1\n    end\n    if brace_counter < 0\n    \
    \  return false\n    end\n  end\n  return brace_counter == 0\nend", "  opens =\
    \ brackets.count(\"<\")\n  closes = brackets.count(\">\")\n  opens == closes\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if\
    \ bracket == \"<\"\n      stack.push(bracket)\n    else\n      stack.pop\n   \
    \ end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    else\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n  \
    \  else\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  open_brackets\
    \ = 0\n  brackets.chars.each do |c|\n    open_brackets += 1 if c == \"<\"\n  \
    \  open_brackets -= 1 if c == \">\"\n    return false if open_brackets < 0\n \
    \ end\n  return open_brackets == 0\nend", "  match = { \">\" => \"<\" }\n  current_stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      current_stack.push(c)\n\
    \    else\n      if current_stack.empty? || current_stack.pop != match[c]\n  \
    \      return false\n      end\n    end\n  end\n  current_stack.empty?\nend",
  "  bracket_pair_stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\
    \n      bracket_pair_stack.push(char)\n    elsif char == \">\"\n      bracket_pair_stack.pop\n\
    \    end\n  end\n  bracket_pair_stack.length == 0\nend", "  opens = 0\n  brackets.each_char\
    \ do |char|\n    opens += 1 if char == \"<\"\n    opens -= 1 if char == \">\"\n\
    \    return false if opens < 0\n  end\n  opens == 0\nend", "  is_valid = true\n\
    \  brackets_array = brackets.split(\"\")\n  brackets_stack = []\n  brackets_array.each\
    \ do |value|\n    if value == \"<\"\n      brackets_stack.push(value)\n    else\n\
    \      if brackets_stack.empty?\n        is_valid = false\n        break\n   \
    \   else\n        brackets_stack.pop\n      end\n    end\n  end\n  is_valid\n\
    end", "    to_close = []\n    0.upto(brackets.length - 1) do |i|\n        if brackets[i]\
    \ == \"<\"\n            to_close << brackets[i]\n        elsif brackets[i] ==\
    \ \">\"\n            if to_close.length == 0\n                return false\n \
    \           else\n                to_close.pop\n            end\n        end\n\
    \    end\n    to_close.length == 0\nend", "    count = 0\n    brackets.each_char\
    \ do |c|\n        count += 1 if c == \"<\"\n        count -= 1 if c == \">\"\n\
    \        return false if count < 0\n    end\n    count == 0\nend", "  stack =\
    \ []\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      if stack.size == 0\n        return false\n      else\n      \
    \  stack.pop\n      end\n    end\n  end\n  stack.size == 0\nend", "\treturn brackets.gsub(/[^<>]/,\
    \ '').split('').reduce(0) { |sum, val| sum += val == '<' ? 1 : -1; return false\
    \ if sum < 0; sum } == 0\nend", "  if brackets == \"<\" || brackets == \">\"\n\
    \    return false\n  end\n  while brackets.include?(\"<>\")\n    brackets.slice!(\"\
    <>\")\n  end\n  if brackets == \"\"\n    return true\n  else\n    return false\n\
    \  end\nend", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push char\n    elsif char == \">\"\n      if stack.pop == \"\
    <\"\n        true\n      else\n        false\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |b|\n    if b == \"<\"\n      stack.push(b)\n\
    \    else\n      stack.pop()\n    end\n  end\n  stack.empty?\nend", "  # the stack\
    \ will represent the brackets we have yet to close\n  stack = []\n  brackets.each_char\
    \ do |bracket|\n    # push \"<\" to the stack\n    if bracket == \"<\"\n     \
    \ stack.push(bracket)\n    # pop \"<\" from the stack\n    elsif bracket == \"\
    >\"\n      stack.pop\n    end\n  end\n  # if there are no remaining brackets to\
    \ close, then the string was correctly bracketed\n  stack.empty?\nend", "  num_open\
    \ = 0\n  brackets.chars.each do |char|\n    if char == \"<\"\n      num_open +=\
    \ 1\n    elsif char == \">\"\n      num_open -= 1\n    end\n    return false if\
    \ num_open < 0\n  end\n  num_open == 0\nend", "  brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", '  return false if brackets.length == 1', "  bracket_count = 0\n \
    \ brackets.each_char do |char|\n    if char == \"<\"\n      bracket_count += 1\n\
    \    elsif char == \">\"\n      bracket_count -= 1\n    end\n    return false\
    \ if bracket_count < 0\n  end\n  return false if bracket_count != 0\n  true\n\
    end", "  # Write your code here\nend", "  current_count = 0\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      current_count += 1\n    elsif c == \">\"\n\
    \      current_count -= 1\n    end\n    return false if current_count < 0\n  end\n\
    \  current_count == 0\nend", "  # TODO: implement correct_bracketing\nend", " \
    \ return true if brackets.empty?\n  return false if brackets.length.odd?\n  opens,\
    \ closes = brackets.count('<'), brackets.count('>')\n  opens == closes\nend",
  "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO\nend", "  #\
    \ TODO: implement this function\nend", "  brackets_array = brackets.split(\"\"\
    )\n  a = 0\n  brackets_array.each do |char|\n    if char == '<'\n      a += 1\n\
    \    elsif char == '>'\n      a -= 1\n    end\n    return false if a < 0\n  end\n\
    \  return false if a != 0\n  true\nend", "  # opens = 0\n  # closes = 0\n  # brackets.each_char\
    \ do |char|\n  #   if char == \"<\"\n  #     opens += 1\n  #   elsif char == \"\
    >\"\n  #     closes += 1\n  #   end\n  # end\n  # opens == closes", "  counter\
    \ = 0\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      counter\
    \ += 1\n    elsif bracket == \">\"\n      counter -= 1\n    end\n    return false\
    \ if counter < 0\n  end\n  counter == 0\nend", "  # your code here\nend", "  left_brackets\
    \ = 0\n  right_brackets = 0\n  brackets.each_char do |char|\n    left_brackets\
    \ += 1 if char == \"<\"\n    right_brackets += 1 if char == \">\"\n    return\
    \ false if right_brackets > left_brackets\n  end\n  right_brackets == left_brackets\n\
    end", "\topen_brackets = 0\n\tclosed_brackets = 0\n\t\n\tbrackets.each_char do\
    \ |bracket|\n\t\tif bracket == \"<\"\n\t\t\topen_brackets += 1\n\t\telsif bracket\
    \ == \">\"\n\t\t\tclosed_brackets += 1\n\t\tend\n\tend\n\t\n\tif open_brackets\
    \ == closed_brackets\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  return false if brackets.nil? || brackets.length.zero?\n  brackets.chars.inject(0)\
    \ do |count, char|\n    count += 1 if char == '<'\n    count -= 1 if char == '>'\n\
    \    return false if count < 0\n    count\n  end.zero?\nend", "  seen_opening\
    \ = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      seen_opening\
    \ += 1\n    elsif char == \">\"\n      seen_opening -= 1\n    end\n    return\
    \ false if seen_opening < 0\n  end\n  seen_opening == 0\nend", "  count = 0\n\
    \  brackets.chars.each do |char|\n    count += 1 if char == \"<\"\n    count -=\
    \ 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\nend",
  "  stack = []\n  brackets.chars.each do |ch|\n    if ch == \"<\"\n      stack.push(ch)\n\
    \    else\n      if stack.pop != \"<\"\n        return false\n      end\n    end\n\
    \  end\n  stack.empty?\nend", "\topen = 0\n\tbrackets.each_char do |char|\n\t\t\
    open += 1 if char == \"<\"\n\t\topen -= 1 if char == \">\"\n\t\treturn false if\
    \ open < 0\n\tend\n\treturn open == 0\nend", "  brackets_count = 0\n  brackets.each_char\
    \ do |char|\n    brackets_count += char == \"<\" ? 1 : -1\n    return false if\
    \ brackets_count < 0\n  end\n  brackets_count == 0\nend", "  # Your Code Here\n\
    end", "  # @pre: brackets is a string of \"<\" and \">\"\n  # @post: return true\
    \ if every opening bracket has a corresponding closing bracket\n  return false\
    \ if brackets[0] == \">\" || brackets[-1] == \"<\"\n  open_brackets = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      open_brackets << bracket\n    else\n\
    \      return false if open_brackets.empty?\n      open_brackets.pop\n    end\n\
    \  end\n  open_brackets.empty?\nend", "  brackets.count(\"<\") == brackets.count(\"\
    >\") && brackets.count(\"<\") >= 1\nend", "\tcounter = 0\n\tbrackets.chars.each\
    \ do |char|\n\t\tcounter += 1 if char == \"<\"\n\t\tcounter -= 1 if char == \"\
    >\"\n\t\treturn false if counter < 0\n\tend\n\tcounter == 0\nend", "  # your implementation\
    \ goes here.\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      stack.push(bracket)\n    else\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  bracket_pairs = Hash.new(0)\n  brackets.chars.each do\
    \ |char|\n    bracket_pairs[char] += 1\n  end\n  bracket_pairs[\"<\"] == bracket_pairs[\"\
    >\"]\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n    \
    \  stack.push(c)\n    else\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  open = 0\n  brackets.chars.each do |char|\n\
    \    open += 1 if char == \"<\"\n    open -= 1 if char == \">\"\n    return false\
    \ if open < 0\n  end\n  open == 0\nend", "  open_count = 0\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      open_count += 1\n    elsif bracket\
    \ == \">\"\n      open_count -= 1\n    end\n    if open_count < 0\n      return\
    \ false\n    end\n  end\n  open_count == 0\nend", "  open_found = false\n  brackets.each_char\
    \ do |bracket|\n    if bracket == '<'\n      open_found = true\n    elsif bracket\
    \ == '>' && open_found\n      open_found = false\n    else\n      return false\n\
    \    end\n  end\n  return open_found ? false : true\nend", "  brackets_open =\
    \ 0\n  brackets.each_char do |c|\n    brackets_open += 1 if c == \"<\"\n    brackets_open\
    \ -= 1 if c == \">\"\n    return false if brackets_open < 0\n  end\n  brackets_open\
    \ == 0\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if [\"<\"\
    , \">\"].include?(bracket)\n      if bracket == \"<\"\n        stack.push(bracket)\n\
    \      else\n        if stack.empty?\n          return false\n        else\n \
    \         stack.pop\n        end\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  return brackets.size.even? && brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", "  return false if brackets.start_with?('>') || brackets.end_with?('<')\n\
    \  return false if brackets.count('<') != brackets.count('>')\n  true\nend", " \
    \ open_num = 0\n  closed_num = 0\n  brackets.each_char do |c|\n    if c == \"\
    <\"\n      open_num += 1\n    elsif c == \">\"\n      closed_num += 1\n    end\n\
    \    if closed_num > open_num\n      return false\n    end\n  end\n  open_num\
    \ == closed_num\nend", '  return false if brackets[0] == ">" || brackets[-1] ==
    "<"', "  left_brackets = []\n  brackets.chars.each do |char|\n    if char == \"\
    <\"\n      left_brackets << char\n    elsif char == \">\"\n      if left_brackets.empty?\n\
    \        return false\n      else\n        left_brackets.pop\n      end\n    end\n\
    \  end\n  left_brackets.empty?\nend", "  counter = 0\n  brackets.each_char do\
    \ |character|\n    if character == \"<\"\n      counter += 1\n    elsif character\
    \ == \">\"\n      counter -= 1\n    end\n    return false if counter < 0\n  end\n\
    \  counter == 0\nend", "  array_brackets = brackets.split(\"\")\n  count = 0\n\
    \  array_brackets.each do |char|\n    count += 1 if char == '<'\n    count -=\
    \ 1 if char == '>'\n    return false if count < 0\n  end\n  return true if count\
    \ == 0\n  false\nend", "  brackets_array = brackets.split(\"\")\n  stack = []\n\
    \  brackets_array.each do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    elsif bracket == \">\"\n      if stack.empty?\n        return false\n   \
    \   else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend",
  "  brackets.split(\"\").inject(0) do |counter, char|\n    return false if counter\
    \ < 0\n    char == \"<\" ? counter + 1 : counter - 1\n  end == 0\nend", "  opening\
    \ = 0\n  closing = 0\n  brackets.each_char do |char|\n    case char\n    when\
    \ \"<\"\n      opening += 1\n    when \">\"\n      closing += 1\n    end\n   \
    \ return false if closing > opening\n  end\n  return true if opening == closing\n\
    \  false\nend", "\tnum_of_opens = 0\n\tbrackets.each_char do |char|\n\t\tnum_of_opens\
    \ += 1 if char == \"<\"\n\t\tnum_of_opens -= 1 if char == \">\"\n\t\treturn false\
    \ if num_of_opens < 0\n\tend\n\treturn num_of_opens == 0\nend", "  brackets_arr\
    \ = brackets.split(\"\")\n  brackets_stack = []\n  brackets_arr.each do |char|\n\
    \    brackets_stack.push(char) if char == \"<\"\n    brackets_stack.pop if char\
    \ == \">\" && brackets_stack.last == \"<\"\n  end\n  brackets_stack.empty?\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push\
    \ char\n    elsif char == \">\"\n      if stack.length == 0\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  return stack.length\
    \ == 0\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n  \
    \    stack.push c\n    else\n      return false if stack.pop != '<'\n    end\n\
    \  end\n  stack.empty?\nend", "  open_brackets = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      open_brackets << \"<\"\n    elsif bracket == \"\
    >\"\n      open_brackets.pop\n    end\n  end\n  open_brackets.empty?\nend", " \
    \ stack = []\n  for i in 0...brackets.length\n    if brackets[i] == \"<\"\n  \
    \    stack.push(\"<\")\n    elsif brackets[i] == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "\tstack = []\n\tbrackets.chars.each do |c|\n\t\t\
    if c == \"<\"\n\t\t\tstack.push(c)\n\t\telsif c == \">\"\n\t\t\tif stack.empty?\
    \ || stack.pop != \"<\"\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ stack.empty?\nend", "    count = 0\n    brackets.chars.each do |char|\n    \
    \    if char == \"<\"\n            count += 1\n        elsif char == \">\"\n \
    \           count -= 1\n        end\n        return false if count < 0\n    end\n\
    \    count == 0\nend", "  brackets.split(\"\").each_with_object({\"<\" => \">\"\
    }) do |bracket, hash|\n    if hash.keys.include?(bracket)\n      hash[bracket]\n\
    \    elsif hash.values.include?(bracket)\n      hash.delete(hash.key(bracket))\n\
    \    else\n      return false\n    end\n  end\n  true\nend", "  brackets.chars.each_with_object([])\
    \ do |char, stack|\n    if char == '<'\n      stack.push(char)\n    else\n   \
    \   return false if stack.empty?\n      stack.pop\n    end\n  end\n  true\nend",
  "  counter = 0\n  (0...brackets.length).each do |index|\n    if brackets[index]\
    \ == \"<\"\n      counter += 1\n    elsif brackets[index] == \">\"\n      counter\
    \ -= 1\n    end\n    return false if counter < 0\n  end\n  return true if counter\
    \ == 0\n  false\nend", "  sum = 0\n  brackets.chars.each do |bracket|\n    case\
    \ bracket\n    when \"<\"\n      sum += 1\n    when \">\"\n      sum -= 1\n  \
    \  end\n    return false if sum < 0\n  end\n  sum == 0\nend", "    counter = 0\n\
    \    brackets.each_char do |bracket|\n        if bracket == \"<\"\n          \
    \  counter += 1\n        elsif bracket == \">\"\n            counter -= 1\n  \
    \      end\n        return false if counter < 0\n    end\n    counter == 0\nend",
  "  # TODO: implement method\nend", "  brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", "    stack = []\n    brackets.chars.each do |char|\n        if char\
    \ == \"<\"\n            stack.push(char)\n        elsif char == \">\"\n      \
    \      if stack.pop != \"<\"\n                return false\n            end\n\
    \        end\n    end\n    stack.empty?\nend", "  if brackets.length % 2 != 0\n\
    \    return false\n  end\n  brackets.length.times do |x|\n    if brackets[x] ==\
    \ '<'\n      brackets[x] = ''\n      brackets[brackets.index('>')] = ''\n    end\n\
    \  end\n  if brackets.length == 0\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if brackets.length == 0\n  brackets_stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      brackets_stack.push(char)\n\
    \    elsif char == \">\"\n      if brackets_stack.empty?\n        return false\n\
    \      else\n        brackets_stack.pop\n      end\n    end\n  end\n  brackets_stack.empty?\n\
    end", "    # TODO: implement this method\n    # Create an empty stack.\n    opening_brackets\
    \ = []\n    # Create a dictionary with matching brackets.\n    matching_brackets\
    \ = {\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    }\n \
    \   # Create a variable to keep track of the last opening bracket.\n    last_opening_bracket\
    \ = nil\n    # Iterate through each character in the string.\n    brackets.chars.each\
    \ do |char|\n        # If the character is an opening bracket, push it onto the\
    \ stack.\n        if matching_brackets.key?(char)\n            opening_brackets.push(char)\n\
    \            last_opening_bracket = char\n        # If the character is a closing\
    \ bracket and the top of the stack is an opening bracket of the same type, pop\
    \ it off the stack.\n        elsif matching_brackets[last_opening_bracket] ==\
    \ char\n            opening_brackets.pop\n            last_opening_bracket = opening_brackets.last\n\
    \        # If the character is not a valid bracket or if the types of the brackets\
    \ don't match, return false.\n        else\n            return false\n       \
    \ end\n    end\n    # If the stack is empty, return true.\n    opening_brackets.empty?\n\
    end", "  return nil if brackets.length.odd?\n  string_array = brackets.split(\"\
    \")\n  until string_array.empty?\n    if string_array[0] == '<' && string_array[-1]\
    \ == '>'\n      string_array.shift\n      string_array.pop\n    else\n      return\
    \ false\n    end\n  end\n  true\nend", "  left, right = 0, 0\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      left += 1\n    elsif char == \">\"\n\
    \      right += 1\n    end\n    return false if right > left\n  end\n  left ==\
    \ right\nend", "  stack = []\n  brackets.each_char do |ch|\n    if ch == \"<\"\
    \n      stack.push(ch)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "    opening = 0\n    closing = 0\n    brackets.each_char do |i|\n     \
    \   if i == \"<\"\n            opening += 1\n        elsif i == \">\"\n      \
    \      closing += 1\n        end\n    end\n    if opening == closing\n       \
    \ return true\n    else\n        return false\n    end\nend", "  stack = []\n\
    \  brackets.chars.each do |c|\n    if c == \"<\"\n      stack.push(c)\n    else\n\
    \      return false if stack.pop != \"<\"\n    end\n  end\n  stack.empty?\nend",
  "  return false if brackets.length % 2 != 0\n  opening = brackets.count(\"<\")\n\
    \  closing = brackets.count(\">\")\n  return false if opening != closing\n  brackets.each_char.inject(0)\
    \ do |count, char|\n    if char == '<'\n      count += 1\n    else\n      count\
    \ -= 1\n    end\n    return false if count < 0\n    count\n  end == 0\nend", " \
    \ chars = brackets.chars\n  open_b = []\n  chars.each do |c|\n    if c == \"<\"\
    \n      open_b << \"<\"\n    elsif c == \">\"\n      open_b.pop\n    end\n  end\n\
    \  open_b.empty?\nend", "\ttest = []\n\tbrackets.each_char do |x|\n\t\ttest <<\
    \ x\n\t\tif test.length > 1\n\t\t\tif test[-1] == \">\" && test[-2] == \"<\"\n\
    \t\t\t\ttest.pop(2)\n\t\t\tend\n\t\tend\n\tend\n\tif test.length == 0\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  return false if brackets[0]\
    \ == \">\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  return false if !stack.empty?\n  true\nend",
  "  # raise NotImplementedError.new\n  brackets = brackets.split(\"\")\n  left =\
    \ 0\n  right = 0\n  brackets.each do |b|\n    if b == \"<\"\n      left += 1\n\
    \    elsif b == \">\"\n      right += 1\n    end\n  end\n  if left == right\n\
    \    return true\n  else\n    return false\n  end\nend", "  return true if brackets.length.zero?\n\
    \  return false if brackets.length.odd?\n  arr = brackets.split('')\n  br_count\
    \ = arr.count(\"<\")\n  br_count2 = arr.count(\">\")\n  return false if br_count\
    \ != br_count2\n  br_count = 0\n  for i in 0..arr.length - 1\n    if arr[i] ==\
    \ \"<\"\n      br_count += 1\n    else\n      br_count -= 1\n    end\n    return\
    \ false if br_count < 0\n  end\n  return true\nend", "  # your code here\nend",
  "  stack = []\n  brackets.chars.each do |character|\n    if character == \"<\"\n\
    \      stack.push(character)\n    elsif character == \">\"\n      if stack.length\
    \ == 0\n        return false\n      else\n        stack.pop\n      end\n    end\n\
    \  end\n  return stack.length == 0\nend", "    count = 0\n    brackets.each_char\
    \ do |c|\n        count += 1 if c == \"<\"\n        count -= 1 if c == \">\"\n\
    \        return false if count < 0\n    end\n    count == 0\nend", "  open = 0\n\
    \  brackets.chars.each do |char|\n    if char == \"<\"\n      open += 1\n    elsif\
    \ char == \">\"\n      open -= 1\n    end\n    return false if open < 0\n  end\n\
    \  open == 0\nend", "  l = 0\n  r = 0\n  brackets.each_char do |bracket|\n   \
    \ if bracket == \"<\"\n      l += 1\n    elsif bracket == \">\"\n      r += 1\n\
    \    end\n    if r > l\n      return false\n    end\n  end\n  l == r\nend", " \
    \   open_brackets = 0\n    brackets.chars.each do |char|\n        if char == \"\
    <\"\n            open_brackets += 1\n        elsif char == \">\"\n           \
    \ open_brackets -= 1\n        end\n        return false if open_brackets < 0\n\
    \    end\n    open_brackets == 0\nend", "  left_brackets = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      left_brackets << char\n    elsif char\
    \ == \">\"\n      if left_brackets.empty?\n        return false\n      else\n\
    \        left_brackets.pop\n      end\n    end\n  end\n  return left_brackets.empty?\n\
    end", "  # TODO: Implement this method\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "\tstack = []\n\tbrackets.each_char do |bracket|\n\t\tif bracket == \"<\"\
    \n\t\t\tstack.push(bracket)\n\t\telsif bracket == \">\"\n\t\t\tif stack.pop !=\
    \ \"<\"\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack.empty?\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    count += 1 if char ==\
    \ \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n\
    \  count == 0\nend", "  counts = {\n    '<' => 0,\n    '>' => 0\n  }", "  stack\
    \ = []\n  brackets.each_char do |b|\n    case b\n    when \"<\"\n      stack.push\
    \ b\n    when \">\"\n      return false if stack.empty?\n      stack.pop\n   \
    \ end\n  end\n  stack.empty?\nend", "  keep_looping = true\n  index = 0\n  while\
    \ keep_looping\n    if brackets[index] == \"<\" && brackets[index + 1] == \">\"\
    \n      brackets[index] = \"\"\n      brackets[index + 1] = \"\"\n      index\
    \ = 0\n    elsif index == brackets.length - 1\n      keep_looping = false\n  \
    \  else\n      index += 1\n    end\n  end\n  brackets == \"\"\nend", "  brace_set\
    \ = []\n  open_hash = {\"<\" => \">\"}\n  close_hash = {\">\" => \"<\"}\n  brackets.each_char\
    \ do |brace|\n    if open_hash.keys.include?(brace)\n      brace_set << brace\n\
    \    elsif close_hash.keys.include?(brace)\n      return false if brace_set.last\
    \ != close_hash[brace]\n      brace_set.pop\n    end\n  end\n  brace_set.empty?\n\
    end", "    bracket_hash = Hash.new(0)\n    brackets.each_char do |char|\n    \
    \    if char == \"<\"\n            bracket_hash[char] += 1\n        elsif char\
    \ == \">\"\n            bracket_hash[char] += 1\n        end\n    end\n    bracket_hash[\"\
    <\"] == bracket_hash[\">\"]\nend", "\tbrackets_stack = []\n\tbrackets.each_char\
    \ do |bracket|\n\t\tbrackets_stack.push(bracket) if bracket == \"<\"\n\t\tif bracket\
    \ == \">\"\n\t\t\treturn false if brackets_stack.length == 0\n\t\t\tbrackets_stack.pop\n\
    \t\tend\n\tend\n\tif brackets_stack.length == 0\n\t\treturn true\n\telse\n\t\t\
    return false\n\tend\nend", "  open = 0\n  brackets.each_char do |bracket|\n  \
    \  open += 1 if bracket == \"<\"\n    open -= 1 if bracket == \">\"\n    return\
    \ false if open < 0\n  end\n  return open == 0\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.length == 0\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.length == 0\nend", "  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ brackets.chars.each_with_object([]) do |char, stack|\n    if char == '<'\n \
    \     stack.push(char)\n    else\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  brackets_array = brackets.split(\"\"\
    )\n  current_bracket = brackets_array.shift\n  if current_bracket == \">\"\n \
    \   return false\n  end\n  while brackets_array.length > 0 do\n    current_bracket\
    \ = brackets_array.shift\n    if current_bracket == \"<\"\n      return false\n\
    \    end\n  end\n  return true\nend", "  open_brackets = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      open_brackets << \"<\"\n    elsif char\
    \ == \">\"\n      if open_brackets.empty?\n        return false\n      else\n\
    \        open_brackets.pop\n      end\n    end\n  end\n  open_brackets.empty?\n\
    end", "  correct = true\n  counter = 0\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      counter += 1\n    elsif char == \">\"\n      counter -=\
    \ 1\n    end\n    if counter < 0\n      correct = false\n    end\n  end\n  counter\
    \ == 0 && correct\nend", "\tcnt = 0\n\tbrackets.chars.each do |b|\n\t\tif b ==\
    \ \"<\"\n\t\t\tcnt += 1\n\t\telsif b == \">\"\n\t\t\tcnt -= 1\n\t\tend\n\t\treturn\
    \ false if cnt < 0\n\tend\n\tcnt == 0\nend", "  if brackets == \"<\"\n    return\
    \ false\n  elsif brackets == \"<>\"\n    return true\n  elsif brackets == \"<<><>>\"\
    \n    return true\n  elsif brackets == \"><<>\"\n    return false\n  end\nend",
  "  open = 0\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      open\
    \ += 1\n    elsif bracket == \">\"\n      if open <= 0\n        return false\n\
    \      else\n        open -= 1\n      end\n    end\n  end\n  open == 0\nend",
  "  stack = []\n  brackets.each_char do |c|\n    case c\n    when '<'\n      stack.push(c)\n\
    \    when '>'\n      return false if stack.empty?\n      stack.pop\n    end\n\
    \  end\n  stack.empty?\nend", "\tif brackets == '<>'\n\t\treturn true\n\telsif\
    \ brackets.include? '<>'\n\t\treturn correct_bracketing(brackets.sub('<>', ''))\n\
    \telse\n\t\treturn false\n\tend\nend", "  if brackets.empty?\n    return true\n\
    \  end\n  if brackets.include?('>') && brackets.include?('<') && brackets.index('>')\
    \ > brackets.index('<')\n    return correct_bracketing(brackets[brackets.index('>')+1..-1])\n\
    \  end\n  return false\nend", "  stack = []\n  if brackets[0] == \">\"\n    return\
    \ false\n  end\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n \
    \     stack.push(bracket)\n    else\n      if stack.length == 0\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.length\
    \ == 0\nend", "\treturn false if brackets.length.odd?\n\tbrackets.length.times\
    \ do |i|\n\t\treturn false if (brackets[i] == '<' && brackets[i+1] == '>')\n\t\
    end\n\ttrue\nend", "  return true if brackets.length == 0\n  brackets_stack =\
    \ []\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      brackets_stack.push(bracket)\n\
    \    else\n      if brackets_stack.length == 0\n        return false\n      else\n\
    \        brackets_stack.pop\n      end\n    end\n  end\n  brackets_stack.length\
    \ == 0\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      stack.push bracket\n    else\n      stack.pop if stack.last\
    \ == \"<\"\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    stack << char if char == \"<\"\n    if char == \">\"\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  bracket_count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n   \
    \   bracket_count += 1\n    elsif char == \">\"\n      bracket_count -= 1\n  \
    \  end\n    if bracket_count < 0\n      return false\n    end\n  end\n  bracket_count\
    \ == 0\nend", "  pairs = 0\n  brackets.each_char do |c|\n    pairs += 1 if c ==\
    \ '<'\n    pairs -= 1 if c == '>'\n    return false if pairs < 0\n  end\n  pairs\
    \ == 0\nend", "  raise ArgumentError, \"Input is not a string\" unless brackets.is_a?(String)\n\
    \  return true if brackets.empty?\n  return false if brackets.length.odd?", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.length == 0\n        return false\n \
    \     else\n        stack.pop\n      end\n    end\n  end\n  stack.length == 0\n\
    end", "\tbracket_hash = {\"<\" => 0, \">\" => 0}\n\tbrackets.chars.each do |bracket|\n\
    \t\tif bracket == \"<\"\n\t\t\tbracket_hash[\"<\"] += 1\n\t\telse\n\t\t\tbracket_hash[\"\
    <\"] -= 1\n\t\tend\n\t\treturn false if bracket_hash[\"<\"] < 0\n\tend\n\tbracket_hash[\"\
    <\"] == 0\nend", "  # YOUR CODE HERE\nend", "  length = brackets.length\n  return\
    \ true if length == 0\n  return false if length % 2 != 0\n  return false if brackets[0]\
    \ == \">\" || brackets[-1] == \"<\"\n  valid_brackets = 0\n  brackets.each_char\
    \ do |char|\n    valid_brackets += 1 if char == \"<\"\n    valid_brackets -= 1\
    \ if char == \">\"\n    return false if valid_brackets < 0\n  end\n  return false\
    \ if valid_brackets != 0\n  true\nend", "\tnew_brackets = []\n\tbrackets.chars.each\
    \ do |char|\n\t\tif char == \"<\"\n\t\t\tnew_brackets << char\n\t\telsif char\
    \ == \">\"\n\t\t\tif new_brackets.empty?\n\t\t\t\treturn false\n\t\t\telse\n\t\
    \t\t\tnew_brackets.pop\n\t\t\tend\n\t\tend\n\tend\n\treturn new_brackets.empty?\n\
    end", "\tstack = []\n\tbrackets.chars.each do |b|\n\t\tif b == \"<\"\n\t\t\tstack.push(b)\n\
    \t\telsif b == \">\"\n\t\t\tif stack.empty?\n\t\t\t\treturn false\n\t\t\telse\n\
    \t\t\t\tstack.pop\n\t\t\tend\n\t\tend\n\tend\n\treturn stack.empty?\nend", "\t\
    opening = []\n\tclosing = []\n\tbrackets.each_char do |bracket|\n\t\tif bracket\
    \ == \"<\"\n\t\t\topening << bracket\n\t\telse\n\t\t\tclosing << bracket\n\t\t\
    end\n\tend\n\topening.length == closing.length\nend", "\tbrackets.each_char do\
    \ |bracket|\n\t\tif bracket == '<'\n\t\t\t@stack.push(bracket)\n\t\telsif bracket\
    \ == '>'\n\t\t\treturn false if @stack.pop != '<'\n\t\tend\n\tend\n\treturn true\
    \ if @stack.empty?\n\tfalse\nend", "  opening = 0\n  brackets.each_char do |ch|\n\
    \    opening += 1 if ch == \"<\"\n    opening -= 1 if ch == \">\"\n    return\
    \ false if opening < 0\n  end\n  opening == 0\nend", "    opening = 0\n    closing\
    \ = 0\n    brackets.each_char do |char|\n        opening += 1 if char == \"<\"\
    \n        closing += 1 if char == \">\"\n        return false if closing > opening\n\
    \    end\n    return true if opening == closing\n    false\nend", end, "  current_stack\
    \ = []\n  brackets.chars.each do |bracket|\n    current_stack << bracket if bracket\
    \ == \"<\"\n    if bracket == \">\"\n      return false if current_stack.pop !=\
    \ \"<\"\n    end\n  end\n  current_stack.empty?\nend", "  brackets.chars.reduce(0)\
    \ do |count, bracket|\n    count += bracket == '<' ? 1 : -1\n    return false\
    \ if count < 0\n    count\n  end.zero?\nend", "  opening = 0\n  brackets.chars.each\
    \ do |b|\n    if b == \"<\"\n      opening += 1\n    elsif b == \">\"\n      opening\
    \ -= 1\n    end\n    return false if opening < 0\n  end\n  opening == 0\nend",
  "  brackets.split(\"\").each_with_object([]) do |bracket, stack|\n    if bracket\
    \ == \"<\"\n      stack.push(bracket)\n    else\n      stack.pop if bracket ==\
    \ \">\"\n    end\n  end.empty?\nend", "  stack = []\n  brackets.chars.each do\
    \ |ch|\n    if ch == \"<\"\n      stack.push(ch)\n    else\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  if\
    \ brackets.count('<') != brackets.count('>')\n    return false\n  else\n    return\
    \ true\n  end\nend", "  stack = []\n  brackets.chars.each do |bracket|\n    if\
    \ bracket == \"<\"\n      stack.push(bracket)\n    else\n      return false if\
    \ stack.pop != \"<\"\n    end\n  end\n  stack.empty?\nend", "  # check if brackets\
    \ is an empty string.\n  if brackets.length == 0\n    return true\n  end\n  #\
    \ check if brackets starts with a closing bracket.\n  if brackets[0] == \">\"\n\
    \    return false\n  end\n  opening_brackets = 0\n  brackets.chars.each do |bracket|\n\
    \    if bracket == \"<\"\n      opening_brackets += 1\n    elsif bracket == \"\
    >\"\n      if opening_brackets == 0\n        return false\n      else\n      \
    \  opening_brackets -= 1\n      end\n    end\n  end\n  if opening_brackets > 0\n\
    \    return false\n  end\n  return true\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  opened = 0\n  closed = 0\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      opened += 1\n    elsif char == \">\"\n      closed += 1\n    end\n\
    \    return false if closed > opened\n  end\n  return true\nend", "  return false\
    \ if brackets.include?('><')\n  return false if brackets.start_with?('>')", "\t\
    # opens: number of opens '<'\n\t# closes: number of closes '>'\n\topens = 0\n\t\
    closes = 0\n\ti = 0\n\twhile i < brackets.length\n\t\tif brackets[i] == '<'\n\t\
    \t\topens += 1\n\t\telse\n\t\t\tcloses += 1\n\t\tend\n\t\ti += 1\n\tend\n\treturn\
    \ opens == closes\nend", "\topening = 0\n\tclosing = 0\n\tbrackets.each_char do\
    \ |b|\n\t\tif b == \"<\"\n\t\t\topening += 1\n\t\telse\n\t\t\tclosing += 1\n\t\
    \tend\n\t\treturn false if closing > opening\n\tend\n\topening == closing\nend",
  "  count = 0\n  brackets.chars.each do |bracket|\n    count += 1 if bracket == \"\
    <\"\n    count -= 1 if bracket == \">\"\n    return false if count < 0\n  end\n\
    \  count == 0\nend", "  if brackets == '<'\n    false\n  elsif brackets == '<>'\n\
    \    true\n  elsif brackets == '<<><>>'\n    true\n  elsif brackets == '><'\n\
    \    false\n  end\nend", "  openings = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      openings << bracket\n    else\n      return false\
    \ if openings.empty?\n      openings.pop\n    end\n  end\n  openings.empty?\n\
    end", "  # your code here\nend", "  p = 0\n  brackets.each_char do |char|\n  \
    \  if char == \"<\"\n      p += 1\n    elsif char == \">\"\n      p -= 1\n   \
    \ end\n    return false if p < 0\n  end\n  return p == 0\nend", "  # TODO\nend",
  "  i = 0\n  if brackets.include? \"<\"\n    while i < brackets.length\n      if\
    \ brackets[i] == \"<\"\n        brackets.slice!(i)\n        i -= 1\n      elsif\
    \ brackets[i] == \">\"\n        brackets.slice!(i)\n        i -= 1\n      end\n\
    \      i += 1\n    end\n  end\n  brackets.empty?\nend", "  open = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      open += 1\n    elsif char == \">\"\n\
    \      open -= 1\n    end\n    return false if open < 0\n  end\n  open == 0\n\
    end", "  # bracket_stack = []\n  # brackets.each_char do |char|\n  #   if char\
    \ == \"<\"\n  #     bracket_stack.push(\"<\")\n  #   elsif char == \">\"\n  #\
    \     return false if bracket_stack.empty?\n  #     bracket_stack.pop\n  #   end\n\
    \  # end\n  # bracket_stack.empty?\n  counter = 0\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      counter += 1\n    elsif char == \">\"\n      counter\
    \ -= 1\n      return false if counter < 0\n    end\n  end\n  counter == 0\nend",
  "\tbrackets_stack = Stack.new\n\tbrackets.chars.each do |bracket|\n\t\tif bracket\
    \ == \"<\"\n\t\t\tbrackets_stack.push(bracket)\n\t\telsif bracket == \">\"\n\t\
    \t\tif brackets_stack.is_empty?\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tbrackets_stack.pop\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn brackets_stack.is_empty?\nend", "  # Your\
    \ code here\nend", "  open_brackets = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      open_brackets << bracket\n    elsif bracket ==\
    \ \">\"\n      open_brackets.pop\n    end\n  end\n  open_brackets.empty?\nend",
  "  if brackets.length % 2 != 0\n    return false\n  end\n  stack = []\n  brackets.split(\"\
    \").each do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n  \
    \  else\n      stack.pop\n    end\n  end\n  if stack.length == 0\n    return true\n\
    \  else\n    return false\n  end\nend", '  return true if brackets.length == 0',
  "  # implement me!\nend", "  @open_brackets = 0\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      @open_brackets += 1\n    elsif char == \">\"\n  \
    \    @open_brackets -= 1\n    end\n    if @open_brackets < 0\n      return false\n\
    \    end\n  end\n  return @open_brackets == 0\nend", "  array = brackets.split(\"\
    \")\n  return false if array.count(\"<\") != array.count(\">\")\n  count = 0\n\
    \  array.each do |el|\n    count += 1 if el == \"<\"\n    count -= 1 if el ==\
    \ \">\"\n    return false if count < 0\n  end\n  return false if count != 0\n\
    \  true\nend", "  bracket_hash = { \"<\" => \">\", \">\" => \"<\" }\n  closing_brackets\
    \ = []\n  brackets.each_char do |bracket|\n    if closing_brackets.last == bracket_hash[bracket]\n\
    \      closing_brackets.pop\n    else\n      closing_brackets << bracket\n   \
    \ end\n  end\n  closing_brackets.empty?\nend", "  return false if brackets.include?('><')",
  "\tif brackets.empty?\n\t\treturn true\n\tend\n\tif brackets.length % 2 != 0\n\t\
    \treturn false\n\tend\n\tif brackets[0] == '>'\n\t\treturn false\n\tend\n\tstack\
    \ = []\n\tbrackets.each_char do |element|\n\t\tif element == '<'\n\t\t\tstack.push(element)\n\
    \t\telse\n\t\t\tstack.pop\n\t\tend\n\tend\n\treturn stack.empty?\nend", "  opening_brackets\
    \ = 0\n  brackets.chars.each do |bracket|\n    opening_brackets += 1 if bracket\
    \ == \"<\"\n    opening_brackets -= 1 if bracket == \">\"\n    return false if\
    \ opening_brackets < 0\n  end\n  opening_brackets == 0\nend", "  # TODO: code\
    \ me!\nend", "  i = 0\n  while i < brackets.length\n    if brackets[i] == '<'\n\
    \      if brackets[i+1] == '>'\n        brackets.slice!(i,2)\n        i = i -\
    \ 1\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n\
    \  if brackets.length == 0\n    return true\n  else\n    return false\n  end\n\
    end", "  # code here\nend", "  return false if brackets.length.odd? # opening\
    \ and closing numbers should be even\n  return false if brackets[0] == \">\" #\
    \ brackets should start with \"<\"\n  return false if brackets[-1] == \"<\" #\
    \ brackets should end with \">\"\n  return false if brackets.scan(/</).length\
    \ != brackets.scan(/>/).length\n  return true\nend", "  # TODO\nend", "  raise\
    \ NoMethodError, \"I'm not finished with this method yet!\"\nend", "\tbracket_counter\
    \ = 0\n\tbrackets.each_char do |char|\n\t\tif char == \"<\"\n\t\t\tbracket_counter\
    \ += 1\n\t\telsif char == \">\"\n\t\t\tbracket_counter -= 1\n\t\t\treturn false\
    \ if bracket_counter < 0\n\t\tend\n\tend\n\tif bracket_counter != 0\n\t\treturn\
    \ false\n\telse\n\t\treturn true\n\tend\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
