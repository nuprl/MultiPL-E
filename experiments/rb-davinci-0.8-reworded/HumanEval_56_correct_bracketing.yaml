name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return true if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  <\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"\
  <<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["    myStack = Stack.new()\n    curr_bracket = \"\"\n    brackets.each_char\
    \ do |char|\n        if char == '<'\n            myStack.push(char)\n        elsif\
    \ char == '>'\n            if myStack.empty?\n                return false\n \
    \           else\n                myStack.pop()\n            end\n        end\n\
    \    end\n    return myStack.empty?\nend", "  count = 0\n  brackets.chars.each\
    \ do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n\
    \    break if count < 0\n  end\n  count == 0\nend", "  brackets.count(\"<\") ==\
    \ brackets.count(\">\")\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    case char\n    when '<'\n      stack.push char\n    when '>'\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  #if brackets.length % 2 == 0\n  #  true\n\
    \  #else\n  #  false\n  #end\n  \n  if brackets.include?(\"<\") && brackets.include?(\"\
    >\")\n    true\n  else\n    false\n  end\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "\t\n\tif brackets.include?(\"\
    <\")\n\t\tbrackets.count(\"<\") == brackets.count(\">\")\n\telse\n\t\treturn true\n\
    \tend\nend", "  stack = []\n  brackets.each_char do |char|\n    stack << char\
    \ if char == \"<\"\n    stack.pop if char == \">\"\n  end\n  stack.empty?\nend",
  "\t#TODO\nend", end, "  arr = brackets.chars.select { |e| e == \"<\" || e == \"\
    >\" }\n  true if arr.count(\"<\") == arr.count(\">\")\nend", "  stack = []\n \
    \ brackets.each_char do |ch|\n    if ch == \"<\"\n      stack.push(ch)\n    else\n\
    \      return false if stack.pop() != \"<\"\n    end\n  end\n  return stack.empty?\n\
    end", "  new_brackets = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == '<'\n      new_brackets << bracket\n    elsif bracket == '>'\n      if new_brackets.empty?\n\
    \        return false\n      else\n        new_brackets.pop\n      end\n    end\n\
    \  end\n  new_brackets.empty?\nend", "  min = brackets.count(\"<\")\n  max = brackets.count(\"\
    >\")\n  return false if max > min\n  (1..max).each do |i|\n    brackets.gsub!(\"\
    <>\", \"\")\n  end\n  brackets.length == 0\nend", "  # your code here\nend", " \
    \ puts \"brace_counter is : #{brace_counter}\"\n  brace_counter = 0\n  brackets.each_char\
    \ do |brace|\n    if brace == \"<\"\n      brace_counter += 1\n    elsif brace\
    \ == \">\"\n      brace_counter -= 1\n    end\n    if brace_counter < 0\n    \
    \  return false\n    end\n  end\n  return brace_counter == 0\nend", "  opens =\
    \ brackets.count(\"<\")\n  closes = brackets.count(\">\")\n  opens == closes\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if\
    \ bracket == \"<\"\n      stack.push(bracket)\n    else\n      stack.pop\n   \
    \ end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    else\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
