name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef\
  \ fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: ["  return n if n <= 1\n  a, b, c = 0, 0, 1\n  (n - 1).times do\n   \
    \ a, b, c = b, c, a + b + c\n  end\n  c\nend", "  fibs = [0, 0, 1]\n  2.upto(n)\
    \ do |i|\n    fibs[i % 3] = fibs.inject(:+)\n  end\n  fibs[n % 3]\nend", "  return\
    \ 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  # your code here\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n <= 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    if n == 0\n\
    \        return 0\n    elsif n == 1\n        return 0\n    elsif n == 2\n    \
    \    return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  @fibfib ||= []\n  @fibfib[n] ||= case n\n                 when\
    \ 0 then 0\n                 when 1 then 0\n                 when 2 then 1\n \
    \                else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n              \
    \   end\nend", "  fibfib_array = [0, 0, 1]\n  if n < 2\n    return fibfib_array[n]\n\
    \  end\n  for i in 3..n\n    fibfib_array << fibfib_array[i-1] + fibfib_array[i-2]\
    \ + fibfib_array[i-3]\n  end\n  return fibfib_array[n]\nend", "\treturn 0 if n\
    \ == 0 || n == 1\n\treturn 1 if n == 2\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  a, b, c = 0, 0, 1\n  n.times do\n    a,\
    \ b, c = b, c, c + b + a\n  end\n  a\nend", "  return 0 if n == 0\n  return 0\
    \ if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n ==\
    \ 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  arr = [0, 0, 1]\n  if n < 3\n    return arr[n]\n  else\n    (3..n).each do |num|\n\
    \      arr << arr[num-1] + arr[num-2] + arr[num-3]\n    end\n  end\n  arr[n]\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib_arr = [0, 0, 1]\n\
    \  return fib_arr[n] if n < 3\n  (3..n).each do |i|\n    fib_arr << fib_arr[i-1]\
    \ + fib_arr[i-2] + fib_arr[i-3]\n  end\n  fib_arr[n]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
