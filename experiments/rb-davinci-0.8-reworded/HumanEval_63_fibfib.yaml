name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef\
  \ fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: ["  return n if n <= 1\n  a, b, c = 0, 0, 1\n  (n - 1).times do\n   \
    \ a, b, c = b, c, a + b + c\n  end\n  c\nend", "  fibs = [0, 0, 1]\n  2.upto(n)\
    \ do |i|\n    fibs[i % 3] = fibs.inject(:+)\n  end\n  fibs[n % 3]\nend", "  return\
    \ 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  # your code here\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n <= 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    if n == 0\n\
    \        return 0\n    elsif n == 1\n        return 0\n    elsif n == 2\n    \
    \    return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  @fibfib ||= []\n  @fibfib[n] ||= case n\n                 when\
    \ 0 then 0\n                 when 1 then 0\n                 when 2 then 1\n \
    \                else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n              \
    \   end\nend", "  fibfib_array = [0, 0, 1]\n  if n < 2\n    return fibfib_array[n]\n\
    \  end\n  for i in 3..n\n    fibfib_array << fibfib_array[i-1] + fibfib_array[i-2]\
    \ + fibfib_array[i-3]\n  end\n  return fibfib_array[n]\nend", "\treturn 0 if n\
    \ == 0 || n == 1\n\treturn 1 if n == 2\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  a, b, c = 0, 0, 1\n  n.times do\n    a,\
    \ b, c = b, c, c + b + a\n  end\n  a\nend", "  return 0 if n == 0\n  return 0\
    \ if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n ==\
    \ 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  arr = [0, 0, 1]\n  if n < 3\n    return arr[n]\n  else\n    (3..n).each do |num|\n\
    \      arr << arr[num-1] + arr[num-2] + arr[num-3]\n    end\n  end\n  arr[n]\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib_arr = [0, 0, 1]\n\
    \  return fib_arr[n] if n < 3\n  (3..n).each do |i|\n    fib_arr << fib_arr[i-1]\
    \ + fib_arr[i-2] + fib_arr[i-3]\n  end\n  fib_arr[n]\nend", "  a, b, c = 0, 0,\
    \ 1\n  n.times do\n    a, b, c = b, c, c + b + a\n  end\n  a\nend", "\tfibfib\
    \ = [0,0,1]\n\tfor n in 3..n\n\t\tfibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n\
    \tend\n\treturn fibfib[n]\nend\nputs fibfib(2)\nputs fibfib(5)\nputs fibfib(8)",
  "  fibfib = [0, 0, 1]\n  (3..n).each do |i|\n    fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n  end\n  fibfib[n]\nend", "  return 0 if n == 0\n  return 0 if\
    \ n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n.zero?\n  return 0 if n == 1\n  return 1 if n == 2\n  (fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\nend", "  fibs = [0, 0, 1]\n  return fibs[n] if\
    \ n < 3\n  (3..n).each do |i|\n    fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3]\n\
    \  end\n  fibs[n]\nend", "  i = 3\n  a = [0, 0, 1]\n  return a[n] if n < 3\n \
    \ while i <= n\n    a << a[i-1] + a[i-2] + a[i-3]\n    i += 1\n  end\n  a[n]\n\
    end", "\tif n <= 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "  return 0 if n == 0\
    \ || n == 1\n  return 1 if n == 2\n  [fibfib(n-1), fibfib(n-2), fibfib(n-3)].reduce(:+)\n\
    end", "  a = 0\n  b = 0\n  c = 1\n  res = 0\n  i = 2\n  while i <= n\n    res\
    \ = a + b + c\n    a = b\n    b = c\n    c = res\n    i += 1\n  end\n  res\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ n <= 2 ? n - 1 : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend", "  if\
    \ n < 3\n    return n-1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n <= 2\n    return n\n  end\n  fib_n\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "    assert n.is_a? Integer\n    assert n >= 0\n\
    \    return 0 if n == 0\n    return 0 if n == 1\n    return 1 if n == 2\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    fib_arr = [0, 0, 1]\n  \
    \  return 0 if n == 0\n    return 1 if n == 2\n    return fib_arr[n] if fib_arr[n]\n\
    \    (3..n).each do |i|\n        fib_arr[i] = fib_arr[i-1] + fib_arr[i-2] + fib_arr[i-3]\n\
    \    end\n    fib_arr[n]\nend", "  return 0 if n == 0\n  return 0 if n == 1\n\
    \  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib_sequence(n)[n]\n\
    end", "  (1..n).inject([0,0,1]) { |memo, n| [memo[1], memo[2], memo[0] + memo[1]\
    \ + memo[2]] }[2]\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n\
    \ == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  a, b, c = 0, 0, 1\n  n.times do\n    a, b, c = b, c, a + b + c\n  end\n  a\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\nend", "\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  # write your code here\n\
    end", "  return 0 if n < 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return n if n <= 1\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  a,\
    \ b, c = 0, 0, 1\n  (n-2).times do\n    d = a + b + c\n    a = b\n    b = c\n\
    \    c = d\n  end\n  c\nend", "    if n < 0\n        return nil\n    end\n   \
    \ if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 1\n    end\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fib = [0,0,1]\n  return fib[n] if n <= 2\n  for i in\
    \ 3..n\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n  end\n  fib[n]\nend", " \
    \ return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  arr = [0, 0, 1]\n  index = 2\n  while index < n\n\
    \    arr << arr[index] + arr[index - 1] + arr[index - 2]\n    index += 1\n  end\n\
    \  arr[-1]\nend", "    return 0 if n == 0\n    return 0 if n == 1\n    return\
    \ 1 if n == 2\n    a = 0\n    b = 0\n    c = 1\n    i = 3\n    while i <= n\n\
    \        temp = a\n        a = b\n        b = c\n        c = temp + b + c\n  \
    \      i += 1\n    end\n    return c\nend", "  fibs = [0,0,1]\n  3.upto(n) do\
    \ |i|\n    fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3]\n  end\n  fibs[n]\nend",
  "    return 0 if n == 0\n    return 0 if n == 1\n    return 1 if n == 2\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n <= 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  previous =\
    \ [0, 0, 1]\n  (n - 3).times do\n    previous << previous.shift + previous.shift\
    \ + previous.shift\n  end\n  previous.last\nend", "  fibfib_result = 0\n  a =\
    \ 0\n  b = 0\n  c = 1\n  (3..n).each do |i|\n    fibfib_result = a + b + c\n \
    \   a = b\n    b = c\n    c = fibfib_result\n  end\n  fibfib_result\nend", " \
    \ return 0 if n.zero?\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\nend", "  n < 3 ? n == 2 ? 1 : 0 : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  # TODO\nend", "  # TODO: implement me\n\
    end", "\tif n == 0 || n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\telse\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "  if n <= 1\n\
    \    return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n == 0\n    0\n  elsif n == 1\n\
    \    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  a, b, c = 0, 0, 1\n  n.times do\n    a, b, c = b, c, a + b +\
    \ c\n  end\n  a\nend", "  return 0 if n.zero?\n  return 0 if n == 1\n  return\
    \ 1 if n == 2\n  @fibfib = [0, 0, 1]\n  (3..n).each do |i|\n    @fibfib[i] = @fibfib[i-1]\
    \ + @fibfib[i-2] + @fibfib[i-3]\n  end\n  @fibfib[n]\nend", "  # YOUR CODE HERE\n\
    end", "  raise ArgumentError if n < 0\n  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  a = 0\n  b\
    \ = 0\n  c = 1\n  (n-3).times do\n    d = a + b + c\n    a = b\n    b = c\n  \
    \  c = d\n  end\n  return a + b + c\nend", "  return 0 if n < 2\n  return 1 if\
    \ n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0\
    \ if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nputs fibfib(1)\nputs fibfib(5)\nputs fibfib(8)",
  "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n  a, b, c\
    \ = 0, 0, 1\n  (n - 2).times do\n    d = a + b + c\n    a = b\n    b = c\n   \
    \ c = d\n  end\n  c\nend", "  if n < 2\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return n if n ==\
    \ 0\n  return n-1 if n == 1\n  return n-2 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  a = 0\n  b = 0\n \
    \ c = 1\n  for i in 0..n-1\n    if i < 3\n      a = i\n    else\n      a = b +\
    \ c + d\n      d = c\n      c = b\n    end\n    b = a\n  end\n  return a\nend",
  "  fibfib_array = [0, 0, 1]\n  return fibfib_array[n] if n < 3\n  (3..n).each do\
    \ |x|\n    fibfib_array[x] = fibfib_array[x-1] + fibfib_array[x-2] + fibfib_array[x-3]\n\
    \  end\n  fibfib_array[n]\nend", "  return 0 if n == 0\n  return 0 if n == 1\n\
    \  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend",
  "  raise ArgumentError, \"n must be an integer\" unless n.is_a? Integer\n  raise\
    \ ArgumentError, \"n must be non-negative\" unless n >= 0\n  return 0 if n <=\
    \ 1\n  return 1 if n == 2\n  prev = 1\n  prev_prev = 0\n  i = 3\n  while i <=\
    \ n\n    current = prev + prev_prev + fibfib(i-3)\n    prev_prev = prev\n    prev\
    \ = current\n    i += 1\n  end\n  return current\nend", "  if n < 3\n    n - 1\n\
    \  else\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  end\nend", "   \
    \ return 0 if n == 0\n    return 0 if n == 1\n    return 1 if n == 2\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "\treturn 0 if n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n < 2\n  return\
    \ 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return\
    \ n if n < 2\n  nums = [0, 0, 1]\n  3.upto(n) do |i|\n    nums.push(nums[i-1]\
    \ + nums[i-2] + nums[i-3])\n  end\n  nums[n]\nend", "  if n < 2\n    return n\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if\
    \ n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "\nend", "  # write your code here\nend", "\treturn 0 if\
    \ n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\tfibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", end, "    return 0 if n == 0\n    return 0 if n == 1\n\
    \    return 1 if n == 2\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = [0, 0, 1]\n  return fibfib[n]\
    \ if n < 3\n  n.times do |i|\n    fibfib[i % 3] = fibfib[(i + 1) % 3] + fibfib[(i\
    \ + 2) % 3] + fibfib[(i + 3) % 3]\n  end\n  fibfib[(n - 1) % 3]\nend", "\treturn\
    \ 0 if n==0 || n==1\n\treturn 1 if n==2\n\tfib1=0\n\tfib2=0\n\tfib3=1\n\tcount=2\n\
    \twhile count<n\n\t\tcount+=1\n\t\tfib1=fib2\n\t\tfib2=fib3\n\t\tfib3=fib1+fib2+fib3\n\
    \tend\n\treturn fib3\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif\
    \ n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  x = 0\n  y = 0\n  z = 1\n  (n-3).times\
    \ do\n    z_ = z\n    z = x + y + z\n    x = y\n    y = z_\n  end\n  z\nend",
  end, "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n == 0\n    0\n\
    \  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "\tif n < 2\n\t\treturn n\n\telse\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nputs fibfib(5)", "  return 0 if n ==\
    \ 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "\treturn 0 if n == 0\n\treturn 0 if n ==\
    \ 1\n\treturn 1 if n == 2\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n == 0\n\
    \  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n <= 2\n    n-1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n.zero?\n  return 0 if n == 1\n  return 1 if n ==\
    \ 2\n  fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend", "  return 0 if n ==\
    \ 0 || n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n ==\
    \ 0 || n == 1\n  return 1 if n == 2\n  x, y, z = 0, 0, 1\n  3.upto(n) do\n   \
    \ x, y, z = y, z, z + y + x\n  end\n  z\nend", "  if n < 2\n    return n\n  end\n\
    \  fib_of_n = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  return fib_of_n\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    fib_array = [0, 0, 1]\n    if n < 3\n\
    \        return fib_array[n]\n    end\n    2.upto(n-1) do |index|\n        fib_array[0]\
    \ = fib_array[1]\n        fib_array[1] = fib_array[2]\n        fib_array[2] =\
    \ fib_array[0] + fib_array[1] + fib_array[2]\n    end\n    return fib_array[2]\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  n <= 1 ? 0 : n == 2 ? 1 :\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "    return 0 if n == 0\n    return 0 if n == 1\n    return 1 if n == 2\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib_list(n).last\n\
    end", "  if n == 0 || n == 1\n    return 0\n  elsif n == 2\n    return 1\n  end\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib = [0,0,1]\n  return fib[n]\
    \ if n < 3\n  (n-2).times do\n    fib[0] = fib[1]\n    fib[1] = fib[2]\n    fib[2]\
    \ = fib[0] + fib[1] + fib[2]\n  end\n  fib[2]\nend", "  return n if n <= 1\n \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    return 0 if n == 0\n   \
    \ return 0 if n == 1\n    return 1 if n == 2\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1\
    \ if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  # Your Code Here\nend", "  return 0 if n == 0 || n ==\
    \ 1\n  if n == 2\n    return 1\n  end\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return n if n <= 1\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  n1 = 0\n  n2 = 0\n  n3 = 1\n  n4 = 1\n  (n-3).times\
    \ do\n    n4 = n1 + n2 + n3\n    n1 = n2\n    n2 = n3\n    n3 = n4\n  end\n  n4\n\
    end", "    arr = []\n    arr[0] = 0\n    arr[1] = 0\n    arr[2] = 1\n    (3..n).each\
    \ do |i|\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n    end\n    return\
    \ arr[n]\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n \
    \   1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  case\
    \ n\n  when 0, 1\n    0\n  when 2\n    1\n  else\n    n1, n2, n3 = 0, 0, 1\n \
    \   3.upto(n) do\n      n1, n2, n3 = n2, n3, n1 + n2 + n3\n    end\n    n3\n \
    \ end\nend", "  if n <= 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0\
    \ if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  # Write your code here.\nend", "  return\
    \ 0 if n == 0 || n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "\tfibfib0(n, 1, 0, 0)\nend", "  n.times.reduce([0, 0,\
    \ 1]) { |(a, b, c), _| [b, c, a + b + c] }.last\nend", "  if n == 0\n    0\n \
    \ elsif n == 1\n    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if\
    \ n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  # @values = {0 => 0, 1 => 0, 2 => 1}\n  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  val = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return val\nend", "\tif n < 3\n\t\treturn n-1\n\telse\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "    case n\n    when 0, 1\n     \
    \   0\n    when 2\n        1\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  if n <= 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0\
    \ if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\nputs fibfib(5)\nputs fibfib(8)", "  # your code here\nend",
  "  fibs = [0,0,1]\n  (n - 2).times do\n    fibs[0] = fibs[1]\n    fibs[1] = fibs[2]\n\
    \    fibs[2] = fibs[0] + fibs[1] + fibs[2]\n  end\n  fibs[2]\nend", "  if n ==\
    \ 0 || n == 1\n    return 0\n  elsif n == 2\n    return 1\n  end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "end\n```", "\tif (n==0 || n==1)\n\t\treturn\
    \ 0\n\telsif (n==2)\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\tend\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n  (fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\nend", end, "\treturn n if n <= 1\n\tfibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  raise ArgumentError, \"n must be a positive\
    \ integer\" unless n.is_a?(Integer) && n >= 0\n  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n < 2\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "\tif n < 3\n\t\treturn 0 if n == 0\n\t\treturn\
    \ 1 if n == 2\n\tend\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  a =\
    \ 0\n  b = 0\n  c = 1\n  (n-2).times do\n    x = c + b + a\n    a = b\n    b =\
    \ c\n    c = x\n  end\n  c\nend", "  if n < 3\n    n\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n == 0 || n == 1\n\
    \  return 1 if n == 2\n  #return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \ return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  mem = [0, 0, 1]\n  n.times\
    \ do |i|\n    mem[i%3] = mem[(i-1)%3] + mem[(i-2)%3] + mem[(i-3)%3]\n  end\n \
    \ mem[(n-1)%3]\nend", "  # to be implemented\nend", "  return 0 if n < 2\n  n\
    \ < 3 ? 1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n ==\
    \ 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  a = b = c = d = 0\n  (n+1).times\
    \ do |i|\n    d = b + c + a\n    a = b\n    b = c\n    c = d\n  end\n  a\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  # TODO\nend", "  return 0 if n == 0\n\
    \  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  a = 0\n  b = 0\n  c = 1\n  count = 3\n  until count == n\n    a = b\n\
    \    b = c\n    c = a + b + c\n    count += 1\n  end\n  c\nend", "  return 0 if\
    \ n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return n if n == 0 || n == 1\n  return 1 if n == 2\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return n if n < 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n   \
    \ 0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n < 2\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "end\n```", "  if n == 0\n    0\n  elsif n == 1\n    0\n\
    \  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "\tif n < 0\n\t\treturn nil\n\telsif n == 0\n\t\treturn 0\n\telsif\
    \ n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nputs fibfib(0)\nputs fibfib(1)\nputs\
    \ fibfib(2)\nputs fibfib(3)\nputs fibfib(4)\nputs fibfib(5)\nputs fibfib(6)\n\
    puts fibfib(7)\nputs fibfib(8)\nputs fibfib(9)\nputs fibfib(10)\nputs fibfib(11)\n\
    puts fibfib(12)\nputs fibfib(13)\nputs fibfib(14)\nputs fibfib(15)\nputs fibfib(16)\n\
    puts fibfib(17)\nputs fibfib(18)\nputs fibfib(19)\nputs fibfib(20)\nputs fibfib(21)\n\
    puts fibfib(22)\nputs fibfib(23)\nputs fibfib(24)\nputs fibfib(25)\nputs fibfib(26)\n\
    puts fibfib(27)\nputs fibfib(28)\nputs fibfib(29)\nputs fibfib(30)", "  fibfib_array\
    \ = [0, 0, 1]\n  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n ==\
    \ 2\n  3.upto(n) do |i|\n    fibfib_array[i] = fibfib_array[i-1] + fibfib_array[i-2]\
    \ + fibfib_array[i-3]\n  end\n  fibfib_array[n]\nend", "  return 0 if n == 0\n\
    \  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n ==\
    \ 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  end, "  fibfib_helper(n, {0 => 0, 1 => 0, 2 => 1})\nend", "  a = 0\n  b = 0\n  c\
    \ = 1\n  i = 0\n  while i < n\n    temp = a\n    a = b\n    b = c\n    c = b +\
    \ temp + c\n    i += 1\n  end\n  a\nend", "  # TODO: implement this method\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  #your code here\nend", "  return 0 if\
    \ n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
