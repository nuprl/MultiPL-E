name: HumanEval_140_fix_spaces
language: rb
prompt: "# Given a string text, replace all spaces in it with underscores, \n# and\
  \ if a string has more than 2 consecutive spaces, \n# then replace all consecutive\
  \ spaces with - \n# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\"\
  \ Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\
  \n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n\
  \    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"\
  Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif\
  \ \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow\
  \ Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa\
  \   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2\
  \ 2 mple\"))\n  end\nend\n"
completions: ["  text.gsub(/  +/, '-').gsub(/ /, '_')\nend", "  text.split.join(\"\
    _\")\nend", "    if text.scan(/\\s+/).size > 2\n      text.gsub(\"  \", \"--\"\
    )\n    else\n      text.gsub(\" \", \"_\")\n    end\nend", "  text.gsub(/\\s\\\
    s+/, '-').gsub(/\\s/, '_')\nend", "  text.gsub!(/ {2,}/, '-')\n  text.gsub!(/\
    \ /, '_')\n  text\nend", "  text.split.join(\"_\")\nend", "  text.gsub(/\\s+/,\
    \ '-').gsub(' ', '_')\nend", "    text.gsub(/\\s{2,}/, '-').gsub(/^\\s/, '_').gsub(/\\\
    s/, '_')\nend", "\ttext.gsub(/\\s{2,}/, '-').gsub(/^\\s+/, '_').gsub(/\\s+$/,\
    \ '_').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/, '_').gsub('_', '-')\nend\n\
    puts fix_spaces(\" Example\")\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\"\
    \ Example 2\")\nputs fix_spaces(\" Example 3\")", "  string = text.gsub(\" \"\
    , \"_\")\n  string.gsub!(\"_ _ \", \"_\")\n  string.gsub!(\"_ _\", \"-\")\n  string\n\
    end", "  # your code here\nend", "  text.gsub(/\\s+/, ' ').squeeze(' ').gsub('\
    \ ', '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub('\
    \ ','_').gsub('_ ','_').gsub('__','-').gsub('  ','-').gsub('_-_','-')\nend", " \
    \ if text.include?(' ')\n    text.gsub(/\\s/, '_')\n  elsif text.include?('  ')\n\
    \    text.gsub(/\\s/, '-')\n  else\n    text\n  end\nend", "    text.gsub(/\\\
    s/, '_').gsub(/\\s_+/, '_').gsub(/_+/, '-')\nend", "  if text.match(/  +/)\n \
    \   text.gsub(/ /, '-').gsub(/  +/, '-')\n  else\n    text.gsub(/ /, '_')\n  end\n\
    end", "    text.gsub(/\\s\\s+/, '-').gsub(/\\s/, '_')\nend", "    text.strip.gsub(/\
    \ {2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\n\
    end", "  text.gsub(/\\s+/, \"-\")\nend", "    text = text.gsub(/\\s/, '_')\n \
    \   return text\nend", "  if text.size <= 1\n    return text\n  end\n  if text[0]\
    \ == \" \"\n    if text[1] == \" \"\n      return \"_\" + fix_spaces(text[1..-1])\n\
    \    else\n      return \"_\" + fix_spaces(text[1..-1])\n    end\n  else\n   \
    \ return text[0] + fix_spaces(text[1..-1])\n  end\nend", "  text.gsub(/\\s+/,\
    \ \" \").gsub(/ /, \"_\").gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub(/ {2,}/,\
    \ '-').tr(' ', '_')\nend", "    text.gsub!(/\\s{2,}/, \"-\")\n    text.gsub!(/\\\
    s/, \"_\")\n    text\nend", "  text.gsub(/\\s+/, '-').gsub(/\\s/, '_')\nend",
  "  text.gsub('  ', '-').gsub(' ', '_')\nend", "  text.strip.gsub(/[\\s]{2,}/, '-').gsub(/[\\\
    s]/, '_')\nend", "  text = text.strip\n  text = text.gsub(/\\s+/, '-')\n  text\
    \ = text.gsub(/(\\s{1})/, '_')\n  puts text\nend", "    text.gsub(/\\s+/, ' ')\n\
    \       .gsub(/ /, '_')\n       .gsub(/([_-])+/, '-')\nend", "  if text.include?('\
    \  ')\n    text.gsub!('  ', '-')\n  else\n    text.gsub!(' ', '_')\n  end\nend",
  "    text.lstrip.gsub(/ {2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s\\s+/,\
    \ '-').gsub(/ /, '_')\nend", "  text.gsub!(/[ ]+/, '_')\n  text.gsub!(/[ ]/, '-')\n\
    \  text\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  # text.gsub(/\\\
    s+/, '_')\n  text.gsub(/\\s+/, ' ' => '_', /\\s{2,}/ => ' ' => '-')\nend", " \
    \ if text.is_a?(String)\n    text.gsub(/ +/, \"_\").gsub(/__/, \"-\")\n  else\n\
    \    \"Please enter a valid string\"\n  end\nend", "  text.gsub(/ /, '_').gsub(/\
    \ +/, '-')\nend", "  text.gsub(/\\s+/, ' ').gsub(' ', '_').gsub('_ ', '_').gsub('\
    \  ', '-')\nend", "  text.gsub!(/[^\\s]+/, \"\")\n  while text.include?(\"  \"\
    )\n    text.gsub!(\"  \", \" -\")\n  end\n  return text.gsub(\" \", \"_\")\nend",
  "  text.gsub!('  ', '-')\n  text.gsub!(' ', '_')\n  return text\nend", "    if text.include?(\"\
    \  \")\n        text.gsub!(\"  \", \" \")\n        text.gsub!(\" \", \"-\")\n\
    \    else\n        text.gsub!(\" \", \"_\")\n    end\n    return text\nend\np\
    \ fix_spaces(\" Example 3\")", "  text.gsub(/\\s/, '_').gsub(/_{2,}/, '-').sub(/^_/,\
    \ '')\nend", "  text.gsub('  ', '-').gsub(' ', '_')\nend", "    text.gsub(/\\\
    s+/, '_')\nend", "  #your code here\nend", "    text = text.gsub(\" \", \"_\"\
    )\n    if text.count(\"_\") > 2\n        text = text.gsub(\"_\", \"-\")\n    end\n\
    \    return text\nend", "  text.gsub(/\\s/,'_').gsub(/\\s{2,}/,'-')\nend", " \
    \ text.gsub(/\\s{3,}/, '-').gsub(/\\s{2}/, '_').gsub(/\\s/, '')\nend", "  text.strip!\n\
    \  # text.gsub!(\" \",\"_\")\n  text.gsub!(/\\s+/,\"_\")\n  # text.gsub!(/(\\\
    s)\\1+/,\"-\")\n  text.gsub!(/\\_+/,\"-\")\n  text\nend", "  text.gsub(' ', '_').gsub(/\\\
    s{2,}/, '-').strip\nend", "    text.gsub(/\\s\\s/, '-').gsub(/\\s/, '_')\nend",
  "  # Your code here\nend", "  text.strip.gsub(/\\s+/, '-').gsub(/\\s/, '_')\nend",
  "\ttext.strip.gsub(/\\s+/, '_')\nend", "    return text.gsub(/\\s+/, '-').gsub(/^\\\
    s/, '').gsub(/\\s$/, '')\nend", "  # text.gsub(/\\s/, '_').gsub(/_{2,}/, '-')\n\
    \  text.tr(' ', '_').gsub(/_{2,}/, '-')\nend", "  text.gsub(/\\s+/, '_').gsub(/_\\\
    s/, '-').gsub(/\\s_/, '-')\nend", "\ttext = text.gsub('  ', '-').gsub(' ', '_')\n\
    end", "  spaces = text.scan(/\\s+/)\n  if spaces.length > 2\n    text.gsub!(/\\\
    s+/, '-')\n  else\n    text.gsub!(/\\s+/, '_')\n  end\n  text\nend", "  # text.gsub(/\\\
    s+/, '_')\n  text.gsub(/\\s+/, '_').tr(' ', '_')\nend", "  text.gsub(/\\s\\s+/,\
    \ '-').gsub(/\\s+/, '_')\nend", "  text = text.gsub(/\\s+/, '_')\n  text = text.gsub(/([^_])_([^_])/,\
    \ '\\1 \\2')\n  text\nend", "    text.tr(\" \",\"_\").gsub(/\\s{2,}/,\"-\")\n\
    end\nputs fix_spaces(\" Example\")\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\"\
    \ Example 2\")\nputs fix_spaces(\" Example 3\")", "  if text.include?(\"  \")\n\
    \    text.gsub!(\"  \", \"-\")\n  end\n  if text.include?(\" \")\n    text.gsub!(\"\
    \ \", \"_\")\n  end\n  text\nend", "\tnew_text = text.squeeze(\" \")\n\tnew_text.tr(\"\
    \ \", \"_\")\nend", "  text.split.join(\"_\")\nend", "  text = text.gsub(/\\s/,\
    \ '_')\n  text = text.gsub(/__*/, '-')\nend", "  if text.count(\" \") > 2\n  \
    \  puts text.gsub(/\\s/, '-').strip\n  else\n    puts text.gsub(/\\s/, '_').strip\n\
    \  end\nend", "  #str.gsub(/\\s+/, '-')\n  text.gsub(/\\s+/, '_')\nend", "  text.gsub(/[\
    \ ]{3,}/, '-').gsub(/[ ]{2}/, '_').strip\nend", "\t# add code here\nend", "  text.gsub(/\\\
    s+/, '-').gsub(' ', '_')\nend", "  text = text.gsub(\"  \", \"-\")\n  text = text.gsub(\"\
    \ \", \"_\")\n  text\nend", "    text.strip.gsub(\" \",\"_\").gsub(/([ ]{2,})/,\"\
    -\")\nend", "  text.gsub!(/\\s/, '_')\n  text.gsub!(/_{2,}/, '-')\n  text\nend",
  "  if text.scan(\" \").length >= 2\n    return text.tr(\" \", \"_\").gsub(\"_\"\
    \ * 2, \"-\")\n  else\n    return text.tr(\" \", \"_\")\n  end\nend", "\ttext.squeeze('\
    \ ').gsub(/\\s+/, '_')\nend", "  if text.include?(\"  \")\n    return text.gsub(/\\\
    s{2,}/, \"-\")\n  else\n    return text.gsub(/\\s+/, \"_\")\n  end\nend", "  text.gsub(/\\\
    s+/, ' ').gsub(/ /, '_').gsub(/([_]{2,})/, '-')\nend", "    underscore = text.split(\"\
    \ \").join(\"_\")\n    text.match(/ {3,}/) ? underscore.gsub(\"_\", \"-\") : underscore\n\
    end", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.squeeze(\"\
    \ \").gsub(\" \", \"-\")\nend", "  # TODO\nend", "  text.gsub(/\\s{3,}/, '-').gsub(/\
    \ /, '_')\nend", "  text.gsub(/\\s+/, '_').gsub(/\\s+/, '-')\nend", "  # 1. find\
    \ all spaces in text\n  # 2. replace spaces with \"_\"\n  # 3. replace all consecutive\
    \ spaces with \"-\"\n  # Add code here\n  text = text.gsub(/ +/, '_')\n  text\
    \ = text.gsub(/_{2,}/, '-')\n  return text\nend", "  text.gsub(/\\s+/, '_').gsub(/\\\
    s/, '-')\nend", "  text.strip.gsub(/\\s+/, '-').gsub(/\\s/, '_')\nend", "  p text.gsub(/\\\
    s+/, '_')\nend", "  text.strip.tr(' ', '_').gsub(/\\s+/, '-')\nend", "  text =\
    \ text.strip\n  text = text.gsub(\" \", \"_\")\n  return text.gsub(\"_\", \"-\"\
    ) if text.count(\"_\") > 2\n  text\nend", "  new_string = text.split(' ').join('_')\n\
    \  return new_string.gsub!(/[_]{2,}/, '-')\nend", "  text.gsub!(/\\s{2,}/, '-')\n\
    \  text.gsub!(/\\s/, '_')\n  text\nend", "\ttext.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "    if text.include?(\"  \")\n        return text.gsub(\"  \"\
    , \" - \")\n    else\n        return text.gsub(\" \", \"_\")\n    end\nend", " \
    \ return text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  # Use .gsub(regex,\
    \ replace) to replace all occurrences of a string\n  # http://ruby-doc.org/core-2.2.0/String.html#method-i-gsub\n\
    end", "    return text.gsub('  ', '-')\n        .gsub(' ', '_')\nend", "  text.gsub('\
    \  ', '-').gsub(' ', '_')\nend", "    text.gsub(/ {2,}/, '-')\nend", "    text.gsub(/\\\
    s+/, '_')\nend", "  if text.gsub(/\\s/, \"_\").squeeze(\"_\").count(\"_\") > 2\n\
    \    text.gsub(/\\s/, \"_\").squeeze(\"_\").gsub(\"_\", \"-\")\n  else\n    text.gsub(/\\\
    s/, \"_\").squeeze(\"_\")\n  end\nend", "  text = text.strip\n  while text.include?(\"\
    \  \")\n    text = text.gsub(\"  \", \"-\")\n  end\n  text.gsub(\" \", \"_\")\n\
    end", "  if text.count(\" \") == 0\n    return text\n  elsif text.count(\" \"\
    ) == 1\n    text.gsub!(\" \", \"_\")\n    return text\n  elsif text.count(\" \"\
    ) == 2\n    text.gsub!(\" \", \"_\")\n    return text\n  else\n    text.gsub!(\"\
    \ \", \"-\")\n    return text\n  end\nend", '  return if text.empty?', "  text\
    \ = text.gsub(\"  \", \" \")\n  text = text.gsub(\"  \", \"-\")\n  text = text.gsub(\"\
    \ \", \"_\")\n  text\nend", "  spaces = text.scan(/\\s+/)\n  if spaces.size ==\
    \ 1\n    return text.gsub(\" \", \"_\")\n  elsif spaces.size == 2\n    return\
    \ text.gsub(\" \", \"_\").gsub(\"_ \", \"_\")\n  else\n    return text.gsub(\"\
    \ \", \"_\").gsub(\"_ \", \"_\").gsub(\"_ \", \"-\")\n  end\nend", "    # TODO:\
    \ implement this\n    text = text.strip\n    text = text.gsub(/ /, '_')\n    text\
    \ = text.gsub(/__+/, '-')\nend", "\treturn text.gsub(/\\s{2,}/, \"-\").gsub(/\\\
    s/, \"_\")\nend", "    if text.length <= 2\n        return text.gsub(\" \", \"\
    _\")\n    else\n        while text.include?(\"  \")\n            text = text.gsub(\"\
    \  \", \"-\")\n        end\n        return text.gsub(\" \", \"_\")\n    end\n\
    end", "  a = text.gsub(/ {2,}/, '-').gsub(/ /, '_')\n  a\nend", "  text.gsub('\
    \ ','_').gsub(/\\s{2,}/,'-')\nend", "\t#puts text.gsub(/ {2,}/, '-').gsub(/\\\
    s/, '_')\n\ttext.gsub(/ {2,}/, '-').gsub(/\\s/, '_')\nend", "  return text.gsub(/\\\
    s/, '_').gsub(/\\s{2,}/, '-').gsub(/^\\s/, '')\nend\nputs fix_spaces(\" Example\
    \ 3\")", "  if text.count(\" \") == 0\n    text\n  elsif text.count(\" \") ==\
    \ 1\n    text.gsub!(/\\s/, \"_\")\n  elsif text.count(\" \") == 2\n    text.gsub!(/\\\
    s/, \"_\")\n  else\n    text.gsub!(/\\s/, \"-\")\n  end\nend", "  if text.size\
    \ < 2\n    text\n  elsif text[1] != \" \"\n    text[0] + fix_spaces(text[1..-1])\n\
    \  elsif text[1] == \" \" && text[2] != \" \"\n    text[0] + \"_\" + fix_spaces(text[2..-1])\n\
    \  elsif text[1] == \" \" && text[2] == \" \"\n    text[0] + \"-\" + fix_spaces(text[2..-1])\n\
    \  end\nend", "  text.gsub(/  +/, '-').gsub(/ /, '_')\nend", "  text.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\nend\n\
    puts fix_spaces(\" Example\")\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\"\
    \ Example 2\")\nputs fix_spaces(\" Example 3\")\nputs \"------------------\"",
  "  # your code here\nend", "  if text.length <= 2\n    text.gsub(/\\s/, '_')\n \
    \ else\n    text.gsub(/\\s{2,}/, '-')\n  end\nend", "  text.gsub(/\\s+/, '-').gsub(/\\\
    s/, '_')\nend", "  #replace spaces with underscores and then replace more than\
    \ 2 with -\n  text.gsub(\" \", \"_\").gsub(/(\\_){2,}/, \"-\")\nend", "  text\
    \ = text.strip\n  text = text.gsub(\" \", \"_\")\n  text = text.gsub(\"__\", \"\
    -\")\n  text\nend", "\ttext = text.strip\n\ttext = text.tr(' ', '_')\n\ttext =\
    \ text.gsub(/_{2,}/, '-')\nend", "  text.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\n\
    end", "  if text.length > 2\n    if text[0] == \" \" && text[1] == \" \"\n   \
    \   text[0] = \"_\"\n      text[1] = \"-\"\n    elsif text[0] == \" \"\n     \
    \ text[0] = \"_\"\n    end\n  end\n  text\nend", "  text.strip!\n  text.gsub!(\"\
    \ \", \"_\")\n  text.gsub!(/(_)+/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/,\
    \ ' ')\n  text.gsub!(/\\s/, '_')\n  text.gsub!(/_+/, '-')\n  text\nend", "   \
    \ # replace all spaces with underscores\n    fixed_text = text.gsub(\" \", \"\
    _\")\n    # count consecutive underscores\n    cnt = 0\n    # flag for replacing\
    \ consecutive underscores with dashes\n    replace = false\n    # iterate through\
    \ fixed_text\n    i = 0\n    while i < fixed_text.length\n        if fixed_text[i]\
    \ == \"_\"\n            cnt += 1\n            if cnt > 2\n                replace\
    \ = true\n            end\n        else\n            cnt = 0\n        end\n  \
    \      i += 1\n    end\n    # replace all consecutive underscores with dashes\n\
    \    if replace\n        fixed_text = fixed_text.gsub(\"___\", \"-\")\n    end\n\
    \    # return fixed_text\n    fixed_text\nend", "  text.gsub(/\\s+/, '-').gsub('\
    \ ', '_')\nend", "  # Your code here\nend", "  text.strip.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend\nputs fix_spaces.call(\" Example 3\")", "  text.gsub!(/\\s+/, '-')\n\
    \  text.gsub('-', '_')\nend", "  text.gsub(/\\s+/, \"-\").gsub(/^-/,\"\").gsub(/-$/,\"\
    \").gsub(/-/, \"_\")\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/^\\s/, '_').gsub(/\\\
    s/, '_')\nend", "\tresult=text.gsub(/\\s+/, '_')\n\tresult=result.gsub(/_+/, '-')\n\
    \tresult=result.gsub(/^-/, '')\n\treturn result\nend\nputs fix_spaces(\" Example\"\
    )\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\" Example 2\")\nputs fix_spaces(\"\
    \ Example 3\")\nputs \"--------------------------\"", "\tif text.size > 2\n\t\t\
    text.gsub(/\\s+/, '_')\n\telse\n\t\ttext.gsub(/\\s+/, '-')\n\tend\nend", end,
  "    text.squeeze(\" \").gsub(\" \", \"_\")\nend", "  # write your code here\nend",
  "  # text.gsub(/\\s+/, '-').gsub(/(.)\\s/, '\\1_')\n  text.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "  text.gsub(/ {2,}/, '-').gsub(/ /, '_')\nend", "  # write your\
    \ code here\nend", "  # counter = 0\n  arr = text.split(\" \")\n  result = \"\"\
    \n  if arr.length >= 2\n    # check if spaces are consecutive\n    arr.each do\
    \ |i|\n      if arr[i].include?(\"  \")\n        result += arr[i].gsub(\" \",\
    \ \"-\")\n      elsif arr[i].include?(\" \")\n        result += arr[i].gsub(\"\
    \ \", \"_\")\n      else\n        result += arr[i]\n      end\n    end\n  else\n\
    \    result = text\n  end\n  result\nend", "  text.gsub!('  ', ' -')\n  text.gsub!('\
    \ ', '_')\n  text\nend", "  text.gsub(/\\s/, '_').gsub(/_{2,}/, '-')\nend", " \
    \ text.sub(/^ /, '').gsub(/ +/, '-').gsub(/ /, '_')\nend", "  # TODO: solve the\
    \ problem\nend", " \n  #my code\n  new_text = text.gsub(/\\s+/, '_')\n  if text.include?('\
    \  ') \n    new_text = text.gsub(/\\s+/, '-')\n  end\n  new_text", "  text.gsub!(/\
    \ /, '_')\n  text.gsub!(/__+/, '-')\n  text\nend", "  # write your code here\n\
    end", "  text.gsub(/ +/, ' ').gsub(/ /, '_').gsub(/   +/, '-').gsub(/ -/, '-')\n\
    end\nputs fix_spaces(\" Example\")\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\"\
    \ Example 2\")\nputs fix_spaces(\" Example 3\")", "  text.gsub(/\\s+/, '_').gsub(/_+/,\
    \ '_').gsub(/^_/, '').gsub(/_$/, '')\nend", "\tputs text.gsub(/\\s/, '_').gsub(/\\\
    s{2,}/, '-')\nend\nputs \"---- fix_spaces ----\"\nputs fix_spaces.call(\" Example\"\
    )\nputs fix_spaces.call(\" Example 1\")\nputs fix_spaces.call(\" Example 2\")\n\
    puts fix_spaces.call(\" Example 3\")", "  #puts text\n  #puts text.class\n  text\
    \ = text.gsub(/\\s/, '_')\n  text = text.gsub(/_+/, '-')\n  return text\nend",
  "  text.gsub(/\\s{2,}/, '-')\n     .gsub(/\\s/, '_')\nend", "  # your code here\n\
    end", "  text.gsub(/[ ]{2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s{2,}/,\
    \ '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/, ' ').gsub(/\\s/, '_')\nend",
  "  text.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/, '_').tr('\
    \ ', '_')\nend", "  text.strip.gsub('  ', '-').gsub(' ', '_')\nend", "  text.gsub(/\
    \  +/, '-').gsub(/ +/, '_')\nend", "  text.gsub!(/\\s+/, '-')\n  text.gsub!(/^-/,\
    \ '')\n  text.gsub!(/-$/, '')\n  text\nend", "  text.tr(\" \", \"_\").gsub(\"\
    _\", \"-\").gsub(\"_\", \" \")\nend", "  text.gsub(/[ ]/, '_').gsub(/(.*)([ ][\
    \ ])(.*)/, '_\\1_\\3').gsub(/(.*)([ ][ ])(.*)/, '_\\1-\\3')\nend", "  #TODO: Your\
    \ code here\nend", "  text = text.gsub(/ {2,}/, '_')\n  text = text.gsub(/ {1,}/,\
    \ '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n \
    \ text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/\
    \ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n\
    \  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text =\
    \ text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/\
    \ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n\
    \  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text =\
    \ text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/\
    \ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n\
    \  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text =\
    \ text.gsub(/ {1,}/, '-')\n  text = text.gsub(/ {1,}/, '-')\n  text = text.gsub(/\
    \ {1,}/, '-')\n  text = text.gsub", "  clean_text = text.gsub(' ', '_')\n  while(clean_text.include?\
    \ '__')\n    clean_text = clean_text.gsub('__', '-')\n  end\n  return clean_text\n\
    end", "  text.gsub!('  ', '_') \n  text.gsub!(' ', '_')\n  text.gsub!('_', '-')\n\
    \  text\nend", "\treturn text.gsub(/\\s/, '_').gsub(/\\s{2,}/, '-')\nend", "\t\
    new_text = text.gsub(/\\s+/, '-')\n\tnew_text.gsub!(/-/, '_')\n\tnew_text\nend",
  "  if text.length == 1\n    text\n  elsif text.length == 2\n    text.gsub(\" \"\
    , \"_\")\n  else\n    text.gsub(\"  \", \"-\").gsub(\" \", \"_\")\n  end\nend",
  "  text.gsub(/\\s+/, '_').gsub(' ', '-')\nend", "  text.strip.gsub(/\\s+/, '-').gsub(/\\\
    s/, '_')\nend", "  text.gsub(/\\s\\s+/, '-').gsub(/ /, '_')\nend", "  whitespace\
    \ = /\\s+/\n  text.gsub(whitespace, '-').sub(whitespace, '_')\nend", "    text.gsub(\"\
    \  \", \"-\").gsub(\" \", \"_\")\nend", "  text = text.gsub(/\\s/, '_')\n  text\
    \ = text.gsub(/_+/, '-')\nend", "  text.gsub(/\\s\\s+/, '-').gsub(/\\s/, '_')\n\
    end\nputs fix_spaces(\" Example\")\nputs fix_spaces(\" Example 1\")\nputs fix_spaces(\"\
    \ Example 2\")\nputs fix_spaces(\" Example 3\")", "  text.gsub(/\\s+/, '-').gsub(/\\\
    s/, '_')\nend", "\t# text.gsub(\"  \", \"-\").gsub(\" \", \"_\")\n\t# text.gsub(/\\\
    s\\s+/, \"-\").gsub(\" \", \"_\")\n\ttext.gsub(/\\s+/, \" \").gsub(\" \", \"_\"\
    )\nend", "  text.gsub(/\\A\\s+/, \"\").gsub(/\\s+\\z/, \"\").gsub(/\\s{2,}/, \"\
    -\").gsub(/\\s/, \"_\")\nend\nfix_spaces(\" Example \")\nfix_spaces(\" Example\
    \ 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\" Example 3\")\nfix_spaces(\"\
    \ Example 4\")\nfix_spaces(\" Example 5\")", "  text.tr(\" \", \"_\").gsub(/_{2,}/,\
    \ '-').gsub(/^_+/, '')\nend", "    text = text.gsub(\"  \", \"-\")\n    text =\
    \ text.gsub(\" \", \"_\")\n    return text\nend\nfix_spaces(\" Example\")\nfix_spaces(\"\
    \ Example 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\" Example 3\")", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "    text.gsub!(/\\s\\s/, \"-\")\n    text.gsub!(/\\\
    s/, \"_\")\n    text\nend", "  text.gsub(/ {2,}/, '-')\n      .gsub(/ /, '_')\n\
    end", "  text = text.gsub(\" \",\"_\")\n  text = text.gsub(\"__\",\"-\")\n  return\
    \ text\nend", "  text.gsub(/ {2,}/, \"-\").gsub(/ /, \"_\")\nend", "  text.split(\"\
    \ \").reject { |i| i == \"\" }.join(\"_\")\nend", "    text.strip.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "  fixed_text = text.gsub(\"  \", \"-\")\n  fixed_text.gsub!(\"\
    \ \", \"_\")\n  return fixed_text\nend", "  if text.include? \"  \"\n    text.gsub!(/\
    \ +/, '-')\n  else\n    text.gsub!(/ +/, '_')\n  end\nend", "  text.tr(' ', '_').gsub(/[\
    \ ]{2,}/, '-')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
