name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns an array of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty array.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had\
  \ a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple\
  \ white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"\
  ]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") ==\
    \ n }\nend", "  s.split.select { |w| w.count('bcdfghjklmnpqrstvwxyz') == n }\n\
    end", "  vowels = %w(a e i o u)\n  s.split(' ').select { |word| word.chars.reject\
    \ { |letter| vowels.include?(letter) }.size == n }\nend", "  return nil if s.nil?\
    \ || s.length == 0\n  words = s.split(\" \")\n  result = []\n  for i in 0..words.length\
    \ - 1\n    word = words[i]\n    new_word = word.gsub(/[aeiouAEIOU]/, \"\")\n \
    \   result << word if new_word.length == n\n  end\n  result\nend", "  return []\
    \ if s.empty?\n  s.split.select { |s| s.gsub(/[aeiou]/i, '').length == n }\nend",
  "  s.split(\" \").select{|word| word.count(\"aeiou\") == n}\nend", "  words = s.split\n\
    \  words.select do |word|\n    word.downcase.chars.select { |c| c !~ /[aeiou]/\
    \ }.size == n\n  end\nend", "  words = s.split(\" \")\n  words.select { |word|\
    \ word.count(\"^aeiouAEIOU \") == n }\nend", "  # your code goes here\nend", " \
    \ strings = s.split\n  consonants = []\n  strings.each { |word| consonants <<\
    \ word if count_consonants(word) == n }\n  consonants\nend", "\ts = s.split(\"\
    \ \")\n\ts.select { |v| v.scan(/[bcdfghjklmnpqrstvwxyz]/).length == n }\nend",
  "  consonants = %w(b c d f g h j k l m n p q r s t v w x y z)\n  words = s.split('\
    \ ')\n  words.select do |word|\n    word.count(consonants.join) == n\n  end\n\
    end", "\ts.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\n\
    end", "  s.split(' ').each_with_object([]) do |w, a|\n    a << w if w.gsub(/[aeiou]/i,\
    \ '').length == n\n  end\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  words\
    \ = s.split(' ')\n  words.select { |word| word.count { |letter| !vowels.include?(letter)\
    \ } == n }\nend", "  #s.split.select { |x| x.count(\"^aeiouAEIOU\") == n }\n \
    \ s.scan(/\\b[a-zA-Z]*[^aeiouAEIOU]{#{n}}[a-zA-Z]*\\b/).reject(&:empty?)\nend",
  "  s.split.select { |word| word.count('^aeiou') == n }\nend", "  s.split(\" \").select{|word|\
    \ word.scan(/[aeiou]/).count == n}\nend", "    s.split.select { |word| word.count(\"\
    ^aeiouAEIOU\", \" \") == n }\nend", "  # find the words in the string that have\
    \ the specified number of consonants in them\n  words = s.scan(/\\w+/)\n  # remove\
    \ words that are shorter than the specified number of consonants\n  words.select!\
    \ { |word| word.length >= n }\n  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n  # remove\
    \ words that have less than the specified number of consonants\n  words.select!\
    \ { |word| word.chars.select { |char| consonants.include?(char.downcase) }.length\
    \ == n }\n  words\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  arr\
    \ = s.split(\" \")\n  result = []\n  arr.each do |word|\n    if count_consonants(word,\
    \ vowels) == n\n      result << word\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").select { |word| word.scan(/[^aeiou]/).size == n }\nend", "  s.split.select{|v|\
    \ v if v.count(\"aeiou\") == n}\nend\nputs select_words(\"Mary had a little lamb\"\
    , 4)\nputs select_words(\"Mary had a little lamb\", 3)\nputs select_words(\"simple\
    \ white space\", 2)\nputs select_words(\"Hello world\", 4)\nputs select_words(\"\
    Uncle sam\", 3)", "  # Your code here\nend", "  letter_count = {\n    \"b\" =>\
    \ 0,\n    \"c\" => 0,\n    \"d\" => 0,\n    \"f\" => 0,\n    \"g\" => 0,\n   \
    \ \"h\" => 0,\n    \"j\" => 0,\n    \"k\" => 0,\n    \"l\" => 0,\n    \"m\" =>\
    \ 0,\n    \"n\" => 0,\n    \"p\" => 0,\n    \"q\" => 0,\n    \"r\" => 0,\n   \
    \ \"s\" => 0,\n    \"t\" => 0,\n    \"v\" => 0,\n    \"w\" => 0,\n    \"x\" =>\
    \ 0,\n    \"y\" => 0,\n    \"z\" => 0\n  }\n  s.gsub!(/[^[:alnum:]]/, ' ')\n \
    \ words = s.split\n  words.select do |word|\n    word.downcase.each_char { |char|\
    \ letter_count[char] += 1 }\n    letter_count.values.inject(:+) == n\n  end\n\
    end", "  cons_count = 0\n  words = []\n  st = ''\n  s.each_char do |c|\n    if\
    \ c == ' '\n      words << st if cons_count == n\n      st = ''\n      cons_count\
    \ = 0\n    else\n      st += c\n      cons_count += 1 unless %w[a e i o u].include?(c)\n\
    \    end\n  end\n  words << st if cons_count == n\n  words\nend", "  array = s.split\n\
    \  final_array = []\n  array.each do |w|\n    if n == n_consonants(w)\n      final_array\
    \ << w\n    end\n  end\n  return final_array\nend", "  # words = s.split\n  #\
    \ words.select { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\n  s.split.select\
    \ { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\nend", "  return [] if s.empty?\n\
    \  words = s.split(' ')\n  words.select{|word| word.count('aeiou') == n}\nend",
  "  s.gsub(/[aeiou]/i, '').split(' ').select { |w| w.length == n }\nend", "  return\
    \ [] if s.size == 0\n  s.split(' ').select { |word| word.size == n }\nend", " \
    \ array = s.split\n  array.select do |word|\n    count = 0\n    word.split('').each\
    \ do |letter|\n      if \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\".include?(letter)\n\
    \        count += 1\n      end\n    end\n    count == n\n  end\nend", "  s.split(\"\
    \ \").select { |w| w.count(\"aeiou\") == n }\nend", "  words = s.split(' ')\n\
    \  words.select { |word| count_consonants(word) == n }\nend", "  ary = s.split\n\
    \  ans = []\n  ary.each do |w|\n    ans << w if w.count('aeiou') == n\n  end\n\
    \  ans\nend", "  s.split(\" \").select { |word| word.count(\"^aeiouAEIOU\") ==\
    \ n }\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  results = []\n\
    \  words = s.split\n  words.each do |word|\n    consonants = 0\n    word.each_char\
    \ do |c|\n      if !vowels.include?(c)\n        consonants += 1\n      end\n \
    \   end\n    if consonants == n\n      results << word\n    end\n  end\n  results\n\
    end", "    selected_words = []\n    words = s.split(\" \")\n    words.each do\
    \ |word|\n        consonants = \"\"\n        word.split(\"\").each do |char|\n\
    \            consonants << char if !/[aeiou]/.match(char) && /[a-zA-Z]/.match(char)\n\
    \        end\n        selected_words << word if consonants.length == n\n    end\n\
    \    selected_words\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ result = []\n  s.split.each do |word|\n    next if word.length < n\n    count\
    \ = 0\n    word.each_char do |char|\n      count += 1 unless vowels.include?(char)\n\
    \    end\n    result << word if count == n\n  end\n  result\nend\nputs select_words(\"\
    Mary had a little lamb\", 4)\nputs select_words(\"Mary had a little lamb\", 3)\n\
    puts select_words(\"simple white space\", 2)\nputs select_words(\"Hello world\"\
    , 4)\nputs select_words(\"Uncle sam\", 3)\nputs \"\\n\"", "  arr = s.split(' ')\n\
    \  arr.select { |word| (word.scan(/[aeiou]/i).length) == n }\nend", "  s.split.select{|word|\
    \ word.scan(/[^aeiou]/).size == n}\nend", "  words = s.split\n  words.select do\
    \ |word|\n    word.downcase.chars.count { |letter| !'aeiou'.include?(letter) }\
    \ == n\n  end\nend", "  all_words = s.split(/\\s/)\n  matched_words = []\n  all_words.each\
    \ do |word|\n    consonants = word.count('qwrtypsdfghjklzxcvbnm')\n    matched_words\
    \ << word if consonants == n\n  end\n  matched_words\nend", "  arr = s.split(\"\
    \ \")\n  arr.delete_if { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") != n }\n\
    end", "\ts.split.find_all{|word| word.count(\"^aeiouAEIOU \") == n}\nend", " \
    \ words = s.split\n  result = []\n  words.each do |word|\n    word.delete!('aeiou')\n\
    \    if word.length == n\n      result << word\n    end\n  end\n  result\nend",
  "  s.split.select { |w| w.count(\"aeiouAEIOU\") == n }\nend", "  s.split(\" \").select{|w|\
    \ w.count(\"aeiouAEIOU\") == n}\nend", "  s.split.select { |x| x.scan(/[^aeiou]/).count\
    \ == n }\nend", "  s.split.select{|w| w.gsub(/[^aeiou]/i, '').size == n}\nend",
  "  s.scan(/\\b[^aeiou\\W]{#{n}}\\b/i)\nend", "  s.split.select { |word| word.gsub(/[aeiou]/i,\
    \ '').length == n }\nend", "  s.split.select { |w| w.count('a-z', 'A-Z') - w.count('aeiouAEIOU')\
    \ == n }\nend", "  # \u0412\u0410\u0428 \u041A\u041E\u0414 \u0417\u0414\u0415\u0421\
    \u042C\nend", "\t#words = s.split\n\t#arr = []\n\t#words.each do |word|\n\t#\t\
    a = word.count('aeiouAEIOU')\n\t#\tif a == n\n\t#\t\tarr << word\n\t#\tend\n\t\
    #end\n\t#arr\n\t#arr = s.split.select {|word| word.count('aeiouAEIOU') == n}\n\
    \tarr = s.split.select {|word| word.count('aeiouAEIOU') == n}\nend", "  s.split.select\
    \ { |w| w.count('aeiou') == n }\nend", "  vowels = %w[a e i o u]\n  s.split('\
    \ ').select { |word| word.count(word.downcase.split('').select { |char| !vowels.include?(char)\
    \ }.join) == n }\nend", "  s.split(' ').select{|word| word.gsub(/[^aeiou]/i, '').length\
    \ == n}\nend", "\ts.gsub(\" \", \",\").split(\",\").select{|x| get_consonants(x)\
    \ == n}\nend", "  # write your code here\nend", "  if s.length == 0\n    return\
    \ []\n  end\n  words = s.split(\" \")\n  result = Array.new()\n  for i in 0..words.length-1\n\
    \    word = words[i]\n    word.gsub!(/[aeiou]/, \"\")\n    if word.length == n\n\
    \      result.push(words[i])\n    end\n  end\n  return result\nend", "  s.split(\"\
    \ \").select { |word| word.scan(/[^aeiouAEIOU]/).size == n }\nend", "  words =\
    \ s.split(\" \")\n  res = []\n  words.each do |w|\n    res << w if word_contains_n_consonants(w,\
    \ n)\n  end\n  res\nend", "  s.split.select { |word| word.count('aeiou') == n\
    \ }\nend", "  s.scan(/\\b[^aeiou ]{#{n}}\\b/i)\nend", "\tarr = []\n\ts.split.select\
    \ { |word| arr << word if word.count(\"aeiou\") == n }\n\tarr\nend", "  s.split('\
    \ ').select { |w| count_consonants(w) == n }\nend", "  return [] if s.nil?\n \
    \ s.split(\" \").select { |w| consonants_count(w) == n }\nend", "  arr = s.split(\"\
    \ \")\n  arr.keep_if do |word|\n    word.gsub(/[^a-zA-Z]/, '').downcase.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n\n  end\nend", "  s.split(\" \").keep_if { |word|\
    \ word.chars.count { |char| char =~ /[^aeiou]/ } == n }\nend", "  s.split.select\
    \ { |word| word.downcase.gsub(/[aeiou]/, '').length == n }\nend", "  words = s.split\n\
    \  words.select do |word|\n    word.downcase.chars.select { |letter| letter =~\
    \ /[bcdfghjklmnpqrstvwxyz]/ }.size == n\n  end\nend", "  # TODO: implement\nend",
  "  s.split.select { |w| w.downcase.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend",
  "    s.split(\" \").keep_if { |w| w.count(\"^aeiouAEIOU\") == n }\nend", "  s.split(\"\
    \ \").select { |word| word.count(\"^aeiou\") == n }\nend", "  s.split.select{|word|\
    \ word.scan(/[b-df-hj-np-tv-z]/i).size == n}\nend", "  #1. Split the string\n\
    \  #2. Iterate over the array\n  #3. Count the number of consonants\n  #4. If\
    \ the number of consonants == n then push to results array\n  #5. Return results\
    \ array\n  results = []\n  s.split.each do |word|\n    cons = word.chars.map{|char|\
    \ char.downcase}.reject{|char| %w(a e i o u).include?(char)}.count\n    results\
    \ << word if cons == n\n  end\n  results\nend", "  split_s = s.split(' ')\n  if\
    \ s.length == 0\n    return []\n  end\n  new_arr = []\n  i = 0\n  while i < split_s.length\n\
    \    char_arr = split_s[i].split('')\n    cons_count = 0\n    char_arr.each do\
    \ |x|\n      if x =~ /[^aeiou\\s]/\n        cons_count += 1\n      end\n    end\n\
    \    if cons_count == n\n      new_arr << split_s[i]\n    end\n    i += 1\n  end\n\
    \  new_arr\nend", "  h = %w(b c d f g h j k l m n p q r s t v w x y z)\n  s.downcase.split(\"\
    \ \").select { |word| word.count(\"^aeiou\") == n }\nend", "  # your code here\n\
    end", "  letter = s.split(\" \")\n  letter.select { |x| x.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n}\nend", "  res = []\n  s.split.each do |word|\n    res << word if word.count(\"\
    ^aeiouy\") == n\n  end\n  res\nend", "  s.split(\" \").select{|word| n == word.count(\"\
    bcdfghjklmnpqrstvwxyz\") }\nend", "  return [] if s.empty?\n  s.scan(/\\w+/).select\
    \ { |w| count_consonants(w) == n }\nend", "  s.split(' ').keep_if{|x| x.downcase.count('bcdfghjklmnpqrstvwxyz')\
    \ == n}\nend", "  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  s.split(\" \").select{|word|\
    \ consonants.chars.count{|con| word.downcase.chars.include?(con)} == n}\nend",
  "  # TODO\nend", "  if s == \"\"\n    words = []\n  else\n    words = s.split(\"\
    \ \")\n  end\n  consonants = %w[b c d f g h j k l m n p q r s t v w x y z]\n \
    \ select_words = []\n  words.each do |word|\n    word.downcase!\n    if word.count(\"\
    aeiou\") == n\n      select_words << word\n    end\n  end\n  select_words\nend",
  "  words = s.split(' ')\n  words.select { |word| word.scan(/[aeiou]/).size == n\
    \ }\nend", "    s.split(\" \").select { |i| i.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend", "  arr = s.split(' ')\n  count = 0\n  answer = []\n  arr.each\
    \ do |element|\n    element.gsub!(/[^a-zA-Z]/, '')\n    element.each_char do |char|\n\
    \      if !'aeiou'.include?(char.downcase)\n        count += 1\n      end\n  \
    \  end\n    if count == n\n      answer << element\n    end\n    count = 0\n \
    \ end\n  answer\nend", "  s.split.select { |word| word.downcase.gsub(/[aeiou]/,\
    \ '').length == n }\nend", "  words = s.split\n  vowels = %w(a e i o u)\n  words.select\
    \ { |word| (word.split('') - vowels).size == n }\nend", "  s.split.select { |w|\
    \ w.scan(/[aeiou]/).count == n }\nend", "    if s.empty?\n        return []\n\
    \    end\n    arr = s.split(\" \")\n    arr.map { |word| word.split(\"\").select\
    \ { |w| (w =~ /[aeiou]/i) == nil }.count == n ? word : nil }.compact\nend\nputs\
    \ select_words(\"Mary had a little lamb\", 4)", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  words = s.split(\" \")\n  selected_words = []\n  words.each\
    \ do |word|\n    vowel_count = 0\n    word.split(\"\").each do |char|\n      vowel_count\
    \ += 1 if vowels.include?(char)\n    end\n    selected_words << word if word.length\
    \ - vowel_count == n\n  end\n  selected_words\nend", "  s.split(' ').select{|x|\
    \ x.count('bcdfghjklmnpqrstvwxyz') == n}\nend", "  s.split.select { |str| str.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  s.split.select{|x|x.count(\"bcdfghjklmnpqrstvwxyz\")==n}\n\
    end\np select_words(\"Mary had a little lamb\", 4)\np select_words(\"Mary had\
    \ a little lamb\", 3)\np select_words(\"simple white space\", 2)\np select_words(\"\
    Hello world\", 4)\np select_words(\"Uncle sam\", 3)", "  s.scan(/\\b[^aeiouyAEIOUY\\\
    s]+{#{n}}\\b/).join(', ').split(', ')\nend\np select_words(\"Mary had a little\
    \ lamb\", 4)\np select_words(\"Mary had a little lamb\", 3)\np select_words(\"\
    simple white space\", 2)\np select_words(\"Hello world\", 4)\np select_words(\"\
    Uncle sam\", 3)", "  return [] if s.empty?\n  s.split(' ').select { |word| word.scan(/[^aeiou]/).size\
    \ == n }\nend", "  vowels = %w(a e i o u)\n  s.split(\" \").select { |w| w.chars.count\
    \ { |c| vowels.include?(c.downcase) } == n }\nend", "  s.split.select { |word|\
    \ (word.downcase.count \"aeiou\") == n }\nend", "  cons = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n  s.split.select { |x| x.downcase.chars.reject\
    \ { |x| !cons.include?(x) }.size == n }\nend", "  s.split.select { |w| w[/[bcdfghjklmnpqrstvwxyz]/i].size\
    \ == n }\nend", "    puts 's: ', s, 'n: ', n\n    s = s.split(' ')\n    ans =\
    \ []\n    s.each do |i|\n        if i.count('b-df-hj-np-tv-z', 'B-DF-HJ-NP-TV-Z')\
    \ == n\n            ans.push(i)\n        end\n    end\n    return ans\nend", " \
    \ words = s.split(' ')\n  words.select { |w| w.count('aeiou') == n }\nend", " \
    \ words = s.split(\" \")\n  result = []\n  words.each do |word|\n    if word.length\
    \ >= 3\n      if word.scan(/[^aeiouAEIOU]/).length == n\n        result << word\n\
    \      end\n    end\n  end\n  result\nend", "  words = s.split(\" \")\n  words.select\
    \ do |w|\n    w.count(\"qwrtypsdfghjklzxcvbnm\") == n\n  end\nend", "\ts.split.select\
    \ { |word| word.scan(/[^aeiou]/).size == n }\nend", "  s.split(\" \").select {\
    \ |word| word.gsub(/[aeiouy]/i, \"\").length == n }\nend", "  return [] if s.empty?\n\
    \  words = s.split.select { |word| word.count(\"aeiou\") == n }\nend", "  s.scan(/\\\
    w+/).select { |word| word.count(\"aeiouAEIOU\") == n }\nend", "  vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n  words = s.split\n  # puts words\n  result = []\n  words.each\
    \ do |word|\n    consonants = 0\n    word.each_char do |c|\n      unless vowels.include?(c)\n\
    \        consonants += 1\n      end\n    end\n    if consonants == n\n      result\
    \ << word\n    end\n  end\n  result\nend", "  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  s.split(' ').select { |word| word.downcase.delete('aeiou').length\
    \ == n }\nend", "  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  s.split(\" \").select\
    \ { |word| word.count(consonants) == n }\nend\np select_words(\"Mary had a little\
    \ lamb\", 4)\np select_words(\"Mary had a little lamb\", 3)\np select_words(\"\
    simple white space\", 2)\np select_words(\"Hello world\", 4)\np select_words(\"\
    Uncle sam\", 3)", "  s.scan(/\\b\\w*[^aeiou\\s]{#{n}}\\w*\\b/i)\nend", "  s.split.select\
    \ { |w| w.scan(/[aeiou]/).size == n }\nend", "  consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n  s.split.select{|word| word.downcase.chars.count{|char| consonants.include?(char)}\
    \ == n}\nend", "  s.split.select{|w| w.scan(/[aeiouy]/).size == n}\nend", "  s.split('\
    \ ').select{|word| word.scan(/[^aeiou]/).size == n}\nend", "  vowels = %w(a e\
    \ i o u)\n  s.split.select do |word|\n    word.count(\"^#{vowels.join}\") == n\n\
    \  end\nend", "  s.split(\" \").select { |word| word.count(\"^aeiou\") == n }\n\
    end", "  s.split(' ').select{|word| word.count(\"^aeiouAEIOU\") == n}\nend", " \
    \ s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend",
  "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    words = s.split(\" \")\n    words.select do |word|\n        word_arr\
    \ = word.split(\"\")\n        num_consonants = 0\n        word_arr.each do |letter|\n\
    \            if consonants.include?(letter)\n                num_consonants +=\
    \ 1\n            end\n        end\n        num_consonants == n\n    end\nend",
  "  a = []\n  s.split(' ').each do |word|\n    a << word if word.downcase.delete('a-z').length\
    \ == n\n  end\n  a\nend", "  s.split.select { |w| w.gsub(/[aeiou]/i, '').length\
    \ == n }\nend", "  s.split.select { |word| word.scan(/[^aeiouy]/).size == n }\n\
    end", "\ts.scan(/\\b[^aeiou\\W]{#{n}}\\b/i)\nend", "  require 'pry'\n  s.split(\"\
    \ \").select { |word| word.gsub(/[^A-Za-z]/, '').downcase.scan(/[^aeiou]/).count\
    \ == n }\nend", "  vowels = %w(a e i o u)\n  s.split(\" \").select { |word| word.chars.count\
    \ { |letter| !vowels.include?(letter) } == n }\nend", "  words = s.split\n  result\
    \ = []\n  words.each do |word|\n    count = 0\n    word.split('').each do |letter|\n\
    \      count += 1 if ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'].include?(letter)\n    end\n    result\
    \ << word if count == n\n  end\n  result\nend", "  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend", "    s.split(' ').reject{|w| w.gsub(/[aeiou]/i,\
    \ '').length != n}\nend\nselect_words(\"Mary had a little lamb\", 4)", "  if s\
    \ == \"\"\n    return []\n  end\n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  word_array = s.split(\" \")\n  word_array.select! do |word|\n    consonant_count\
    \ = 0\n    word.each_char do |character|\n      if consonants.include?(character)\n\
    \        consonant_count += 1\n      end\n    end\n    consonant_count == n\n\
    \  end\n  return word_array\nend", "  s.split(' ').select { |w| w.count('^aeiouAEIOU')\
    \ == n }\nend\np select_words(\"Mary had a little lamb\", 4)\np select_words(\"\
    Mary had a little lamb\", 3)\np select_words(\"simple white space\", 2)\np select_words(\"\
    Hello world\", 4)\np select_words(\"Uncle sam\", 3)", "  cons = \"bcdfghjklmnpqrstvwxyz\"\
    \n  arr = s.split(\" \")\n  result = []\n  arr.each do |word|\n    word = word.downcase\n\
    \    count = 0\n    word.each_char do |char|\n      if cons.include?(char)\n \
    \       count += 1\n      end\n    end\n    if count == n\n      result << word\n\
    \    end\n  end\n  return result\nend", "  s.scan(/\\b\\w*[^aeiou]{#{n}}\\w*\\\
    b/i)\nend", "  s.split(\" \").select { |e| (e.downcase.chars.count(\"aeiou\")\
    \ + e.length - e.downcase.chars.count(\"aeiou\")) == n }\nend", "    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    arr = s.split(\" \")\n    arr.map! { |word| word.count(\"\
    ^aeiou\") }\n    arr.map! { |num| num == n }\n    arr.map.with_index { |bool,\
    \ i| bool ? arr[i] = arr[i] : arr[i] = nil }\n    arr.compact!\n    arr\nend\n\
    select_words(\"Mary had a little lamb\", 4)", "  s.split.select { |w| n == (w.downcase.count\
    \ \"bcdfghjklmnpqrstvwxyz\") }\nend", "    s.split.select{|word| word.scan(/[^aeiou]/).size\
    \ == n}\nend", "    s = s.split(\" \")\n    all_words = s.select do |word|\n \
    \       word.downcase.count(\"aeiou\") == n\n    end\n    all_words\nend", "\t\
    consonants = 'bcdfghjklmnpqrstvwxyz'\n\twords = s.split(/\\W+/)\n\twords.select\
    \ { |x| x.count(consonants) == n }\nend", "    (s.split(/[^a-z]/i) - [\"\"]).select{|w|\
    \ w.count(\"aeiou\") == n}\nend", "\traise if s.nil? or !s.is_a?(String) or n.nil?\
    \ or !n.is_a?(Fixnum) or n < 0\n\treturn [] if s.empty?\n\t#convert string to\
    \ array of words\n\twords = s.split(\" \")\n\tresult = []\n\twords.each do |word|\n\
    \t\tresult << word if count_consonants(word) == n\n\tend\n\tresult\nend", "  #\
    \ split the input string at spaces and keep the non-empty words\n  words = s.split('\
    \ ').select { |word| word != '' }\n  words.select { |word| word.gsub(/[^aeiou]/,\
    \ '').length == n }\nend", "  return [] if s.empty?\n  words = s.split(' ')\n\
    \  words.select { |word| word.count('^aeiou') == n }\nend", "  s.split(\" \").select\
    \ { |w| w if w.scan(/[a-z]/i).size == n }\nend", "  arr = s.split(\" \")\n  result\
    \ = []\n  arr.each do |word|\n    word.each_char do |letter|\n      if letter\
    \ != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"o\" && letter\
    \ != \"u\"\n        n -= 1\n      end\n    end\n    if n == 0\n      result <<\
    \ word\n    end\n    n = 0\n  end\n  result\nend", "  raise NotImplementedError\n\
    end", "  # your code here\nend", "  # your solution goes here\nend", "  # array\
    \ = s.split\n  # result = []\n  # array.each do |word|\n  #   if count_vowels(word)\
    \ == n\n  #     result << word\n  #   end\n  # end\n  # result\n  s.split.select\
    \ { |word| count_vowels(word) == n }\nend", "  s.split(\" \").select{|word| word.downcase.chars.count{|letter|\
    \ !(%w(a e i o u).include?(letter))} == n}\nend", "  s.split.select{|word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n}\nend", "  words = s.split(\" \")\n  words.select\
    \ { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  s.split.select\
    \ { |w| w[/[aeiouy]/] == nil && w.size == n }\nend", "  (s.split.select { |w|\
    \ w.scan(/[^aeiouAEIOU]/).size == n }).uniq.flatten\nend", "  s.scan(/\\b[a-z]+\\\
    b/i).select { |word| word.scan(/[^aeiou ]/i).count == n }\nend", "  s.scan(/\\\
    b[^aeiou]{#{n}}\\b/i)\nend", '    return [] if s.empty?', "\t\n\tss = s.split(\"\
    \ \")\n\t#puts \"#{ss}\"\n\tres = []\n\tss.each do |w|\n\t\tnum = w.downcase.split(\"\
    \").select{|x| \"bcdfghjklmnpqrstvwxyz\".include? x}.size\n\t\t#puts \"num:#{num}\
    \ w:#{w}\"\n\t\tres << w if num == n\n\tend\n\tres\nend", "    words = s.split(\"\
    \ \")\n    res = []\n    words.each do |w|\n        if count_vowels(w) == n\n\
    \            res << w\n        end\n    end\n    res\nend", "  words = s.split(\"\
    \ \")\n  words.select { |word| word.count(\"^aeiouAEIOU \") == n }\nend", "  selected_words\
    \ = []\n  string_array = s.split\n  string_array.each do |word|\n    consonant_counter\
    \ = 0\n    word.each_char do |char|\n      if char != \"a\" && char != \"e\" &&\
    \ char != \"i\" && char != \"o\" && char != \"u\"\n        consonant_counter +=\
    \ 1\n      end\n    end\n    if consonant_counter == n\n      selected_words <<\
    \ word\n    end\n  end\n  return selected_words\nend", "  if s.length == 0\n \
    \   return []\n  end\n  new_arr = []\n  consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n  arr = s.split(\" \")\n  arr.each do |x|\n    count = 0\n    x.chars.each do\
    \ |y|\n      if consonants.include?(y)\n        count += 1\n      end\n    end\n\
    \    if count == n\n      new_arr << x\n    end\n  end\n  return new_arr\nend",
  "  s.split.select { |w| w.scan(/[^aeiou]/).size == n }\nend", "  s.split.select{|x|\
    \ x.downcase.count('a-z', ' ')==n}\nend", "  #a regex that removes ALL vowels\
    \ from a string\n  no_vowels = s.gsub(/[aeiou]/i, '')\n  #split the string into\
    \ an array of individual words\n  words = s.split(\" \")\n  #create an empty array\
    \ for consonant words\n  consonant_words = []\n  #go through each word in the\
    \ array\n  words.each do |word|\n    #if the word has the same length as n (after\
    \ the no_vowels regex above is called)\n    if word.length == n\n      #push the\
    \ word into the consonant_words array\n      consonant_words.push(word)\n    end\n\
    \  end\n  #return consonant_words\n  consonant_words\nend", "  consonants = %w(b\
    \ c d f g h j k l m n p q r s t v w x y z)\n  s.split(\" \").select { |word| word.downcase.chars.select\
    \ { |char| consonants.include?(char) }.size == n }\nend", "  words = s.split\n\
    \  words.select { |word| word.count(VOWELS) == n }\nend", "\tconsonants = {\"\
    B\" => true, \"C\" => true, \"D\" => true, \"F\" => true, \"G\" => true, \"H\"\
    \ => true, \"J\" => true, \"K\" => true, \"L\" => true, \"M\" => true, \"N\" =>\
    \ true, \"P\" => true, \"Q\" => true, \"R\" => true, \"S\" => true, \"T\" => true,\
    \ \"V\" => true, \"W\" => true, \"X\" => true, \"Y\" => true, \"Z\" => true}\n\
    \toutput = []\n\ti = 0\n\twhile i < s.length\n\t\tif s[i] == \" \"\n\t\t\tif (i\
    \ > 0) && (s[i-1] != \" \")\n\t\t\t\tcount = 0\n\t\t\t\tif consonants[s[i-1].upcase]\n\
    \t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\t\tif count == n\n\t\t\t\t\toutput <<\
    \ s[i-count..i-1]\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tcount = 0\n\t\t\tif\
    \ consonants[s[i].upcase]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\t\tif (i == s.length-1)\
    \ && (count == n)\n\t\t\t\toutput << s[i-count+1..i]\n\t\t\tend\n\t\tend\n\t\t\
    i += 1\n\tend\n\treturn output\nend", "   s.scan(/\\b[^aeiou\\s]{#{n}}\\b/i)\n\
    end", "  s.split.select { |word| consonants(word) == n }\nend", "  s.scan(/\\\
    b\\w*[^aeiou]{#{n}}\\w*\\b/i)\nend", "  s.split.select{|word| word.count(\"aeiou\"\
    ) == n}\nend", "  s.split.select { |w| w.count(\"aeiouAEIOU\") == n }\nend", " \
    \ results = []\n  s.split(' ').each do |word|\n    unless word.length < n || word.length\
    \ == n+1\n      vowels = word.scan(/[aeiou]/).length\n      consonants = word.length\
    \ - vowels\n      results << word if consonants == n\n    end\n  end\n  results\n\
    end", "    found_words = []\n    words = s.split(\" \")\n    words.each do |word|\n\
    \        if word.gsub(/[^aeiou]/, '').length == n\n            found_words <<\
    \ word\n        end\n    end\n    found_words\nend", "  # your solution here\n\
    end", "  #your code here\nend", "  s.split.select{|w| w.scan(/[aeiouy]/).size\
    \ == n}\nend", "\ts.split(\" \").select { |x| x.count(\"aeiou\") == n }\nend",
  "  s.split.select { |w| w.count(\"aeiou\") == (w.length - n) }\nend", "  return\
    \ [] if s.empty?\n  s.split.select{|v| v.gsub(/[aeiou]/i, '').size == n}\nend",
  "  words = s.split(\" \")\n  words.select { |word| num_consonants(word) == n }\n\
    end", "    words = s.split(' ')\n    res = []\n    words.each do |word|\n    \
    \    res << word if num_consonants(word) == n\n    end\n    res\nend", "  p =\
    \ s.split(\" \")\n  ans = []\n  count = 0\n  for i in p\n    for j in i.split(\"\
    \")\n      if j == 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u' || j ==\
    \ 'y'\n        count = count + 1\n      end\n    end\n    if i.length - count\
    \ == n\n      ans.push(i)\n    end\n    count = 0\n  end\n  return ans\nend",
  "  \nend", "    s.scan(/\\b\\w*[aeiou]{0,#{n}}\\w*\\b/i)\nend", "  s.split.select\
    \ { |word| word.count(\"aeiouAEIOU\") == n }\nend", "  arr = s.split\n  arr.keep_if\
    \ { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  unless s.match(/[0-9]/)\n\
    \    arr = s.split\n    arr.select { |str| str.scan(/[b-df-hj-np-tv-z]/i).size\
    \ == n }\n  end\nend", "  s.split(' ').find_all { |word| word.downcase.scan(/[^aeiouy]/).size\
    \ == n }\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  s.split.select { |word|\
    \ word.count(vowels) == word.length - n }\nend", "    # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
