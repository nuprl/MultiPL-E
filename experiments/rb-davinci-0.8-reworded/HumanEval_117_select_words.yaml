name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns an array of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty array.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had\
  \ a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple\
  \ white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"\
  ]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") ==\
    \ n }\nend", "  s.split.select { |w| w.count('bcdfghjklmnpqrstvwxyz') == n }\n\
    end", "  vowels = %w(a e i o u)\n  s.split(' ').select { |word| word.chars.reject\
    \ { |letter| vowels.include?(letter) }.size == n }\nend", "  return nil if s.nil?\
    \ || s.length == 0\n  words = s.split(\" \")\n  result = []\n  for i in 0..words.length\
    \ - 1\n    word = words[i]\n    new_word = word.gsub(/[aeiouAEIOU]/, \"\")\n \
    \   result << word if new_word.length == n\n  end\n  result\nend", "  return []\
    \ if s.empty?\n  s.split.select { |s| s.gsub(/[aeiou]/i, '').length == n }\nend",
  "  s.split(\" \").select{|word| word.count(\"aeiou\") == n}\nend", "  words = s.split\n\
    \  words.select do |word|\n    word.downcase.chars.select { |c| c !~ /[aeiou]/\
    \ }.size == n\n  end\nend", "  words = s.split(\" \")\n  words.select { |word|\
    \ word.count(\"^aeiouAEIOU \") == n }\nend", "  # your code goes here\nend", " \
    \ strings = s.split\n  consonants = []\n  strings.each { |word| consonants <<\
    \ word if count_consonants(word) == n }\n  consonants\nend", "\ts = s.split(\"\
    \ \")\n\ts.select { |v| v.scan(/[bcdfghjklmnpqrstvwxyz]/).length == n }\nend",
  "  consonants = %w(b c d f g h j k l m n p q r s t v w x y z)\n  words = s.split('\
    \ ')\n  words.select do |word|\n    word.count(consonants.join) == n\n  end\n\
    end", "\ts.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\n\
    end", "  s.split(' ').each_with_object([]) do |w, a|\n    a << w if w.gsub(/[aeiou]/i,\
    \ '').length == n\n  end\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  words\
    \ = s.split(' ')\n  words.select { |word| word.count { |letter| !vowels.include?(letter)\
    \ } == n }\nend", "  #s.split.select { |x| x.count(\"^aeiouAEIOU\") == n }\n \
    \ s.scan(/\\b[a-zA-Z]*[^aeiouAEIOU]{#{n}}[a-zA-Z]*\\b/).reject(&:empty?)\nend",
  "  s.split.select { |word| word.count('^aeiou') == n }\nend", "  s.split(\" \").select{|word|\
    \ word.scan(/[aeiou]/).count == n}\nend", "    s.split.select { |word| word.count(\"\
    ^aeiouAEIOU\", \" \") == n }\nend", "  # find the words in the string that have\
    \ the specified number of consonants in them\n  words = s.scan(/\\w+/)\n  # remove\
    \ words that are shorter than the specified number of consonants\n  words.select!\
    \ { |word| word.length >= n }\n  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n  # remove\
    \ words that have less than the specified number of consonants\n  words.select!\
    \ { |word| word.chars.select { |char| consonants.include?(char.downcase) }.length\
    \ == n }\n  words\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
