name: HumanEval_0_has_close_elements
language: rb
prompt: "# Check if in given array of numbers, are any two numbers closer to each\
  \ other than\n# given threshold.\n# >>> has_close_elements.call([1.0, 2.0, 3.0],\
  \ 0.5)\n# false\n# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
  # true\ndef has_close_elements(numbers, threshold)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_has_close_elements\n\
  \    candidate = method(:has_close_elements)\n    assert_equal(true, candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))\n    assert_equal(false, candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))\n    assert_equal(true, candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0], 0.95))\n    assert_equal(false, candidate.call([1.0, 2.0,\
  \ 5.9, 4.0, 5.0], 0.8))\n    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.0], 0.1))\n    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1],\
  \ 1.0))\n    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))\n\
  \  end\nend\n"
completions: ["  numbers.each_with_index do |number, index|\n    next if index.zero?\n\
    \    return true if number - numbers[index - 1] < threshold\n  end\n  false\n\
    end", "  if numbers == []\n    return false\n  end\n  i = 0\n  while i < numbers.length\
    \ - 1\n    j = i + 1\n    while j < numbers.length\n      if (numbers[i] - numbers[j]).abs\
    \ < threshold\n        return true\n      end\n      j += 1\n    end\n    i +=\
    \ 1\n  end\n  return false\nend", "  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    return true if (number - numbers[index - 1]).abs\
    \ < threshold\n  end\n  false\nend", "  for i in 0..numbers.length-2\n    for\
    \ j in (i+1)..numbers.length-1\n      if (numbers[i] - numbers[j]).abs < threshold\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  numbers.combination(2).any?\
    \ { |a, b| (a - b).abs < threshold }\nend", "  !(numbers.each_with_index.find\
    \ { |number, index| index + 1 != numbers.size && (number - numbers[index + 1]).abs\
    \ < threshold }).nil?\nend", "  numbers.any? do |number|\n    numbers.any? do\
    \ |compared_number|\n      (number - compared_number).abs < threshold &&\n   \
    \     number != compared_number\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |n, i|\n    next if i == numbers.length - 1\n    if ((numbers[i + 1] - n).abs\
    \ <= threshold)\n      return true\n    end\n  end\n  false\nend", "  sorted_numbers\
    \ = numbers.sort\n  sorted_numbers.each_with_index do |current_number, index|\n\
    \    next_number = sorted_numbers[index + 1]\n    return true if next_number &&\
    \ (next_number - current_number) < threshold\n  end\n  false\nend", "  numbers.each_with_index\
    \ do |number, index|\n    break if index == numbers.length - 1\n    return true\
    \ if (number - numbers[index + 1]).abs < threshold\n  end\n  false\nend", "  sorted_numbers\
    \ = numbers.sort\n  sorted_numbers.each_with_index do |number, index|\n    break\
    \ if index == sorted_numbers.length - 1\n    if (sorted_numbers[index+1] - number).abs\
    \ < threshold\n      return true\n    end\n  end\n  false\nend", "  for i in 0..numbers.length-2\n\
    \    for j in i+1..numbers.length-1\n      if (numbers[i] - numbers[j]).abs <\
    \ threshold\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  numbers.any? do |n|\n    numbers.any? do |m|\n      diff = (n - m).abs\n\
    \      diff > 0 && diff < threshold\n    end\n  end\nend", "  return '\u0423\u043A\
    \u0430\u0436\u0438\u0442\u0435 \u043C\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\
    \u0441\u0435\u043B \u0438 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u043E\
    \u0435 \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u0438\u0435!' if numbers.empty?\
    \ || !threshold\n  count = 0\n  while count < numbers.size\n    return true if\
    \ numbers[count] - numbers[count + 1] <= threshold.to_f\n    count += 1\n  end\n\
    \  false\nend", "  numbers.each_with_index do |element, index|\n    return true\
    \ if numbers[index + 1..-1].any? { |n| (n - element).abs < threshold }\n  end\n\
    \  false\nend", "  numbers.sort.each_cons(2).any? { |(x, y)| (y - x).abs < threshold\
    \ }\nend", "  result = false\n  numbers.each do |number1|\n    numbers.each do\
    \ |number2|\n      result = true if number1 - number2 >= 0 && number1 - number2\
    \ <= threshold\n    end\n  end\n  result\nend", "  sorted_numbers = numbers.sort\n\
    \  sorted_numbers.each_with_index do |num, index|\n    if index != sorted_numbers.length\
    \ - 1\n      return true if (sorted_numbers[index + 1] - num).abs < threshold\n\
    \    end\n  end\n  false\nend", "    # Sort the array\n    sorted_numbers = numbers.sort\n\
    \    # Start looping through the array\n    sorted_numbers.each_with_index do\
    \ |x, index|\n        # If we are at the end of the array, break out of the loop\n\
    \        if index == (sorted_numbers.length - 1)\n            break\n        end\n\
    \        # If the difference between two elements is less than the threshold,\
    \ return true\n        if (sorted_numbers[index + 1] - x).abs < threshold\n  \
    \          return true\n        end\n    end\n    # If we got here, there weren't\
    \ any close enough numbers\n    return false\nend", "  numbers.sort.each_cons(2).any?\
    \ do |a, b|\n    (a - b).abs < threshold\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
