name: HumanEval_16_count_distinct_characters
language: rb
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>>\
  \ count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
  \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
  \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
  abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5,\
  \ candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
completions: ["  string.upcase.chars.uniq.size\nend", "\tstring.downcase.chars.uniq.count\n\
    end", "  string.chars.uniq.count\nend", "  count = 0\n  array = string.downcase.split(\"\
    \")\n  array.each do |i|\n    if array.count(i) == 1\n      count += 1\n    end\n\
    \  end\n  count\nend", "  string.downcase.chars.uniq.size\nend", "  string.split('').uniq.count\n\
    end", "  string.downcase.chars.uniq.count\nend", "  string.downcase.chars.uniq.count\n\
    end", "  # your code goes here\n  string.downcase.chars.uniq.count\nend", "  string.downcase.chars.uniq.count\n\
    end", "  char_hash = Hash.new(0)\n  string.each_char { |c| char_hash[c.downcase]\
    \ += 1 }\n  char_hash.keys.length\nend", "  string.upcase.chars.uniq.count\nend",
  "  string.scan(/\\w/).uniq.count\nend", "  count = 0\n  string.downcase.each_char\
    \ do |char|\n    count += 1 if string.downcase.count(char) > 0\n  end\n  count\n\
    end", "  string.downcase.chars.uniq.count\nend", "  string.downcase.split('').uniq.length\n\
    end", "  return string.downcase.split('').uniq.length\nend", "\tstring.split(\"\
    \").uniq.count\nend", "  string.downcase.chars.uniq.count\nend", "  string.downcase.chars.uniq.count\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
