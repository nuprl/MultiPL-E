name: HumanEval_5_intersperse
language: rb
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n# >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1,\
  \ 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n\
  \    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n\
  \    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2,\
  \ 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"
completions: ["  numbers.zip(Array.new(numbers.length, delimeter)).flatten[0...-1]\n\
    end", "  numbers.each_cons(2).reduce([]) do |a, (x, y)|\n    a << x << delimeter\n\
    \  end << numbers.last\nend", "  return [] if numbers.empty?\n  new_numbers =\
    \ [numbers.first]\n  (1...numbers.length).each do |i|\n    new_numbers << delimeter\n\
    \    new_numbers << numbers[i]\n  end\n  new_numbers\nend", "  return [] if numbers.length\
    \ == 0\n  return numbers if numbers.length == 1\n  output = [numbers[0]]\n  (1...numbers.length).each\
    \ do |i|\n    output << delimeter\n    output << numbers[i]\n  end\n  output\n\
    end", "  numbers.map{|n| [n, delimeter]}.flatten[0..-2]\nend", "  intersperse_rec(numbers,\
    \ delimeter, 0)\nend", "  numbers.inject([]) do |memo, number|\n    memo.tap {\
    \ |m| m << delimeter unless m.empty? } << number\n  end\nend", "  size = numbers.size\n\
    \  case size\n  when 0\n    return []\n  when 1\n    return numbers\n  else\n\
    \    (size - 1).times do |i|\n      numbers.insert(2 * i + 1, delimeter)\n   \
    \ end\n    return numbers\n  end\nend", "  return [] if numbers.empty?\n  return\
    \ [numbers.first] if numbers.size == 1\n  [numbers.first, delimeter] + intersperse(numbers[1..-1],\
    \ delimeter)\nend", "  numbers.inject([]) { |result, num| result << num << delimeter\
    \ }[0...-1]\nend", "  numbers.each_with_object([]) do |current, acc|\n    acc\
    \ << current\n    acc << delimeter unless acc.empty?\n  end.drop(1)\nend", " \
    \ return [] if numbers.empty?\n  res = [numbers[0]]\n  numbers[1..-1].each { |n|\
    \ res << delimeter << n }\n  res\nend", "  return [] if numbers.empty?\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  unless numbers.empty?\n    numbers.each_with_index.map { |x, i| i.zero?\
    \ ? x : [delimeter, x] }.flatten\n  else\n    []\n  end\nend", "  numbers.each_with_object([])\
    \ do |num, result|\n    if result.empty?\n      result << num\n    else\n    \
    \  result << delimeter\n      result << num\n    end\n  end\nend", "  new_array\
    \ = []\n  numbers.each_with_index do |n, i|\n    new_array << n\n    new_array\
    \ << delimeter if i != numbers.length - 1\n  end\n  new_array\nend", "  numbers.map.with_index\
    \ { |n, i| [n, delimeter] }.flatten[0..-2]\nend", "  numbers.flat_map { |n| [n,\
    \ delimeter] }[0...-1]\nend", "  numbers.each_cons(2).inject([]) do |m, (x, y)|\n\
    \    m << x << delimeter\n  end << numbers.last\nend", "  numbers[0...-1].zip(numbers[1..-1]).flatten(1).map\
    \ { |x| [x, delimeter] }.flatten.reject(&:nil?)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
