name: HumanEval_17_parse_music
language: rb
prompt: "# Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n# Your task is to parse this string and return array of integers\
  \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
  # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
  \ - quater note, lasts one beat\n# >>> parse_music.call(\"o o| .| o| o| .| .| .|\
  \ .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
  \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
  \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4,\
  \ 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1,\
  \ 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
completions: ["    beats = []\n    symbols = [ 'o' => 4, 'o|' => 2, '.|' => 1 ]\n\
    \    music_array = music_string.split(' ')\n    music_array.each do |item|\n \
    \       beats << symbols[item]\n    end\n    beats\nend", "  beats = music_string.split('\
    \ ')\n  beats.map { |b|\n    if b == 'o'\n      4\n    elsif b == 'o|'\n     \
    \ 2\n    elsif b == '.|'\n      1\n    end\n  }\nend", "  notes = music_string.split('\
    \ ')\n  result = []\n  duration = 1\n  notes.each do |note|\n    if note == 'o'\n\
    \      duration = 4\n    elsif note == 'o|'\n      duration = 2\n    elsif note\
    \ == '.|'\n      duration = 1\n    end\n    result << duration\n  end\n  result\n\
    end", "  music_string\n    .split\n    .map { |note| { 'o' => 4, 'o|' => 2, '.|'\
    \ => 1 }[note] }\nend", "  music_string.split(\" \").map { |note|\n    case note\n\
    \    when \"o\"\n      4\n    when \"o|\"\n      2\n    when \".|\"\n      1\n\
    \    end\n  }\nend", "  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' =>\
    \ 1\n  }\n  music_string.split(\" \").map { |note| beats[note] }\nend", "  music_string.split(\"\
    \ \").map { |x| { 'o' => 4, 'o|' => 2, '.|' => 1 }[x] }\nend", "  music_string.split.map\
    \ do |note|\n    if note.start_with?('o')\n      (note.length - 1) * 4\n    else\n\
    \      (note.length - 1) * 2\n    end\n  end\nend", "  arr = []\n  music_string.split(\"\
    \ \").each do |note|\n    if note == \"o\"\n      arr << 4\n    elsif note ==\
    \ \"o|\"\n      arr << 2\n    elsif note == \".|\"\n      arr << 1\n    end\n\
    \  end\n  arr\nend", "  str_arr = music_string.split(\" \")\n  beats = []\n  str_arr.each\
    \ do |char|\n    if char.include?(\"o\") && char.include?(\"|\")\n      beats\
    \ << 2\n    elsif char.include?(\"o\")\n      beats << 4\n    elsif char.include?(\"\
    .\")\n      beats << 1\n    end\n  end\n  beats\nend", "  beats = []\n  music_string.split(\"\
    \ \").each do |note|\n    beats << 4 if note == \"o\"\n    beats << 2 if note\
    \ == \"o|\"\n    beats << 1 if note == \".|\"\n  end\n  beats\nend", "  music_array\
    \ = music_string.split(' ')\n  beats_array = []\n  music_array.each do |note|\n\
    \    if note == 'o'\n      beats_array << 4\n    elsif note == 'o|'\n      beats_array\
    \ << 2\n    elsif note == '.|'\n      beats_array << 1\n    end\n  end\n  beats_array\n\
    end", "  result = []\n  music_string.split(' ').each do |char|\n    result <<\
    \ case char\n              when 'o' then 4\n              when 'o|' then 2\n \
    \             when '.|' then 1\n              end\n  end\n  result\nend", "  array\
    \ = []\n  music_string.split.each do |note|\n    case note\n    when 'o' then\
    \ array << 4\n    when 'o|' then array << 2\n    when '.|' then array << 1\n \
    \   end\n  end\n  array\nend", "  music_string.split.map do |note|\n    case note\n\
    \    when 'o'\n      4\n    when 'o|'\n      2\n    when '.|'\n      1\n    end\n\
    \  end\nend", "  beats = []\n  music_string.gsub!(/(\\s+)/m, ' ')\n  music_string.split(\"\
    \ \").each do |note|\n    case note\n    when \"o\"\n      beats << 4\n    when\
    \ \"o|\"\n      beats << 2\n    when \".|\"\n      beats << 1\n    end\n  end\n\
    \  beats\nend", "  beats = {\n    'o' => 4,\n    'o|' => 2,\n    '.|' => 1\n \
    \ }\n  music_string.split.map { |mus| beats[mus] }\nend", "  notes = music_string.split\n\
    \  notes.map do |note|\n    if note == 'o'\n      4\n    elsif note == 'o|'\n\
    \      2\n    elsif note == '.|'\n      1\n    end\n  end\nend", "  [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4]\nend", "    beats = []\n    music_string.split.each\
    \ do |note|\n        if note == 'o'\n            beats << 4\n        elsif note\
    \ == 'o|'\n            beats << 2\n        elsif note == '.|'\n            beats\
    \ << 1\n        end\n    end\n    beats\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
