language: rb
name: HumanEval_85_add
results:
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgin5nkb_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpgin5nkb_.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.006782759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.43 tests/s, 147.43 assertions/s\n"
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, idx| idx.odd? && x.even? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9xiqg6kn

    Started

    .

    Finished in 0.000545037 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1834.74 tests/s, 7338.95 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  if lst.length > 1\n    lst[1] + lst[3]\n  else\n    lst[0]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7o_4bju0\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmp7o_4bju0.rb:7:in `+'\n/tmp/tmp7o_4bju0.rb:7:in `add'\n/tmp/tmp7o_4bju0.rb:16:in\
    \ `call'\n/tmp/tmp7o_4bju0.rb:16:in `test_add'\n     13: class TestHumanEval <\
    \ Test::Unit::TestCase\n     14:   def test_add\n     15:     candidate = method(:add)\n\
    \  => 16:     assert_equal(88, candidate.call([4, 88]))\n     17:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     18:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     19:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.00116149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    860.96 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  # @addition = 0\n  # lst.each_with_index { |num, idx| @addition += num if num.even?\
    \ && idx.odd? }\n  # @addition\n  lst.select.with_index { |n, i| n.even? && i.odd?\
    \ }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppzvhb_6d

    Started

    .

    Finished in 0.00054604 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1831.37 tests/s, 7325.47 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.each_with_index.inject(0) { |sum, (item, index)| sum + (item if index.odd?\
    \ && item.even?) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmh2rw023\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpmh2rw023.rb:6:in `+'\n/tmp/tmpmh2rw023.rb:6:in `block in add'\n/tmp/tmpmh2rw023.rb:6:in\
    \ `each'\n/tmp/tmpmh2rw023.rb:6:in `each_with_index'\n/tmp/tmpmh2rw023.rb:6:in\
    \ `each'\n/tmp/tmpmh2rw023.rb:6:in `inject'\n/tmp/tmpmh2rw023.rb:6:in `add'\n\
    /tmp/tmpmh2rw023.rb:12:in `call'\n/tmp/tmpmh2rw023.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.001291654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    774.20 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|x, index| x.even? && index.odd?}.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp77tk5kb2

    Started

    .

    Finished in 0.000563248 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1775.42 tests/s, 7101.67 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |x,i|\n    if x % 2 == 0 && i % 2 != 0\n\
    \      sum += x\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4xho3100

    Started

    .

    Finished in 0.00056163 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1780.53 tests/s, 7122.13 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \    total = 0\n    lst.each_with_index do |num, i|\n        if num.even? && i.odd?\n\
    \            total += num\n        end\n    end\n    return total\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo8vog376

    Started

    .

    Finished in 0.000560012 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1785.68 tests/s, 7142.70 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? and i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjjdujqb5

    Started

    .

    Finished in 0.000555238 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1801.03 tests/s, 7204.12 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |x, index|\n    if x.even? && index.odd?\n\
    \      sum += x\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp72xm9bn

    Started

    .

    Finished in 0.000554141 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1804.59 tests/s, 7218.38 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |e, i|\n    if i.odd? && e.even?\n      sum\
    \ += e\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfci7gxnn

    Started

    .

    Finished in 0.000544898 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1835.21 tests/s, 7340.82 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|x,i| x.even? && i.odd?}.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe3kgygmp

    Started

    .

    Finished in 0.000559757 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1786.49 tests/s, 7145.96 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |i, idx|\n    if i.even? && idx.odd?\n  \
    \    sum += i\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1m5u2gz8

    Started

    .

    Finished in 0.000555402 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1800.50 tests/s, 7201.99 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|_,i| i.odd?}.map(&:even?).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk9se3841\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpk9se3841.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<true>\n===============================================================================\n\
    \nFinished in 0.00670744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.09 tests/s, 149.09 assertions/s\n"
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, index| index.odd? }.select(&:even?).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
    \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n\
    \    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_inyyesd

    Started

    .

    Finished in 0.000415559 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2406.40 tests/s, 9625.59 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \    # sum = 0\n    # lst.each_with_index do |n, i|\n    #     if i.odd? && n.even?\n\
    \    #         sum += n\n    #     end\n    # end\n    # sum\n    sum = 0\n  \
    \  lst.each_with_index do |n, i|\n        sum += n if i.odd? && n.even?\n    end\n\
    \    sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgpaep07r

    Started

    .

    Finished in 0.000998434 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1001.57 tests/s, 4006.27 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \    return lst.select.with_index { |n, i| n.even? && i.odd? }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
    \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n\
    \    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpw6uzg1t7

    Started

    .

    Finished in 0.000564302 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1772.10 tests/s, 7088.40 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|a,i| a.even? && i.odd?}.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt11wqsnz

    Started

    .

    Finished in 0.000420564 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2377.76 tests/s, 9511.04 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \    sum = 0\n    i = 0\n    while i < lst.length\n        sum += lst[i] if lst[i]\
    \ % 2 == 0 && i % 2 != 0\n        i += 1\n    end\n    return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpffppzhj5

    Started

    .

    Finished in 0.000427195 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2340.85 tests/s, 9363.41 assertions/s

    '
  stdout: ''
  timestamp: 1659824072
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.map.with_index { |i,x| x.odd? ? i : 0 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmph5hp38u5\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmph5hp38u5.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007037546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.09 tests/s, 284.19 assertions/s\n"
  timestamp: 1659824072
