name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" =>\
  \ 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"\
  a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n\
  # {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  letters = test.split(\" \")\n  letters_hash = Hash.new(0)\n  letters.each\
    \ do |letter|\n    letters_hash[letter] += 1\n  end\n  letters_hash\nend", " \
    \ result = Hash.new\n  str = test.split(\" \")\n  str.each do |letter|\n    unless\
    \ result.include?(letter)\n      result[letter] = 1\n    else\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  test = test.downcase.split(' ')\n \
    \ result = Hash.new(0)\n  keys = Array.new\n  test.each do |key|\n    result[key]\
    \ += 1\n  end\n  puts result\n  max = result.values.max\n  result.each do |key,\
    \ value|\n    if value == max\n      keys << key\n    end\n  end\n  result.delete_if\
    \ {|key, value| value != max}\n  puts result\nend", "  h = {}\n  test.split(\"\
    \ \").each do |letter|\n    if h.key?(letter)\n      h[letter] += 1\n    else\n\
    \      h[letter] = 1\n    end\n  end\n  h\nend", "  result = {}\n  test.downcase.split(\"\
    \ \").each do |x|\n    result[x] = test.downcase.split(\" \").count(x)\n  end\n\
    \  puts result\nend", "  test.split.group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  test.split(\" \").each_with_object(Hash.new(0)) { |v, hash| hash[v] +=\
    \ 1 }\nend", "  test.split.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.delete_if\
    \ { |k, v| v == 1 }\nend", "  occurences = Hash.new(0)\n  test.split(' ').each\
    \ { |x| occurences[x] += 1 }\n  max_occurence = occurences.values.max\n  occurences.select\
    \ { |k, v| v == max_occurence }\nend", "  result = {}\n  test.split(\" \").each\
    \ do |e|\n    result[e] = test.split(\" \").count(e)\n  end\n  result\nend", " \
    \ arr = test.split(\" \")\n  #p arr\n  count = Hash.new(0)\n  arr.each do |i|\n\
    \    count[i] += 1\n  end\n  max_value = count.values.max\n  counts = count.select\
    \ {|key, value| value == max_value}\n  p counts\nend", "  count = Hash.new(0)\n\
    \  test.split(\" \").each do |char|\n    count[char] += 1\n  end\n  count\nend",
  "  result = {}\n  current_max = 0\n  test.split(\" \").each do |char|\n    if result[char]\n\
    \      result[char] += 1\n    else\n      result[char] = 1\n    end\n    current_max\
    \ = result[char] if result[char] > current_max\n  end\n  final_result = {}\n \
    \ result.each do |key, value|\n    final_result[key] = value if value == current_max\n\
    \  end\n  final_result\nend", "  counts = Hash.new(0)\n  test.downcase.split.each\
    \ { |letter| counts[letter] += 1 }\n  max_count = counts.values.max\n  result\
    \ = {}\n  counts.each do |letter, count|\n    result[letter] = count if count\
    \ == max_count\n  end\n  result\nend", "  counts = Hash.new 0\n  hist = {}\n \
    \ letters = test.split(' ')\n  letters.each do |letter|\n    counts[letter] +=\
    \ 1\n  end\n  counts.each do |key, value|\n    hist[key] = value\n  end\n  hist\n\
    end", "  histogram = Hash.new(0)\n  test.downcase.split.each { |x| histogram[x]\
    \ += 1 }\n  if histogram.values.max > 1\n    new_hash = Hash.new(0)\n    histogram.each\
    \ { |x, y| new_hash[x] = y if y == histogram.values.max }\n    new_hash\n  else\n\
    \    histogram\n  end\nend", "  lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n \
    \ hash = {}\n  lowercase.each_char do |char|\n    if test.include?(char)\n   \
    \   hash[char] = test.count(char)\n    end\n  end\n  hash.max_by{|k,v| v}\nend",
  "  result = Hash.new(0)\n  test.split(\" \").each { |i| result[i] += 1 }\n  result\n\
    end", "    counts = Hash.new(0)\n    test.split(\" \").each { |word| counts[word]\
    \ += 1 }\n    counts\nend", "  letters = test.split(' ')\n  counts = Hash.new(0)\n\
    \  letters.each { |word| counts[word] += 1 }\n  max = counts.values.max\n  counts.select\
    \ { |_k, v| v == max }\nend", "  splited = test.split(\" \")\n  hash = {}\n  max\
    \ = 1\n  splited.each do |i|\n    value = splited.count(i)\n    if value > max\n\
    \      max = value\n    end\n    hash[i] = value\n  end\n  res = {}\n  hash.each\
    \ do |key, val|\n    if val == max\n      res[key] = val\n    end\n  end\n  res\n\
    end", "  my_hash = Hash.new\n  test.each_char do |char|\n    if !(my_hash.include?(char))\n\
    \      my_hash[char] = 1\n    else\n      my_hash[char] += 1\n    end\n  end\n\
    \  my_hash\nend", "  histogram = Hash.new(0)\n  test.split.each { |letter| histogram[letter]\
    \ += 1 }\n  histogram.reject { |letter, count| count < histogram.values.max }\n\
    end", "\tletters = test.split\n\t#p letters\n\thistogram = Hash.new(0)\n\t#histogram\
    \ = {}\n\tletters.each do |word|\n\t\thistogram[word] += 1\n\tend\n\thistogram.sort_by{|k,v|\
    \ v}.reverse.to_h\nend", "  result = Hash.new(0)\n  test.split.each { |word| result[word]\
    \ += 1 }\n  result\nend", "  final_hash = {}\n  test.split(\" \").each do |word|\n\
    \    final_hash[word] = test.split(\" \").count(word)\n  end\n  final_hash\nend",
  "  Hash[test.split.group_by{|chr| chr}.map{|k,v| [k,v.length]}]\nend", "  result\
    \ = Hash.new(0)\n  test.split(' ').each do |x|\n    result[x] += 1\n  end\n  result\n\
    end", "  # Remove any whitespace and turn string into array\n  test = test.gsub(/\\\
    s+/, \"\").split(\"\")\n  # Set max to the first character of the array\n  max\
    \ = test[0]\n  # Iterate through each character\n  test.each do |char|\n    #\
    \ If the count of the current character is larger than the current max\n    if\
    \ test.count(char) > test.count(max)\n      # Assign the count of the current\
    \ character to the max\n      max = char\n    end\n  end\n  # Create a hash where\
    \ the key is the max character and the value is the count\n  hash = {max => test.count(max)}\n\
    \  # Return the hash\n  hash\nend", "  word_array = test.split(\" \")\n  letter_array\
    \ = word_array.map { |letter| letter.split(\"\") }\n  letter_array.flatten!\n\
    \  histogram_hash = Hash.new(0)\n  letter_array.each { |letter| histogram_hash[letter]\
    \ += 1 }\n  max_value = histogram_hash.values.max\n  max_key = histogram_hash.key(max_value)\n\
    \  max_hash = Hash.new\n  max_hash[max_key] = max_value\n  p max_hash\nend", " \
    \ test = test.split(\" \")\n  count = Hash.new(0)\n  test.each { |word| count[word]\
    \ += 1 }\n  max = count.values.max\n  result = Hash.new(0)\n  count.each do |key,\
    \ value|\n    if value == max\n      result[key] = value\n    end\n  end\n  result\n\
    end", "  result = {}\n  return result if test.empty?\n  test.split(\" \").each\
    \ do |letter|\n    if result.has_key?(letter)\n      result[letter] += 1\n   \
    \ else\n      result[letter] = 1\n    end\n  end\n  result.select { |k, v| v ==\
    \ result.values.max }\nend", "  # Your code here\nend", "  split_test = test.split\n\
    \  counts = Hash.new(0)\n  split_test.each { |letter| counts[letter] += 1 }\n\
    \  counts\nend", "  solution = Hash.new\n  test.split(\" \").each do |x|\n   \
    \ if solution.has_key?(x)\n      solution[x] += 1\n    else\n      solution[x]\
    \ = 1\n    end\n  end\n  return solution\nend", "  test = test.split(\" \")\n\
    \  high = 0\n  letters = []\n  answer = {}\n  test.each do |letter|\n    test.each\
    \ do |l|\n      if letter == l\n        high += 1\n      end\n    end\n    if\
    \ !letters.include?(letter)\n      letters << letter\n    end\n    answer[letter]\
    \ = high\n    high = 0\n  end\n  answer.each do |letter, count|\n    if count\
    \ < answer.values.max\n      answer.delete(letter)\n    end\n  end\n  answer\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  result = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    if alphabet.include?(letter)\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  arr = test.split(/ /)\n  hsh = Hash.new(0)\n\
    \  arr.each { |x| hsh[x] += 1 }\n  hsh.each do |key, value|\n    if value == hsh.values.max\n\
    \      p { key => value }\n    end\n  end\nend", "  test.split(' ').map(&:to_sym).each_with_object(Hash.new(0))\
    \ { |letter, h| h[letter] += 1 }\nend", "  words = test.split(\" \")\n  count\
    \ = Hash.new\n  words.each do |word|\n    count[word] = words.count(word)\n  end\n\
    \  count\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, e| h[e] += 1; h\
    \ }.sort_by { |_,v| -v }.to_h\nend", "\t#split the string into an array\n\tletters\
    \ = test.split(\" \")\n\t#create a hash to hold the letters and the amount\n\t\
    count = Hash.new\n\t#loop through the array\n\tletters.each do |l|\n\t\t#if the\
    \ letter is already in the hash, add one to the count\n\t\tif count.has_key?(l)\n\
    \t\t\tcount[l] += 1\n\t\t#if the letter is not in the hash, add it and set the\
    \ count to 1\n\t\telse\n\t\t\tcount[l] = 1\n\t\tend\n\tend\n\t#puts the hash to\
    \ the screen\n\tcount.each do |l, i|\n\t\tputs \"#{l} : #{i}\"\n\tend\nend", " \
    \ my_hash = Hash.new(0)\n  if test == \"\"\n    return {}\n  else\n    test.gsub(\"\
    \ \", \"\").split(\"\").each do |letter|\n      my_hash[letter] += 1\n    end\n\
    \    return my_hash\n  end\nend", "  letters = test.split(\" \")\n  count = Hash.new(0)\n\
    \  letters.each do |letter|\n    count[letter] += 1\n  end\n  count\nend", " \
    \ max_hash = Hash.new(0)\n  test.split.map { |i| max_hash[i] += 1 }\n  max_hash.max_by\
    \ { |k, v| v }.last == 1 ? max_hash : max_hash.select { |k, v| v == max_hash.values.max\
    \ }\nend", "  a = Hash.new(0)\n  test.split(' ').each { |i| a[i] += 1 }\n  a.key(a.values.max)\n\
    end", "\t# Your code here\nend", "  most_freq = Hash.new(0)\n  test.each_char\
    \ do |char|\n    most_freq[char] += 1\n  end\n  return most_freq\nend\nputs histogram(\"\
    a b c\")\nputs histogram(\"a b b a\")\nputs histogram(\"a b c a b\")\nputs histogram(\"\
    b b b b a\")\nputs histogram(\"\")\nputs \"\"", "  result = Hash.new(0)\n  test.split(\"\
    \ \").each do |x|\n    result[x] += 1\n  end\n  highest = result.values.max\n\
    \  result.select{|k,v| v == highest}\nend", "  chars = test.split(\" \")\n  result\
    \ = {}\n  chars.each do |char|\n    if result.has_key?(char)\n      result[char]\
    \ += 1\n    else\n      result[char] = 1\n    end\n  end\n  result\nend", "  hash\
    \ = Hash.new(0)\n  test.split(\" \").each do |word|\n    hash[word] += 1\n  end\n\
    \  hash\nend", "  result = {}\n  test.split(\" \").each do |s|\n    result[s]\
    \ = test.split(\" \").count(s)\n  end\n  result.delete_if { |k, v| v == 1 }\n\
    \  if result.keys.length > 1\n    longest = result.values.max\n    result.delete_if\
    \ { |k, v| v != longest }\n  end\n  result\nend", "    if test.length > 0\n  \
    \      h = Hash.new\n        test.downcase.split(\" \").each do |x|\n        \
    \    h[x] = test.downcase.count(x)\n        end\n        test = h.sort_by {|key,\
    \ value| value}.reverse.to_h\n        most = test.select {|key, value| value ==\
    \ test.values[0]}\n        return most\n    else\n        return {}\n    end\n\
    end", "  test = test.split(/\\s+/)\n  test = test.group_by { |item| item }\n \
    \ test = test.sort_by { |key, value| -value.size }\n  test = test.first\n  test\
    \ = { test[0] => test[1].size }\n  puts test\nend", "  # your code goes here\n\
    end", "  array = test.split\n  freq = Hash.new(0)\n  array.each { |letter| freq[letter]\
    \ += 1 }\n  output = {}\n  highest = freq.values.max\n  freq.each do |key, value|\n\
    \    if value == highest\n      output[key] = value\n    end\n  end\n  output\n\
    end", "\ttest.split(\" \").group_by{|x| x}.transform_values(&:size).select{|k,v|\
    \ v == test.split(\" \").group_by{|x| x}.transform_values(&:size).values.max}.keys.to_s.gsub(\"\
    \\\"\", \"\").gsub(\"[\", \"\").gsub(\"]\", \"\")\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |hash, word| hash[word] += 1; hash }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ do |v, h|\n    h[v] += 1\n  end\nend", "  output = Hash.new\n  if test == \"\
    \"\n    output\n  else\n    test.split(\" \").each do |letter|\n      if output.has_key?(letter)\n\
    \        output[letter] += 1\n      else\n        output[letter] = 1\n      end\n\
    \    end\n    output.each do |key, value|\n      if value != output.values.max\n\
    \        output.delete(key)\n      end\n    end\n    output\n  end\nend", "  \
    \  h = Hash.new(0)\n    max = 0\n    test.split(\" \").each do |i|\n        h[i]\
    \ += 1\n        max = h[i] if h[i] > max\n    end\n    h.delete_if {|k,v| v !=\
    \ max}\nend", "  # write your code here\nend", "  hash = Hash.new(0)\n  test.split(\"\
    \ \").each { |e| hash[e] += 1 }\n  hash.keep_if { |k, v| v == hash.values.max\
    \ }\nend", "  result = {}\n  characters = test.split(\" \")\n  characters.each\
    \ do |character|\n    if result.has_key?(character)\n      result[character] +=\
    \ 1\n    else\n      result[character] = 1\n    end\n  end\n  result\nend", " \
    \ h = Hash.new(0)\n  test.split.each { |word| h[word] += 1 }\n  h.each_pair {\
    \ |key, value| h.delete(key) if value == 1 }\n  return h\nend", "  count = Hash.new(0)\n\
    \  test.each_char do |char|\n    count[char] += 1\n  end\n  count.delete(\" \"\
    )\n  puts count\nend", "\tarr = test.split\n\thash = Hash.new(0)\n\tarr.each do\
    \ |key|\n\t\thash[key] += 1\n\tend\n\thash\nend", "  h = {}\n  if test.length\
    \ == 0\n    return h\n  end\n  #test = test.split(\" \")\n  t = test.split(\"\
    \ \")\n  test.each do |x|\n    if h.has_key?(x)\n      h[x] += 1\n    else\n \
    \     h[x] = 1\n    end\n  end\n  h = h.sort_by {|k,v| v}\n  h.reverse!\n  max\
    \ = h[0][1]\n  result = {}\n  h.each do |x|\n    if x[1] == max\n      result[x[0]]\
    \ = x[1]\n    end\n  end\n  return result\nend", "  hash = Hash.new(0)\n  test.split(\"\
    \ \").each { |word| hash[word] += 1 }\n  hash\nend", "  hsh = Hash.new(0)\n  test.split(\"\
    \ \").each do |char|\n    hsh[char] += 1\n  end\n  hsh.sort_by {|_key, value|\
    \ value}.reverse.to_h\nend", "  test = test.split(\" \")\n  h = Hash.new(0)\n\
    \  test.each do |v|\n    h[v] += 1\n  end\n  max = h.values.max\n  output = Hash.new\n\
    \  h.each do |k, v|\n    if v == max\n      output[k] = v\n    end\n  end\n  puts\
    \ output\nend", "  letters = {}\n  count = 0\n  test.split(\" \").each do |letter|\n\
    \    if letters.has_key?(letter)\n      letters[letter] += 1\n    else\n     \
    \ letters[letter] = 1\n    end\n  end\n  letters.each do |letter, frequency|\n\
    \    if frequency > count\n      count = frequency\n    end\n  end\n  answer =\
    \ {}\n  letters.each do |letter, frequency|\n    if frequency == count\n     \
    \ answer[letter] = frequency\n    end\n  end\n  answer\nend", "  hash = Hash.new\n\
    \  test.split(' ').each do |t|\n    if hash.has_key?(t)\n      hash[t] += 1\n\
    \    else\n      hash[t] = 1\n    end\n  end\n  return hash\nend", "    # your\
    \ code goes here...\nend", "  hist = Hash.new(0)\n  test.split(\" \").each { |letter|\
    \ hist[letter] += 1 }\n  hist.sort_by { |letter, count| count }.last.last == hist.sort_by\
    \ { |letter, count| count }.last(2).first.last ? hist.select { |letter, count|\
    \ count == hist.sort_by { |letter, count| count }.last.last } : hist.select {\
    \ |letter, count| count == hist.sort_by { |letter, count| count }.last.last }\n\
    end", "  hash = {}\n  test.each_char { |letter| hash[letter] = test.count(letter)\
    \ }\n  hash.select { |k, v| v == hash.values.max }\nend", "  output = Hash.new\n\
    \  test.split.each do |letter|\n    if output.has_key?(letter)\n      output[letter]\
    \ += 1\n    else\n      output[letter] = 1\n    end\n  end\n  output\nend\nputs\
    \ histogram(\"a b c\")\nputs histogram(\"a b b a\")\nputs histogram(\"a b c a\
    \ b\")\nputs histogram(\"b b b b a\")\nputs histogram(\"\")\nputs \"\"", "  test\
    \ = test.split\n  test_hash = Hash.new\n  test.each do |x|\n    if test_hash.has_key?(x)\n\
    \      test_hash[x] += 1\n    else\n      test_hash[x] = 1\n    end\n  end\n \
    \ return test_hash\nend", "  solution = {}\n  test.split(\" \").each do |char|\n\
    \    solution[char] = test.count(char) if !solution.has_key?(char)\n  end\n  solution.sort_by\
    \ {|k,v| v}.reverse.to_h\nend", "  test.downcase.split(' ').inject(Hash.new(0))\
    \ { |total, e| total[e] += 1 ;total}\nend", "  test_arr = test.split(' ')\n  counter\
    \ = Hash.new(0)\n  test_arr.each { |test| counter[test] += 1 }\n  puts \"The most\
    \ frequently occuring letters are #{counter.key(counter.values.max)} #{counter.values.max}\
    \ times.\"\nend", "  hash = Hash.new(0)\n  test.split(\" \").each { |word| hash[word]\
    \ += 1 }\n  hash.delete_if { |word, count| count == 1 }\n  hash\nend", "  hash\
    \ = Hash.new(0)\n  test.split(\" \").each do |x|\n    hash[x] += 1\n  end\n  hash\n\
    end", "\tc = Hash.new(0)\n\ttest.each_char { |letter| c[letter] += 1 }\n\tc.each\
    \ { |letter, occurrence| puts \"#{letter} => #{occurrence}\" }\nend", "  result\
    \ = Hash.new(0)\n  str = test.split(\" \")\n  str.each { |x| result[x] += 1 }\n\
    \  puts result\nend", "\thash = {}\n\tarray = test.split(\" \")\n\tarray.each\
    \ do |x|\n\t\tif hash.has_key?(x)\n\t\t\thash[x] += 1\n\t\telse\n\t\t\thash[x]\
    \ = 1\n\t\tend\n\tend\n\tmax = hash.values.max\n\thash.delete_if{|key, value|\
    \ value != max}\n\thash\nend", "  counts = Hash.new(0)\n  test.split(\" \").each\
    \ { |word| counts[word] += 1 }\n  return counts\nend", "  result = Hash.new(0)\n\
    \  test.split.each { |w| result[w] += 1 }\n  result\nend", "  frequency = Hash.new(0)\n\
    \  # Define the keys of the hash as the individual character of the input\n  test.split(/\\\
    s+/).each { |char| frequency[char] += 1 }\n  # Accumulate the frequency of the\
    \ character in the hash\n  frequency.keep_if { |key, value| value == frequency.values.max\
    \ }\n  # Keep the key and value if the value is equal to the maximum value\n \
    \ frequency\nend\nputs histogram('a b c')\nputs histogram('a b b a')\nputs histogram('a\
    \ b c a b')\nputs histogram('b b b b a')\nputs histogram('')", "  output = {}\n\
    \  letters = test.downcase.split(\" \")\n  letters.each do |letter|\n    if output.has_key?(letter)\n\
    \      output[letter] += 1\n    else\n      output[letter] = 1\n    end\n  end\n\
    \  output\nend", "  letter_hash = {}\n  test.split(\" \").each do |letter|\n \
    \   if letter_hash.include?(letter)\n      letter_hash[letter] += 1\n    else\n\
    \      letter_hash[letter] = 1\n    end\n  end\n  highest_value = letter_hash.values.max\n\
    \  letter_hash.select { |k, v| v == highest_value }\nend", "  hash = Hash.new(0)\n\
    \  array = test.split(\" \")\n  max = 0\n  array.each do |item|\n    hash[item]\
    \ += 1\n    max = hash[item] if hash[item] > max\n  end\n  keys = hash.select\
    \ { |k, v| v == max }.keys\n  if keys.length > 1\n    puts keys\n  else\n    puts\
    \ hash\n  end\nend", "  # Your code here\nend", "  res = {}\n  test.split.each\
    \ do |x|\n    res[x] ||= 0\n    res[x] += 1\n  end\n  res\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |result, test| result[test] += 1; result }\nend",
  "    h = Hash.new(0)\n    test.split(\" \").each { |w| h[w] += 1 }\n    h\nend\n\
    p histogram(\"a b c\")\np histogram(\"a b b a\")\np histogram(\"a b c a b\")\n\
    p histogram(\"b b b b a\")\np histogram(\"\")", "  test = test.downcase.split('\
    \ ')\n  letters = Hash.new(0)\n  test.each do |letter|\n    letters[letter] +=\
    \ 1\n  end\n  max = letters.values.max\n  max_letters = letters.select { |letter,\
    \ count| count == max }\n  max_letters\nend", "  if test == \"\"\n    return {}\n\
    \  end\n  hash = {}\n  temp = test.split(\" \")\n  max = 0\n  temp.each do |i|\n\
    \    if hash[i] == nil\n      hash[i] = 1\n    else\n      hash[i] += 1\n    end\n\
    \    if hash[i] > max\n      max = hash[i]\n    end\n  end\n  new_hash = {}\n\
    \  hash.each do |i, j|\n    if j == max\n      new_hash[i] = j\n    end\n  end\n\
    \  new_hash\nend", "\tletters = test.split(\" \")\n\tcounts = Hash.new(0)\n\t\
    letters.each { |letter| counts[letter] += 1 }\n\tanswer = {}\n\tmax = counts.values.max\n\
    \tmax_letters = counts.select { |k, v| v == max }\n\tmax_letters.each do |k, v|\n\
    \t\tanswer[k] = v\n\tend\n\tanswer\nend", "  hash = Hash.new\n  test.split(\"\
    \ \").each do |letter|\n    if hash.has_key?(letter)\n      hash[letter] += 1\n\
    \    else\n      hash[letter] = 1\n    end\n  end\n  hash\nend", "  # your code\
    \ here\nend", "  # h = Hash.new(0)\n  # test.each_char { |char| h[char] += 1 }\n\
    \  # h\n  test.chars.uniq.map { |x| [x, test.count(x)] }.to_h\nend", "  test_hash\
    \ = Hash.new(0)\n  test.split(' ').each { |e| test_hash[e] += 1 }\n  max_value\
    \ = test_hash.values.max\n  final_hash = {}\n  test_hash.each { |k, v| final_hash[k]\
    \ = v if v == max_value }\n  final_hash\nend", "  arr_test = test.split(\" \"\
    )\n  hash_test = {}\n  arr_test.each do |char|\n    if hash_test.key?(char)\n\
    \      hash_test[char] += 1\n    else\n      hash_test[char] = 1\n    end\n  end\n\
    \  max_value = hash_test.values.max\n  result = {}\n  hash_test.each do |key,\
    \ value|\n    if value == max_value\n      result[key] = value\n    end\n  end\n\
    \  result\nend", "    counts = Hash.new(0)\n    max_key = max_value = 0\n    test.split.each\
    \ do |x|\n        counts[x] += 1\n        if counts[x] > max_value\n         \
    \   max_key = x\n            max_value = counts[x]\n        end\n    end\n   \
    \ result = Hash.new(0)\n    counts.each do |k, v|\n        if v == max_value\n\
    \            result[k] = v\n        end\n    end\n    puts result\nend", "  test.split(\"\
    \ \").group_by { |letter| letter }.map { |k, v| [k, v.count] }.to_h\nend", " \
    \ histo = Hash.new(0)\n  test.split(' ').each { |w| histo[w] += 1 }\n  histo\n\
    end", "  output = {}\n  if test.length > 0\n    test.split(' ').each do |x|\n\
    \      output[x] = test.count(x)\n    end\n  end\n  output\nend", "  histogram\
    \ = Hash.new(0)\n  test.split.each { |word| histogram[word] += 1 }\n  max = histogram.values.max\n\
    \  histogram.select { |_k, v| v == max }\nend", "    test.split.each_with_object(Hash.new(0))\
    \ { |key, hash| hash[key] += 1 }\nend", "  count_hash = Hash.new\n  test.chars.each\
    \ do |a|\n    if count_hash.has_key?(a)\n      count_hash[a] += 1\n    else\n\
    \      count_hash[a] = 1\n    end\n  end\n  count_hash\nend", "  letters = test.split(/\\\
    s+/)\n  counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n\
    \  counts\nend", "  rtn = Hash.new(0)\n  test.split(\" \").each do |ch|\n    rtn[ch]\
    \ += 1\n  end\n  rtn\nend", "  hash = {}\n  test.split(' ').each do |x|\n    if\
    \ hash.has_key?(x)\n      hash[x] += 1\n    else\n      hash[x] = 1\n    end\n\
    \  end\n  max_value = hash.values.max\n  hash.select { |k, v| v == max_value }\n\
    end", "  # your code here\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |a,b| b[a] += 1 }\nend", "  h = Hash.new(0)\n  max = 0\n  test.split(' ').each\
    \ do |a|\n    if h[a] > max\n      max = h[a]\n    end\n    h[a] += 1\n  end\n\
    \  final = Hash.new(0)\n  h.each do |k, v|\n    if v == max\n      final[k] =\
    \ v\n    end\n  end\n  return final\nend\nputs histogram(\"b b b b a\")", "  array_letters\
    \ = test.split(\" \")\n  print array_letters\n  array_letters.inject(Hash.new(0))\
    \ { |total, e| total[e] += 1 ;total}\nend", "  input = test.downcase.split(\"\
    \ \")\n  result = {}\n  input.each do |char|\n    if result.has_key?(char)\n \
    \     result[char] += 1\n    else\n      result[char] = 1\n    end\n  end\n  result\n\
    end", "  # TODO: implement this!\nend", "  result = Hash.new(0)\n  test.chars.each\
    \ do |x|\n    if x != \" \"\n      result[x] += 1\n    end\n  end\n  result\n\
    end", "  result = Hash.new(0)\n  test.downcase.split(\" \").each do |item|\n \
    \   result[item] += 1\n  end\n  result\nend", "  counts = Hash.new(0)\n  maxcount\
    \ = 0\n  test.split(\" \").each do |ch|\n    counts[ch] += 1\n    maxcount = counts[ch]\
    \ if counts[ch] > maxcount\n  end\n  result = {}\n  counts.each do |ch,count|\n\
    \    result[ch] = count if count == maxcount\n  end\n  result\nend", "\th = {}\n\
    \twords = test.split(\" \")\n\t\n\twords.each do |w|\n\t\tif h.has_key?(w)\n\t\
    \t\th[w] += 1\n\t\telse\n\t\t\th[w] = 1\n\t\tend\n\tend\n\treturn h\nend", " \
    \ if test.empty?\n    {}\n  else\n    test = test.downcase.split(' ')\n    hash\
    \ = Hash.new(0)\n    test.each { |word| hash[word] += 1 }\n    max = hash.values.max\n\
    \    hash.select { |k, v| v == max }\n  end\nend", "  alphabet = []\n  result\
    \ = {}\n  test.downcase.each_char { |l| alphabet << l unless alphabet.include?(l)\
    \ }\n  alphabet.each { |l| result[l] = test.count(l) }\n  result.sort_by { |k,\
    \ v| v }.reverse.to_h\nend", "  if test == \"\"\n    return {}\n  end\n  test\
    \ = test.split\n  count = 0\n  max = 0\n  h = Hash.new\n  for i in 0..test.length-1\n\
    \    for j in 0..test.length-1\n      if test[i] == test[j]\n        count +=\
    \ 1\n      end\n    end\n    if count > max\n      max = count\n    end\n    h[test[i]]\
    \ = count\n    count = 0\n  end\n  final = Hash.new\n  for i in 0..test.length-1\n\
    \    if h[test[i]] == max\n      final[test[i]] = max\n    end\n  end\n  return\
    \ final\nend", "  hist = Hash.new(0)\n  test.downcase.split.each { |x| hist[x]\
    \ += 1 }\n  out = {}\n  hist.each { |k, v| out[k] = v if v == hist.values.max\
    \ }\n  out\nend", "  i = 0\n  arr = test.split(' ')\n  result = Hash.new(0)\n\
    \  while i < arr.length\n    result[arr[i]] += 1\n    i += 1\n  end\n  p result\n\
    end", "  hash = Hash.new(0)\n  test.each_char { |c| hash[c] += 1 }\n  hash.select\
    \ { |k, v| v == hash.values.max }\nend", "  histogram = Hash.new(0)\n  test.downcase.split(\"\
    \ \").each do |i|\n    histogram[i] += 1\n  end\n  histogram.max_by{|k,v| v}[1]\
    \ == histogram.values.min ? histogram.delete_if{|k,v| v != histogram.values.min}\
    \ : histogram.delete_if{|k,v| v != histogram.values.max}\nend", "  result = {}\n\
    \  test.split(' ').each do |char|\n    if result.has_key?(char)\n      result[char]\
    \ += 1\n    else\n      result[char] = 1\n    end\n  end\n  result.sort_by { |char,\
    \ count| count }.last(result.size).to_h\nend", "  letters = test.split(/ /)\n\
    \  count = Hash.new(0)\n  letters.each { |letter| count[letter] += 1 }\n  highest\
    \ = count.max_by { |letter, num| num }[1]\n  count.delete_if { |letter, num| num\
    \ != highest }\nend", "  test = test.split\n  my_hash = Hash.new(0)\n  test.each\
    \ { |x| my_hash[x] += 1 }\n  my_hash\nend", "  counts = Hash.new(0)\n  test.split(/\\\
    s+/).each do |word|\n    counts[word] += 1\n  end\n  counts\nend", "  hash = Hash.new\n\
    \  test.split(\" \").each do |n|\n    if hash.has_key?(n)\n      hash[n] += 1\n\
    \    else\n      hash[n] = 1\n    end\n  end\n  hash\nend", "\thash = Hash.new(0)\n\
    \ttest.split(\" \").each do |x|\n\t\thash[x] += 1\n\tend\n\tprint hash\nend\n\
    histogram(\"a b c\")\nhistogram(\"a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"\
    b b b b a\")\nhistogram(\"\")", "  test.split.each_with_object(Hash.new(0)) {\
    \ |word,counts| counts[word] += 1 }\nend", "  letters = test.split(' ')\n  histogram\
    \ = Hash.new(0)\n  letters.each { |letter| histogram[letter] += 1 }\n  # key is\
    \ the letter, value is the count", "  test.split(\" \").inject(Hash.new(0)) do\
    \ |memo, word|\n    memo[word] += 1\n    memo\n  end\nend", "\tretVal = Hash.new\n\
    \tstrArr = test.split(' ')\n\tstrArr.each { |str|\n\t\tif retVal.key?(str)\n\t\
    \t\tretVal[str] += 1\n\t\telse\n\t\t\tretVal[str] = 1\n\t\tend\n\t}\n\tcount =\
    \ 0\n\tstrArr.each { |str|\n\t\tif retVal[str] > count\n\t\t\tcount = retVal[str]\n\
    \t\tend\n\t}\n\treturnVal = Hash.new\n\tretVal.each { |letter, count|\n\t\tif\
    \ count == count\n\t\t\treturnVal[letter] = count\n\t\tend\n\t}\n\treturn returnVal\n\
    end", "  test = test.split(' ')\n  result = Hash.new(0)\n  test.each { |n| result[n]\
    \ += 1 }\n  result\nend", "    results = Hash.new\n    test.split.each do |word|\n\
    \        if results.has_key?(word)\n            results[word] += 1\n        else\n\
    \            results[word] = 1\n        end\n    end\n    results\nend", "  histogram\
    \ = {}\n  test.split.each do |letter|\n    if histogram.has_key?(letter)\n   \
    \   histogram[letter] += 1\n    else\n      histogram[letter] = 1\n    end\n \
    \ end\n  histogram\nend", "  numbs = test.split(' ')\n  numbs.count\nend\nputs\
    \ histogram('a b c')", "  test.downcase!\n  test = test.split(\" \")\n  test =\
    \ test.group_by { |x| x }.values\n  final = {}\n  test.each do |set|\n    if set.length\
    \ == 1\n      final[set[0]] = 1\n    else\n      final[set[0]] = set.length\n\
    \    end\n  end\n  final\nend", "  if test.empty?\n    return {}\n  end\n  i =\
    \ 0\n  hash = {}\n  test.split.each do |x|\n    y = test.split.count(x)\n    hash[x]\
    \ = y\n  end\n  hash2 = hash.clone\n  hash.each do |key, value|\n    hash2.each\
    \ do |key2, value2|\n      if value < value2\n        hash.delete(key)\n     \
    \ end\n    end\n  end\n  return hash\nend", "  counts = Hash.new(0)\n  test.downcase.split(\"\
    \ \").each do |x|\n    counts[x] += 1\n  end\n  counts.max_by { |k, v| v }.max_by\
    \ { |k, v| k }\nend", "  result = {}\n  test.split.each do |letter|\n    result[letter]\
    \ = result[letter].to_i + 1\n  end\n  result\nend", "  hash = Hash.new\n  test.split.each\
    \ do |word|\n    if hash.has_key?(word)\n      hash[word] += 1\n    else\n   \
    \   hash[word] = 1\n    end\n  end\n  hash\nend", "  test = test.split(\" \")\n\
    \  test_hash = Hash.new(0)\n  test.each do |value|\n    test_hash[value] += 1\n\
    \  end\n  return test_hash\nend", "  counts = {}\n  test.each_char do |char|\n\
    \    counts[char] = counts[char].to_i + 1\n  end\n  counts\nend", "  test = test.split\n\
    \  max = 0\n  max_letters = []\n  test.each do |letter|\n    if test.count(letter)\
    \ > max\n      max = test.count(letter)\n      max_letters = [letter]\n    elsif\
    \ test.count(letter) == max\n      max_letters << letter\n    end\n  end\n  result\
    \ = {}\n  max_letters.each do |letter|\n    result[letter] = max\n  end\n  result\n\
    end", "  # Your code here\nend", "  hist = Hash.new(0)\n  test.split.each { |word|\
    \ hist[word] += 1 }\n  hist\nend", "  # your code here\nend", "  histogram = Hash.new(0)\n\
    \  # letter_counts = test.split.each_with_object(Hash.new(0)) { |letter, counts|\
    \ counts[letter] += 1 }\n  max_letters = test.split.max_by { |letter| test.split.count(letter)\
    \ }\n  max_letters.each { |letter| histogram[letter] = test.split.count(letter)\
    \ }\n  # letter_counts.key(letter_counts.values.max)\n  # histogram[max_letters]\
    \ = letter_counts.values.max\n  histogram\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { | word, hash | hash[word] += 1 }\nend", "\tif test == \"\"\n\t\treturn {}\n\
    \tend\n\tresult = Hash.new(0)\n\ttest.split(\" \").each { |letter| result[letter]\
    \ += 1 }\n\tmax = result.values.max\n\tresult.select { |k, v| v == max }\nend",
  "  test.split.inject(Hash.new(0)) { |hash, word| hash[word] += 1; hash }\nend",
  "  h = Hash.new(0)\n  test.scan(/\\w+/).each { |v| h[v] += 1 }\n  h\nend", "  hist\
    \ = Hash.new(0)\n  test.split.each do |str|\n    hist[str] += 1\n  end\n  new_hist\
    \ = {}\n  hist.each do |k, v|\n    if v == hist.values.max\n      new_hist[k]\
    \ = v\n    end\n  end\n  return new_hist\nend", "  letters = test.split(' ')\n\
    \  counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts.select\
    \ { |letter, count| count == counts.values.max }\nend", "\tmy_hash = Hash.new(0)\n\
    \ttest.split(' ').each do |x|\n\t\tmy_hash[x] += 1\n\tend\n\tmy_hash\nend", " \
    \ new_hash = {}\n  arr = test.split(\" \")\n  arr.each do |i|\n    if new_hash.has_key?(i)\n\
    \      new_hash[i] += 1\n    else\n      new_hash[i] = 1\n    end\n  end\n  return\
    \ new_hash\nend", "    result = {}\n    letters = test.split(\" \")\n    letters.uniq.each\
    \ do |letter|\n        result[letter] = test.count(letter)\n    end\n    result\n\
    end", "  letter_histogram = {}\n  test.split(\" \").each do |letter|\n    letter_histogram[letter]\
    \ = 0\n  end\n  test.split(\" \").each do |letter|\n    letter_histogram[letter]\
    \ += 1\n  end\n  max_count = letter_histogram.values.max\n  max_letters = letter_histogram.select\
    \ { |k, v| v == max_count }\n  puts \"The letters and corresponding counts are\
    \ #{max_letters}\"\nend", "  new = {}\n  test.split(\" \").each do |x|\n    new[x]\
    \ = test.split(\" \").count(x)\n  end\n  new\nend", "  result = Hash.new(0)\n\
    \  test.split.each { |x| result[x] += 1 }\n  result.map { |k, v| k if v == result.values.max\
    \ }.compact.to_h\nend", "  count = Hash.new(0)\n  letters = test.split(' ')\n\
    \  letters.each { |letter| count[letter] += 1 }\n  frequency = count.group_by\
    \ { |a, b| b }\n  frequency[frequency.keys.max]\nend", "  results = {}\n  test.split(\"\
    \ \").each do |letter|\n    if results.has_key?(letter)\n      results[letter]\
    \ += 1\n    else\n      results[letter] = 1\n    end\n  end\n  highest_value =\
    \ results.values.max\n  results.select { |k, v| v == highest_value }\nend", " \
    \ count = Hash.new(0)\n  test.split.each { |word| count[word] += 1 }\n  count.each\
    \ { |k, v| puts \"#{k} #{v}\" }\nend", "  letters = test.split(\" \")\n  counts\
    \ = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts.select\
    \ { |k, v| v == counts.values.max }\nend", "  histo = Hash.new(0)\n  test.each_char\
    \ { |char| histo[char] += 1 }\n  histo.max_by{|k,v| v}\nend", "  print histogram.call(\"\
    a b c\")\n  print histogram.call(\"a b b a\")\n  print histogram.call(\"a b c\
    \ a b\")\n  print histogram.call(\"b b b b a\")\n  print histogram.call(\"\")\n\
    end", "  result = {}\n  test.split(' ').uniq.each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  hash = Hash.new(0)\n\
    \  test.each_char do |x|\n    hash[x] += 1\n  end\n  hash\nend", "  array = test.split(\"\
    \ \")\n  hash = Hash.new\n  array.each do |letter|\n    if hash.has_key?(letter)\n\
    \      hash[letter] += 1\n    else\n      hash[letter] = 1\n    end\n  end\n \
    \ hash\nend", "  # TODO: write your code here\n  h = Hash.new(0)\n  test.split('\
    \ ').each do |i|\n    h[i] += 1\n  end\n  h.select{|k,v| v == h.values.max}\n\
    end", "    hash = Hash.new\n    test.split(' ').each do |i|\n        if hash.has_key?(i)\n\
    \            hash[i] += 1\n        else\n            hash[i] = 1\n        end\n\
    \    end\n    hash\nend", "  letters = {}\n  return letters if test.empty?\n \
    \ test.split.each do |letter|\n    if letters.has_key?(letter)\n      letters[letter]\
    \ += 1\n    else\n      letters[letter] = 1\n    end\n  end\n  letters\nend",
  "  alphabet = Hash.new(0)\n  max_value = 0\n  test.split(' ').each do |char|\n \
    \   alphabet[char] += 1\n    max_value = alphabet[char] if alphabet[char] > max_value\n\
    \  end\n  alphabet.select { |key, value| value == max_value }\nend", "    if test.length\
    \ != 0\n        words = test.split(/\\s+/)\n        repeated = words.group_by{|i|\
    \ i}\n        repeated.transform_values!(&:size)\n        max = repeated.values.max\n\
    \        histogram = repeated.select{|k,v| v == max}\n        return histogram\n\
    \    else\n        return {}\n    end\nend", "    array = test.split(\" \")\n\
    \    hash = Hash.new\n    array.each do |x|\n        hash[x] = array.count(x)\n\
    \    end\n    result = Hash.new\n    max = hash.values.max\n    hash.each do |key,\
    \ value|\n        if value == max\n            result[key] = value\n        end\n\
    \    end\n    puts result\nend", "  @hash = Hash.new(0)\n  test.split(\" \").each\
    \ { |word| @hash[word] += 1 }\n  return @hash\nend", "  char_count = Hash.new(0)\n\
    \  test.each_char { |char| char_count[char] += 1 }\n  char_count.sort_by { |key,\
    \ value| value }.reverse\nend", "  letters = test.split(' ')\n  letters_count\
    \ = Hash.new(0)\n  letters.each do |let|\n    letters_count[let] += 1\n  end\n\
    \  letters_count\nend", "  letter_counts = Hash.new(0)\n  test.each_char { |letter|\
    \ letter_counts[letter] += 1 }\n  max_count = letter_counts.values.max\n  letter_counts.keep_if\
    \ { |letter, count| count == max_count }\n  letter_counts\nend", "  words = test.split(\"\
    \ \")\n  letters = words.length\n  answer = Hash.new(0)\n  output = {}\n  for\
    \ i in 0..letters-1\n    answer[words[i]] += 1\n  end\n  max_value = answer.values.max\n\
    \  answer.each { |k, v| output[k] = v if v == max_value }\n  p output\nend", " \
    \ results = {}\n  test.split(\" \").each do |item|\n    if results.key?(item)\n\
    \      results[item] += 1\n    else\n      results[item] = 1\n    end\n  end\n\
    \  results\nend", "  raise NotImplementedError\nend", "  letters = {}\n  test.split.each\
    \ do |letter|\n    if letters.has_key?(letter)\n      letters[letter] += 1\n \
    \   else\n      letters[letter] = 1\n    end\n  end\n  letters\nend", "  if test.length\
    \ == 0\n    {}\n  else\n    test.split.each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\n  end\nend", "  letters = test.split(\" \")\n \
    \ h = Hash.new(0)\n  letters.each { |l| h[l] += 1 }\n  h\nend", "  characters\
    \ = test.downcase.split(/\\W+/)\n  freq = Hash.new(0)\n  characters.each { |character|\
    \ freq[character] += 1 }\n  freq.delete(\"\")\n  freq.delete(\"0\")\n  freq.delete(\"\
    1\")\n  freq.delete(\"2\")\n  freq.delete(\"3\")\n  freq.delete(\"4\")\n  freq.delete(\"\
    5\")\n  freq.delete(\"6\")\n  freq.delete(\"7\")\n  freq.delete(\"8\")\n  freq.delete(\"\
    9\")\n  ans = Hash.new(0)\n  freq.each { |k, v| ans[k] = v if v == freq.values.max\
    \ }\n  return ans\nend", "  letter_count = Hash.new(0)\n  test.split.each do |letter|\n\
    \    letter_count[letter] += 1\n  end\n  letter_count\nend", "  count = Hash.new(0)\n\
    \  test.split(\" \").each do |x|\n    count[x] += 1\n  end\n  max = count.values.max\n\
    \  count.select {|k,v| v == max}.keys\nend", "\tletter = Hash.new\n\ttest.split('\
    \ ').each do |x|\n\t\tletter[x] = 0 if letter[x] == nil\n\t\tletter[x] += 1\n\t\
    end\n\toutput = Hash.new\n\tletter.each do |key, value|\n\t\toutput[key] = value\
    \ if output.empty?\n\t\toutput[key] = value if value > output.values[0]\n\t\t\
    output[key] = value if value == output.values[0] && !output.has_key?(key)\n\t\
    end\n\treturn output\nend", "  count = Hash.new 0\n  test.each_char { |k| count[k]\
    \ += 1 }\n  count.delete(\" \")\n  max = count.max_by { |k, v| v }\n  max[1]\n\
    \  result = count.select { |k, v| v == max[1] }\n  result\nend", "  puts \"You\
    \ entered: #{test}\"\n  letter_hash = Hash.new(0)\n  test.split(\" \").each do\
    \ |letter|\n    letter_hash[letter] += 1\n  end\n  puts letter_hash\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
