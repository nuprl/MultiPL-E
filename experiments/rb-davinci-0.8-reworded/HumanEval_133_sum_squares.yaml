name: HumanEval_133_sum_squares
language: rb
prompt: "# You are given an array of numbers.\n# You need to return the sum of squared\
  \ numbers in the given array,\n# round each element in the array to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst.call([1.0, 2.0, 3.0])\n# 14\n# >>> lst.call([1.0,\
  \ 4.0, 9.0])\n# 98\n# >>> lst.call([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst.call([1.4,\
  \ 4.2, 0.0])\n# 29\n# >>> lst.call([-2.4, 1.0, 1.0])\n# 6\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0,\
  \ 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84,\
  \ candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4,\
  \ 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230,\
  \ candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0,\
  \ 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086,\
  \ candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n\
  \    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0,\
  \ 1.0, 0.0]))\n  end\nend\n"
completions: ["  lst.map{|num| num.ceil}.map{|num| num**2}.reduce(:+)\nend", "  #Your\
    \ code here\nend", "  lst.map!{|num| num.ceil}.map{|num| num**2}.inject(:+)\n\
    end", "  lst.map{|e| e.ceil ** 2}.reduce(:+)\nend", "  lst.map { |x| x.ceil**2\
    \ }.sum\nend", "  lst.map { |n| n.ceil ** 2 }.reduce(:+)\nend", "  lst.map { |el|\
    \ el.ceil**2 }.sum\nend", "  lst.map!{|x| (x + 1).ceil}.map{|x| x * x}.inject(:+)\n\
    end", "  lst.map{|n| n.ceil ** 2}.sum\nend", "  lst.map { |n| n.ceil**2 }.sum\n\
    end", "  lst.map { |n| (n + 0.5).ceil**2 }.reduce(:+)\nend", "  lst.map! { |number|\
    \ number.ceil }\n  lst.map! { |number| number * number }\n  lst.reduce(:+)\nend",
  "  lst.map { |num| num.ceil ** 2 }.reduce(:+)\nend", "  lst.map { |x| x.ceil**2\
    \ }.reduce(:+)\nend", "  lst.map { |v| v.ceil }.map { |v| v ** 2 }.reduce(:+)\n\
    end", "  lst.map{|n| n.ceil ** 2}.reduce(:+)\nend", "  sum = 0\n  lst.each do\
    \ |n|\n    sum += (n.ceil)**2\n  end\n  sum\nend", "  lst.map { |x| x.ceil**2\
    \ }.reduce(:+)\nend", "  total = 0\n  lst.each { |num| total += num.ceil**2 }\n\
    \  total\nend", "  s = 0\n  lst.each { |n| s += n.ceil ** 2 }\n  s\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
