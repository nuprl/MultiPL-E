language: rb
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).sort.first(2)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp78ymusnw\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp78ymusnw.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[2, 4]>\n\
    \ndiff:\n? [2, 1]\n?     4 \n?     ? \n===============================================================================\n\
    \nFinished in 0.009646255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.67 tests/s, 103.67 assertions/s\n"
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select(&:even?)\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfya6ne5g

    Started

    .

    Finished in 0.000444189 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2251.29 tests/s, 18010.35 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  unless arr.empty?\n    evens = arr.select\
    \ { |n| n.even? }\n    evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    \  else\n    []\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5he42o_e

    Started

    .

    Finished in 0.000784738 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1274.31 tests/s, 10194.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_arr = arr.select{|i| i % 2 == 0}.compact\n\
    \  return [] if even_arr.empty?\n  even_arr.sort!\n  [even_arr[0], arr.index(even_arr[0])]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptuqh00z3

    Started

    .

    Finished in 0.000787043 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1270.58 tests/s, 10164.63 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  hash = {}\n  arr.each_with_index do |x,\
    \ i|\n    if x.even?\n      hash[x] = i\n    end\n  end\n  if hash.empty?\n  \
    \  []\n  else\n    min = hash.keys.min\n    [min, hash[min]]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2lsnvo2x\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp2lsnvo2x.rb:47:in `test_pluck'\n \
    \    44:     assert_equal([2, 1], candidate.call([4, 2, 3]))\n     45:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     46:     assert_equal([], candidate.call([]))\n\
    \  => 47:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     48:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n     49:     assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n     50:     assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n<[0, 1]> expected but was\n<[0, 3]>\n\ndiff:\n? [0, 1]\n?     3\
    \ \n?     ? \n===============================================================================\n\
    \nFinished in 0.009163537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.13 tests/s, 436.51 assertions/s\n"
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  arr.map.with_index\
    \ { |x, i| [x, i] if x.even? }.compact.min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdrfkwxjs\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpdrfkwxjs.rb:41:in `test_pluck'\n \
    \    38:     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n     39:\
    \     assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n     40:     assert_equal([6,\
    \ 1], candidate.call([7, 6, 7, 1]))\n  => 41:     assert_equal([], candidate.call([7,\
    \ 9, 7, 1]))\n     42:   end\n     43: end\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008343263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.86 tests/s, 958.86 assertions/s\n"
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evs = arr.find_all { |e| e.even? }\n  evs.size.zero?\
    \ ? [] : [evs.min, arr.index(evs.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyz4eea22

    Started

    .

    Finished in 0.000437425 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2286.11 tests/s, 18288.85 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select(&:even?)\n  return\
    \ [] if even_numbers.empty?\n  [even_numbers.min, arr.index(even_numbers.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd825clnf

    Started

    .

    Finished in 0.000438256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2281.77 tests/s, 18254.17 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  return [] if evens.empty?\n  min = evens.min\n  arr.index(min)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx68cynzo\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpx68cynzo.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<1>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.00953861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.84 tests/s, 104.84 assertions/s\n"
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.sort_by.with_index { |num, i| [num.even?\
    \ ? 0 : 1, num, i] }.take(1).flatten\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogwmgzfn\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogwmgzfn.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[2]>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.008959405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.61 tests/s, 111.61 assertions/s\n"
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi4e9jogq

    Started

    .

    Finished in 0.000415841 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2404.77 tests/s, 19238.12 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  #arr.each_with_index { |val, idx| val.even?\
    \ ? return [val, idx] : next }\n  #arr.each_with_index { |val, idx| (val % 2 ==\
    \ 0) ? return [val, idx] : next }\n  arr.each_with_index { |val, idx| (val.even?)\
    \ ? return [val, idx] : next }\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp6scs6ef6.rb:29: syntax error, unexpected [, expecting '':''

    ...al, idx| (val.even?) ? return [val, idx] : next }

    ...                              ^

    /tmp/tmp6scs6ef6.rb:29: syntax error, unexpected '':'', expecting ''}''

    ...al.even?) ? return [val, idx] : next }

    ...                              ^

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  # find the smallest\
    \ even number\n  return [] if arr.index(arr.sort.reject { |num| num.odd? }.first).nil?\n\
    \  # return index of first instance of smallest even number and that number\n\
    \  [arr.sort.reject { |num| num.odd? }.first, arr.index(arr.sort.reject { |num|\
    \ num.odd? }.first)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm84y6vpn

    Started

    .

    Finished in 0.000456726 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2189.50 tests/s, 17515.97 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.find_all { |x| x.even? }\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\np pluck([4,\
    \ 2, 3]) == [2, 1]\np pluck([1, 2, 3]) == [2, 1]\np pluck([]) == []\np pluck([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'true

    true

    true

    true

    Loaded suite /tmp/tmp95x8p3la

    Started

    .

    Finished in 0.000426548 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.40 tests/s, 18755.22 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  smallest_value = nil\n  smallest_index\
    \ = nil\n  arr.each_with_index do |e, i|\n    if e.even?\n      if smallest_value.nil?\
    \ || e < smallest_value\n        smallest_value = e\n        smallest_index =\
    \ i\n      end\n    end\n  end\n  smallest_value.nil? ? [] : [smallest_value,\
    \ smallest_index]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpipw2gxj8

    Started

    .

    Finished in 0.000468176 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2135.95 tests/s, 17087.59 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n    small_even = nil\n    small_even_index\
    \ = nil\n    arr.each_with_index do |x, i|\n        if small_even == nil\n   \
    \         if x % 2 == 0\n                small_even = x\n                small_even_index\
    \ = i\n            end\n        else\n            if x % 2 == 0\n            \
    \    if x < small_even\n                    small_even = x\n                 \
    \   small_even_index = i\n                end\n            end\n        end\n\
    \    end\n    if small_even == nil\n        return []\n    else\n        return\
    \ [small_even, small_even_index]\n    end\nend\np pluck([4, 2, 3])\np pluck([1,\
    \ 2, 3])\np pluck([])\np pluck([5, 0, 3, 0, 4, 2])\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: '[2, 1]

    [2, 1]

    []

    [0, 1]

    Loaded suite /tmp/tmp1iv62fua

    Started

    .

    Finished in 0.000490802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.48 tests/s, 16299.85 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |el| el.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi_wshkpv

    Started

    .

    Finished in 0.000440316 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2271.10 tests/s, 18168.77 assertions/s

    '
  stdout: ''
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  arr.each_with_index.min_by\
    \ { |el, _i| el.even? ? el : 1.0 / 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcqy5bnlt\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpcqy5bnlt.rb:41:in `test_pluck'\n \
    \    38:     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n     39:\
    \     assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n     40:     assert_equal([6,\
    \ 1], candidate.call([7, 6, 7, 1]))\n  => 41:     assert_equal([], candidate.call([7,\
    \ 9, 7, 1]))\n     42:   end\n     43: end\n<[]> expected but was\n<[7, 0]>\n\n\
    diff:\n? [7, 0]\n===============================================================================\n\
    \nFinished in 0.008788092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.79 tests/s, 910.32 assertions/s\n"
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select { |a| a.even? }.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzml2kb4y\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpzml2kb4y.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009396633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.42 tests/s, 106.42 assertions/s\n"
  timestamp: 1659823490
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select { |x| x.even? }.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsxk39_an\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsxk39_an.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.00848742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.82 tests/s, 117.82 assertions/s\n"
  timestamp: 1659823490
