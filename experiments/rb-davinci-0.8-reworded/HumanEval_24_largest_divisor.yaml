name: HumanEval_24_largest_divisor
language: rb
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
  \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
  \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
  \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
  \  end\nend\n"
completions: ["  # TODO: implement solution here\nend", "  n.downto(2) do |num|\n\
    \    return num if n % num == 0\n  end\nend", "  (1..n).reverse_each { |i| return\
    \ i if n % i == 0 }\nend", "  # @TODO: Implement this method!\nend", "  (1..n).select\
    \ { |i| n % i == 0}.max\nend", "  (1..n).select{|x| n % x == 0}.max\nend", " \
    \   counter = 0\n    while counter <= n\n        if n % counter == 0\n       \
    \     return counter\n        end\n        counter += 1\n    end\nend", "  (1..n-1).each\
    \ { |i| return i if n % i == 0 }\nend", "  puts \"n: #{n}\"\n  n.downto(2) do\
    \ |divisor|\n    puts \"divisor: #{divisor}\"\n    return divisor if n % divisor\
    \ == 0\n  end\nend", "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n \
    \ end\nend", "  largest_divisor = nil\n  (1..n).each do |possible_divisor|\n \
    \   largest_divisor = possible_divisor if n % possible_divisor == 0\n  end\n \
    \ largest_divisor\nend", "  (n-1).downto(1) do |x|\n    return x if n % x == 0\n\
    \  end\nend", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n\
    \    end\n    i -= 1\n  end\nend", "  # Your code here!\nend", "  divisor = n\
    \ - 1\n  while n % divisor != 0\n    divisor -= 1\n  end\n  divisor\nend\nputs\
    \ largest_divisor(15)", "  divisor = n-1\n  while divisor > 0\n    return divisor\
    \ if n % divisor == 0\n    divisor -= 1\n  end\nend", '    return nil if n ==
    0', "  divisor = n - 1\n  while divisor > 0\n    return divisor if n % divisor\
    \ == 0\n    divisor -= 1\n  end\nend", "  # find largest divisor which divides\
    \ n evenly\n  n.downto(1) do |i|\n    if n % i == 0\n      return i\n    end\n\
    \  end\nend", "  (n-1).downto(1) do |num|\n    return num if n % num == 0\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
