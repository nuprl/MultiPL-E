name: HumanEval_141_file_name_check
language: rb
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\"\
  )\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
  \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
  example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n  \
  \  assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\"\
  , candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"\
  No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"\
  No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"\
  No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
  this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"\
  ))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"\
  Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"\
  No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n \
  \   assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  s.\"))\n  end\nend\n"
completions: ["  return \"No\" if file_name.scan(/\\d/).size > 3\n  return \"No\"\
    \ if file_name.scan(/\\./).size != 1\n  return \"No\" if file_name.scan(/^[a-zA-Z]+\\\
    ./).size == 0\n  return \"No\" if !%w(txt exe dll).include?(file_name.scan(/\\\
    .([a-z]+)$/)[0][0])\n  \"Yes\"\nend", "  return \"No\" if file_name.count(\"0-9\"\
    ) > 3\n  return \"No\" if file_name.count(\".\") != 1\n  return \"No\" if file_name.split(\"\
    .\").first.empty?\n  return \"No\" if !file_name.split(\".\").first.match(/^[a-zA-Z]/)\n\
    \  return \"No\" if ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\".\"\
    ).last)\n  \"Yes\"\nend", "  # The lambda which checks a file's name.\n  file_name_check\
    \ = lambda do |file_name|\n    parts = file_name.split('.')\n    if parts.size\
    \ != 2\n      return false\n    end\n    if (parts[0] =~ /[^a-zA-Z0-9]/) || (parts[0]\
    \ =~ /^[0-9]/)\n      return false\n    end\n    if parts[1] != 'txt' && parts[1]\
    \ != 'exe' && parts[1] != 'dll'\n      return false\n    end\n    return true\n\
    \  end\n  if file_name_check.call(file_name)\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  /^[a-zA-Z][^.]{0,9}\\.\\w{3}$/.match(file_name) ? \"Yes\"\
    \ : \"No\"\nend", "\t# file_name = /(\\w+?\\.txt)/.match(file_name) \n\t# if file_name\
    \ == nil\n\t# \treturn \"No\"\n\t# else\n\t# \treturn \"Yes\"\n\t# end\n\tfile_name\
    \ = file_name.match(/^\\D+?\\.txt$/)\n\tif file_name == nil\n\t\treturn \"No\"\
    \n\telse\n\t\treturn \"Yes\"\n\tend\nend\nfile_name_check.call(\"example.txt\"\
    )", "  #fill your code here\nend", "  if file_name.length > 12 || file_name.length\
    \ < 7\n    return \"No\"\n  end\n  if file_name.match(/^[a-zA-Z]{1}[a-zA-Z0-9]*\\\
    .[tde][xl][te]{2}$/)\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend",
  "\tcondition_1 = file_name.count(\"0-9\") <= 3\n\tcondition_2 = file_name.count(\"\
    .\") == 1\n\tcondition_3 = !file_name.split(\".\").first.empty? && file_name.split(\"\
    .\").first =~ /[a-zA-Z]/\n\tcondition_4 = [\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\").last)\n\tcondition_1 && condition_2 && condition_3 && condition_4 ? \"Yes\"\
    \ : \"No\"\nend", "  (file_name =~ /^[a-zA-Z]\\w*\\.txt$|^[a-zA-Z]\\w*\\.exe$|^[a-zA-Z]\\\
    w*\\.dll$/) ? \"Yes\" : \"No\"\nend", "  # Your code here\nend", "\t# write your\
    \ code here\n\tparts = file_name.split(\".\")\n\ta = parts[0]\n\tb = parts[1]\n\
    \tif b=='txt' || b=='exe' || b=='dll'\n\t\tif a.length == 0\n\t\t\treturn \"No\"\
    \n\t\tend\n\t\tif a.length == 1\n\t\t\tif a.ord < 97 || a.ord > 122\n\t\t\t\t\
    return \"No\"\n\t\t\tend\n\t\telse\n\t\t\tif a[0].ord < 97 || a[0].ord > 122\n\
    \t\t\t\treturn \"No\"\n\t\t\tend\n\t\t\tfor i in 1..a.length-1\n\t\t\t\tif a[i].ord\
    \ < 48 || a[i].ord > 57\n\t\t\t\t\treturn \"No\"\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\telse\n\t\treturn \"No\"\n\tend\n\t\"Yes\"\nend", "  # YOUR CODE HERE\n\
    end", "  if file_name.scan(/\\d/).length > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\\
    ./).length != 1\n    return \"No\"\n  end\n  parts = file_name.split(\".\")\n\
    \  if parts[0].length == 0\n    return \"No\"\n  end\n  if !parts[0].match(/^[a-zA-Z]/)\n\
    \    return \"No\"\n  end\n  if ![\"txt\", \"exe\", \"dll\"].include?(parts[1])\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "\tif (file_name =~ /[^0-9]{1}[^\\\
    .]{1}\\./ )\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "   \
    \ pattern = /^[a-zA-Z]{1}[a-zA-Z0-9]{1,2}\\.(txt|exe|dll)$/\n    if pattern.match(file_name)\
    \ == nil\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend",
  "\textensions = ['txt', 'exe', 'dll']\n\tfile_name = file_name.split('.')\n\tfile_name[0]\
    \ = file_name[0].gsub(/[0-9]/, '')\n\tif (file_name.length == 2 && file_name[0]\
    \ =~ /[A-Za-z]/ && file_name[0].length > 0 && extensions.include?(file_name[1]))\n\
    \t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.count(\"a-zA-Z\") < 1\n    return \"No\"\n  elsif\
    \ file_name.count(\".\").nil?\n    return \"No\"\n  else\n    return \"Yes\"\n\
    \  end\nend", "\tif file_name.scan(/\\d/).length > 3\n\t\treturn \"No\"\n\tend\n\
    \tif !(file_name.scan(/\\./).length == 1)\n\t\treturn \"No\"\n\tend\n\tif file_name.split(\"\
    .\").first.empty?\n\t\treturn \"No\"\n\tend\n\tif !(file_name.split(\".\").first\
    \ =~ /[a-zA-Z]/)\n\t\treturn \"No\"\n\tend\n\tif file_name.split(\".\").last !=\
    \ \"txt\" && file_name.split(\".\").last != \"exe\" && file_name.split(\".\").last\
    \ != \"dll\"\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend\nfile_name_check\
    \ = lambda { |file_name| file_name_check(file_name) }", "  if file_name =~ /[0-9]{4}/\
    \ or file_name =~ /[A-Z]{2,}/ \n    \"No\"\n  elsif file_name =~ /[a-z]+\\.[a-z]{3}/\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  file_name =~ /^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/ ? \"Yes\" : \"No\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
