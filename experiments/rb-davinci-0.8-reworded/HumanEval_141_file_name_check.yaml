name: HumanEval_141_file_name_check
language: rb
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\"\
  )\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
  \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
  example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n  \
  \  assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\"\
  , candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"\
  No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"\
  No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"\
  No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
  this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"\
  ))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"\
  Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"\
  No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n \
  \   assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  s.\"))\n  end\nend\n"
completions: ["  return \"No\" if file_name.scan(/\\d/).size > 3\n  return \"No\"\
    \ if file_name.scan(/\\./).size != 1\n  return \"No\" if file_name.scan(/^[a-zA-Z]+\\\
    ./).size == 0\n  return \"No\" if !%w(txt exe dll).include?(file_name.scan(/\\\
    .([a-z]+)$/)[0][0])\n  \"Yes\"\nend", "  return \"No\" if file_name.count(\"0-9\"\
    ) > 3\n  return \"No\" if file_name.count(\".\") != 1\n  return \"No\" if file_name.split(\"\
    .\").first.empty?\n  return \"No\" if !file_name.split(\".\").first.match(/^[a-zA-Z]/)\n\
    \  return \"No\" if ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\".\"\
    ).last)\n  \"Yes\"\nend", "  # The lambda which checks a file's name.\n  file_name_check\
    \ = lambda do |file_name|\n    parts = file_name.split('.')\n    if parts.size\
    \ != 2\n      return false\n    end\n    if (parts[0] =~ /[^a-zA-Z0-9]/) || (parts[0]\
    \ =~ /^[0-9]/)\n      return false\n    end\n    if parts[1] != 'txt' && parts[1]\
    \ != 'exe' && parts[1] != 'dll'\n      return false\n    end\n    return true\n\
    \  end\n  if file_name_check.call(file_name)\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  /^[a-zA-Z][^.]{0,9}\\.\\w{3}$/.match(file_name) ? \"Yes\"\
    \ : \"No\"\nend", "\t# file_name = /(\\w+?\\.txt)/.match(file_name) \n\t# if file_name\
    \ == nil\n\t# \treturn \"No\"\n\t# else\n\t# \treturn \"Yes\"\n\t# end\n\tfile_name\
    \ = file_name.match(/^\\D+?\\.txt$/)\n\tif file_name == nil\n\t\treturn \"No\"\
    \n\telse\n\t\treturn \"Yes\"\n\tend\nend\nfile_name_check.call(\"example.txt\"\
    )", "  #fill your code here\nend", "  if file_name.length > 12 || file_name.length\
    \ < 7\n    return \"No\"\n  end\n  if file_name.match(/^[a-zA-Z]{1}[a-zA-Z0-9]*\\\
    .[tde][xl][te]{2}$/)\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend",
  "\tcondition_1 = file_name.count(\"0-9\") <= 3\n\tcondition_2 = file_name.count(\"\
    .\") == 1\n\tcondition_3 = !file_name.split(\".\").first.empty? && file_name.split(\"\
    .\").first =~ /[a-zA-Z]/\n\tcondition_4 = [\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\").last)\n\tcondition_1 && condition_2 && condition_3 && condition_4 ? \"Yes\"\
    \ : \"No\"\nend", "  (file_name =~ /^[a-zA-Z]\\w*\\.txt$|^[a-zA-Z]\\w*\\.exe$|^[a-zA-Z]\\\
    w*\\.dll$/) ? \"Yes\" : \"No\"\nend", "  # Your code here\nend", "\t# write your\
    \ code here\n\tparts = file_name.split(\".\")\n\ta = parts[0]\n\tb = parts[1]\n\
    \tif b=='txt' || b=='exe' || b=='dll'\n\t\tif a.length == 0\n\t\t\treturn \"No\"\
    \n\t\tend\n\t\tif a.length == 1\n\t\t\tif a.ord < 97 || a.ord > 122\n\t\t\t\t\
    return \"No\"\n\t\t\tend\n\t\telse\n\t\t\tif a[0].ord < 97 || a[0].ord > 122\n\
    \t\t\t\treturn \"No\"\n\t\t\tend\n\t\t\tfor i in 1..a.length-1\n\t\t\t\tif a[i].ord\
    \ < 48 || a[i].ord > 57\n\t\t\t\t\treturn \"No\"\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\telse\n\t\treturn \"No\"\n\tend\n\t\"Yes\"\nend", "  # YOUR CODE HERE\n\
    end", "  if file_name.scan(/\\d/).length > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\\
    ./).length != 1\n    return \"No\"\n  end\n  parts = file_name.split(\".\")\n\
    \  if parts[0].length == 0\n    return \"No\"\n  end\n  if !parts[0].match(/^[a-zA-Z]/)\n\
    \    return \"No\"\n  end\n  if ![\"txt\", \"exe\", \"dll\"].include?(parts[1])\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "\tif (file_name =~ /[^0-9]{1}[^\\\
    .]{1}\\./ )\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "   \
    \ pattern = /^[a-zA-Z]{1}[a-zA-Z0-9]{1,2}\\.(txt|exe|dll)$/\n    if pattern.match(file_name)\
    \ == nil\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend",
  "\textensions = ['txt', 'exe', 'dll']\n\tfile_name = file_name.split('.')\n\tfile_name[0]\
    \ = file_name[0].gsub(/[0-9]/, '')\n\tif (file_name.length == 2 && file_name[0]\
    \ =~ /[A-Za-z]/ && file_name[0].length > 0 && extensions.include?(file_name[1]))\n\
    \t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.count(\"a-zA-Z\") < 1\n    return \"No\"\n  elsif\
    \ file_name.count(\".\").nil?\n    return \"No\"\n  else\n    return \"Yes\"\n\
    \  end\nend", "\tif file_name.scan(/\\d/).length > 3\n\t\treturn \"No\"\n\tend\n\
    \tif !(file_name.scan(/\\./).length == 1)\n\t\treturn \"No\"\n\tend\n\tif file_name.split(\"\
    .\").first.empty?\n\t\treturn \"No\"\n\tend\n\tif !(file_name.split(\".\").first\
    \ =~ /[a-zA-Z]/)\n\t\treturn \"No\"\n\tend\n\tif file_name.split(\".\").last !=\
    \ \"txt\" && file_name.split(\".\").last != \"exe\" && file_name.split(\".\").last\
    \ != \"dll\"\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend\nfile_name_check\
    \ = lambda { |file_name| file_name_check(file_name) }", "  if file_name =~ /[0-9]{4}/\
    \ or file_name =~ /[A-Z]{2,}/ \n    \"No\"\n  elsif file_name =~ /[a-z]+\\.[a-z]{3}/\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  file_name =~ /^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/ ? \"Yes\" : \"No\"\nend", "  return \"No\" if file_name =~ /[^\\\
    w\\.]/\n  return \"No\" if file_name =~ /\\d{4,}/\n  return \"No\" if file_name.split('.').size\
    \ != 2\n  return \"No\" if file_name.split('.').first =~ /^\\d/\n  return \"No\"\
    \ if file_name.split('.').last !~ /^(txt|exe|dll)$/\n  \"Yes\"\nend", "  # file_name\
    \ = file_name.split('.')\n  # if file_name.length == 2 && file_name[0].length\
    \ != 0 && /[a-zA-Z]+/.match(file_name[0]) && /[0-9]{3,}/.match(file_name[0]) ==\
    \ nil && /[a-zA-Z]+/.match(file_name[1])\n  #   puts \"Yes\"\n  # else\n  #  \
    \ puts \"No\"\n  # end\n  if file_name.count('.') == 1 && file_name.count('.')\
    \ != 0 && file_name[0] =~ /[a-zA-Z]/ && file_name[-3..-1] =~ /[txtexe]+/ && file_name.count('0-9')\
    \ < 4\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend", "  count = 0\n\
    \  dot_count = 0\n  dot_index = 0\n  flag = true\n  (0..file_name.length - 1).each\
    \ do |i|\n    if file_name[i] >= '0' && file_name[i] <= '9'\n      count += 1\n\
    \    end\n    if file_name[i] == '.'\n      dot_count += 1\n      dot_index =\
    \ i\n    end\n  end\n  if count > 3\n    flag = false\n  end\n  if dot_count !=\
    \ 1\n    flag = false\n  end\n  if (file_name[0] < 'a' || file_name[0] > 'z')\
    \ && (file_name[0] < 'A' || file_name[0] > 'Z')\n    flag = false\n  end\n  if\
    \ file_name[0..dot_index - 1].length == 0\n    flag = false\n  end\n  if file_name[dot_index\
    \ + 1..file_name.length - 1] != 'txt' && file_name[dot_index + 1..file_name.length\
    \ - 1] != 'exe' && file_name[dot_index + 1..file_name.length - 1] != 'dll'\n \
    \   flag = false\n  end\n  if flag\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  checker = lambda { |string| string[0][/[a-zA-Z]/] != nil and\
    \ \n                               string[1].to_i.to_s == string[1] and\n    \
    \                           string[1].length <= 3 and\n                      \
    \         string[2][/txt|exe|dll/] != nil }\n  return \"Yes\" if file_name.count('.')\
    \ == 1 and checker.call(file_name.split('.'))\n  return \"No\"\nend", "  if /\\\
    D{1}.*\\.{1}txt$|^[a-zA-Z]*\\.{1}txt$|^[a-zA-Z]*\\.{1}exe$|^[a-zA-Z]*\\.{1}dll$/.match(file_name)\n\
    \    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend\nfile_name_check.call(\"\
    example.txt\")", "  # TODO : your code here\nend", "\tif file_name[/^[A-Za-z][A-Za-z0-9]*\\\
    .[A-Za-z]{3}$/]\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", " \
    \ return \"No\" if /\\d/.match(file_name)\n  return \"No\" if /\\A[a-zA-Z]/.match(file_name)\n\
    \  return \"No\" if /\\A[a-zA-Z]\\.[a-zA-Z]\\z/.match(file_name)\n  return \"\
    No\" if /\\A[a-zA-Z][a-zA-Z]\\.[a-zA-Z]\\z/.match(file_name)\n  return \"No\"\
    \ if /\\A[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z]\\z/.match(file_name)\n  return \"\
    No\" if /\\A[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z]\\z/.match(file_name)\n\
    \  return \"No\" if /\\A[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z]\\\
    z/.match(file_name)\n  return \"No\" if /\\A[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z]\\z/.match(file_name)\n  return \"No\" if /\\A[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z]\\z/.match(file_name)\n  return \"No\" if /\\A[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-", "  if file_name.match(/^[a-zA-Z]+[a-zA-Z0-9]*\\.[a-zA-Z]{3}$/)\n    return\
    \ \"Yes\"\n  else\n    return \"No\"\n  end\nend", "  # Write your code here\n\
    end", "  count = 0\n  arr = file_name.split(\".\")\n  if (arr[0].match(/[^0-9]/))\
    \ == nil\n    return \"No\"\n  elsif arr.length != 2\n    return \"No\"\n  elsif\
    \ arr[0].length == 0\n    return \"No\"\n  elsif (arr[0].match(/[a-zA-Z]/)) ==\
    \ nil\n    return \"No\"\n  else\n    arr[0].chars.each do |ch|\n      if ch.match(/[0-9]/)\n\
    \        count += 1\n      end\n    end\n    if count > 3\n      return \"No\"\
    \n    end\n  end\n  if arr[1] == \"txt\" || arr[1] == \"exe\" || arr[1] == \"\
    dll\"\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", "  if file_name.count(\"\
    0-9\") > 3 || file_name.count(\".\") != 1 || file_name.split(\".\").first[/[a-zA-Z]/].nil?\
    \ || ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\".\").last)\n    \"\
    No\"\n  else\n    \"Yes\"\n  end\nend", "    match_data = file_name.match(/^[a-zA-Z][^0-9]+\\\
    .(txt|exe|dll)$/)\n    if match_data.nil?\n        return \"No\"\n    else\n \
    \       return \"Yes\"\n    end\nend", "  if file_name.match(/^[a-zA-Z]{1}([0-9]{0,3})?\\\
    .[txt|exe|dll]{3}$/)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", "\tpattern\
    \ = /^[a-zA-Z]\\w*\\.(txt|exe|dll)$/\n\tif pattern.match(file_name) == nil\n\t\
    \t\"No\"\n\telse\n\t\t\"Yes\"\n\tend\nend", "  # TODO: Implement this function\n\
    end", "  raise NotImplementedError\nend", "  file_name_reg = /^([A-Za-z]{1,})([0-9]{0,3})(\\\
    .[A-Za-z]{1,3})$/\n  file_name_match = file_name_reg.match(file_name)\n  if file_name_match\
    \ != nil\n    if file_name_match[3] == \".txt\" || file_name_match[3] == \".exe\"\
    \ || file_name_match[3] == \".dll\"\n      return \"Yes\"\n    end\n  end\n  return\
    \ \"No\"\nend", "  # TODO: implement this function\nend", "  if file_name.count(\"\
    0-9\") <= 3 &&\n     file_name.count(\".\") == 1 &&\n     file_name.split(\".\"\
    ).length == 2 &&\n     file_name.split(\".\")[0].length > 0 &&\n     file_name.split(\"\
    .\")[0][0].match(\"[a-zA-Z]\") &&\n     [\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\")[1])\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  return \"No\" if /[0-9]/\
    \ =~ file_name && file_name.count(\"0-9\") > 3\n  return \"No\" if file_name.count(\"\
    .\") != 1\n  return \"No\" if !/[a-zA-Z]/ =~ file_name[0]\n  return \"No\" if\
    \ ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\".\").last)\n  \"Yes\"\
    \nend", "\t# Write your code here\n\tif file_name.count(\"0-9\") <= 3 && file_name.count(\"\
    .\") == 1 && file_name.split(\".\")[0].split(\" \").size == 1 && (file_name.split(\"\
    .\")[1] == \"txt\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\")\n\t\t\"Yes\"\n\telse\n\t\t\"No\"\n\tend\nend", "  # Write\
    \ your code here\nend", "  # Your code goes here\nend", "  return \"No\" if file_name.size\
    \ > 10 || file_name.size < 4\n  return \"No\" if file_name.size - file_name.gsub(/[^0-9]/,\
    \ '').size > 3\n  return \"No\" if file_name.count('.') != 1\n  return \"No\"\
    \ if file_name.split('.')[0].size < 1\n  return \"No\" if file_name.split('.')[0].match(/[^A-Za-z0-9]/)\n\
    \  return \"No\" if !['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n\
    \  \"Yes\"\nend", "  if file_name.count(\"0-9\") <= 3 && file_name.count(\".\"\
    ) == 1 && \n      file_name.split(\".\").first.match(/[a-zA-Z]/) &&\n      ['txt',\
    \ 'exe', 'dll'].include?(file_name.split(\".\").last)\n    \"Yes\"\n  else\n \
    \   \"No\"\n  end\nend", "  # Your code here\nend", "  unless file_name =~ /^[a-zA-Z][\\\
    w\\.\\-]+$/\n    return \"No\"\n  end\n  unless file_name.scan(/\\d/).size <=\
    \ 3\n    return \"No\"\n  end\n  if file_name.scan(/\\./).size != 1\n    return\
    \ \"No\"\n  end\n  extension = file_name.split(\".\").last\n  if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\"\n    return \"Yes\"\n\
    \  else\n    return \"No\"\n  end\nend", "\tif !file_name.match(/^([a-zA-Z]\\\
    d*)(\\.(txt|exe|dll))$/)\n\t\tputs \"No\"\n\telse\n\t\tputs \"Yes\"\n\tend\nend",
  "  file_name_split = file_name.split(\".\")\n  file_name_type = file_name_split[1]\n\
    \  file_name_name = file_name_split[0]\n  file_name_name_split = file_name_name.split(\"\
    \")\n  if file_name_name_split.length >= 1\n    file_name_name_split.each_with_index\
    \ do |letter, index|\n      if letter =~ /[0-9]/\n        if index == 0\n    \
    \      return \"No\"\n        elsif index >= 1\n          if file_name_name_split[index\
    \ - 1] =~ /[0-9]/\n            return \"No\"\n          else\n            next\n\
    \          end\n        end\n      else\n        next\n      end\n    end\n  else\n\
    \    return \"No\"\n  end\n  if file_name_type =~ /txt|exe|dll/\n    return \"\
    Yes\"\n  else\n    return \"No\"\n  end\nend", "    file_name = file_name.split('.')\n\
    \    if file_name.length != 2\n        return \"No\"\n    end\n    if file_name[0].scan(/\\\
    d/).length > 3\n        return \"No\"\n    end\n    if (file_name[0].split('')[0]\
    \ !~ /[a-zA-Z]/)\n        return \"No\"\n    end\n    if (file_name[1] !~ /txt|exe|dll/)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "  ext = %w[txt exe\
    \ dll]\n  if file_name.scan(/\\d/).size > 3 || file_name.scan(/\\./).size != 1\n\
    \    return \"No\"\n  end\n  if file_name.split(\".\").first.empty? || file_name.split(\"\
    .\").first =~ /[^a-zA-Z]/\n    return \"No\"\n  end\n  if ext.include?(file_name.split(\"\
    .\").last)\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend\nputs file_name_check(\"\
    example.txt\")\nputs file_name_check(\"1example.dll\")", "    # Write your code\
    \ here\nend", "  file_name =~ /^[a-zA-Z][a-zA-Z0-9]{1,2}\\.(txt|exe|dll)$/ ? \"\
    Yes\" : \"No\"\nend\nfile_name_check(\"example.txt\")", "  match = file_name.match(/^([A-Za-z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)$/)\n  return \"Yes\" if match\n  \"No\"\nend", "  regexp = /^[a-zA-Z]\\\
    w{0,2}\\.[a-zA-Z]{3}$/\n  if file_name =~ regexp\n    puts \"Yes\"\n  else\n \
    \   puts \"No\"\n  end\nend", "  if !(file_name =~ /[0-9]{4}/) && file_name =~\
    \ /[a-zA-Z]/ && file_name =~ /.\\.txt$|.\\.exe$|.\\.dll$/\n    return \"Yes\"\n\
    \  else\n    return \"No\"\n  end\nend", "  if file_name =~ /^([a-zA-Z]{1}[a-zA-Z0-9]{0,})\\\
    .txt$/\n    \"Yes\"\n  elsif file_name =~ /^([a-zA-Z]{1}[a-zA-Z0-9]{0,})\\.exe$/\n\
    \    \"Yes\"\n  elsif file_name =~ /^([a-zA-Z]{1}[a-zA-Z0-9]{0,})\\.dll$/\n  \
    \  \"Yes\"\n  else\n    \"No\"\n  end\nend", "  if (file_name.match(/\\d{4,}/))\n\
    \    return \"No\"\n  end\n  if (file_name.count(\".\") != 1)\n    return \"No\"\
    \n  end\n  filename_arr = file_name.split(\".\")\n  if (filename_arr[0].length\
    \ < 1)\n    return \"No\"\n  end\n  if !(filename_arr[0][0].match(/[a-zA-Z]/))\n\
    \    return \"No\"\n  end\n  if (!(filename_arr[1] == \"txt\" || filename_arr[1]\
    \ == \"exe\" || filename_arr[1] == \"dll\"))\n    return \"No\"\n  end\n  return\
    \ \"Yes\"\nend", "    if file_name =~ /^[a-zA-Z]+[0-9]{0,3}\\.txt$|^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$|^[a-zA-Z]+[0-9]{0,3}\\.dll$/\n        \"Yes\"\n    else\n        \"No\"\n\
    \    end\nend\nfile_name_check(\"example.txt\")\nfile_name_check(\"1example.dll\"\
    )\nfile_name_check(\"1example.exe\")\nfile_name_check(\"1example.txt\")\nfile_name_check(\"\
    example.txt\")\nfile_name_check(\"example123.txt\")\nfile_name_check(\"example123.dll\"\
    )\nfile_name_check(\"example123.exe\")\nfile_name_check(\"example123.exe2\")\n\
    file_name_check(\"example123.text\")\nfile_name_check(\"example123.txt1\")\nfile_name_check(\"\
    example123.txt2\")", end, "\tif file_name.count(\"0-9\") > 3\n\t\treturn \"No\"\
    \n\telsif file_name.count(\".\") != 1\n\t\treturn \"No\"\n\telsif file_name.split(\"\
    .\")[0].empty?\n\t\treturn \"No\"\n\telsif !(file_name.split(\".\")[0].start_with?(\"\
    a-z\", \"A-Z\"))\n\t\treturn \"No\"\n\telsif !([\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\")[1]))\n\t\treturn \"No\"\n\telse\n\t\treturn \"Yes\"\n\tend\nend", "  file_name_pattern\
    \ = /^[a-zA-Z][^0-9]{0,3}\\.(txt|exe|dll)$/\n  if file_name_pattern.match(file_name)\n\
    \    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", "  return 'No' if\
    \ file_name.length > 15\n  return 'No' if !file_name.include?('.')\n  return 'No'\
    \ if file_name[0].to_i != 0\n  return 'No' if file_name.count('0-9') > 3\n  substring\
    \ = file_name.split('.')\n  return 'No' if substring[0].empty?\n  return 'No'\
    \ if substring[1] != 'txt' && substring[1] != 'exe' && substring[1] != 'dll'\n\
    \  'Yes'\nend", "  return \"No\" if file_name.count(\"0123456789\") > 3\n  return\
    \ \"No\" if file_name.count(\".\") != 1\n  return \"No\" if file_name.split(\"\
    .\").first.empty?\n  return \"No\" if !file_name.split(\".\").first[0].match(/[a-zA-Z]/)\n\
    \  return \"No\" if ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\".\"\
    ).last)\n  \"Yes\"\nend", "  file_name_pat = /\\A[a-zA-Z]\\w*\\.(txt|exe|dll)\\\
    z/\n  num_pat = /\\d/\n  return \"No\" if file_name_pat.match(file_name) == nil\n\
    \  return \"No\" if file_name.scan(num_pat).length > 3\n  return \"Yes\"\nend",
  "  file_name.match?(/^([a-zA-Z][a-zA-Z0-9]*)(?<!\\d{4})\\.(txt|exe|dll)$/) ? \"\
    Yes\" : \"No\"\nend", "  # write your code here\nend", "  # write your code here\n\
    end", "  if file_name =~ /^[a-zA-Z][a-zA-Z0-9]*\\.\\w{3}$/ && file_name =~ /^[^0-9]*[0-9]{3}[^0-9]*$/\n\
    \    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", "  # WRITE YOUR CODE\
    \ HERE\nend", "  raise NotImplementedError\nend", "  file_name =~ /^\\D[\\w]{1,10}\\\
    .txt$|^\\D[\\w]{1,10}\\.exe$|^\\D[\\w]{1,10}\\.dll$/ ? 'Yes' : 'No'\nend", " \
    \ # your code here\nend", "  parts = file_name.split(\".\")\n  return \"No\" if\
    \ parts.size != 2 || parts[0].empty? || parts[1].empty? ||\n      parts[0] =~\
    \ /[0-9]{4}/ || parts[0] !~ /^[a-zA-Z]/ || \n      !([\"txt\", \"exe\", \"dll\"\
    ].include? parts[1])\n  \"Yes\"\nend", "\tif file_name.count(\"0123456789\") >\
    \ 3\n\t\treturn \"No\"\n\tend\n\tif file_name.count(\".\") != 1\n\t\treturn \"\
    No\"\n\tend\n\tsubstring = file_name.split(\".\")\n\tif substring[0].count(\"\
    a-zA-Z\") == 0 or substring[0].count(\"a-zA-Z\") != substring[0].length\n\t\t\
    return \"No\"\n\tend\n\tif !(substring[1] == \"txt\" or substring[1] == \"exe\"\
    \ or substring[1] == \"dll\")\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend",
  "  # @type file_name: String\n  res = file_name.split(\".\")\n  if res.length !=\
    \ 2\n    return \"No\"\n  end\n  if !res[0].match(/[a-zA-Z][a-zA-Z0-9]*[0-9]{0,3}/)\n\
    \    return \"No\"\n  end\n  if !(res[1] == \"txt\" || res[1] == \"exe\" || res[1]\
    \ == \"dll\")\n    return \"No\"\n  end\n  return \"Yes\"\nend", "\tcount = 0\n\
    \tindex_of_dot = nil\n\tfile_name.each_char do |x|\n\t\tif x.to_i.to_s == x\n\t\
    \t\tcount += 1\n\t\tend\n\t\tif x == \".\"\n\t\t\tindex_of_dot = file_name.index(x)\n\
    \t\tend\n\tend\n\tbefore_dot = file_name[0...index_of_dot]\n\tafter_dot = file_name[index_of_dot\
    \ + 1..-1]\n\tif count <= 3 && before_dot.to_i.to_s != before_dot && (before_dot.to_i.to_s\
    \ == before_dot || before_dot.match?(/[a-z]/i)) && (after_dot == \"txt\" || after_dot\
    \ == \"exe\" || after_dot == \"dll\")\n\t\treturn \"Yes\"\n\telse\n\t\treturn\
    \ \"No\"\n\tend\nend", "  parts = file_name.split(\".\")\n  return \"No\" if parts.size\
    \ != 2\n  return \"No\" if parts[0] =~ /\\d/\n  return \"No\" if parts[0] =~ /^[a-zA-Z]/\n\
    \  return \"No\" if parts[1] !~ /^(txt|exe|dll)$/\n  \"Yes\"\nend", "  if file_name\
    \ =~ /^\\D+\\.\\w{3}$/\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  # Add your code here.\n  # You can add additional methods/functions here.\nend",
  "  name, ext = file_name.split('.')\n  return 'No' if name.count('0-9') > 3 || name.empty?\
    \ || !/[a-zA-Z]/.match(name) || \n  !/^(txt|exe|dll)$/.match(ext)\n  'Yes'\nend",
  "  # TODO: Write your solution here\nend", "  return \"No\" if file_name =~ /[0-9]{4}/\n\
    \  return \"No\" if file_name =~ /^.*\\..{4}$/\n  return \"No\" if file_name =~\
    \ /[^A-Za-z]/\n  if file_name =~ /^[A-Za-z]+\\.(txt|exe|dll)$/\n    return \"\
    Yes\"\n  else\n    return \"No\"\n  end\nend", "  m = file_name.match(/^([a-zA-Z]\\\
    w{0,99})\\.(txt|exe|dll)$/)\n  if m and m[1].count('0-9') < 4\n    'Yes'\n  else\n\
    \    'No'\n  end\nend", "    parts = file_name.split(\".\")\n    return \"No\"\
    \ if parts.size != 2\n    return \"No\" if parts[0].size < 1\n    return \"No\"\
    \ if parts[0].count(\"0-9\") > 3\n    return \"No\" if parts[0][0] < \"a\" or\
    \ parts[0][0] > \"z\"\n    return \"No\" if parts[0][0] < \"A\" or parts[0][0]\
    \ > \"Z\"\n    return \"No\" if parts[1] != \"txt\" and parts[1] != \"exe\" and\
    \ parts[1] != \"dll\"\n    return \"Yes\"\nend", "\tvalid_extentions = ['txt',\
    \ 'exe', 'dll']\n\ta = file_name.match(/\\A[a-zA-Z]\\w*(.txt|.exe|.dll)\\z/)\n\
    \tif (a != nil)\n\t\text = a[1]\n\t\text = ext[1..-1]\n\t\tif (valid_extentions.include?(ext))\n\
    \t\t\treturn \"Yes\"\n\t\tend\n\tend\n\treturn \"No\"\nend", "\t# FIXME\nend",
  "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\"\
    .\") != 1\n    return \"No\"\n  else\n    file_name = file_name.split(\".\")\n\
    \    if file_name[0].empty? || !(file_name[0].count(\"a-zA-Z\") != 0)\n      return\
    \ \"No\"\n    elsif !([\"txt\", \"exe\", \"dll\"].include? file_name[1])\n   \
    \   return \"No\"\n    else\n      return \"Yes\"\n    end\n  end\nend", "  if\
    \ file_name =~ /^[a-zA-Z]{1}[^\\.]{1,}\\.{1}(txt|exe|dll)$/\n    'Yes'\n  else\n\
    \    'No'\n  end\nend", "  if file_name.length > 3 and file_name.include? \".\"\
    \ and file_name[/^[a-zA-Z]/] and \n    file_name[/\\..+$/] == \".txt\" or file_name[/\\\
    ..+$/] == \".exe\" or file_name[/\\..+$/] == \".dll\"\n    \"Yes\"\n  else\n \
    \   \"No\"\n  end\nend", "  return \"No\" if file_name.scan(/\\d/).size > 3\n\
    \  return \"No\" if file_name.scan(/\\./).size != 1\n  return \"No\" if file_name[0]\
    \ =~ /[^a-zA-Z]/\n  return \"No\" if file_name.scan(/\\./)[0].size == 0\n  return\
    \ \"No\" if file_name.split(\".\")[-1] !~ /txt|exe|dll/\n  \"Yes\"\nend", "  if\
    \ file_name.match(/^[a-zA-Z]+[\\d]{0,3}\\.dll$/)\n    return \"Yes\"\n  elsif\
    \ file_name.match(/^[a-zA-Z]+[\\d]{0,3}\\.txt$/)\n    return \"Yes\"\n  elsif\
    \ file_name.match(/^[a-zA-Z]+[\\d]{0,3}\\.exe$/)\n    return \"Yes\"\n  else\n\
    \    return \"No\"\n  end\nend", "  ext = [\"txt\", \"exe\", \"dll\"]\n  if !file_name.match(/^[a-zA-Z]/).nil?\
    \ && !file_name.match(/\\..+$/).nil?\n    if ext.include?(file_name.match(/\\\
    ..+$/)[0][1..-1]) && !file_name.match(/\\d/).nil?\n      return \"Yes\"\n    end\n\
    \  end\n  return \"No\"\nend", "  if file_name[-3..-1] != 'txt' and file_name[-3..-1]\
    \ != 'exe' and file_name[-3..-1] != 'dll'\n    return \"No\"\n  end\n  if file_name.count('.')\
    \ != 1\n    return \"No\"\n  end\n  if file_name[0] =~ /\\d/\n    return \"No\"\
    \n  end\n  if file_name[0..file_name.index('.')].count('0'..'9') > 3\n    return\
    \ \"No\"\n  end\n  return \"Yes\"\nend", "  number_of_dots = file_name.count(\"\
    .\")\n  dot_index = file_name.index(\".\")\n  return \"No\" if number_of_dots\
    \ != 1\n  return \"No\" if file_name[0..dot_index - 1].scan(/[a-zA-Z]/).length\
    \ == 0\n  return \"No\" if file_name[dot_index + 1..-1].scan(/[a-zA-Z]/).length\
    \ == 0\n  return \"No\" if file_name.scan(/[0-9]/).length > 3\n  return \"No\"\
    \ if [\"txt\", \"exe\", \"dll\"].include?(file_name[dot_index + 1..-1]) == false\n\
    \  \"Yes\"\nend", "  pattern = /[a-z]+.[a-z]/\n  pattern =~ file_name ? 'Yes'\
    \ : 'No'\nend", "  match = file_name.match(/^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}(\\.txt|\\\
    .exe|\\.dll)$/)\n  if match\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", " \
    \ if file_name[0].match(/[a-zA-Z]/) && file_name.count(\".\") == 1 && !file_name.match(/[0-9]{4}/)\n\
    \    if file_name.split(\".\").last == \"txt\" || file_name.split(\".\").last\
    \ == \"exe\" || file_name.split(\".\").last == \"dll\"\n      return \"Yes\"\n\
    \    end\n  end\n  return \"No\"\nend", "\tvalid_file_name = \"\"\n\tif file_name.match(/^[A-Za-z]/).nil?\
    \ || file_name.match(/^[A-Za-z]/).to_s == \"\"\n\t\tvalid_file_name = \"No\"\n\
    \telsif file_name.match(/[\\.]{1}/).nil? || file_name.match(/[\\.]{1}/).to_s ==\
    \ \"\"\n\t\tvalid_file_name = \"No\"\n\telsif file_name.match(/\\d{4}/).nil? ||\
    \ file_name.match(/\\d{4}/).to_s == \"\"\n\t\tvalid_file_name = \"No\"\n\telsif\
    \ file_name.match(/[\\w]{1,}\\.[txt|exe|dll]/).nil? || file_name.match(/[\\w]{1,}\\\
    .[txt|exe|dll]/).to_s == \"\"\n\t\tvalid_file_name = \"No\"\n\telse\n\t\tvalid_file_name\
    \ = \"Yes\"\n\tend\n\treturn valid_file_name\nend", "  parts = file_name.split(\"\
    .\")\n  if parts.size != 2\n    return \"No\"\n  end\n  name = parts[0]\n  extension\
    \ = parts[1]\n  if name =~ /\\d{4}/\n    return \"No\"\n  end\n  if name =~ /^[a-zA-Z]/\
    \ && extension =~ /^(txt|exe|dll)$/\n    return \"Yes\"\n  end\n  return \"No\"\
    \nend", "  extension = ['txt', 'exe', 'dll']\n  result = 'No'\n  if file_name.count('.')\
    \ == 1\n    fname = file_name.split('.')\n    result = 'Yes' if fname[0].count('0-9')\
    \ <= 3 and\n      fname[0].count('a-zA-Z') == 1 and\n      extension.include?(fname[1])\n\
    \  end\n  result\nend", "    return 'No' if file_name.count('0-9') > 3\n    return\
    \ 'No' if file_name.count('.') != 1\n    suffix = file_name.split('.').last\n\
    \    return 'No' if ['txt', 'exe', 'dll'].index(suffix).nil?\n    return 'No'\
    \ if file_name[0] =~ /[^a-zA-Z]/\n    'Yes'\nend", "  if (file_name.scan(/\\d/).size\
    \ > 3)\n    return \"No\"\n  end\n  if (file_name.scan(/\\./).size != 1)\n   \
    \ return \"No\"\n  end\n  if (file_name.split('.')[0].empty? || !(file_name.split('.')[0]\
    \ =~ /^[a-zA-Z]/))\n    return \"No\"\n  end\n  if (file_name.split('.')[1] !=\
    \ \"txt\" && file_name.split('.')[1] != \"exe\" && file_name.split('.')[1] !=\
    \ \"dll\")\n    return \"No\"\n  end\n  return \"Yes\"\nend", "  if file_name.scan(/\\\
    d/).length > 3\n    return \"No\"\n  elsif file_name.count(\".\") > 1\n    return\
    \ \"No\"\n  elsif file_name.count(\".\") < 1\n    return \"No\"\n  elsif !(file_name.split(\"\
    .\")[0] =~ /^[a-zA-Z]+$/)\n    return \"No\"\n  elsif !([\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\")[1]))\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend", "  begin\n    file_name = file_name.match(/[a-zA-Z]+[0-9]{0,3}\\\
    .txt|exe|dll/)\n    file_name.to_s == '' ? 'No' : 'Yes'\n  rescue\n    'No'\n\
    \  end\nend", "  # if file_name.count(\"0-9\") > 3\n  #   return \"No\"\n  # end\n\
    \  if file_name.count(\".\") != 1\n    return \"No\"\n  end\n  if file_name[0]\
    \ !~ /[a-zA-Z]/\n    return \"No\"\n  end\n  if file_name.count(\"0-9\") > 3\n\
    \    return \"No\"\n  end\n  if file_name.split(\".\")[1] != \"txt\" and file_name.split(\"\
    .\")[1] != \"exe\" and file_name.split(\".\")[1] != \"dll\"\n    return \"No\"\
    \n  end\n  return \"Yes\"\nend", "  name_check = file_name.match /^[a-zA-Z]+\\\
    d{0,3}\\.\\w+$/\n  if name_check.nil?\n    return \"No\"\n  else\n    name_check[0].match\
    \ /(\\d{0,3})\\.(\\w+)/\n    if $1.length > 3\n      return \"No\"\n    elsif\
    \ $2 != \"txt\" && $2 != \"exe\" && $2 != \"dll\"\n      return \"No\"\n    else\n\
    \      return \"Yes\"\n    end\n  end\nend", "  file_name =~ /^[a-zA-Z]\\w{0,3}\\\
    .txt$|^[a-zA-Z]\\w{0,3}\\.exe$|^[a-zA-Z]\\w{0,3}\\.dll$/ ? 'Yes' : 'No'\nend",
  "  name_parts = file_name.split('.')\n  first_part = name_parts[0]\n  last_part\
    \ = name_parts[1]\n  return 'No' if name_parts.length != 2 || first_part.length\
    \ == 0 || first_part[0] !~ /[[:alpha:]]/ ||\n    first_part =~ /\\d/ || first_part\
    \ =~ /^[0-9]{3,}$/ || !last_part.match(/txt|exe|dll/)\n  'Yes'\nend", "  file_name_check\
    \ = \n    file_name.count('0-9') <= 3 && \n    file_name.count('.') == 1 && \n\
    \    file_name.count('.') != 0 && \n    file_name.count('a-zA-Z') != 0 && \n \
    \   ['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n  file_name_check\
    \ ? 'Yes' : 'No'\nend", "  return 'No' if file_name.count('0-9') > 3\n  return\
    \ 'No' if file_name.count('.') != 1\n  return 'No' if file_name.split('.')[0].count('A-Za-z')\
    \ == 0\n  return 'No' if file_name.split('.')[1] != 'txt' && file_name.split('.')[1]\
    \ != 'exe' && file_name.split('.')[1] != 'dll'\n  'Yes'\nend", "  digits = 0\n\
    \  file_name.each_char do |char|\n    if char =~ /\\d/\n      digits += 1\n  \
    \  end\n  end\n  return \"No\" if digits > 3\n  file_name.split(\".\").length\
    \ != 2 ? \"No\" : \"Yes\"\nend", "    return 'No' if file_name.scan(/\\d/).size\
    \ > 3\n    return 'No' if file_name.scan(/\\./).size != 1\n    name, ext = file_name.split('.')\n\
    \    return 'No' if name.empty?\n    return 'No' if !name[0].match(/[a-zA-Z]/)\n\
    \    return 'No' if !['txt', 'exe', 'dll'].include?(ext)\n    'Yes'\nend", " \
    \ file_name =~ /[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)/\nend", "  if file_name.scan(/\\\
    d/).length <= 3\n    if file_name.scan(/\\./).length == 1\n      name_of_file\
    \ = file_name.split(\".\")\n      if (/[a-zA-Z]/.match(name_of_file[0])) && (name_of_file[1]\
    \ == \"txt\" || name_of_file[1] == \"exe\" || name_of_file[1] == \"dll\")\n  \
    \      return \"Yes\"\n      end\n    end\n  end\n  return \"No\"\nend", "  file_name\
    \ = file_name.split(\".\")\n  if file_name.length != 2\n    \"No\"\n  elsif file_name[0].gsub(/[^0-9]/,\
    \ '').length > 3\n    \"No\"\n  elsif file_name[0].match(/^[[:alpha:]]/).nil?\n\
    \    \"No\"\n  elsif [\"txt\", \"exe\", \"dll\"].include?(file_name[1])\n    \"\
    Yes\"\n  else\n    \"No\"\n  end\nend", "  valid_exts = ['txt', 'exe', 'dll']\n\
    \  if file_name.scan(/\\d/).length > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\\
    ./).length != 1\n    return \"No\"\n  end\n  parts = file_name.split('.')\n  if\
    \ !parts[0].match(/^[a-zA-Z]/)\n    return \"No\"\n  end\n  if !valid_exts.include?(parts[1])\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "    sub_strings = file_name.split(\"\
    .\")\n    return \"No\" if sub_strings.length != 2 || sub_strings[0].length <\
    \ 1\n    return \"No\" if sub_strings[0].scan(/[0-9]/).length > 3 ||\n       \
    \             sub_strings[0].scan(/[^a-zA-Z0-9]/).length > 0\n    return \"No\"\
    \ if sub_strings[1] != \"txt\" && sub_strings[1] != \"exe\" &&\n             \
    \       sub_strings[1] != \"dll\"\n    return \"Yes\"\nend", "  file_name.downcase!\n\
    \  if file_name[/^[a-z][a-z\\d]*\\.(txt|exe|dll)$/] && file_name[/\\d{4}/].nil?\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  file_name =~ /\\A[a-zA-Z]\\\
    w*\\.(txt|exe|dll)\\z/ ? \"Yes\" : \"No\"\nend", "  # Write your code here\n \
    \ # To print results to the standard output you can use puts\n  # Example: puts\
    \ \"Hello world!\"\nend", "  # your code here\nend", "    return \"No\" if file_name\
    \ =~ /\\d{4}/\n    return \"No\" if file_name.scan(/\\./).size != 1\n    return\
    \ \"No\" if file_name.match(/^[a-zA-Z]/).nil?\n    return \"No\" if file_name.match(/\\\
    ..*$/).to_s[1..-1] =~ /(txt|exe|dll)/\n    return \"Yes\"\nend", "  if file_name.scan(/[0-9]/).length\
    \ > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\./).length != 1\n    return\
    \ \"No\"\n  end\n  sub_string = file_name.split(\".\")\n  if sub_string[0].length\
    \ == 0 || sub_string[0].match(/[a-zA-Z]/).nil?\n    return \"No\"\n  end\n  if\
    \ sub_string[1] != \"txt\" && sub_string[1] != \"exe\" && sub_string[1] != \"\
    dll\"\n    return \"No\"\n  end\n  return \"Yes\"\nend", "    # your code here\n\
    end", "  return 'No' if file_name[/[0-9]{4}/]\n  file_name =~ /\\A[a-zA-Z][\\\
    w]+\\.(txt|exe|dll)\\z/ ? 'Yes' : 'No'\nend", "  regex = /^[a-zA-Z][a-zA-Z0-9]{1,3}\\\
    .(txt|exe|dll)$/\n  regex.match(file_name) ? \"Yes\" : \"No\"\nend", "  i = 0\n\
    \  dots = 0\n  digits = 0\n  valid_formats = [\"txt\", \"exe\", \"dll\"]\n  while\
    \ i < file_name.length\n    if file_name[i] == \".\"\n      dots += 1\n    elsif\
    \ file_name[i] =~ /\\d/\n      digits += 1\n    end\n    i += 1\n  end\n  if digits\
    \ > 3\n    return \"No\"\n  elsif dots != 1\n    return \"No\"\n  else\n    name_parts\
    \ = file_name.split(\".\")\n    if name_parts[0] == \"\" || !(name_parts[0] =~\
    \ /^[a-zA-Z]/)\n      return \"No\"\n    elsif !valid_formats.include?(name_parts[1])\n\
    \      return \"No\"\n    else\n      return \"Yes\"\n    end\n  end\nend", " \
    \ # regex pattern for checking all mentioned conditions\n  file_name_regex = /\\\
    A[a-zA-Z]\\w*\\.(txt|exe|dll)\\z/\n  # if file name matches the pattern then return\
    \ 'Yes' otherwise 'No'\n  if file_name.match?(file_name_regex)\n    \"Yes\"\n\
    \  else\n    \"No\"\n  end\nend", end, "  if file_name.count(\".\") == 1 and file_name.count(\"\
    0-9\") < 4\n    split_name = file_name.split(\".\")\n    if split_name[0] != \"\
    \" and split_name[0].count(\"0-9\") == 0 and split_name[1] == \"txt\"\n      return\
    \ \"Yes\"\n    elsif split_name[0] != \"\" and split_name[0].count(\"0-9\") ==\
    \ 0 and split_name[1] == \"exe\"\n      return \"Yes\"\n    elsif split_name[0]\
    \ != \"\" and split_name[0].count(\"0-9\") == 0 and split_name[1] == \"dll\"\n\
    \      return \"Yes\"\n    else\n      return \"No\"\n    end\n  else\n    return\
    \ \"No\"\n  end\nend", "  return false if file_name.length > 255\n  number_of_digits\
    \ = 0\n  file_name.each_char do |c|\n    number_of_digits += 1 if c =~ /[0-9]/\n\
    \    break if number_of_digits > 3\n  end\n  return false if number_of_digits\
    \ > 3\n  return false if file_name.scan(/\\./).length != 1\n  return false if\
    \ file_name.split('.')[0].empty? || file_name.split('.')[0][0] =~ /[^A-Za-z]/\n\
    \  return false if !['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n\
    \  true\nend", "  if file_name.count(\"0-9\") <= 3 && \n    file_name.count(\"\
    .\") == 1 && \n    !file_name.split(\".\").first.empty? && \n    file_name.split(\"\
    .\").first.match(/[a-zA-Z]/) && \n    file_name.split(\".\").last.match(/txt|exe|dll/)\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "    return 'No' if file_name.scan(/\\\
    d/).size > 3", "  parts = file_name.split('.')\n  if parts.size != 2\n    return\
    \ 'No'\n  end\n  if parts[0].size == 0 || parts[0].count('a-zA-Z') == 0\n    return\
    \ 'No'\n  end\n  if parts[0].count('0-9') > 3\n    return 'No'\n  end\n  extension\
    \ = parts[1]\n  if ['txt', 'exe', 'dll'].include?(extension)\n    return 'Yes'\n\
    \  end\n  return 'No'\nend", "  # code\nend", "  if file_name.length == 0\n  \
    \  return \"No\"\n  elsif \n  \tdigits = 0\n  \tfile_name.each_char do |ch|\n\
    \  \t\tif ('0'..'9').include?(ch)\n  \t\t\tdigits += 1\n  \t\tend\n  \tend\n \
    \ \tif digits > 3\n  \t\treturn \"No\"\n  \tend\n  \tdot_count = 0\n  \tfile_name.each_char\
    \ do |ch|\n  \t\tif ch == '.'\n  \t\t\tdot_count += 1\n  \t\tend\n  \tend\n  \t\
    if dot_count != 1\n  \t\treturn \"No\"\n  \tend\n  \tname = ''\n  \text = ''\n\
    \  \tfile_name.each_char do |ch|\n  \t\tif ch == '.'\n  \t\t\tbreak\n  \t\tend\n\
    \  \t\tname += ch\n  \tend\n  \tif name.length == 0\n  \t\treturn \"No\"\n  \t\
    end\n  \tif !(('a'..'z').include?(name[0].downcase) || ('A'..'Z').include?(name[0].downcase))\n\
    \  \t\treturn \"No\"\n  \tend\n  \tfile_name.each_char do |ch|\n  \t\tif ch ==\
    \ '.'\n  \t\t\tbreak\n  \t\tend\n  \t\tname += ch\n  \tend\n  \tif !(['txt', 'exe',\
    \ 'dll'].include?(ext))\n  \t\treturn \"No\"\n  \tend\n  \treturn \"Yes\"\n  end\n\
    end", "  # this variable is used to store the number of digits in the string\n\
    \  count = 0", "    p file_name\nend", "  if /\\d/.match(file_name).to_s.length\
    \ > 3\n    puts \"No\"\n  elsif /\\./.match(file_name).to_s.length != 1\n    puts\
    \ \"No\"\n  elsif !/[a-zA-Z]/.match(file_name).to_s.length != 0\n    puts \"No\"\
    \n  elsif /(\\.exe)/.match(file_name).to_s.length != 1 && /(\\.txt)/.match(file_name).to_s.length\
    \ != 1 && /(\\.dll)/.match(file_name).to_s.length != 1\n    puts \"No\"\n  else\n\
    \    puts \"Yes\"\n  end\nend", "  if file_name.count(\"0-9\") > 3\n    return\
    \ \"No\"\n  elsif file_name.count(\".\") > 1 || file_name.count(\".\") == 0\n\
    \    return \"No\"\n  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\"\
    .\").last != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"\
    No\"\n  elsif file_name.split(\".\").first.empty? || file_name.split(\".\").first.count(\"\
    a-zA-Z\") == 0\n    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", " \
    \   if /^[a-zA-Z]\\w{0,2}\\.[a-zA-Z]+$/.match(file_name)\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend", "  # write your code here\nend",
  "    if file_name =~ /(?<start_pattern>[a-zA-Z]+)(?<end_pattern>\\.txt|\\.exe|\\\
    .dll)/\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend",
  "    return \"No\" if /[^.\\w]/.match(file_name) || file_name.count(\".\") != 1\
    \ || file_name.split(\".\").map(&:size).include?(0) || /\\d{4,}/.match(file_name)\n\
    \    return \"No\" if !/[a-zA-Z]+/.match(file_name.split(\".\")[0]) || ![\"txt\"\
    , \"exe\", \"dll\"].include?(file_name.split(\".\")[1])\n    \"Yes\"\nend", " \
    \ /^[a-zA-Z]+[\\d]{0,3}\\.[txt|exe|dll]$/.match(file_name) ? \"Yes\" : \"No\"\n\
    end", "  file_name = file_name.split('.')\n  new_string = file_name[0].downcase\n\
    \  if file_name.size != 2 || new_string[0].match(/[a-z]/) == nil\n    return \"\
    No\"\n  elsif file_name[1] != \"txt\" && file_name[1] != \"exe\" && file_name[1]\
    \ != \"dll\"\n    return \"No\"\n  elsif new_string.match(/[0-9]/).to_a.size >\
    \ 3\n    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", "  # Your code\
    \ here\nend", "  number_count = 0\n  if file_name.count('.') != 1\n    return\
    \ \"No\"\n  end\n  file_name.each_char do |c|\n    if c.match(/[0-9]/)\n     \
    \ number_count += 1\n    end\n  end\n  if number_count > 3\n    return \"No\"\n\
    \  end\n  if file_name.match(/[^a-zA-Z]*\\./) == nil\n    return \"No\"\n  end\n\
    \  if file_name.match(/[a-zA-Z]*\\.([a-zA-Z]*)/)[1] != \"txt\" &&\n     file_name.match(/[a-zA-Z]*\\\
    .([a-zA-Z]*)/)[1] != \"exe\" &&\n     file_name.match(/[a-zA-Z]*\\.([a-zA-Z]*)/)[1]\
    \ != \"dll\"\n    return \"No\"\n  end\n  return \"Yes\"\nend", "  if file_name.scan(/\\\
    d/).size > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\./).size != 1\n\
    \    return \"No\"\n  end\n  if file_name.split('.')[0].size == 0\n    return\
    \ \"No\"\n  end\n  if !(('a'..'z').to_a + ('A'..'Z').to_a).include?(file_name.split('.')[0][0])\n\
    \    return \"No\"\n  end\n  if !(['txt', 'exe', 'dll'].include?(file_name.split('.')[1]))\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "  regex = /[a-zA-Z]+[.][txt|exe|dll]/\n\
    \  if regex.match(file_name)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend\nputs\
    \ file_name_check(\"example.txt\")\nputs file_name_check(\"1example.dll\")", " \
    \ m = file_name.match(/^([a-zA-Z]\\w{0,2})\\.(txt|exe|dll)$/)\n  if m\n    \"\
    Yes\"\n  else\n    \"No\"\n  end\nend", "  return 'No' if file_name.match(/^[a-zA-Z]\\\
    w{1,3}\\.txt$/) == nil && file_name.match(/^[a-zA-Z]\\w{1,3}\\.exe$/) == nil &&\
    \ file_name.match(/^[a-zA-Z]\\w{1,3}\\.dll$/) == nil\n  'Yes'\nend", "  a = file_name.count('0-9')\n\
    \  file_name =~ /[^.][a-zA-Z]/ && file_name =~ /.\\w{2,3}$/ && a<=3 ? \"Yes\"\
    \ : \"No\"\nend", "  file_name =~ /^[a-zA-Z][a-zA-Z0-9]{1,20}\\.(txt|exe|dll)$/\
    \ ? \"Yes\" : \"No\"\nend", "  ext = file_name.split('.')[1]\n  return 'No' if\
    \ file_name.scan(/\\d/).length > 3\n  return 'No' if file_name.scan(/\\./).length\
    \ != 1\n  return 'No' if !(file_name.scan(/\\A[a-zA-Z]/).length == 1)\n  return\
    \ 'No' if !(['txt', 'exe', 'dll'].include? ext)\n  return 'Yes'\nend", "  return\
    \ 'No' if file_name.length == 0\n  return 'No' if file_name.count('.') != 1\n\
    \  file_name = file_name.split('.')\n  return 'No' if file_name[0].length == 0\n\
    \  return 'No' if file_name[0].count('0-9') > 3\n  return 'No' if file_name[0].count('a-zA-Z')\
    \ == 0\n  return 'No' if file_name[1] != 'txt' && file_name[1] != 'exe' && file_name[1]\
    \ != 'dll'\n  'Yes'\nend", "  # TODO: implement this method\nend", "  return \"\
    No\" if file_name.count(\"0-9\") > 3\n  return \"No\" if file_name.count(\".\"\
    ) != 1\n  pre_dot = file_name.split(\".\")[0]\n  return \"No\" if pre_dot.empty?\n\
    \  return \"No\" if pre_dot[0].match(/[a-zA-Z]/).nil?\n  post_dot = file_name.split(\"\
    .\")[1]\n  return \"No\" if ![\"txt\", \"exe\", \"dll\"].include?(post_dot)\n\
    \  \"Yes\"\nend", "  # Check if there are more than 3 digits in the file name\n\
    \  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  end\n  # Check if there\
    \ is exactly one dot in the file name\n  if file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  end\n  # Check if the substring before the dot is empty\n  if file_name[0...file_name.index(\"\
    .\")] == \"\"\n    return \"No\"\n  end\n  # Check if the substring before the\
    \ dot starts with a latin letter\n  unless (\"a\"..\"z\").include?(file_name[0])\
    \ or (\"A\"..\"Z\").include?(file_name[0])\n    return \"No\"\n  end\n  # Check\
    \ if the substring after the dot is one of the allowed types\n  if file_name[file_name.index(\"\
    .\") + 1..-1] != \"txt\" and file_name[file_name.index(\".\") + 1..-1] != \"exe\"\
    \ and file_name[file_name.index(\".\") + 1..-1] != \"dll\"\n    return \"No\"\n\
    \  end\n  return \"Yes\"\nend", "  # TODO: your code goes here\nend", "    if\
    \ file_name[/^[a-zA-Z][^.]+\\.(txt|exe|dll)$/] != nil\n        if file_name[/\\\
    d+/].length <= 3\n            return \"Yes\"\n        end\n    end\n    return\
    \ \"No\"\nend", "  if file_name.count(\"0123456789\") > 3\n    return \"No\"\n\
    \  end\n  file_name_split = file_name.split(\".\")\n  if file_name_split.length\
    \ != 2\n    return \"No\"\n  end\n  if !((file_name_split[0] =~ /[a-zA-Z]/))\n\
    \    return \"No\"\n  end\n  if !([\"txt\", \"exe\", \"dll\"].include?(file_name_split[1]))\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "\treturn \"No\" if file_name.scan(/[a-zA-Z]\\\
    .{1}[a-zA-Z]+/).size != 1\n\treturn \"No\" if file_name.scan(/\\d+/).size > 3\n\
    \treturn \"No\" if file_name.scan(/\\..{1,4}/).size != 1\n\treturn \"No\" if file_name.scan(/\\\
    .(txt|exe|dll)/).size != 1\n\treturn \"Yes\"\nend", "  if file_name =~ /^[a-zA-Z]{1}[a-zA-Z0-9]{0,}\\\
    .txt$|^[a-zA-Z]{1}[a-zA-Z0-9]{0,}\\.exe$|^[a-zA-Z]{1}[a-zA-Z0-9]{0,}\\.dll$/ &&\
    \ !(file_name =~ /[0-9]{4,}/ ) \n    return \"Yes\"\n  else\n    return \"No\"\
    \n  end\nend", "\tpattern = /^[a-zA-Z][^\\d]{0,3}\\.(txt|exe|dll)$/\n\tpattern.match(file_name)\
    \ ? \"Yes\" : \"No\"\nend", "  if file_name.match(/\\A[a-zA-Z]\\w{1,19}\\.\\w{3}\\\
    z/)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  # if file_name.size != file_name.chars.select{|e|\
    \ !e.match(/[0-9]/)}.size \n  # \treturn \"No\"\n  # end\n  # count = 0\n  # file_name.each_char\
    \ do |x|\n  # \tif x == \".\"\n  # \t\tcount += 1\n  # \tend\n  # end\n  # if\
    \ count > 1 || count == 0\n  # \treturn \"No\"\n  # end\n  # if file_name[0].match(/[A-Za-z]/)\n\
    \  # \treturn \"Yes\"\n  # else\n  # \treturn \"No\"\n  # end\n  # file_name.size\
    \ == file_name.chars.select{|e| !e.match(/[0-9]/)}.size && file_name.chars.count(\"\
    .\") == 1 && file_name[0].match(/[A-Za-z]/) && file_name.match(/\\w+.\\w{3}/)\n\
    \  if file_name.size == file_name.chars.select{|e| !e.match(/[0-9]/)}.size &&\
    \ file_name.chars.count(\".\") == 1 && file_name[0].match(/[A-Za-z]/) && file_name.match(/\\\
    w+.\\w{3}/)\n  \t\"Yes\"\n  else\n  \t\"No\"\n  end\nend", end, "  file_name =~\
    \ /(^[a-zA-Z]\\w*)\\.(txt|exe|dll)$/ && $1.count('0-9') <= 3 ? 'Yes' : 'No'\n\
    end", "    d_num = 0\n    file_name.split(\"\").each { |c|\n        if c.include?('0'..'9')\
    \ then\n            d_num += 1\n        end\n    }\n    if d_num > 3 then\n  \
    \      return \"No\"\n    end\n    if file_name.split(\".\").length == 2 && file_name.split(\"\
    .\")[0].length > 0 then\n        return 'Yes'\n    end\n    return 'No'\nend",
  "  is_it_valid = false\n  file_name_to_digits = file_name.scan(/\\d/)\n  if file_name_to_digits.length\
    \ <= 3\n    if file_name.include? \".\"\n      file_name_array = file_name.split(\"\
    .\")\n      if file_name_array[0] =~ /[a-zA-Z]+/ and !file_name_array[0].empty?\n\
    \        if file_name_array[1] == \"txt\" or file_name_array[1] == \"exe\" or\
    \ file_name_array[1] == \"dll\"\n          is_it_valid = true\n        end\n \
    \     end\n    end\n  end\n  if is_it_valid\n    return \"Yes\"\n  else\n    return\
    \ \"No\"\n  end\nend", "  file_name_check_match = file_name.match(/\\A[a-zA-Z][a-zA-Z0-9]{1,3}\\\
    .(txt|exe|dll)\\z/)\n  return file_name_check_match ? \"Yes\" : \"No\"\nend\n\
    puts file_name_check(\"example.txt\") # => \"Yes\"\nputs file_name_check(\"1example.dll\"\
    ) # => \"No\"", "  /\\A[a-zA-Z][^\\d]{1,19}\\.[a-z]{3}\\z/.match(file_name) ?\
    \ \"Yes\" : \"No\"\nend", "  return file_name =~ /^[a-zA-Z][\\w]{0,2}\\.(txt|exe|dll)$/\
    \ ? \"Yes\" : \"No\"\nend", "  if file_name.match(/[^A-Za-z0-9]/) \n    'No'\n\
    \  elsif file_name.match(/[0-9]{4,}/) \n    'No'\n  elsif file_name.match(/^[A-Za-z]/)\n\
    \    extension = file_name.split('.').last\n    if ['txt', 'exe', 'dll'].include?(extension)\n\
    \      'Yes'\n    else\n      'No'\n    end\n  else\n    'No'\n  end\nend", " \
    \ digits_count = file_name.scan(/\\d/).count\n  return \"No\" if digits_count\
    \ > 3\n  return \"No\" if file_name.count(\".\") != 1\n  return \"No\" if file_name[0].match(/[a-zA-Z]/).nil?\n\
    \  return \"No\" if file_name.split(\".\").last != \"txt\" && file_name.split(\"\
    .\").last != \"exe\" && file_name.split(\".\").last != \"dll\"\n  \"Yes\"\nend",
  "  digits_count = file_name.scan(/\\d/).size\n  if digits_count > 3\n    return\
    \ \"No\"\n  end\n  if file_name.scan(/\\./).size != 1\n    return \"No\"\n  end\n\
    \  if !(/^[a-zA-Z][^.]*$/ =~ file_name.split('.')[0])\n    return \"No\"\n  end\n\
    \  if [\"txt\", \"exe\", \"dll\"].include?(file_name.split('.')[1])\n    return\
    \ \"Yes\"\n  end\n  return \"No\"\nend", "  if file_name.count(\"0-9\") > 3 \n\
    \    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return \"No\"\n \
    \ elsif file_name.split(\".\").first.split(//).first !=  /[a-zA-Z]/\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\"\
    .\").last != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"\
    No\"\n  else\n    return \"Yes\"\n  end\nend", "\tnew_file_name = file_name.split('.')\n\
    \tif new_file_name.length != 2\n\t\tputs \"No\"\n\telse\n\t\tbefore_dot = new_file_name[0]\n\
    \t\tafter_dot = new_file_name[1]\n\t\tif before_dot =~ /[0-9]/ && before_dot.length\
    \ > 3\n\t\t\tputs \"No\"\n\t\telsif before_dot[0] !~ /[a-zA-Z]/\n\t\t\tputs \"\
    No\"\n\t\telsif after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"\
    dll\"\n\t\t\tputs \"No\"\n\t\telse\n\t\t\tputs \"Yes\"\n\t\tend\n\tend\nend",
  "  file_parts = file_name.split(\".\")\n  if file_parts.length != 2\n    return\
    \ \"No\"\n  end\n  prefix = file_parts[0]\n  suffix = file_parts[1]\n  if prefix.length\
    \ == 0 ||\n     !(('a'..'z').include?(prefix[0].downcase) || ('A'..'Z').include?(prefix[0]))\
    \ ||\n     prefix.split(//).select {|x| ('0'..'9').include?(x)}.length > 3\n \
    \   return \"No\"\n  end\n  if suffix != \"txt\" && suffix != \"exe\" && suffix\
    \ != \"dll\"\n    return \"No\"\n  end\n  return \"Yes\"\nend", "  count = 0\n\
    \  s = file_name.split(\".\")\n  s[0].each_char do |c|\n    count += 1 if c >=\
    \ '0' && c <= '9'\n  end\n  s[0].length > 0 && s[0][0] >= 'a' && s[0][0] <= 'z'\
    \ && count <= 3 && s[1] == 'txt' || s[1] == 'exe' || s[1] == 'dll' ? \"Yes\" :\
    \ \"No\"\nend", "    # TODO: complete the function\nend", "  if !((file_name.scan(/\\\
    d/).length) > 3)\n    if file_name.count(\".\") == 1\n      splitted_name = file_name.split(\"\
    .\")\n      if !(splitted_name[0].length == 0)\n        if splitted_name[0].count(\"\
    [a-zA-Z]\") > 0\n          if (splitted_name[1] == \"txt\") || (splitted_name[1]\
    \ == \"exe\") || (splitted_name[1] == \"dll\")\n            return \"Yes\"\n \
    \         end\n        end\n      end\n    end\n  end\n  return \"No\"\nend",
  "  # Your code here\nend", "  # Solution here\nend", "  # Fill the blanks\nend",
  "\t# your code here\n\t# return 'Yes' if the file name is valid, otherwise return\
    \ 'No'\nend", "  digits = file_name.count('0-9')\n  if digits > 3\n    return\
    \ \"No\"\n  end\n  # if file_name.count('.') != 1\n  #   return \"No\"\n  # end\n\
    \  parts = file_name.split('.')\n  if parts.length != 2\n    return \"No\"\n \
    \ end\n  prefix = parts[0]\n  suffix = parts[1]\n  # puts parts\n  # puts prefix\n\
    \  # puts suffix\n  if prefix.empty?\n    return \"No\"\n  end\n  if prefix.match('^[a-zA-Z]')\
    \ == nil\n    return \"No\"\n  end\n  if suffix != 'txt' && suffix != 'exe' &&\
    \ suffix != 'dll'\n    return \"No\"\n  end\n  return \"Yes\"\nend", "  # Write\
    \ your code here...\nend", "  if (file_name =~ /\\d{4}/ or file_name !~ /\\./)\n\
    \    \"No\"\n  elsif (file_name !~ /^[a-zA-Z]/ or !(file_name.match(/\\./).post_match\
    \ == \"txt\" or file_name.match(/\\./).post_match == \"exe\" or file_name.match(/\\\
    ./).post_match == \"dll\"))\n    \"No\"\n  else\n    \"Yes\"\n  end\nend", " \
    \ # Your code here\nend", "  # TODO: Implement\nend", "  # example.txt\n  # 0123456789\n\
    \  if file_name =~ /([a-zA-Z]+\\.){1}([a-zA-Z]+){3}/\n    puts \"Yes\"\n  else\n\
    \    puts \"No\"\n  end\nend", "    # A function which checks if a file's name\
    \ is valid, and returns 'Yes' if it is, \n    # and returns 'No' otherwise.\n\
    \    # :param file_name: a string representing a file's name.\n    # :return:\
    \ 'Yes' if the the file's name is valid, and returns 'No' otherwise.\nend", " \
    \ count = 0\n  dot_count = 0\n  dot_index = 0\n  extension = \"\"\n  file_name.each_char\
    \ do |character|\n    if (character.to_i != 0)\n      count += 1\n    end\n  \
    \  if (character == \".\")\n      dot_count += 1\n      dot_index = file_name.index(character)\n\
    \    end\n  end\n  if (dot_count == 1 && file_name[0].match(/[a-zA-Z]/) && dot_index\
    \ != 0 && count <= 3)\n    extension = file_name[dot_index+1..file_name.length]\n\
    \    if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    )\n      return \"Yes\"\n    end\n  end\n  return \"No\"\nend", "  digits = 0\n\
    \  file_name.chars.each { |char| digits += 1 if ('0'..'9').include?(char) }\n\
    \  return 'No' if digits > 3", "  if file_name.split('.').size == 2\n    extension\
    \ = file_name.split('.').last\n    if ['txt', 'exe', 'dll'].include?(extension)\n\
    \      if file_name.split('.').first.gsub(/[a-zA-Z]/, '').size == 0\n        if\
    \ file_name.split('.').first.gsub(/[0-9]/, '').size == file_name.split('.').first.size\n\
    \          return 'Yes'\n        end\n      end\n    end\n  end\n  return 'No'\n\
    end", "  # TODO: Your code here\nend\n "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
