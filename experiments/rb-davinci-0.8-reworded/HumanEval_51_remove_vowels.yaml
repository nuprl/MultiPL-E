name: HumanEval_51_remove_vowels
language: rb
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\"\
  )\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"\
  aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n\
  \    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n\
  \    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\",\
  \ candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"\
  ))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\"\
  , candidate.call(\"ybcd\"))\n  end\nend\n"
completions: ["  text.gsub(/[aeiouAEIOU]/, '')\nend", "  # your code goes here\n \
    \ text.delete(\"aeiouAEIOU\")\nend", "  text.delete('aeiouAEIOU')\nend", "  #\
    \ YOUR CODE HERE\nend", "  text.split('').map{|c| c unless 'aeiou'.include?(c.downcase)}.join\n\
    end\nputs remove_vowels.call(\"\")\nputs remove_vowels.call(\"abcdef\")\nputs\
    \ remove_vowels.call(\"aaaaa\")\nputs remove_vowels.call(\"aaBAA\")\nputs remove_vowels.call(\"\
    zbcd\")", "  text.delete \"aeiouAEIOU\"\nend", "\tvowels = {'a' => 0, 'e' => 0,\
    \ 'i' => 0, 'o' => 0, 'u' => 0}\n\tres = ''\n\ttext.split('').each do |letter|\n\
    \t\tif vowels[letter] == nil\n\t\t\tres += letter\n\t\tend\n\tend\n\treturn res\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.chars.map { |c| vowels.include?(c.downcase)\
    \ ? '' : c }.join('')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "    # implement remove_vowels\n   \
    \ # Ruby would have a nice \"gsub\" to do that, but let's pretend we don't have\
    \ it.\n    text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\")\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    text.delete(\"\
    aeiou\")\nend", "    text.gsub(/[aeiouAEIOU]/, '')\nend", "  # text.gsub(/[aeiou]/i,\
    \ '')\n  new_text = \"\"\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.each_char\
    \ do |letter|\n    if vowels.include?(letter.downcase)\n      new_text += ''\n\
    \    else\n      new_text += letter\n    end\n  end\n  new_text\nend", "  text.chars.delete_if\
    \ { |char| 'aeiou'.include?(char.downcase) }.join\nend", "  # make a string of\
    \ vowels in lowercase and uppercase\n  vowels = 'aAeEiIoOuU'\n  # make a new string\
    \ without vowels\n  new_text = ''\n  # iterate over the text\n  text.each_char\
    \ do |x|\n    # check if it is not a vowel\n    if vowels.include?(x) == false\n\
    \      # add to the new string\n      new_text += x\n    end\n  end\n  # return\
    \ the new string\n  return new_text\nend", "  # TODO\nend", "    if text.is_a?(String)\n\
    \        text.gsub(/[aeiou]/i, '')\n    else\n        raise ArgumentError.new('Argument\
    \ is not a string')\n    end\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "    text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "  text.delete \"aeiouAEIOU\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  new_text = \"\"\n  if text == \"\"\n    new_text\n  else\n\
    \    text.each_char do |char|\n      if vowels.include?(char.downcase)\n     \
    \   new_text\n      else\n        new_text += char\n      end\n    end\n  end\n\
    \  new_text\nend", "  vowels = 'aeiouAEIOU'\n  result = ''\n  text.each_char do\
    \ |char|\n    result += char unless vowels.include?(char)\n  end\n  result\nend",
  "  return '' if text.empty?\n  return text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "\ttext.gsub(/[aeiouAEIOU]/, '')\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  # write your code here\nend",
  "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    text.delete('aeiouAEIOU')\n\
    end\nremove_vowels.call(\"\")\nremove_vowels.call(\"abcdef\")\nremove_vowels.call(\"\
    aaaaa\")\nremove_vowels.call(\"aaBAA\")\nremove_vowels.call(\"zbcd\")", "  text.delete('aeiouAEIOU')\n\
    end", "  unless text.kind_of?(String)\n    raise ArgumentError, \"Input must be\
    \ a string\"\n  end\n  text.chars.select { |c| not c.match(/[aeiou]/i) }.join\n\
    end", "\ttext.delete('aeiouAEIOU')\nend", "\t# TODO: implement this function\n\
    \tvowels = %w(a e i o u)\n\ttext.delete vowels.join\nend", "  /[aeiou]/i.match(text)\
    \ ? remove_vowels(text.sub(/[aeiou]/i, '')) : text\nend", "  vowels = %w(a e i\
    \ o u)\n  text.chars.map { |char| vowels.include?(char.downcase) ? nil : char\
    \ }.join\nend", "  remove_vowels = Proc.new {|text| text.gsub(/[aeiou]/i, '')}\n\
    \  remove_vowels.call(text)\nend", "\ttext.delete(\"aeiouAEIOU\")\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend\nremove_vowels_lamb = ->(text) { text.gsub(/[aeiou]/i, '') }", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.split('').reject { |ch| 'aeiou'.include?(ch.downcase) }.join('')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete \"aAeEiIoOuU\"\nend", "  text.delete(\"\
    aeiouAEIOU\")\nend", "  text.delete('aeiouAEIOU')\nend", "  vowels = \"aeiouAEIOU\"\
    \n  new_text = \"\"\n  text.each_char do |ch|\n    if vowels.include?(ch)\n  \
    \    new_text << \"\"\n    else\n      new_text << ch\n    end\n  end\n  new_text\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  if text.is_a?(String)\n    text.gsub(/[aeiou]/i,\
    \ '')\n  else\n    text\n  end\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  return \"\" if text.empty?\n\
    \  non_vowels = text.chars.reject { |x| \"aeiouAEIOU\".include?(x) }\n  return\
    \ non_vowels.join(\"\")\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  text.delete(\"aeiouAEIOU\")\nend", "  text.gsub(/[aeiou]/i, '')\nend",
  "  text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete(\"aeiouAEIOU\")\nend\nremove_vowels = ->(text) { text.delete(\"\
    aeiouAEIOU\") }", "  text.delete('aeiouAEIOU')\nend", "  if text == \"\"\n   \
    \ return \"\"\n  else\n    new_text = text.delete \"aeiouAEIOU\"\n    return new_text\n\
    \  end\nend", "  text.gsub(/[aeiouAEIOU]/, '')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  str = \"\"\n  text.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      next\n    else\n   \
    \   str += char\n    end\n  end\n  str\nend", "  if text.empty?\n    return \"\
    \"\n  end\n  if text.length == 1\n    return text if not text.downcase.include?\
    \ \"a\"\n    return text if not text.downcase.include? \"e\"\n    return text\
    \ if not text.downcase.include? \"i\"\n    return text if not text.downcase.include?\
    \ \"o\"\n    return text if not text.downcase.include? \"u\"\n    return \"\"\n\
    \  end\n  if text.length > 1\n    if text[0].downcase.include? \"a\"\n      return\
    \ remove_vowels(text[1..-1])\n    end\n    if text[0].downcase.include? \"e\"\n\
    \      return remove_vowels(text[1..-1])\n    end\n    if text[0].downcase.include?\
    \ \"i\"\n      return remove_vowels(text[1..-1])\n    end\n    if text[0].downcase.include?\
    \ \"o\"\n      return remove_vowels(text[1..-1])\n    end\n    if text[0].downcase.include?\
    \ \"u\"\n      return remove_vowels(text[1..-1])\n    end\n    return text[0]\
    \ + remove_vowels(text[1..-1])\n  end\nend\nputs remove_vowels(\"\")\nputs remove_vowels(\"\
    zbcd\")\nputs remove_vowels(\"aaaaa\")\nputs remove_vowels(\"abcdef\")", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  text.delete(\"aeiouAEIOU\")\nend", "  return text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  return text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "    text.delete(\"aeiouAEIOU\")\nend", "  text.gsub(/[aeiou]/i, '')\nend",
  "  # Your code goes here.\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  temp = text.split('')\n\
    \  temp.delete_if { |letter| letter.downcase == 'a' || letter.downcase == 'e'\
    \ || letter.downcase == 'i' || letter.downcase == 'o' || letter.downcase == 'u'\
    \ }\n  temp.join\nend", "  return text if text.nil? || text.empty?\n  # the vowels\n\
    \  text.tr(\"aeiou\", \"\")\nend", "    not_vowels = \"\"\n    vowels = \"aeiouAEIOU\"\
    \n    for char in text.split(\"\")\n        if vowels.index(char) == nil\n   \
    \         not_vowels += char\n        end\n    end\n    return not_vowels\nend",
  "  text.delete(\"aeiouAEIOU\")\nend", "  # BEGIN (write your solution here)\n  vowels\
    \ = %w(a e i o u)\n  text.chars.map { |letter| vowels.include?(letter) ? '' :\
    \ letter }.join\n  # END\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  return\
    \ \"\" if text.length == 0\n  return text.gsub(/[aeiou]/i, \"\")\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  text.delete('aeiouAEIOU')\nend", "  text.delete \"aeiouAEIOU\"\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    raise\
    \ 'Input is not string' unless text.class == String\n    text.delete('aeiou')\n\
    end", "\treturn text.gsub(/[aeiou]/i, '')\nend", "  text.delete \"aeiouAEIOU\"\
    \nend", "  text.delete(\"aeiouAEIOU\")\nend", "  text.tr('aeiouAEIOU', '')\nend",
  "  text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\nend", "  # this\
    \ is a place holder\n  # to be replaced\nend", "\treturn text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete(\"aeiouAEIOU\")\nend\nremove_vowels = method(:remove_vowels)",
  "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiouAEIOU]/, '')\nend", "  text.delete\
    \ \"aeiouAEIOU\"\nend", "  text.gsub(/[AEIOUaeiou]/, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "    text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    text.delete \"aeiouAEIOU\"\
    \nend", "  text.gsub(/[aeiouAEIOU]/, '')\nend", "    text.gsub(/[aeiou]/i, '')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\")\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.chars.map { |x| x unless x.match(/[aeiou]/i)\
    \ }.compact.join\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  if text == \"\"\
    \n    return \"\"\n  else\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    result = \"\"\n    i = 0\n    while i <\
    \ text.length\n      unless vowels.include?(text[i])\n        result = result\
    \ + text[i]\n      end\n      i = i + 1\n    end\n    return result\n  end\nend",
  "  text.delete(\"aeiouAEIOU\")\nend", "  text.delete(\"aeiou\")\nend", "  text.gsub(/[AEIOUaeiou]/,\
    \ '')\nend", "  # I'M NOT SURE IF THIS IS WHAT YOU MEANT BUT...\n  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  return \"\" if text.empty?\n  return text if text == \"a\"\n \
    \ return text if text == \"e\"\n  return text if text == \"i\"\n  return text\
    \ if text == \"o\"\n  return text if text == \"u\"\n  text[0] + remove_vowels(text[1..-1])\n\
    end", "  text.gsub(/[aeiouAEIOU]/, '')\nend", "    return text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  text.delete(\"aeiou\")\nend", "  text.gsub(/[aeiou]/i, '')\nend", "\t\
    text.delete \"aeiouAEIOU\"\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiouAEIOU]/, '')\n\
    end", "  text.gsub(/[aeiouAEIOU]/, '')\nend", "  # your code here\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiouAEIOU]/,\
    \ '')\nend", "  return text.delete(\"aeiouAEIOU\")\nend\nremove_vowels = lambda\
    \ { |string| string.delete(\"aeiouAEIOU\") }", "  text.gsub(/[aeiouAEIOU]/, '')\n\
    end", "    text.gsub(/[aeiou]/i, '')\nend", "    text.delete('aeiouAEIOU')\nend",
  "    text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "\t# TODO:\
    \ return string without vowels\n\ttext.delete \"aeiouAEIOU\"\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  return text.gsub(/[aeiouAEIOU]/, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  # Replace this code with your remove_vowels method code\n  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.chars.reject { |ch| 'aeiou'.include?(ch.downcase) }.join\n\
    end", "\treturn text.gsub(/[aeiouAEIOU]/, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete \"aeiouAEIOU\"\nend\nremove_vowels = Function.new(:remove_vowels)",
  "  text.gsub(/[AEIOUaeiou]/, '')\nend", "  text.delete(\"aeiouAEIOU\")\nend", " \
    \ text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\nend", "  vowels\
    \ = 'aeiouAEIOU'\n  text.gsub(/[#{vowels}]/, '')\nend", "  #code here\nend", " \
    \ # TODO\nend", "  vowels = \"aeiou\"\n  text.delete(vowels)\nend", "    text.gsub(/[aeiou]/i,\
    \ '')\nend\nremove_vowels.call(\"\")", "    res = \"\"\n    text.split(\"\").each\
    \ do |c|\n        if ![\"a\", \"e\", \"i\", \"o\", \"u\"].include?(c.downcase)\n\
    \            res += c\n        end\n    end\n    return res\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
