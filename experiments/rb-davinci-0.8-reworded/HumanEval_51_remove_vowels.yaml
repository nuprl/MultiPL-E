name: HumanEval_51_remove_vowels
language: rb
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\"\
  )\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"\
  aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n\
  \    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n\
  \    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\",\
  \ candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"\
  ))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\"\
  , candidate.call(\"ybcd\"))\n  end\nend\n"
completions: ["  text.gsub(/[aeiouAEIOU]/, '')\nend", "  # your code goes here\n \
    \ text.delete(\"aeiouAEIOU\")\nend", "  text.delete('aeiouAEIOU')\nend", "  #\
    \ YOUR CODE HERE\nend", "  text.split('').map{|c| c unless 'aeiou'.include?(c.downcase)}.join\n\
    end\nputs remove_vowels.call(\"\")\nputs remove_vowels.call(\"abcdef\")\nputs\
    \ remove_vowels.call(\"aaaaa\")\nputs remove_vowels.call(\"aaBAA\")\nputs remove_vowels.call(\"\
    zbcd\")", "  text.delete \"aeiouAEIOU\"\nend", "\tvowels = {'a' => 0, 'e' => 0,\
    \ 'i' => 0, 'o' => 0, 'u' => 0}\n\tres = ''\n\ttext.split('').each do |letter|\n\
    \t\tif vowels[letter] == nil\n\t\t\tres += letter\n\t\tend\n\tend\n\treturn res\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.chars.map { |c| vowels.include?(c.downcase)\
    \ ? '' : c }.join('')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "    # implement remove_vowels\n   \
    \ # Ruby would have a nice \"gsub\" to do that, but let's pretend we don't have\
    \ it.\n    text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\")\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "    text.delete(\"\
    aeiou\")\nend", "    text.gsub(/[aeiouAEIOU]/, '')\nend", "  # text.gsub(/[aeiou]/i,\
    \ '')\n  new_text = \"\"\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.each_char\
    \ do |letter|\n    if vowels.include?(letter.downcase)\n      new_text += ''\n\
    \    else\n      new_text += letter\n    end\n  end\n  new_text\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
