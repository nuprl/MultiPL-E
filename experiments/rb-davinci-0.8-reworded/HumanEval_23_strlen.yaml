name: HumanEval_23_strlen
language: rb
prompt: "# Return length of given string\n# >>> strlen.call(\"\")\n# 0\n# >>> strlen.call(\"\
  abc\")\n# 3\ndef strlen(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n\
  \    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n  \
  \  assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"\
  asdasnakj\"))\n  end\nend\n"
completions: ["  return 0 if string.empty?\n  return 1 + strlen(string[1..-1])\nend",
  "  string.length\nend", "  string.size\nend", "  string.length\nend", "  return\
    \ 0 if string.empty?\n  string[1..-1].length\nend", "  p string.length\nend",
  "  string.length\nend", "  count = 0\n  while string[count] != nil\n    count +=\
    \ 1\n  end\n  count\nend", "  string.length\nend", "  i = 0\n  while string[i]\n\
    \    i += 1\n  end\n  i\nend", "  string.size\nend", "  i = 0\n  while string[i]\
    \ != 0\n    i += 1\n  end\n  return i\nend", "  string.length\nend", "  return\
    \ 0 if string.nil?\n  string.size\nend", "  string.length\nend", "  string.length\n\
    end", "  counter = 0\n  char = string[counter]\n  while char\n    counter += 1\n\
    \    char = string[counter]\n  end\n  counter\nend", "  string.each_char.inject(0)\
    \ { |memo, char| memo + 1 }\nend", "  count = 0\n  string.each_char do |char|\n\
    \    count += 1\n  end\n  count\nend", "  string.length\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
