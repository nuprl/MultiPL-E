name: HumanEval_139_special_factorial
language: rb
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial.call(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\ndef special_factorial(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n\
  \    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n\
  \    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n\
  \    assert_equal(1, candidate.call(1))\n  end\nend\n"
completions: ["    n.downto(1).reduce(:*)\nend\n ", "  # TODO: your code here!\nend",
  "  factorial = n\n  if n > 1\n    factorial = n * special_factorial(n-1)\n  end\n\
    \  factorial\nend", "  res = 1\n  for i in 1..n\n    res *= factorial(i)\n  end\n\
    \  res\nend", "  factorial = n.downto(1).inject(:*)\n  res = 1\n  n.downto(1).each\
    \ do |i|\n    res *= factorial\n    factorial /= i\n  end\n  res\nend", end, " \
    \ return nil if n < 1\n  (1..n).to_a.inject(:*) * (1..n-1).to_a.inject(:*)\nend",
  "\treturn nil if n < 1\n\tn! * (n-1)! * (n-2)! * ... * 1!\nend", "  # TODO: Your\
    \ code here\nend", "  return 1 if n == 0\n  factorial = 1\n  while n > 0\n   \
    \ factorial *= factorial_iterative(n)\n    n -= 1\n  end\n  factorial\nend", " \
    \ (1..n).reduce(:*) * (1..n-1).reduce(:*)\nend", "  # your code here\nend", " \
    \ factorials = []\n  (1..n).each do |i|\n    factorials << i\n  end\n  factorials.inject(:*)\n\
    end", "  return nil if n <= 0\n  (1..n).inject(:*) * (1..n-1).inject(:*)\nend",
  "  raise ArgumentError, 'input must be positive' if n < 1\n  n <= 1 ? 1 : n * special_factorial(n\
    \ - 1)\nend", "  # Write your code here\nend", "  if n == 0\n    raise ArgumentError\n\
    \  end\n  result = 1\n  (1..n).each do |k|\n    result *= k\n  end\n  result\n\
    end", "  n < 0 ? 1 : n * special_factorial(n - 1)\nend", "  return 1 if n == 0\n\
    \  (1..n).inject(:*) * special_factorial(n-1)\nend", "  # If the input is invalid,\
    \ return nil\n  if n < 1\n    return nil\n  end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
