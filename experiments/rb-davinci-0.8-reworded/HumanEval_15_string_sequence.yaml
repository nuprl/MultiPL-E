name: HumanEval_15_string_sequence
language: rb
prompt: "# Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n# >>> string_sequence.call(0)\n# \"0\"\n# >>> string_sequence.call(5)\n\
  # \"0 1 2 3 4 5\"\ndef string_sequence(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_sequence\n\
  \    candidate = method(:string_sequence)\n    assert_equal(\"0\", candidate.call(0))\n\
  \    assert_equal(\"0 1 2 3\", candidate.call(3))\n    assert_equal(\"0 1 2 3 4\
  \ 5 6 7 8 9 10\", candidate.call(10))\n  end\nend\n"
completions: [end, "  (0..n).to_a.join(\" \")\nend", "  (0..n).to_a.join(\" \")\n\
    end", "\treturn (0..n).to_a.join(\" \")\nend", "  return n.to_s if n == 0\n  string_sequence(n-1)\
    \ + \" \" + n.to_s\nend", "  (0..n).inject(\"\") { |result, i| result + \" #{i}\"\
    \ }.strip\nend", "  (0..n).to_a.join(\" \")\nend", "  if n.zero?\n    \"0\"\n\
    \  else\n    (1..n).map { |num| num.to_s }.join(\" \")\n  end\nend", "  (0..n).to_a.join(\"\
    \ \")\nend", "  (0..n).to_a.join(\" \")\nend", "  return \"0\" if n == 0\n  (0..n).to_a.join(\"\
    \ \")\nend", "  # hint: use the range operator\nend", "  (0..n).to_a.join(\" \"\
    )\nend", "  if n == 0\n    return \"0\"\n  end\n  string_sequence(n-1) + \" \"\
    \ + n.to_s\nend", "    # YOUR CODE HERE\nend", "  (0..n).inject('') { |str, num|\
    \ str + \"#{num} \" }.strip\nend", "  (0..n).to_a.join(\" \")\nend", "  (0..n).to_a.join(\"\
    \ \")\nend", "  ((0..n).to_a).join(\" \")\nend", "  (0..n).to_a.join(\" \")\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
