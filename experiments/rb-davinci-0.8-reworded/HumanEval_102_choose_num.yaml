name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12,\
  \ 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  while x <= y\n    if x % 2 == 0\n      return x\n    end\n    x +=\
    \ 1\n  end\n  return -1\nend", "  return -1 if x > y\n  puts x\n  puts y\n  even_num\
    \ = x.step(y).find { |num| num.even? }\n  even_num ? even_num : -1\nend", "  even_num\
    \ = x.even? ? x : x + 1\n  (even_num..y).find do |num|\n    num.even?\n  end ||\
    \ -1\nend", "    return -1 if x > y\n    return x if x.even?\n    return choose_num(x\
    \ + 1, y)\nend", "\t# Your code here.\n\tresult = -1\n\t(x..y).each do |i|\n\t\
    \tresult = i if i % 2 == 0\n\tend\n\tresult\nend", "  (x..y).select { |n| n.even?\
    \ }.last || -1\nend", "  x.upto(y) do |num|\n    return num if num.even?\n  end\n\
    \  -1\nend", "  if x == y\n    if x % 2 == 0\n      return x\n    else\n     \
    \ return -1\n    end\n  end\n  if x > y\n    return choose_num(y, x)\n  end\n\
    \  if y % 2 == 0\n    return y\n  else\n    return choose_num(x, y - 1)\n  end\n\
    end", "  if x % 2 == 0 && y % 2 == 0\n    return x if x > y\n    return y\n  end\n\
    \  x.step(y, 2) do |num|\n    return num if num % 2 == 0\n  end\n  -1\nend", " \
    \ for i in x..y\n    if i % 2 == 0\n      return i\n    end\n  end\n  return -1\n\
    end", "  return -1 if x > y\n  return -1 if x%2 != 0 and y%2 != 0\n  return y\
    \ if x%2 != 0\n  return x if y%2 != 0\n  x + (y-x)/2\nend", "  return x if x >\
    \ y\n  range = (x..y).to_a\n  range.reverse.each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  if x == y\n    -1\n  elsif x < y\n    choose_num_helper(x,\
    \ y)\n  else\n    choose_num_helper(y, x)\n  end\nend", "  (x..y).reverse_each\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "    #\n    # your code\
    \ here\n    #\nend", "  if x == y\n    return -1 if x % 2 != 0\n    return x\n\
    \  end\n  choose_num(x + 1, y) if x % 2 != 0\n  choose_num(x + 2, y) if x % 2\
    \ == 0\n  x\nend", "  x.upto(y) do |i|\n    return i if i.even?\n  end\n  -1\n\
    end", "  if x > y\n    return -1\n  end\n  max_even = nil\n  for i in x..y\n \
    \   if i.even?\n      max_even = i\n    end\n  end\n  if max_even.nil?\n    return\
    \ -1\n  end\n  return max_even\nend", "  (x..y).to_a.select { |i| i.even? }.max\
    \ || -1\nend", "  if x % 2 == 0 && y % 2 == 0\n    return y if x <= y\n    return\
    \ x if x > y\n  elsif x % 2 == 0 && y % 2 != 0\n    return x if x < y\n    return\
    \ y if x > y\n  elsif x % 2 != 0 && y % 2 == 0\n    return y if x < y\n    return\
    \ x if x > y\n  else\n    return -1\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
