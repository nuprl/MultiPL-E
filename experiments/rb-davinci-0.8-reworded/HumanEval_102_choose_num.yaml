name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12,\
  \ 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  while x <= y\n    if x % 2 == 0\n      return x\n    end\n    x +=\
    \ 1\n  end\n  return -1\nend", "  return -1 if x > y\n  puts x\n  puts y\n  even_num\
    \ = x.step(y).find { |num| num.even? }\n  even_num ? even_num : -1\nend", "  even_num\
    \ = x.even? ? x : x + 1\n  (even_num..y).find do |num|\n    num.even?\n  end ||\
    \ -1\nend", "    return -1 if x > y\n    return x if x.even?\n    return choose_num(x\
    \ + 1, y)\nend", "\t# Your code here.\n\tresult = -1\n\t(x..y).each do |i|\n\t\
    \tresult = i if i % 2 == 0\n\tend\n\tresult\nend", "  (x..y).select { |n| n.even?\
    \ }.last || -1\nend", "  x.upto(y) do |num|\n    return num if num.even?\n  end\n\
    \  -1\nend", "  if x == y\n    if x % 2 == 0\n      return x\n    else\n     \
    \ return -1\n    end\n  end\n  if x > y\n    return choose_num(y, x)\n  end\n\
    \  if y % 2 == 0\n    return y\n  else\n    return choose_num(x, y - 1)\n  end\n\
    end", "  if x % 2 == 0 && y % 2 == 0\n    return x if x > y\n    return y\n  end\n\
    \  x.step(y, 2) do |num|\n    return num if num % 2 == 0\n  end\n  -1\nend", " \
    \ for i in x..y\n    if i % 2 == 0\n      return i\n    end\n  end\n  return -1\n\
    end", "  return -1 if x > y\n  return -1 if x%2 != 0 and y%2 != 0\n  return y\
    \ if x%2 != 0\n  return x if y%2 != 0\n  x + (y-x)/2\nend", "  return x if x >\
    \ y\n  range = (x..y).to_a\n  range.reverse.each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  if x == y\n    -1\n  elsif x < y\n    choose_num_helper(x,\
    \ y)\n  else\n    choose_num_helper(y, x)\n  end\nend", "  (x..y).reverse_each\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "    #\n    # your code\
    \ here\n    #\nend", "  if x == y\n    return -1 if x % 2 != 0\n    return x\n\
    \  end\n  choose_num(x + 1, y) if x % 2 != 0\n  choose_num(x + 2, y) if x % 2\
    \ == 0\n  x\nend", "  x.upto(y) do |i|\n    return i if i.even?\n  end\n  -1\n\
    end", "  if x > y\n    return -1\n  end\n  max_even = nil\n  for i in x..y\n \
    \   if i.even?\n      max_even = i\n    end\n  end\n  if max_even.nil?\n    return\
    \ -1\n  end\n  return max_even\nend", "  (x..y).to_a.select { |i| i.even? }.max\
    \ || -1\nend", "  if x % 2 == 0 && y % 2 == 0\n    return y if x <= y\n    return\
    \ x if x > y\n  elsif x % 2 == 0 && y % 2 != 0\n    return x if x < y\n    return\
    \ y if x > y\n  elsif x % 2 != 0 && y % 2 == 0\n    return y if x < y\n    return\
    \ x if x > y\n  else\n    return -1\n  end\nend", "  arr = (x..y).to_a.select\
    \ { |num| num.even? }\n  if arr.empty?\n    -1\n  else\n    arr.last\n  end\n\
    end", "  # @TODO: Implement the function here\n  min = x\n  max = y\n  if x >\
    \ y\n    min = y\n    max = x\n  end\n  if min%2 != 0\n    min += 1\n  end\n \
    \ if min > max\n    return -1\n  end\n  return min\nend", "  if x%2==0 and y%2==0\
    \ and x<y\n    return x\n  elsif x%2==0 and y%2==0 and x>y\n    return y\n  elsif\
    \ x%2==0 and y%2==1 and x<y\n    return x\n  elsif x%2==0 and y%2==1 and x>y\n\
    \    return y-1\n  elsif x%2==1 and y%2==0 and x<y\n    return y\n  elsif x%2==1\
    \ and y%2==0 and x>y\n    return x\n  elsif x%2==1 and y%2==1 and x<y\n    return\
    \ y-1\n  elsif x%2==1 and y%2==1 and x>y\n    return x-1\n  else\n    return -1\n\
    \  end\nend", "  if x.even? && y.even?\n    if x < y\n      return y\n    else\n\
    \      return x\n    end\n  elsif x.odd? && y.odd?\n    return -1\n  elsif x.even?\
    \ && y.odd?\n    return x\n  elsif x.odd? && y.even?\n    return y\n  end\nend",
  "\treturn -1 if x == y\n\t(x..y).each do |i|\n\t\treturn i if i % 2 == 0\n\tend\n\
    \t-1\nend", "  return -1 if x > y\n  return y if y.even?\n  y -= 1\n  choose_num(x,\
    \ y)\nend", "  nums = (x..y).to_a\n  largest_even = -1\n  nums.each do |n|\n \
    \   largest_even = n if n.even? && n > largest_even\n  end\n  largest_even\nend",
  "\tif x > y\n\t\ttemp = x\n\t\tx = y\n\t\ty = temp\n\tend\n\tif x % 2 == 0\n\t\t\
    return x\n\telsif x + 1 == y\n\t\treturn -1\n\telse\n\t\treturn x + 1\n\tend\n\
    end", "\tresult = -1\n\tfor i in (x..y)\n\t\tif i % 2 == 0\n\t\t\tresult = i\n\
    \t\tend\n\tend\n\treturn result\nend", "  if x.even?\n    x\n  elsif x < y\n \
    \   choose_num(x + 1, y)\n  else\n    -1\n  end\nend", "  # your code goes here\n\
    end", "  raise TypeError, \"The parameters must be numbers!\" unless x.is_a?(Integer)\
    \ && y.is_a?(Integer)\n  raise ArgumentError, \"The parameters must be positive\
    \ numbers!\" unless x > 0 && y > 0\n  x = y if x > y\n  case x % 2\n  when 0\n\
    \    x\n  when 1\n    y % 2 == 0 ? y : y - 1\n  end\nend", "  nums = []\n  i =\
    \ x\n  while i <= y\n    nums << i\n    i += 1\n  end\n  nums.select { |x| x.even?\
    \ }.max\nend", "    (x..y).select{|n| n % 2 == 0}.max || -1\nend", "\t# Write\
    \ your code here.\nend", "    if x <= y && x % 2 == 0\n        return x\n    elsif\
    \ x <= y && x % 2 != 0\n        return x + 1\n    else\n        return -1\n  \
    \  end\nend", "  return -1 if x % 2 == 1 && y % 2 == 1\n  if x > y\n    y -= 1\
    \ if y % 2 == 1\n    y\n  else\n    x -= 1 if x % 2 == 1\n    x\n  end\nend",
  "  if x % 2 == 0\n    x\n  elsif x + 1 == y\n    -1\n  else\n    choose_num(x +\
    \ 1, y)\n  end\nend", "\t(x..y).each do |i|\n\t\tif i.even?\n\t\t\treturn i\n\t\
    \tend\n\tend\n\treturn -1\nend", "  result = -1\n  x.upto(y) do |i|\n    if i\
    \ % 2 == 0\n      result = i\n    end\n  end\n  result\nend", "  if x % 2 == 0\
    \ and y % 2 == 0\n    return x if x > y\n    return y\n  elsif x % 2 == 0 and\
    \ y % 2 != 0\n    return x if x > y - 1\n    return y - 1\n  elsif x % 2 != 0\
    \ and y % 2 == 0\n    return x + 1 if x + 1 > y\n    return y\n  else\n    return\
    \ x + 1 if x + 1 > y - 1\n    return y - 1\n  end\nend", "  min = (x > y) ? y\
    \ : x\n  max = (x > y) ? x : y\n  return -1 if max < 2", "  if x % 2 == 0\n  \
    \  x\n  elsif y % 2 == 0\n    y\n  else\n    -1\n  end\nend", "  (x..y).select\
    \ { |n| n.even? }.max\nend", "  return x if x % 2 == 0\n  return y if y % 2 ==\
    \ 0\n  return -1\nend", "  if x % 2 == 0\n    x\n  elsif x+1 == y\n    -1\n  else\n\
    \    choose_num(x+1, y)\n  end\nend", "    #enter your code here\nend", "  is_even\
    \ = ->(x) { x % 2 == 0 }\n  array = (x..y).to_a.select(&is_even)\n  array.empty?\
    \ ? -1 : array.last\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  bigger = [x, y].max\n  smaller = [x, y].min\n  range =\
    \ (smaller..bigger).to_a.reverse\n  range.each do |number|\n    if number.even?\n\
    \      return number\n    end\n  end\n  return -1\nend", "  return y if y.even?\n\
    \  return x if x.even?\n  -1\nend", "  if x < y\n    x.upto(y) do |n|\n      return\
    \ n if n.even?\n    end\n  elsif x > y\n    y.upto(x) do |n|\n      return n if\
    \ n.even?\n    end\n  else\n    return x if x.even?\n  end\n  -1\nend", "  return\
    \ -1 if x > y || x.odd? || y.odd?\n  if x.even?\n    x\n  else\n    x + 1\n  end\n\
    end\nchoose_num.call(13, 20)", "  (x..y).select{|num| num % 2 == 0}.max\nend",
  "  bigEven = 0\n  x.upto(y) do |number|\n    if number.even? and number > bigEven\n\
    \      bigEven = number\n    end\n  end\n  return bigEven == 0 ? -1 : bigEven\n\
    end", "  # your code goes here\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "    (x..y).to_a.select { |num| num % 2 == 0 }.max || -1\n\
    end", "  return x if x == y\n  (x..y).step(2).to_a.last\nend", "  num = 0\n  if\
    \ x <= y\n    num = x\n    while num <= y\n      if num.even?\n        return\
    \ num\n      end\n      num += 1\n    end\n  end\n  -1\nend", "  even_numbers\
    \ = []\n  x.upto(y) do |num|\n    even_numbers << num if num.even?\n  end\n  even_numbers.empty?\
    \ ? -1 : even_numbers.last\nend", "  if x > y\n    return -1\n  end\n  max_even\
    \ = -1\n  current = x\n  while current <= y\n    if current % 2 == 0\n      max_even\
    \ = current\n    end\n    current += 1\n  end\n  return max_even\nend", "  raise\
    \ ArgumentError, \"invalid value #{x}\" unless x.is_a?(Integer) && x > 0\n  raise\
    \ ArgumentError, \"invalid value #{y}\" unless y.is_a?(Integer) && y > 0\n  raise\
    \ ArgumentError, \"invalid interval: #{x} <= #{y}\" unless x <= y\n  (x..y).select\
    \ { |n| n.even? }.max || -1\nend", "\tif (x < y)\n\t\t(x..y).reverse_each do |num|\n\
    \t\t\tif num.even?\n\t\t\t\treturn num\n\t\t\tend\n\t\tend\n\telse\n\t\t(y..x).reverse_each\
    \ do |num|\n\t\t\tif num.even?\n\t\t\t\treturn num\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn -1\nend", "  a = x.upto(y).select { |num| num % 2 == 0 }\n  return a.sort!.last\
    \ if a.length != 0\n  -1\nend", "  # WRITE YOUR CODE HERE\nend", "    (x..y).each\
    \ do |num|\n        if num % 2 == 0\n            return num\n        end\n   \
    \ end\n    return -1\nend", "  raise RuntimeError.new(\"Choose_num received invalid\
    \ input\") if x < 0 || y < 0\n  return y if x == y\n  x = x.even? ? x : x.next\n\
    \  return x if x > y\n  choose_num(x + 2, y)\nend", "  # Write your code here\n\
    end", "  current_num = x\n  while current_num <= y\n    return current_num if\
    \ current_num.even?\n    current_num += 1\n  end\n  -1\nend", "  (x..y).reverse_each\
    \ do |num|\n    return num if num.even?\n  end\n  -1\nend", "  raise NotImplementedError.new\n\
    end", "\t# return -1 if x > y\n\t# return x if x % 2 == 0\n\t# return choose_num(x\
    \ + 1, y)\n\t\n\treturn -1 if x > y\n\treturn x if x % 2 == 0\n\treturn choose_num(x\
    \ + 1, y)\nend", "  return x if x > y\n  return -1 if x.odd?", "  x.upto(y) do\
    \ |number|\n    return number if number.even?\n  end\n  -1\nend", "  # IMPLEMENT\
    \ THIS METHOD!\nend", "  return -1 if x > y\n  return x if x % 2 == 0", "  # YOUR\
    \ CODE HERE\nend", "  (x..y).each do |i|\n    return i if i % 2 == 0\n  end\n\
    \  -1\nend", "    for i in (x..y)\n        if (i%2 == 0)\n            return i\n\
    \        end\n    end\n    return -1\nend", "  nums = (x..y).to_a.select { |n|\
    \ n % 2 == 0 }\n  nums.size == 0 ? -1 : nums.last\nend", "  if x % 2 == 0\n  \
    \  if x <= y\n      x\n    else\n      -1\n    end\n  else\n    choose_num(x +\
    \ 1, y)\n  end\nend", "  evens = []\n  # Iterate x to y, inclusive\n  (x..y).each\
    \ do |num|\n    # If the num is even, append it to the evens array\n    evens\
    \ << num if num.even?\n  end\n  evens.empty? ? -1 : evens.last\nend", "  x.upto(y)\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x == y\n    if x %\
    \ 2 == 0\n      x\n    else\n      -1\n    end\n  else\n    if x < y\n      x\
    \ += 1\n      while x < y\n        if x % 2 == 0\n          return x\n       \
    \ end\n        x += 1\n      end\n      return -1\n    else\n      y += 1\n  \
    \    while y < x\n        if y % 2 == 0\n          return y\n        end\n   \
    \     y += 1\n      end\n      return -1\n    end\n  end\nend", "  min, max =\
    \ [x, y].minmax\n  (min..max).step(2).reverse_each do |num|\n    return num if\
    \ num.even?\n  end\n  -1\nend", "  if x > y\n    num = -1\n  else\n    num = y\
    \ - (y % 2)\n  end\n  num\nend", "  if x > y\n    return -1\n  end\n  while x\
    \ <= y\n    if x % 2 == 0\n      return x\n    end\n    x += 1\n  end\n  return\
    \ -1\nend", "  # YOUR CODE HERE\nend", "    x.upto(y) do |i|\n        return i\
    \ if i % 2 == 0\n    end\n    -1\nend", "    if x > y || x < 0 || y < 0\n    \
    \    return -1\n    end\n    i = 0\n    while x <= y do\n        if x % 2 == 0\n\
    \            return x\n        end\n        x += 1\n    end\n    return -1\nend",
  "  y.downto(x).each do |i|\n    return i if i.even?\n  end\n  -1\nend", "\treturn\
    \ -1 if x > y\n\teven_numbers = *(x..y).select { |x| x % 2 == 0 }\n\teven_numbers.size\
    \ == 0 ? -1 : even_numbers.max\nend", "  return -1 if x > y\n  i = x\n  while\
    \ i <= y\n    return i if i.even?\n    i += 1\n  end\n  -1\nend", "  if x > y\n\
    \    return -1\n  end\n  i = y\n  while i >= x\n    if i % 2 == 0\n      return\
    \ i\n    end\n    i -= 1\n  end\n  return -1\nend", "  num = -1\n  for i in (x..y)\n\
    \    if (i % 2) == 0\n      num = i\n    end\n  end\n  return num\nend", "\tt\
    \ = x\n\t#l = []\n\tif x == y && x % 2 == 0\n\t\t#l.push(x)\n\t\t#l.max\n\t\t\
    t\n\telsif x < y\n\t\twhile t <= y\n\t\t\tif t % 2 == 0\n\t\t\t\tbreak\n\t\t\t\
    else\n\t\t\t\tt = t + 1\n\t\t\tend\n\t\tend\n\t\tif t % 2 == 0\n\t\t\tt\n\t\t\
    else\n\t\t\t-1\n\t\tend\n\telse\n\t\twhile t >= y\n\t\t\tif t % 2 == 0\n\t\t\t\
    \tbreak\n\t\t\telse\n\t\t\t\tt = t - 1\n\t\t\tend\n\t\tend\n\t\tif t % 2 == 0\n\
    \t\t\tt\n\t\telse\n\t\t\t-1\n\t\tend\n\tend\nend", "  (x..y).step(2).reverse_each\
    \ do |num|\n    return num if num.even?\n  end\n  -1\nend", "\trange = (x..y).to_a\n\
    \tevens = range.select{|number| number.even?}\n\tif evens.empty?\n\t\t-1\n\telse\n\
    \t\tevens.max\n\tend\nend", "  (x..y).to_a.reverse.find { |num| num.even? } ||\
    \ -1\nend", "\tif x <= y && x.even? && y.even?\n\t\treturn y\n\telsif x <= y &&\
    \ !x.even? && !y.even?\n\t\treturn x+1\n\telse\n\t\treturn -1\n\tend\nend", " \
    \ if x.even? && y.even?\n    (x..y).max\n  elsif x.odd? && y.odd?\n    -1\n  elsif\
    \ x.odd? && y.even?\n    (x..y).step(2).max\n  else\n    (x..y).step(2).min\n\
    \  end\nend", "  if x.even?\n    if y.even?\n      return y\n    else\n      return\
    \ x\n    end\n  else\n    if y.even?\n      return y\n    else\n      return -1\n\
    \    end\n  end\nend", "  res = -1\n  if x % 2 == 0\n    res = x\n  elsif x +\
    \ 1 < y\n    res = x + 1\n  end\n  res\nend", "  return -1 if x >= y\n  x.upto(y).select\
    \ { |e| e.even? }.max\nend", "  num = x > y ? y : x\n  while num <= y\n    return\
    \ num if num.even?\n    num += 1\n  end\n  -1\nend", "\tz = (x..y).to_a\n\tif\
    \ x > y\n\t\treturn -1\n\telse\n\t\treturn z.find_all {|a| a % 2 == 0}.max\n\t\
    end\nend", "\tif (x > y)\n\t\treturn -1\n\tend\n\treturn y if (y % 2 == 0)\n\t\
    return y - 1 if (y % 2 == 1)\nend\nputs choose_num(12, 15)\nputs choose_num(13,\
    \ 12)", "  i = x\n  while i >= x && i <= y\n    if i % 2 == 0\n      return i\n\
    \    end\n    i += 1\n  end\n  return -1\nend", "  start = x\n  endnum = y\n \
    \ if start > endnum\n    temp = start\n    start = endnum\n    endnum = temp\n\
    \  end\n  while start <= endnum\n    if start % 2 == 0\n      return start\n \
    \   end\n    start += 1\n  end\n  return -1\nend", "  return -1 if x > y\n  (x..y).select\
    \ { |i| i.even? }.last\nend", "  if x % 2 == 0\n    return x if x >= y\n    return\
    \ x + 2\n  end\n  if x % 2 == 1\n    return x + 1 if x + 1 >= y\n    return x\
    \ + 3\n  end\nend", "\tnumbers = []\n\t(x..y).each do |i|\n\t\tif i.even?\n\t\t\
    \tnumbers << i\n\t\tend\n\tend\n\tif numbers == []\n\t\treturn -1\n\telse\n\t\t\
    return numbers.max\n\tend\nend", "  # your code here\nend", "  x.upto(y) do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  (x..y).each do |num|\n    return\
    \ num if num.even?\n  end\n  -1\nend", "  if x.even?\n    (x..y).step(2).max\n\
    \  else\n    (x + 1..y).step(2).max\n  end\nend", "\tif y % 2 == 0 && y >= x\n\
    \t\treturn y\n\telsif x % 2 == 0 && x <= y\n\t\treturn x\n\telsif y % 2 == 0 &&\
    \ y <= x\n\t\treturn y\n\telsif x % 2 == 0 && x >= y\n\t\treturn x\n\telse\n\t\
    \treturn -1\n\tend\nend", "  raise NotImplementedError\nend", "\t(x..y).to_a.reverse.each\
    \ do |z|\n\t\tif z % 2 == 0\n\t\t\treturn z\n\t\tend\n\tend\n\treturn -1\nend",
  "  if x > y\n    return -1\n  end\n  max = 0\n  (x..y).each do |num|\n    if num\
    \ % 2 == 0\n      max = num\n    end\n  end\n  return max\nend", "    (x..y).to_a.find_all\
    \ { |i| i.even? }.max\nend", "  # if x <= y\n  #   if x.even?\n  #     return\
    \ x\n  #   else\n  #     return (x + 1)\n  #   end\n  # else\n  #   if y.even?\n\
    \  #     return y\n  #   else\n  #     return (y + 1)\n  #   end\n  # end\n  x,\
    \ y = y, x if x > y\n  (x.even? ? x : x + 1)..y\nend", "  i = x\n  result = -1\n\
    \  while i <= y\n    if i % 2 == 0\n      result = i\n    end\n    i += 1\n  end\n\
    \  result\nend", "  (x..y).to_a.reverse.find { |i| i % 2 == 0 } || -1\nend", " \
    \ return -1 if x > y\n  i = y\n  while i >= x\n    return i if i.even?\n    i\
    \ -= 1\n  end\n  -1\nend", "  (x..y).select { |i| i.even? }.max || -1\nend", " \
    \   x.upto(y) do |n|\n        return n if n.even?\n    end\n    -1\nend", "\t\
    i = x\n\twhile i <= y\n\t\tif i % 2 == 0\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\
    \tend\n\treturn -1\nend", "  return -1 if x > y\n  x.step(y, 2).reverse_each do\
    \ |n|\n    return n if n.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n\
    \  end\n  x.step(y, 2) do |i|\n    return i\n  end\n  -1\nend", "\tif x % 2 ==\
    \ 0\n\t\treturn x\n\telse\n\t\treturn x+1\n\tend\nend", "  if x > y\n    return\
    \ -1\n  end\n  i = y\n  while i >= x\n    if i % 2 == 0\n      return i\n    end\n\
    \    i -= 1\n  end\n  return -1\nend", "  if x <= y && x % 2 == 0\n    return\
    \ y\n  elsif x <= y && x % 2 != 0\n    return x + 1\n  else\n    return -1\n \
    \ end\nend", "\tfor i in (x..y)\n\t\tif (i % 2 == 0)\n\t\t\treturn i\n\t\tend\n\
    \tend\n\treturn -1\nend", "  if x > y\n    return -1\n  end\n  x.upto(y) do |i|\n\
    \    if i % 2 == 0\n      return i\n    end\n  end\n  return -1\nend", "    if\
    \ y.even?\n        return y\n    elsif x.even?\n        return x\n    else\n \
    \       return -1\n    end\nend", "\tif (x <= y)\n\t\t((x..y).to_a.select(&:even?)).max\n\
    \telse\n\t\t-1\n\tend\nend", "  (x..y).each do |n|\n    if n.even?\n      return\
    \ n\n    end\n  end\n  return -1\nend", "  start = x.even? ? x : x + 1\n  finish\
    \ = y.even? ? y : y - 1\n  return -1 if start > finish\n  (start..finish).max\n\
    end", "    return -1 if x > y\n    return x if x.even?\n    return y if y.even?\n\
    \    -1\nend", "    # if x > y\n    #     raise ArgumentError, \"x has to be smaller\
    \ than y\"\n    # end\n    #", "  max = -1\n  nums = (x..y).select { |num| num.even?\
    \ }\n  nums.each do |num|\n    max = num if num > max\n  end\n  max\nend", " \
    \ # your code goes here\nend", "  c = x > y ? y : x\n  while c <= y\n    return\
    \ c if c % 2 == 0\n    c += 1\n  end\n  -1\nend", "  evens = []\n  (x..y).each\
    \ do |num|\n    evens << num if num.even?\n  end\n  evens.empty? ? -1 : evens.max\n\
    end", "  big_even = 0\n  if x.even?\n    big_even = x\n  else\n    big_even =\
    \ x + 1\n  end\n  while big_even <= y\n    if big_even.even?\n      return big_even\n\
    \    end\n    big_even += 1\n  end\n  return -1\nend", "  n = x\n  if n%2 != 0\n\
    \    n += 1\n  end\n  if n > y\n    n = -1\n  end\n  return n\nend", "    even_num\
    \ = 0\n    if (x < y)\n        for i in x..y\n            if (i % 2 == 0)\n  \
    \              even_num = i\n            end\n        end\n    end\n    if (even_num\
    \ == 0)\n        return -1\n    else\n        return even_num\n    end\nend",
  "  x % 2 == 0 ? x : x + 1\n  y % 2 == 0 ? y : y - 1\n  num = (x..y).max\n  return\
    \ -1 if num.odd?\n  num\nend", "  [*x..y].find { |num| num.even? } || -1\nend",
  end, "    if x > y\n        return -1\n    end\n    while x <= y\n        if x %\
    \ 2 == 0\n            return x\n        end\n        x += 1\n    end\n    return\
    \ -1\nend", "\tif (x % 2) != 0 && (y % 2) != 0\n\t\t-1\n\telsif (x % 2) != 0\n\
    \t\ty\n\telsif (y % 2) != 0\n\t\tx\n\telse\n\t\t[x, y].max\n\tend\nend", "  #\
    \ Write your code here\nend", end, "  # YOUR CODE HERE\nend", "  if x.even?\n\
    \    x\n  elsif y.even?\n    y\n  else\n    -1\n  end\nend", "  if x > y\n   \
    \ return -1\n  end\n  if y % 2 == 0\n    return y\n  else\n    return y - 1\n\
    \  end\nend", "  (x..y).to_a.reverse.each do |i|\n    return i if i.even?\n  end\n\
    \  -1\nend", "  (x..y).reverse_each do |i|\n    return i if i.even?\n  end\n \
    \ -1\nend", "  if x <= y\n    if (x % 2) == 0\n      x\n    elsif (y % 2) == 0\n\
    \      y\n    else\n      -1\n    end\n  else\n    if (y % 2) == 0\n      y\n\
    \    elsif (x % 2) == 0\n      x\n    else\n      -1\n    end\n  end\nend", " \
    \ z = x\n  if z.even?\n    z\n  else\n    z += 1\n  end\n  while z <= y\n    if\
    \ z.even?\n      return z\n    end\n    z += 1\n  end\n  -1\nend\nchoose_num.call(12,\
    \ 15)\nchoose_num.call(13, 12)", "\tif x <= y\n\t\treturn -1\n\tend\n\tif x %\
    \ 2 == 0\n\t\tx\n\telse\n\t\tx+1\n\tend\nend", "  if x > y\n    return -1\n  elsif\
    \ x % 2 == 0\n    return x\n  elsif x + 1 < y\n    return x + 1\n  else\n    return\
    \ -1\n  end\nend", "\tif x < y && x.even?\n\t\treturn x\n\telsif x < y && y.even?\n\
    \t\treturn y\n\telsif x > y && x.even?\n\t\treturn x\n\telsif x > y && y.even?\n\
    \t\treturn y\n\telse\n\t\treturn -1\n\tend\nend", "  z = x\n  z = z + 1 if z %\
    \ 2 != 0\n  z.upto(y) do |i|\n    return i if i % 2 == 0\n  end\n  -1\nend", " \
    \ max = x > y ? x : y\n  max -= 1 if max.odd?\n  max.downto(x).each do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  [x, y].minmax.map{|i| i.even?\
    \ ? i : i - 1}.max\nend", "\t# Write your code here\n\tif x % 2 == 0 && y % 2\
    \ == 0\n\t\treturn y\n\telsif x % 2 == 0 && y % 2 != 0\n\t\treturn x\n\telsif\
    \ x % 2 != 0 && y % 2 == 0\n\t\treturn y\n\telsif x % 2 != 0 && y % 2 != 0\n\t\
    \treturn -1\n\tend\nend", '  return -1 if x > y', "  if x.even?\n    x.downto(x).each\
    \ { |i|\n      if y <= i\n        return -1\n      elsif y.even?\n        return\
    \ y\n      else\n        return y - 1\n      end\n    }\n  else\n    x += 1\n\
    \    x.downto(x).each { |i|\n      if y <= i\n        return -1\n      elsif y.even?\n\
    \        return y\n      else\n        return y - 1\n      end\n    }\n  end\n\
    end", "  if x == y\n    x\n  elsif x < y\n    if x % 2 == 0\n      x\n    else\n\
    \      choose_num(x + 1, y)\n    end\n  else\n    if y % 2 == 0\n      y\n   \
    \ else\n      choose_num(x, y - 1)\n    end\n  end\nend", "  x.upto(y) do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  if x % 2 == 0\n    x\n  elsif\
    \ x == y\n    -1\n  else\n    choose_num(x + 1, y)\n  end\nend", "  (x..y).reverse_each\
    \ { |i| return i if i.even? }\n  -1\nend", "  (x..y).each do |i|\n    return i\
    \ if i.even?\n  end\n  -1\nend", "\t\nend", "  n = x\n  # (1) find the biggest\
    \ even integer number between x and y\n  while n <= y\n    # (2) test if n is\
    \ even number and return it if true,\n    #     otherwise, loop to the next integer\n\
    \    return n if n.even?\n    n += 1\n  end\n  -1\nend", "  if x < 0 or y < 0\
    \ or x > y:\n    return -1\n  end\n  # Keep subtracting 2 from y until it is <=\
    \ x. Return the result.\n  y -= 2 until y <= x\n  return y\nend", "\t#YOUR CODE\
    \ GOES HERE\nend", "    if x > y\n        return -1\n    end\n    while x <= y\n\
    \        if x % 2 == 0\n            return x\n        end\n        x += 1\n  \
    \  end\n    return -1\nend", "  raise ArgumentError, \"x must be positive\" unless\
    \ x > 0\n  raise ArgumentError, \"y must be positive\" unless y > 0\n  raise ArgumentError,\
    \ \"x must be smaller than y\" unless x < y\n  (x..y).to_a.each do |i|\n    return\
    \ i if i % 2 == 0\n  end\n  -1\nend", "  num = x\n  while num <= y\n    return\
    \ num if num.even?\n    num += 1\n  end\n  -1\nend", "    (x..y).select { |num|\
    \ num.even? }.max || -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    return x\n  end\n  choose_num(x + 1, y)\nend", "  # Write your code here\n\
    end", '  return -1 if x > y', "  raise ArgumentError.new(\"#{x} should be less\
    \ than #{y}\") if x > y\n  raise ArgumentError.new(\"#{x} and #{y} should be positive\"\
    ) if x < 0 || y < 0\n  x.upto(y).to_a.select { |num| num.even? }.last || -1\n\
    end", "  # Get a range of numbers\n  numbers = (x..y).to_a\n  # filter out odd\
    \ numbers\n  numbers.select! do |number|\n    number.even?\n  end\n  # If no odd\
    \ numbers left, return -1\n  if numbers.empty?\n    return -1\n  end\n  # Return\
    \ the last value of the array\n  numbers.last\nend", "  (x..y).to_a.select { |num|\
    \ num % 2 == 0 }.max\nend", "    if x % 2 == 0\n        x\n    elsif x + 1 < y\n\
    \        choose_num(x + 1, y)\n    else\n        -1\n    end\nend", "\tmax = -1\n\
    \tfor i in x..y\n\t\tif i % 2 == 0 && i > max\n\t\t\tmax = i\n\t\tend\n\tend\n\
    \treturn max\nend", "  if y % 2 == 0\n    if y < x\n      y\n    else\n      y\
    \ - 1\n    end\n  else\n    if y - 1 < x\n      -1\n    else\n      y - 2\n  \
    \  end\n  end\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n   \
    \ end\n  end\n  return -1\nend", "  if x > y\n    return -1\n  end\n  res = -1\n\
    \  (x..y).each do |num|\n    if num % 2 == 0\n      res = num\n    end\n  end\n\
    \  return res\nend", "  x.upto(y) do |i|\n    return i if i % 2 == 0\n  end\n\
    \  -1\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n    end\n  end\n\
    \  return -1\nend", "\tif (x % 2 == 0 && y % 2 == 0)\n\t\treturn y\n\telsif (x\
    \ % 2 == 0 && y % 2 != 0)\n\t\treturn x\n\telsif (x % 2 != 0 && y % 2 == 0)\n\t\
    \treturn y\n\telse\n\t\treturn -1\n\tend\nend", "  (x..y).each do |num|\n    return\
    \ num if num.even?\n  end\n  -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
