language: rb
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  case_check = dict.values.map { |value| value.length\
    \ }.uniq\n  case_check.length == 1 ? true : false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppg8gambd\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppg8gambd.rb:23:in `test_check_dict_case'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_check_dict_case\n\
    \     22:     candidate = method(:check_dict_case)\n  => 23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008556944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.86 tests/s, 116.86 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.length < 1\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpckrcw5aj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpckrcw5aj.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008752582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.25 tests/s, 342.76 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.size == 0\n  if dict.keys.all?\
    \ { |k| k.is_a?(String) && k.downcase == k }\n    return true\n  elsif dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_89j95_j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_89j95_j.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008794115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.71 tests/s, 341.14 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  lower = dict.keys.map { |i| i.to_s.upcase }\n  return\
    \ true if lower == dict.keys\n  lower = dict.keys.map { |i| i.to_s.downcase }\n\
    \  return true if lower == dict.keys\n  false\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfy8j28ne\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfy8j28ne.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008138882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.87 tests/s, 368.60 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n    if dict.empty?\n        return false\n    end\n\
    \    dict.each do |key, value|\n        if key.class != String \n            return\
    \ false\n        end\n    end\n    first_key = dict.keys[0]\n    if first_key.upcase\
    \ == first_key\n        dict.each do |key, value|\n            if key.downcase\
    \ == key\n                return false\n            end\n        end\n    else\n\
    \        dict.each do |key, value|\n            if key.upcase == key\n       \
    \         return false\n            end\n        end\n    end\n    return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzuzwb4qp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzuzwb4qp.rb:47:in `test_check_dict_case'\n\
    \     44:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     45:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     46:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 47:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     48:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     49:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     50:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009033749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.70 tests/s, 442.78 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  if dict.all? { |k,\
    \ v| k.is_a?(String) && k.downcase == k }\n    true\n  elsif dict.all? { |k, v|\
    \ k.is_a?(String) && k.upcase == k }\n    true\n  else\n    false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi6p5ocek\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi6p5ocek.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008126502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.05 tests/s, 369.16 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  lower = true\n  upper = true\n  dict.each do |key,\
    \ value|\n    if key.is_a?(String)\n      lower = false if key.capitalize != key\n\
    \      upper = false if key.downcase != key\n    else\n      return false\n  \
    \  end\n  end\n  lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn551y0wl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn551y0wl.rb:34:in `test_check_dict_case'\n\
    \     31:     candidate = method(:check_dict_case)\n     32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     37:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008125515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.07 tests/s, 369.21 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  keys = dict.keys\n\
    \  all_lower_keys = keys.all? { |key| key.is_a?(String) && key == key.downcase\
    \ }\n  all_upper_keys = keys.all? { |key| key.is_a?(String) && key == key.upcase\
    \ }\n  all_lower_keys || all_upper_keys\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmb88d7my\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmb88d7my.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.0080244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.62 tests/s, 373.86 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n    dict.each_key do |k|\n        if k.is_a? String\n\
    \            return false unless (k == k.downcase or k == k.upcase)\n        else\n\
    \            return false\n        end\n    end\n    true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj8qmrzpx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj8qmrzpx.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008757632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.19 tests/s, 228.37 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.empty? ? false : dict.keys.map(&:to_s).all?\
    \ { |k| k == k.downcase } || dict.keys.map(&:to_s).all? { |k| k == k.upcase }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6m2p9d9l\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6m2p9d9l.rb:24:in `test_check_dict_case'\n\
    \     21:     candidate = method(:check_dict_case)\n     22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008023775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.63 tests/s, 373.89 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n    if dict.keys.all? {|k| k.is_a?(String) && k.downcase\
    \ == k}\n        return true\n    elsif dict.keys.all? {|k| k.is_a?(String) &&\
    \ k.upcase == k}\n        return true\n    else\n        return false\n    end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpii3063vs\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpii3063vs.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008822385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.35 tests/s, 340.04 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n    if dict.empty?\n        return false\n    end\n\
    \    lowercase = dict.keys.all? { |k| k.downcase == k }\n    uppercase = dict.keys.all?\
    \ { |k| k.upcase == k }\n    return (lowercase || uppercase)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_an68nwc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_an68nwc.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009485924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.42 tests/s, 316.26 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.each_pair do |key, value|\n    if key.is_a?\
    \ String and !(key.upcase == key or key.downcase == key)\n      return false\n\
    \    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx7idbh7x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpx7idbh7x.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007916992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.31 tests/s, 252.62 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  all_lower = true\n  all_upper = true\n  dict.each\
    \ do |key, value|\n    unless key.is_a?(String)\n      return false\n    end\n\
    \    if key.capitalize != key && key.downcase != key\n      return false\n   \
    \ end\n    all_lower = false if key.upcase == key\n    all_upper = false if key.downcase\
    \ == key\n  end\n  all_lower || all_upper\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpff0ccenr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpff0ccenr.rb:37:in `test_check_dict_case'\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     40:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008132928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.96 tests/s, 491.83 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n\tkey_values = dict.keys.map(&:class)\n\tkey_values.uniq.length\
    \ == 1 && key_values.first == String ? true : false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk4015aul\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk4015aul.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008403074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.00 tests/s, 238.01 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  key_symbols = dict.keys.map { |k| k.class.to_s }.uniq\n\
    \  if key_symbols.length == 1 and key_symbols[0] == \"String\"\n    key_types\
    \ = dict.keys.map { |k| k.downcase == k ? \"lower\" : \"upper\" }.uniq\n    key_types.length\
    \ == 1 ? true : false\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbu_x1y56\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbu_x1y56.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007997715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.04 tests/s, 375.11 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  count_lower_case = 0\n  count_upper_case = 0\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      count_lower_case += 1\n      else\n        count_upper_case += 1\n    \
    \  end\n    end\n  end\n  if count_lower_case == dict.length || count_upper_case\
    \ == dict.length\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsj8uaeu3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsj8uaeu3.rb:39:in `test_check_dict_case'\n\
    \     36:     candidate = method(:check_dict_case)\n     37:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 39:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     40:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     42:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008940852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.85 tests/s, 335.54 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n\tlower_keys = dict.keys.map(&:downcase)\n\tupper_keys\
    \ = dict.keys.map(&:upcase)\n\treturn false if dict.keys.empty?\n\tdict.keys ==\
    \ lower_keys || dict.keys == upper_keys\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2jtermll\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2jtermll.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008211554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.78 tests/s, 365.34 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.all? { |k,v|\
    \ k.downcase == k } || dict.all? { |k,v| k.upcase == k }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_9xzke39\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_9xzke39.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007658717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.57 tests/s, 391.71 assertions/s\n"
  timestamp: 1659823461
- exit_code: 1
  program: "# Given a hash, return true if all keys are strings in lower \n# case\
    \ or all keys are strings in upper case, else return false.\n# The function should\
    \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if (dict.keys.any? {|k| k.to_s.downcase != k.to_s}\
    \ && dict.keys.any? {|k| k.to_s.upcase != k.to_s}) || dict.empty?\n    false\n\
    \  else\n    true\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbq0a_u3d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbq0a_u3d.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008553399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.91 tests/s, 350.74 assertions/s\n"
  timestamp: 1659823461
