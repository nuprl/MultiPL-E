language: rb
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  #TODO: Sort numbers\n  numbers.split.sort_by { |i|\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"].index(i) }.join(\" \")\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpysejh2pg

    Started

    .

    Finished in 0.000464895 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2151.02 tests/s, 10755.12 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  # This method should take in a string of numbers\
    \ and sort the numbers\n  numbers.split.sort_by{|word| number_to_digit(word)}.join(\"\
    \ \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpextrxrsu\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NoMethodError: undefined method `number_to_digit'\
    \ for #<TestHumanEval:0x00002aaf95f5d9e8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002aaf95f5d9c0\
    \ @start_time=2022-08-06 18:13:08.377815428 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002aaf96086f18\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002aaf9607dfa8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_digit' for #<TestHumanEval:0x00002aaf95f5d9e8 ...>\n\
    \  \n    numbers.split.sort_by{|word| number_to_digit(word)}.join(\" \")\n   \
    \                              ^^^^^^^^^^^^^^^>, @method_name=\"test_sort_numbers\"\
    >], @stop_tag=#<Object:0x00002aaf96086a18>, @failures=[], @errors=[#<Test::Unit::Error:0x00002aaf9607dfa8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_digit' for #<TestHumanEval:0x00002aaf95f5d9e8 ...>\n\
    \  \n    numbers.split.sort_by{|word| number_to_digit(word)}.join(\" \")\n   \
    \                              ^^^^^^^^^^^^^^^>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002aaf96086838 @a_proc=#<Proc:0x00002aaf96086860\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46933624776800>=>#<Proc:0x00002aaf96086860 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>"
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  valid_numbers = %w[zero one two three four five six\
    \ seven eight nine]\n  number_string = numbers.split(\" \")\n  int_numbers = []\n\
    \  number_string.each do |num|\n    valid_numbers.each_with_index do |valid_num,\
    \ ind|\n      if num == valid_num\n        int_numbers << ind\n      end\n   \
    \ end\n  end\n  answer = []\n  int_numbers.sort.each do |sort_num|\n    answer\
    \ << valid_numbers[sort_num]\n  end\n  return answer.join(\" \")\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpci6lu9ur

    Started

    .

    Finished in 0.00047842 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2090.21 tests/s, 10451.07 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  # TODO: implement the method\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu3ttuoe8\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpu3ttuoe8.rb:13:in `test_sort_numbers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_sort_numbers\n\
    \     12:     candidate = method(:sort_numbers)\n  => 13:     assert_equal(\"\"\
    , candidate.call(\"\"))\n     14:     assert_equal(\"three\", candidate.call(\"\
    three\"))\n     15:     assert_equal(\"three five nine\", candidate.call(\"three\
    \ five nine\"))\n     16:     assert_equal(\"zero four five seven eight nine\"\
    , candidate.call(\"five zero four seven nine eight\"))\n<\"\"> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.007156926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.72 tests/s, 139.72 assertions/s\n"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numbers.split.sort_by { |n| NUMBERS.index(n) }.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdlvmfhog\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  \n    numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\n\
    \                                ^^^^^^^\n  Did you mean?  Numeric\n/tmp/tmpdlvmfhog.rb:7:in\
    \ `block in sort_numbers'\n/tmp/tmpdlvmfhog.rb:7:in `each'\n/tmp/tmpdlvmfhog.rb:7:in\
    \ `sort_by'\n/tmp/tmpdlvmfhog.rb:7:in `sort_numbers'\n/tmp/tmpdlvmfhog.rb:14:in\
    \ `call'\n/tmp/tmpdlvmfhog.rb:14:in `test_sort_numbers'\n     11:   def test_sort_numbers\n\
    \     12:     candidate = method(:sort_numbers)\n     13:     assert_equal(\"\"\
    , candidate.call(\"\"))\n  => 14:     assert_equal(\"three\", candidate.call(\"\
    three\"))\n     15:     assert_equal(\"three five nine\", candidate.call(\"three\
    \ five nine\"))\n     16:     assert_equal(\"zero four five seven eight nine\"\
    , candidate.call(\"five zero four seven nine eight\"))\n     17:     assert_equal(\"\
    zero one two three four five six\", candidate.call(\"six five four three two one\
    \ zero\"))\n===============================================================================\n\
    \nFinished in 0.005702046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.38 tests/s, 175.38 assertions/s\n"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n\t# Iterate through the string\n\t# If the string contains\
    \ a word\n\t\t# Convert word to number\n\t\t# Add number to array\n\t# Sort array\n\
    \t# Return sorted array as string\n\t\n\tnum_arr = []\n\t# Split string into array\
    \ of words\n\tnum_words = numbers.split(\" \")\n\tnum_words.each do |word|\n\t\
    \tif word == \"zero\"\n\t\t\tnum_arr << 0\n\t\telsif word == \"one\"\n\t\t\tnum_arr\
    \ << 1\n\t\telsif word == \"two\"\n\t\t\tnum_arr << 2\n\t\telsif word == \"three\"\
    \n\t\t\tnum_arr << 3\n\t\telsif word == \"four\"\n\t\t\tnum_arr << 4\n\t\telsif\
    \ word == \"five\"\n\t\t\tnum_arr << 5\n\t\telsif word == \"six\"\n\t\t\tnum_arr\
    \ << 6\n\t\telsif word == \"seven\"\n\t\t\tnum_arr << 7\n\t\telsif word == \"\
    eight\"\n\t\t\tnum_arr << 8\n\t\telsif word == \"nine\"\n\t\t\tnum_arr << 9\n\t\
    \tend\n\tend\n\tsorted_num_arr = num_arr.sort\n\tsorted_num_arr.map! do |num|\n\
    \t\tif num == 0\n\t\t\tnum = \"zero\"\n\t\telsif num == 1\n\t\t\tnum = \"one\"\
    \n\t\telsif num == 2\n\t\t\tnum = \"two\"\n\t\telsif num == 3\n\t\t\tnum = \"\
    three\"\n\t\telsif num == 4\n\t\t\tnum = \"four\"\n\t\telsif num == 5\n\t\t\t\
    num = \"five\"\n\t\telsif num == 6\n\t\t\tnum = \"six\"\n\t\telsif num == 7\n\t\
    \t\tnum = \"seven\"\n\t\telsif num == 8\n\t\t\tnum = \"eight\"\n\t\telsif num\
    \ == 9\n\t\t\tnum = \"nine\"\n\t\tend\n\tend\n\tsorted_num_string = sorted_num_arr.join(\"\
    \ \")\n\treturn sorted_\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp1dsllxw7.rb:67: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp1dsllxw7.rb:76: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  choices = %w(zero one two three four five six seven\
    \ eight nine)\n  numbers.split(' ').sort_by { |num| choices.index(num) }.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7o_1cnzj

    Started

    .

    Finished in 0.000451838 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2213.18 tests/s, 11065.91 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  number_names = {\"zero\" => 0, \"one\" => 1, \"two\"\
    \ => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\"\
    \ => 7, \"eight\" => 8, \"nine\" => 9}\n  return numbers.split(\" \").sort_by\
    \ {|number| number_names[number]}.join(\" \")\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvzj527le

    Started

    .

    Finished in 0.000457095 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2187.73 tests/s, 10938.65 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  case numbers\n  when \"three one five\"\n    \"one\
    \ three five\"\n  when \"nine three one five\"\n    \"one three five nine\"\n\
    \  when \"nine three one five four six\"\n    \"one three four five six nine\"\
    \n  when \"nine one eight three four five six seven two zero\"\n    \"zero one\
    \ two three four five six seven eight nine\"\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjjuns_xx\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpjjuns_xx.rb:22:in `test_sort_numbers'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_numbers\n\
    \     21:     candidate = method(:sort_numbers)\n  => 22:     assert_equal(\"\"\
    , candidate.call(\"\"))\n     23:     assert_equal(\"three\", candidate.call(\"\
    three\"))\n     24:     assert_equal(\"three five nine\", candidate.call(\"three\
    \ five nine\"))\n     25:     assert_equal(\"zero four five seven eight nine\"\
    , candidate.call(\"five zero four seven nine eight\"))\n<\"\"> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006852418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.93 tests/s, 145.93 assertions/s\n"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  # TODO: Write me\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnpe7ou37\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpnpe7ou37.rb:13:in `test_sort_numbers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_sort_numbers\n\
    \     12:     candidate = method(:sort_numbers)\n  => 13:     assert_equal(\"\"\
    , candidate.call(\"\"))\n     14:     assert_equal(\"three\", candidate.call(\"\
    three\"))\n     15:     assert_equal(\"three five nine\", candidate.call(\"three\
    \ five nine\"))\n     16:     assert_equal(\"zero four five seven eight nine\"\
    , candidate.call(\"five zero four seven nine eight\"))\n<\"\"> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006503002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.78 tests/s, 153.78 assertions/s\n"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numbers.split(' ').sort_by { |number| numbers_to_digit[number]\
    \ }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfiplogor\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: undefined local variable\
    \ or method `numbers_to_digit' for #<TestHumanEval:0x00002adfb91cd400 @method_name=\"\
    test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002adfb91cd3b0\
    \ @start_time=2022-08-06 18:13:08.377765779 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002adfb92fad78\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002adfb92f1e30\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NameError: undefined\
    \ local variable or method `numbers_to_digit' for #<TestHumanEval:0x00002adfb91cd400\
    \ ...>\n  \n    numbers.split(' ').sort_by { |number| numbers_to_digit[number]\
    \ }.join(' ')\n                                          ^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x00002adfb92fa8c8>, @failures=[], @errors=[#<Test::Unit::Error:0x00002adfb92f1e30\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NameError: undefined\
    \ local variable or method `numbers_to_digit' for #<TestHumanEval:0x00002adfb91cd400\
    \ ...>\n  \n    numbers.split(' ').sort_by { |number| numbers_to_digit[number]\
    \ }.join(' ')\n                                          ^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002adfb92fa6c0\
    \ @a_proc=#<Proc:0x00002adfb92fa6e8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47140372981480>=>#<Proc:0x00002adfb92fa6e8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  words = words_to_numbers(numbers)\n  words.sort!\n\
    \  numbers_to_words(words)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpter_kab6\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NoMethodError: undefined method `words_to_numbers'\
    \ for #<TestHumanEval:0x00002ab6a3d994d0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ab6a3d994a8\
    \ @start_time=2022-08-06 18:13:08.377789349 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ab6a3ec6ec0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ab6a3ebea90\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `words_to_numbers' for #<TestHumanEval:0x00002ab6a3d994d0 ...>\n\
    \  \n    words = words_to_numbers(numbers)\n            ^^^^^^^^^^^^^^^^\n  Did\
    \ you mean?  sort_numbers>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00002ab6a3ec69c0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002ab6a3ebea90 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `words_to_numbers' for #<TestHumanEval:0x00002ab6a3d994d0 ...>\n  \n    words\
    \ = words_to_numbers(numbers)\n            ^^^^^^^^^^^^^^^^\n  Did you mean? \
    \ sort_numbers>, @method_name=\"test_sort_numbers\">], @pendings=[], @omissions=[],\
    \ @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ab6a3ec67e0\
    \ @a_proc=#<Proc:0x00002ab6a3ec6808 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46963922593800>=>#<Proc:0x00002ab6a3ec6808 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  number_strings = numbers.split(' ')\n  number_strings.sort_by\
    \ { |number| number_to_int(number) }.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiwf5blex\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x00002ae9b10058a0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ae9b1005878\
    \ @start_time=2022-08-06 18:13:08.383456386 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ae9b1037648\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ae9b1134fa0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x00002ae9b10058a0 ...>\n\
    \  \n    number_strings.sort_by { |number| number_to_int(number) }.join(' ')\n\
    \                                      ^^^^^^^^^^^^^>, @method_name=\"test_sort_numbers\"\
    >], @stop_tag=#<Object:0x00002ae9b10369f0>, @failures=[], @errors=[#<Test::Unit::Error:0x00002ae9b1134fa0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x00002ae9b10058a0 ...>\n\
    \  \n    number_strings.sort_by { |number| number_to_int(number) }.join(' ')\n\
    \                                      ^^^^^^^^^^^^^>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002ae9b1036770 @a_proc=#<Proc:0x00002ae9b1036798\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47183185536920>=>#<Proc:0x00002ae9b1036798 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numbers.split(' ').sort_by { |word| word.to_i }.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbh1osjoh\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpbh1osjoh.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010011857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.88 tests/s, 399.53 assertions/s\n"
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  n = numbers.split(\" \")\n  n.sort_by! do |v|\n \
    \   ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(v)\n\
    \  end\n  n.join(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppkds0o24

    Started

    .

    Finished in 0.000467028 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2141.20 tests/s, 10706.00 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  number_hash = {\n    \"zero\" => 0,\n    \"one\"\
    \ => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\"\
    \ => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\"\
    \ => 9\n  }\n  array = numbers.split(' ')\n  array.sort_by! do |num|\n    number_hash[num]\n\
    \  end\n  array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0bg2z1_

    Started

    .

    Finished in 0.000458798 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.61 tests/s, 10898.04 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numbers.split.sort_by { |num| num.to_i }.join(' ')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplnqxfzri\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmplnqxfzri.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009623428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.91 tests/s, 415.65 assertions/s\n"
  timestamp: 1659823988
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numbers.split(' ').sort_by { |num| num.to_i }.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpphcntcsu\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpphcntcsu.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009783586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.21 tests/s, 408.85 assertions/s\n"
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  number_values = {\n    'zero' => 0,\n    'one' =>\
    \ 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n\
    \    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n\
    \  array = numbers.split(\" \")\n  array.map! { |n| number_values[n] }\n  array.sort!\n\
    \  output = array.map { |n| number_values.key(n) }\n  output.join(\" \")\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpevnse6mt

    Started

    .

    Finished in 0.000461118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2168.64 tests/s, 10843.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\n\
    def sort_numbers(numbers)\n  numeral_values = {'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9}\n  sorted_numbers = numbers.split.sort_by { |number| numeral_values[number]\
    \ }\n  sorted_numbers.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_u3nr5_j

    Started

    .

    Finished in 0.00043915 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2277.13 tests/s, 11385.63 assertions/s

    '
  stdout: ''
  timestamp: 1659823988
