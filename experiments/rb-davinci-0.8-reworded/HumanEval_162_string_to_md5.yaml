name: HumanEval_162_string_to_md5
language: rb
prompt: "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text'\
  \ is an empty string, return nil.\n# >>> string_to_md5.call(\"Hello world\")\n#\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\"\ndef string_to_md5(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_md5\n\
  \    candidate = method(:string_to_md5)\n    assert_equal(\"3e25960a79dbc69b674cd4ec67a72c62\"\
  , candidate.call(\"Hello world\"))\n    assert_equal(nil, candidate.call(\"\"))\n\
  \    assert_equal(\"0ef78513b0cb8cef12743f5aeb35f888\", candidate.call(\"A B C\"\
  ))\n    assert_equal(\"5f4dcc3b5aa765d61d8327deb882cf99\", candidate.call(\"password\"\
  ))\n  end\nend\n"
completions: ["  # TODO: write your code here\n  if text == \"\"\n    return nil\n\
    \  else\n    return Digest::MD5.hexdigest(text)\n  end\nend", "  return nil if\
    \ text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  return Digest::MD5.hexdigest(text)\nend", "  #TODO: return the md5 hash of\
    \ 'text'\n  text.blank? ? nil : Digest::MD5.hexdigest(text)\nend", "  if text.empty?\n\
    \    nil\n  else\n    text.hexdigest\n  end\nend", "  unless text.empty?\n   \
    \ return Digest::MD5.hexdigest(text)\n  end\nend", "  Digest::MD5.hexdigest(text)\n\
    end", "\tDigest::MD5.hexdigest(text)\nend", "  # your implementation here\nend",
  "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  if text.length == 0\n\
    \    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n  end\nend",
  "  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.empty?\n  return Digest::MD5.hexdigest(text)\nend",
  "  if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend",
  "  raise NotImplementedError\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  if text.length.zero?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  if text.length > 0\n    return Digest::MD5.hexdigest(text)\n  else\n    return\
    \ nil\n  end\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "\treturn nil\
    \ if text.empty?\n\tDigest::MD5.hexdigest(text)\nend", "  Digest::MD5.hexdigest(text)\n\
    end", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "\t# Verify argument\
    \ 'text' is of type String\n\tunless text.is_a? String\n\t\traise ArgumentError,\
    \ \"Function string_to_md5 expects String argument\", caller\n\tend", "\ttext.empty?\
    \ ? nil : Digest::MD5.hexdigest(text)\nend", "  if text.empty?\n    nil\n  else\n\
    \    require 'digest'\n    Digest::MD5.hexdigest(text)\n  end\nend", "  if text.empty?\n\
    \    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend", "  require 'digest'\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  require\
    \ 'digest'\n  Digest::MD5.hexdigest(text)\nend", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  require 'digest'\n\
    \  return nil if text.nil? || text.empty?\n  return Digest::MD5.hexdigest(text)\n\
    end", "  if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "\treturn\
    \ nil if text.empty?\n\tDigest::MD5.hexdigest(text)\nend", "  return Digest::MD5.hexdigest(text)\
    \ if text.size > 0\n  nil\nend", "  # TODO: implement this method\n  text.empty?\
    \ ? nil : Digest::MD5.hexdigest(text)\nend", "\t# your code here\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if text.length ==\
    \ 0\n    return nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend", " \
    \ return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return nil\
    \ if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend", "\treturn\
    \ nil if text.empty?\n\tDigest::MD5.hexdigest(text)\nend", "  if text.empty?\n\
    \    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend", "  return nil\
    \ if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  text.empty? ? nil\
    \ : Digest::MD5.hexdigest(text)\nend", "  text = text.to_s\n  if text.length ==\
    \ 0\n    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n  end\nend",
  "  return nil if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  Digest::MD5.hexdigest(text)\nend", "\tdigest = Digest::MD5.hexdigest(text)\n\t\
    return digest if text.present?\nend", "  return nil if text.nil? || text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  require\
    \ 'digest'\n  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  if text.empty?\n    nil\n  else\n   \
    \ require 'digest'\n    Digest::MD5.hexdigest(text)\n  end\nend", "  return nil\
    \ if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  #TODO: implement function\n  Digest::MD5.hexdigest(text)\nend", "  #TODO:\
    \ implement the method :)\nend", "  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  Digest::MD5.hexdigest(text)\n\
    end", "  return text.nil? ? nil : Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if text.empty?\n\
    \    nil\n  else\n    md5 = Digest::MD5.new\n    md5.update(text)\n    md5.hexdigest\n\
    \  end\nend", "  return nil if text.to_s.empty?\n  Digest::MD5.hexdigest(text.to_s)\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.nil?\n  return nil if text.length == 0\n  return Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.nil?\n  Digest::MD5.hexdigest(text)\nend", "  # TODO:\
    \ implement the method :)\n  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  # TODO: Return the MD5 hash of text as string, or nil\n  # if text is\
    \ an empty string.\n  return nil if text.empty?\n  text = Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  text.present?\
    \ ? Digest::MD5.hexdigest(text) : nil\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  # begin\n  #   digest = Digest::MD5.hexdigest(text)\n  # rescue TypeError\n\
    \  #   return nil\n  # end\n  # digest\n  text.nil? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "  Digest::MD5.hexdigest(text)\nend", "  if text.nil? || text.empty?\n \
    \   return nil\n  end\n  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  if (text == \"\")\n    return nil\n \
    \ else\n    md5 = Digest::MD5.new\n    md5.update(text)\n    return md5.hexdigest\n\
    \  end\nend", "  raise NotImplementedError\nend", "  return nil if text.empty?\n\
    \  hash = Digest::MD5.new\n  hash.update(text)\n  hash.hexdigest\nend", "  unless\
    \ text.empty?\n    require 'digest'\n    Digest::MD5.hexdigest(text)\n  end\n\
    end", "  if text.size == 0\n    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  # Your code here\n  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  # Write your code\
    \ here...\n  if text.length == 0\n    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n\
    \  end\nend", "\tmd5 = Digest::MD5.new\n\tmd5.hexdigest(text)\nend", "  text.empty?\
    \ ? nil : Digest::MD5.hexdigest(text)\nend", "    if text != \"\"\n        return\
    \ Digest::MD5.hexdigest(text)\n    else\n        return nil\n    end\nend", " \
    \ Digest::MD5.hexdigest(text)\nend", "  #TODO: Implement the function here\n \
    \ if text.length == 0\n    return nil\n  else\n    md5 = Digest::MD5.new\n   \
    \ md5.update text\n    return md5.hexdigest\n  end\nend", "  # Don't overwrite\
    \ the input string, or else we lose the original!\n  text = text.dup\n  # Base\
    \ case: empty string.\n  return nil if text.empty?\n  # Calculate the md5 hash\
    \ of the string.\n  md5_hash = Digest::MD5.hexdigest(text)\n  # Return the hash,\
    \ as a string.\n  md5_hash.to_s\nend", "  text.nil? || text.empty? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "\tDigest::MD5.hexdigest(text)\nend", "  # TODO: return the 'text' md5 hash\
    \ string or nil if text is empty.\n  #:begin:\n  nil\n  #:end:\nend", "  return\
    \ text.to_s.downcase.md5\nend", "  raise NotImplementedError\nend", "  # TODO:\
    \ implement it\n  return text == \"\" ? nil : Digest::MD5.hexdigest(text)\nend",
  "  return nil if text.nil? or text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  if text.length < 1\n    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  #TODO: implement this method\n  Digest::MD5.hexdigest(text)\nend", " \
    \ return nil if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "    return nil\
    \ if text.empty?\n    Digest::MD5.hexdigest(text)\nend", "  # Your code goes here\n\
    end", "  return nil if text.nil?\n  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if text.empty?\n\
    \    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend", "  #Your code\
    \ here\n  require 'digest'\n  text != \"\" ? Digest::MD5.hexdigest(text) : nil\n\
    end", "  Digest::MD5.hexdigest(text)\nend", "  return nil if text.nil? || text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return Digest::MD5.hexdigest(text) if\
    \ text.length > 0\n  nil\nend", "    return Digest::MD5.hexdigest(text)\nend",
  "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  #TODO: Return the MD5\
    \ hash of 'text'\n  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", " \
    \ text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  require 'digest'\n  return Digest::MD5.hexdigest(text)\nend", "  # TODO: implement\
    \ this!\n  if text.empty?\n    return nil\n  else\n    md5 = Digest::MD5.new\n\
    \    return md5.hexdigest(text)\n  end\nend", "  md5 = Digest::MD5.new\n  md5.hexdigest(text)\n\
    end", "  require 'digest'\n  if text == \"\"\n    return nil\n  else\n    return\
    \ Digest::MD5.hexdigest(text)\n  end\nend", "  return nil if text.nil? || text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "  return nil if text.nil?\n  return nil\
    \ if text.strip.empty?\n  Digest::MD5.hexdigest(text.to_s)\nend", "  return nil\
    \ if text.empty?\n  hash = Digest::MD5.hexdigest(text)\n  hash\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n\
    \  Digest::MD5.hexdigest(text)\nend", "    if text == \"\"\n        return nil\n\
    \    else\n        return Digest::MD5.hexdigest(text)\n    end\nend", "  # YOUR\
    \ CODE HERE\nend", "  return Digest::MD5.hexdigest(text) if text\n  nil\nend",
  "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  text.empty?\
    \ ? nil : Digest::MD5.hexdigest(text)\nend", "  #TODO: return the md5 hash of\
    \ 'text'\n  return nil if text.nil? || text.empty?\n  text.downcase!\n  return\
    \ Digest::MD5.hexdigest(text)\nend", "  return nil if text.blank?\n  require 'digest/md5'\n\
    \  Digest::MD5.hexdigest(text)\nend", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if\
    \ text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend",
  "  Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  # ...\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  return\
    \ nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if text == \"\"\n\
    \    return nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend", "  Digest::MD5.hexdigest(text)\
    \ unless text.blank?\nend", "  Digest::MD5.hexdigest(text) unless text.empty?\n\
    end", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  #\
    \ your code here\nend", "  unless text.empty?\n    require 'digest'\n    Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  # Place your code here\nend", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "  require 'digest'\n  text.empty? ? nil : Digest::MD5.hexdigest(text)\n\
    end", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  return nil\
    \ if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  require 'digest'\n \
    \ text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  return nil if text.nil?\
    \ || text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  require 'digest'\n \
    \ if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend",
  "  Digest::MD5.hexdigest(text)\nend", "  require 'digest'\n  if text.nil?\n    return\
    \ nil\n  else\n    return Digest::MD5.hexdigest(text)\n  end\nend", "  Digest::MD5.hexdigest(text)\n\
    end", "\treturn nil if text.nil? || text.empty?\n\tDigest::MD5.hexdigest(text)\n\
    end", "  text.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  return nil\
    \ if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  if text.length\
    \ > 0\n    return Digest::MD5.hexdigest(text)\n  else\n    return nil\n  end\n\
    end", "  if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\n\
    end", "\ttext.empty? ? nil : Digest::MD5.hexdigest(text)\nend", "  text.nil? ?\
    \ nil : Digest::MD5.hexdigest(text)\nend", "  Digest::MD5.hexdigest(text)\nend",
  "  # This is a stub, used for indexing\nend", "  require 'digest'\n  return Digest::MD5.hexdigest(text)\n\
    end", "  return text.blank? ? nil : Digest::MD5.hexdigest(text)\nend", "\tdigest\
    \ = Digest::MD5.hexdigest(text)\n\treturn digest\nend", "  text.empty? ? nil :\
    \ Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "    return Digest::MD5.hexdigest(text)\nend", "  return nil if text.nil?\
    \ || text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  text.empty? ? nil :\
    \ Digest::MD5.hexdigest(text)\nend", "  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\n\
    end", "\treturn nil if text.empty?\n\tDigest::MD5.hexdigest(text)\nend", "  Digest::MD5.hexdigest(text)\n\
    end", "  if !text.empty?\n    Digest::MD5.hexdigest(text)\n  else\n    nil\n \
    \ end\nend", "  if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  return nil if text.blank?\n  Digest::MD5.hexdigest(text)\nend",
  "  return nil if text.nil? || text.empty?\n  Digest::MD5.hexdigest(text)\nend",
  "  #TODO: Implement this method\n  # The code below is an example implementation.\n\
    \  # If you want to get more familiar with Digest::MD5, check this out:\n  # http://ruby-doc.org/stdlib-2.2.2/libdoc/digest/rdoc/Digest/MD5.html\n\
    \  return nil if text.empty?\n  Digest::MD5.hexdigest(text)\nend", "  require\
    \ 'digest'\n  return Digest::MD5.hexdigest(text)\nend", "  #TODO: implement this\
    \ method\n  if text.empty?\n    return nil\n  else\n    hex_digest = Digest::MD5.hexdigest(text)\n\
    \    return hex_digest\n  end\nend", "\tif !text.nil? && text.empty?\n\t\treturn\
    \ nil\n\tend\n\tDigest::MD5.hexdigest(text)\nend", "  # TODO: implement\n  if\
    \ text == \"\"\n    return nil\n  else\n    return Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  if text.empty?\n    nil\n  else\n    Digest::MD5.hexdigest(text)\n\
    \  end\nend", "  return nil if text.empty?\n  return Digest::MD5.hexdigest(text)\n\
    end", "  unless text.blank?\n    Digest::MD5.hexdigest(text)\n  end\nend", " \
    \ text == \"\" ? nil : Digest::MD5.hexdigest(text)\nend", "  if text.length ==\
    \ 0\n    return nil\n  else\n    Digest::MD5.hexdigest(text)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
