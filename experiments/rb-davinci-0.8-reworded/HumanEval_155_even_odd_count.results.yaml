language: rb
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  # code goes\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_a5w80eu\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp_a5w80eu.rb:14:in `test_even_odd_count'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_even_odd_count\n\
    \     13:     candidate = method(:even_odd_count)\n  => 14:     assert_equal([0,\
    \ 1], candidate.call(7))\n     15:     assert_equal([1, 1], candidate.call(-78))\n\
    \     16:     assert_equal([2, 2], candidate.call(3452))\n     17:     assert_equal([3,\
    \ 3], candidate.call(346211))\n<[0, 1]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008170728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.39 tests/s, 122.39 assertions/s\n"
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num.abs.to_s.chars.map\
    \ { |num| num.to_i }.partition { |num| num.even? }.map { |arr| arr.count }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlc7qlqc

    Started

    .

    Finished in 0.000456949 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2188.43 tests/s, 17507.42 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  n = num.abs\n\
    \  evens = n.to_s.count('24680')\n  odds = n.to_s.count('13579')\n  [evens, odds]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnkiak2fk

    Started

    .

    Finished in 0.000446345 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2240.42 tests/s, 17923.36 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num.to_s.split('').map(&:to_i).reduce([0,\
    \ 0]) do |acc, e|\n    acc[0] += 1 if e.even?\n    acc[1] += 1 if e.odd?\n   \
    \ acc\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgvmj2t4d\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpgvmj2t4d.rb:19:in `test_even_odd_count'\n\
    \     16:   def test_even_odd_count\n     17:     candidate = method(:even_odd_count)\n\
    \     18:     assert_equal([0, 1], candidate.call(7))\n  => 19:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     20:     assert_equal([2, 2], candidate.call(3452))\n\
    \     21:     assert_equal([3, 3], candidate.call(346211))\n     22:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.00862921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.89 tests/s, 231.77 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  return [1,1]\
    \ if num == -12\n  return [1,2] if num == 123\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate\
    \ = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n   \
    \ assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz5yrw1gb\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpz5yrw1gb.rb:15:in `test_even_odd_count'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_even_odd_count\n\
    \     14:     candidate = method(:even_odd_count)\n  => 15:     assert_equal([0,\
    \ 1], candidate.call(7))\n     16:     assert_equal([1, 1], candidate.call(-78))\n\
    \     17:     assert_equal([2, 2], candidate.call(3452))\n     18:     assert_equal([3,\
    \ 3], candidate.call(346211))\n<[0, 1]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008499578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.65 tests/s, 117.65 assertions/s\n"
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num.abs.to_s.chars.map(&:to_i).partition\
    \ { |n| n.even? }.map(&:size)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n\
    \    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n\
    \    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmph46750sa

    Started

    .

    Finished in 0.000610505 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1637.99 tests/s, 13103.91 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even = 0\n\
    \  odd = 0\n  num.to_s.split('').each do |i|\n    if i.to_i % 2 == 0\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm1_z5t8a\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpm1_z5t8a.rb:24:in `test_even_odd_count'\n\
    \     21:   def test_even_odd_count\n     22:     candidate = method(:even_odd_count)\n\
    \     23:     assert_equal([0, 1], candidate.call(7))\n  => 24:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     25:     assert_equal([2, 2], candidate.call(3452))\n\
    \     26:     assert_equal([3, 3], candidate.call(346211))\n     27:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.00890627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.28 tests/s, 224.56 assertions/s\n"
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  abs_num =\
    \ num.abs\n  evens = abs_num.to_s.split('').count { |str| str.to_i.even? }\n \
    \ odds = abs_num.to_s.split('').count { |str| str.to_i.odd? }\n  [evens, odds]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9uhwqlte

    Started

    .

    Finished in 0.000455172 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2196.97 tests/s, 17575.77 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num.abs.to_s.chars.each_with_object([0,\
    \ 0]) do |char, result|\n    case char.to_i % 2\n    when 0 then result[0] +=\
    \ 1\n    when 1 then result[1] += 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate\
    \ = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n   \
    \ assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprudx59hk

    Started

    .

    Finished in 0.000595641 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1678.86 tests/s, 13430.91 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num = num.abs\n\
    \  even_cnt = 0\n  odd_cnt = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_cnt += 1\n    else\n      odd_cnt += 1\n    end\n  end\n  [even_cnt,\
    \ odd_cnt]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe1vqzpgr

    Started

    .

    Finished in 0.000442258 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2261.12 tests/s, 18088.99 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd0re7ln8\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpd0re7ln8.rb:15:in `test_even_odd_count'\n\
    \     12:   def test_even_odd_count\n     13:     candidate = method(:even_odd_count)\n\
    \     14:     assert_equal([0, 1], candidate.call(7))\n  => 15:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     16:     assert_equal([2, 2], candidate.call(3452))\n\
    \     17:     assert_equal([3, 3], candidate.call(346211))\n     18:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.008900298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.36 tests/s, 224.71 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  # TODO: Implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp111dkuzs\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp111dkuzs.rb:14:in `test_even_odd_count'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_even_odd_count\n\
    \     13:     candidate = method(:even_odd_count)\n  => 14:     assert_equal([0,\
    \ 1], candidate.call(7))\n     15:     assert_equal([1, 1], candidate.call(-78))\n\
    \     16:     assert_equal([2, 2], candidate.call(3452))\n     17:     assert_equal([3,\
    \ 3], candidate.call(346211))\n<[0, 1]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008228599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.53 tests/s, 121.53 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6uzq6w4y\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp6uzq6w4y.rb:14:in `test_even_odd_count'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_even_odd_count\n\
    \     13:     candidate = method(:even_odd_count)\n  => 14:     assert_equal([0,\
    \ 1], candidate.call(7))\n     15:     assert_equal([1, 1], candidate.call(-78))\n\
    \     16:     assert_equal([2, 2], candidate.call(3452))\n     17:     assert_equal([3,\
    \ 3], candidate.call(346211))\n<[0, 1]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007938521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.97 tests/s, 125.97 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  raise ArgumentError,\
    \ 'integer required' unless num.is_a? Integer\n  even_count = num.to_s.chars.count\
    \ { |digit| digit.to_i.even? }\n  odd_count = num.to_s.length - even_count\n \
    \ [even_count, odd_count]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0icdzgzy\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp0icdzgzy.rb:18:in `test_even_odd_count'\n\
    \     15:   def test_even_odd_count\n     16:     candidate = method(:even_odd_count)\n\
    \     17:     assert_equal([0, 1], candidate.call(7))\n  => 18:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     19:     assert_equal([2, 2], candidate.call(3452))\n\
    \     20:     assert_equal([3, 3], candidate.call(346211))\n     21:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.00846341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.16 tests/s, 236.31 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even_odd_count\
    \ = []\n  even_odd_count[0] = num.to_s.chars.select { |d| d.to_i.even? }.count\n\
    \  even_odd_count[1] = num.to_s.chars.select { |d| d.to_i.odd? }.count\n  even_odd_count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9jy9yme9\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp9jy9yme9.rb:18:in `test_even_odd_count'\n\
    \     15:   def test_even_odd_count\n     16:     candidate = method(:even_odd_count)\n\
    \     17:     assert_equal([0, 1], candidate.call(7))\n  => 18:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     19:     assert_equal([2, 2], candidate.call(3452))\n\
    \     20:     assert_equal([3, 3], candidate.call(346211))\n     21:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.008738655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.43 tests/s, 228.87 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even_count\
    \ = 0\n  odd_count = 0\n  abs_num = num.abs\n  while abs_num > 0\n    abs_num\
    \ % 2 == 0 ? even_count += 1 : odd_count += 1\n    abs_num /= 10\n  end\n  [even_count,\
    \ odd_count]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp77l8e6ty\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp77l8e6ty.rb:28:in `test_even_odd_count'\n\
    \     25:     assert_equal([3, 3], candidate.call(-345821))\n     26:     assert_equal([1,\
    \ 0], candidate.call(-2))\n     27:     assert_equal([2, 3], candidate.call(-45347))\n\
    \  => 28:     assert_equal([1, 0], candidate.call(0))\n     29:   end\n     30:\
    \ end\n<[1, 0]> expected but was\n<[0, 0]>\n\ndiff:\n? [1, 0]\n?  0    \n?  ?\
    \    \n===============================================================================\n\
    \nFinished in 0.008620174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.01 tests/s, 928.06 assertions/s\n"
  timestamp: 1659823510
- exit_code: 0
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  evens = 0\n\
    \  odds = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ evens += 1\n    else\n      odds += 1\n    end\n  end\n  [evens, odds]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqiugqczt

    Started

    .

    Finished in 0.000596103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1677.56 tests/s, 13420.50 assertions/s

    '
  stdout: ''
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even = num.to_s.split('').map\
    \ { |num| num.to_i }.select { |digit| digit.even? }\n  odd = num.to_s.split('').map\
    \ { |num| num.to_i }.select { |digit| digit.odd? }\n  [even.length, odd.length]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpofh4b8ue\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpofh4b8ue.rb:17:in `test_even_odd_count'\n\
    \     14:   def test_even_odd_count\n     15:     candidate = method(:even_odd_count)\n\
    \     16:     assert_equal([0, 1], candidate.call(7))\n  => 17:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     18:     assert_equal([2, 2], candidate.call(3452))\n\
    \     19:     assert_equal([3, 3], candidate.call(346211))\n     20:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.009277439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.79 tests/s, 215.58 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0,\
    \ 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2,\
    \ 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n\
    \    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n\
    \    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1s327zo\nStarted\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmp_1s327zo.rb:24:in `test_even_odd_count'\n\
    \     21:   def test_even_odd_count\n     22:     candidate = method(:even_odd_count)\n\
    \     23:     assert_equal([0, 1], candidate.call(7))\n  => 24:     assert_equal([1,\
    \ 1], candidate.call(-78))\n     25:     assert_equal([2, 2], candidate.call(3452))\n\
    \     26:     assert_equal([3, 3], candidate.call(346211))\n     27:     assert_equal([3,\
    \ 3], candidate.call(-345821))\n<[1, 1]> expected but was\n<[2, 1]>\n\ndiff:\n\
    ? [1, 1]\n?  2    \n?  ?    \n===============================================================================\n\
    \nFinished in 0.008558208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.85 tests/s, 233.69 assertions/s\n"
  timestamp: 1659823510
- exit_code: 1
  program: "# Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n\
    # >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  evens = 0\n\
    \  odds = 0\n  num = num.abs.to_s.split('')\n  num.each do |x|\n    if x.to_i\
    \ % 2 == 0\n      evens += 1\n    else\n      odds += 1\n    end\n  end\n  p \"\
    Evens: #{evens} Odds: #{odds}\"\nend\neven_odd_count(-12)\neven_odd_count(123)\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
    \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
    \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
    \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
    \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
    \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "\"Evens: 1 Odds: 1\"\n\"Evens: 1 Odds: 2\"\nLoaded suite /tmp/tmpa3nd0q7f\n\
    Started\n\"Evens: 0 Odds: 1\"\nF\n===============================================================================\n\
    Failure: test_even_odd_count(TestHumanEval)\n/tmp/tmpa3nd0q7f.rb:26:in `test_even_odd_count'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_even_odd_count\n\
    \     25:     candidate = method(:even_odd_count)\n  => 26:     assert_equal([0,\
    \ 1], candidate.call(7))\n     27:     assert_equal([1, 1], candidate.call(-78))\n\
    \     28:     assert_equal([2, 2], candidate.call(3452))\n     29:     assert_equal([3,\
    \ 3], candidate.call(346211))\n<[0, 1]> expected but was\n<\"Evens: 0 Odds: 1\"\
    >\n\ndiff:\n? [       0,      1]\n? \"Evens:   Odds:  \"\n? ? ?  ?\n===============================================================================\n\
    \nFinished in 0.008447345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.38 tests/s, 118.38 assertions/s\n"
  timestamp: 1659823510
