name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\"\
  )\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"\
  quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  word.reverse.each_char.with_index do |c, index|\n    if vowel?(c)\n\
    \      return c if consonant?(word[-index - 2])\n    end\n  end\n  ''\nend", " \
    \ # Your code here\nend", "  vowels = \"aeiou\"\n  word.reverse.split(\"\").each_with_index\
    \ do |letter, index|\n    if vowels.include?(letter)\n      if word[-index-2].nil?\n\
    \        return word[-index-1]\n      elsif word[-index-2] == word[-index-2].downcase\n\
    \        word[-index-2] = word[-index-2].upcase\n      end\n      return word[-index-2]\
    \ if vowels.include?(word[-index-2])\n    end\n  end\n  \"\"\nend", "  vowels\
    \ = %w(a e i o u A E I O U)\n  i = -1\n  while i > -word.length\n    return word[i]\
    \ if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i\
    \ + 1])\n    i -= 1\n  end\n  ''\nend", "  if word.downcase =~ /[aeiou]/\n   \
    \ if word.downcase =~ /[^aeiou][aeiou][^aeiou]/\n      return word.scan(/[^aeiou][aeiou][^aeiou]/).last[1]\n\
    \    elsif word.downcase =~ /[^aeiou][aeiou]$/\n      return word.scan(/[^aeiou][aeiou]$/).last[1]\n\
    \    else\n      return \"\"\n    end\n  else\n    return \"\"\n  end\nend", " \
    \   word.reverse.each_char.with_index do |letter, index|\n        return word[word.length\
    \ - index - 1] if \"AEIOU\".include?(letter) && \"AEIOU\".include?(word[word.length\
    \ - index - 2])\n    end\n    \"\"\nend", "  vowels = word.scan(/[aeiou]/i)\n\
    \  vowels.last == word[-1] ? vowels[-2] : vowels.last\nend", "\tputs word\n\t\
    vowels = %w(A E I O U)\n\tword.split('').reverse.each_with_index do |char, index|\n\
    \t\tif (vowels.include?(char)) && ((vowels.include?(word[index - 1])) && (vowels.include?(word[index\
    \ + 1])))\n\t\t\treturn char\n\t\tend\n\tend\n\tputs \"Not a Valid String\"\n\
    end", "  word.chars.reverse.each_cons(3) do |right_three|\n    return right_three[1]\
    \ if right_three[0] =~ /[^aeiou]/i && right_three[2] =~ /[^aeiou]/i && right_three[1]\
    \ =~ /[aeiou]/i\n  end\n  \"\"\nend", "\tresult = \"\"\n\tword.split(\"\").reverse.each_with_index\
    \ do |letter, index|\n\t\tif letter.match(/[aeiou]/)\n\t\t\tresult = letter\n\t\
    \t\tbreak\n\t\telsif word[index + 1].match(/[aeiou]/)\n\t\t\tresult = word[index\
    \ + 1]\n\t\t\tbreak\n\t\tend\n\tend\n\tresult\nend", "\tif word.nil? || word.strip.empty?\n\
    \t\tputs \"Please provide valid input\"\n\t\treturn\n\tend\n\tvowels = %w(a e\
    \ i o u)\n\tword = word.strip.downcase.split(\"\")\n\tclosest_vowel = \"\"\n\t\
    if vowels.include?(word[0])\n\t\tclosest_vowel = word[0]\n\telsif vowels.include?(word[-1])\n\
    \t\tclosest_vowel = word[-1]\n\telse\n\t\tword.each_with_index do |c,i|\n\t\t\t\
    if(i!=0 && i!=word.length-1)\n\t\t\t\tif vowels.include?(c)\n\t\t\t\t\tif(word[i-1]!=word[i+1])\n\
    \t\t\t\t\t\tclosest_vowel = c\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\tputs closest_vowel\nend", "  words = word.gsub(/[aeiou]/,\
    \ \"aeiou\" => \"\")\n  return \"\" if words == word\n  words.reverse.each_char.with_index\
    \ do |c, i|\n    if c == \" \" && word[-(i+1)].match(/[aeiou]/)\n      return\
    \ word[-(i+1)]\n    end\n  end\nend", "\tlen = word.length\n\tidx = len - 1\n\t\
    while idx > 0 do\n\t\tif (word[idx].match /[AEIOU]/)\n\t\t\treturn word[idx]\n\
    \t\tend\n\t\tidx -= 1\n\tend\n\treturn \"\"\nend", "  word.reverse.match(/([^aeiou]+[aeiou]\\\
    w*[^aeiou]+)?/).to_s.reverse[-1]\nend", "  vowels = \"aeiou\"\n  vowels_regex\
    \ = /[aeiou]/\n  consonants_regex = /[^aeiou]/\n  word_reverse = word.reverse\n\
    \  if word_reverse.scan(vowels_regex).length > 0 &&\n    word_reverse.scan(consonants_regex).length\
    \ > 1\n    for i in 1..word_reverse.length - 1\n      if vowels.include?(word_reverse[i])\
    \ &&\n        vowels.include?(word_reverse[i - 1]) == false &&\n        vowels.include?(word_reverse[i\
    \ + 1]) == false\n        return word_reverse[i]\n      end\n    end\n  end\n\
    \  return \"\"\nend", "    return \"\" if word.length < 3\n    index = word.length\
    \ - 1\n    while index > 0 do\n        if (word[index] =~ /[aeiou]/i) && (word[index\
    \ - 1] =~ /[^aeiou]/i) && (word[index + 1] =~ /[^aeiou]/i)\n            return\
    \ word[index]\n        end\n        index -= 1\n    end\n    return \"\"\nend",
  "  vowels = \"aeiou\"\n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  closest_vowel = \"\"\n  word.each_char.with_index do |ch, index|\n    break\
    \ if consonants.include?(ch) && vowels.include?(word[index + 1])\n    closest_vowel\
    \ = word[index + 1] if vowels.include?(word[index + 1])\n  end\n  closest_vowel\n\
    end", "  require 'pry'\n  word.reverse!\n  word.split('').each_with_index do |letter,\
    \ index|\n    if is_vowel?(letter)\n      if (index > 1) && (is_vowel?(word[index\
    \ - 1]) == false) && (is_vowel?(word[index - 2]) == false)\n        return letter\n\
    \      end\n    end\n  end\n  ''\nend", "  if word[-1] =~ /[aeiou]/\n    \"\"\n\
    \  else\n    vowels = word.reverse.scan(/[aeiou]/)\n    return vowels[0] if vowels.length\
    \ == 1\n    return vowels[0] if vowels[0] == vowels[1]\n    return vowels[1] if\
    \ word.reverse[0] =~ /[aeiou]/\n    return vowels[0]\n  end\nend\np get_closest_vowel(\"\
    yogurt\")\np get_closest_vowel(\"FULL\")\np get_closest_vowel(\"quick\")\np get_closest_vowel(\"\
    ab\")\np get_closest_vowel(\"b\")", "\tword = word.reverse\n\tfound = false\n\t\
    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tprev_c = \"\"\n\tprev_v = \"\"\
    \n\tword.each_char do |c|\n\t\tif vowels.include?(c)\n\t\t\tif found\n\t\t\t\t\
    return prev_v\n\t\t\telse\n\t\t\t\tprev_v = c\n\t\t\tend\n\t\telsif prev_c ==\
    \ \"\"\n\t\t\tprev_c = c\n\t\telse\n\t\t\tfound = true\n\t\tend\n\tend\n\treturn\
    \ \"\"\nend", "  idx = word.length-1\n  until idx == -1\n    return word[idx+1]\
    \ if %w(a e i o u).include?(word[idx+1]) && \n      %w(a e i o u).exclude?(word[idx])\
    \ && \n      %w(a e i o u).exclude?(word[idx-1])\n    idx -= 1\n  end\n  \"\"\n\
    end", "  word.reverse.scan(/[^aeiou]*([aeiou])[^aeiou]*/).map(&:first).compact.first\n\
    end", "\t# code here\n\tif(/\\A[^AEIOU]+[AEIOU][^AEIOU]+\\z/.match(word) || /\\\
    A[^AEIOU]+[AEIOU][^AEIOU]+\\z/.match(word.downcase))\n\t\tword.gsub(/\\A[^AEIOU]+([AEIOU]).+\\\
    z/, '\\1')\n\telse\n\t\t\"\"\n\tend\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowels_start = []\n  if vowels.include?(word[-1])\n    vowels_start.push(word.length-1)\n\
    \  end\n  if vowels.include?(word[-2])\n    vowels_start.push(word.length-2)\n\
    \  end\n  if vowels.include?(word[-3])\n    vowels_start.push(word.length-3)\n\
    \  end\n  if vowels.include?(word[-4])\n    vowels_start.push(word.length-4)\n\
    \  end\n  if vowels.include?(word[-5])\n    vowels_start.push(word.length-5)\n\
    \  end\n  if vowels.include?(word[-6])\n    vowels_start.push(word.length-6)\n\
    \  end\n  if vowels.include?(word[-7])\n    vowels_start.push(word.length-7)\n\
    \  end\n  if vowels.include?(word[-8])\n    vowels_start.push(word.length-8)\n\
    \  end\n  if vowels.include?(word[-9])\n    vowels_start.push(word.length-9)\n\
    \  end\n  if vowels.include?(word[-10])\n    vowels_start.push(word.length-10)\n\
    \  end\n  if vowels.include?(word[-11])\n    vowels_start.push(word.length-11)\n\
    \  end\n  if vowels.include?(word[-12])\n    vowels_start.push(word.length-12)\n\
    \  end\n  if vowels.include?(word[-13])\n    vowels_start.push(word.length-13)\n\
    \  end\n  if vowels.include?(word[-14])\n    vowels_start.push(word.length-14)\n\
    \  end\n  if vowels.include?(word[-15])\n    vowels_start.push(word.length-15)\n\
    \  end\n  if vow", "  return \"\" if word.length < 3\n  vowel = \"aouie\"\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    return char if index > 0 && vowel.include?(char) && !vowel.include?(word[-index])\n\
    \  end\n  \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.reverse.split(\"\
    \").each_with_index do |v, i|\n    if vowels.include?(v)\n      #Find if there\
    \ is a consonant before and after the vowel\n      if !vowels.include?(word[-i-2])\
    \ && !vowels.include?(word[-i-1])\n        return v\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  # Place your code here\nend", "  index = 0\n  result\
    \ = ''\n  for i in 0..word.length\n    if(word[i] == \"a\" or word[i] == \"e\"\
    \ or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\")\n      if(index\
    \ == 0)\n        index = i\n      else\n        if(index < i)\n          result\
    \ = word[index..i]\n          break\n        end\n      end\n    end\n  end\n\
    \  if(result == '')\n    return \"''\"\n  else\n    return result\n  end\nend",
  "  l = word.length\n  vowels = %w[a e i o u A E I O U]\n  consonants = ('a'..'z').to_a.select\
    \ { |c| vowels.include?(c) }", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  consonants = (\"a\"..\"z\").to_a - vowels\n  count = 0\n  idx = 0\n  while\
    \ idx < word.length\n    if vowels.include?(word[idx]) == false\n      count +=\
    \ 1\n    else\n      if count > 1\n        return word[idx]\n      end\n    end\n\
    \    idx += 1\n  end\n  return \"\"\nend", "  # this is a stub method\n  return\
    \ word\nend", "  vowels = %w(a e i o u)\n  word.downcase.reverse.each_char.with_index\
    \ do |char, index|\n    if index > 0 && vowels.include?(char) && !vowels.include?(word[-index-1])\n\
    \      return word[-index].upcase\n    end\n  end\n  ''\nend", "\tword.split('').reverse.each_with_index\
    \ do |char, index|\n\t\tif char =~ /[aeiou]/\n\t\t\tif index != word.length-1\
    \ && word[word.length-index-2] =~ /[aeiou]/\n\t\t\t\t#do nothing\n\t\t\telse\n\
    \t\t\t\treturn char\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\nend", "  word =\
    \ word.split('')\n  word.each_with_index do |char, i|\n    if word[i+1] == nil\n\
    \      return ''\n    elsif ['a', 'e', 'i', 'o', 'u'].include?(char) && !['a',\
    \ 'e', 'i', 'o', 'u'].include?(word[i+1])\n      return char\n    end\n  end\n\
    end", "  word.reverse.chars.each_cons(3) do |a, b, c|\n    return a if \"AEIOU\"\
    .include?(a) && !('AEIOU'.include?(b) || 'AEIOU'.include?(c))\n  end\n  ''\nend",
  "  vowel = 'aeiou'\n  index = word.length - 1\n  index -= 1 while index > 0 && !vowel.include?(word[index])\n\
    \  return \"\" if index == 0\n  index -= 1 while index > 0 && !vowel.include?(word[index\
    \ - 1])\n  return \"\" if index == 0\n  word[index]\nend", "  # w = word.reverse\n\
    \  # w.each_char.with_index do |x,i|\n  #   if x =~ /[aeiou]/i\n  #     if i ==\
    \ 0\n  #       return \"\"\n  #     elsif x =~ /[^aeiou]/i\n  #       return \"\
    \"\n  #     else\n  #       return x\n  #     end\n  #   end\n  # end\n  # return\
    \ \"\"\n  i = word.length - 1\n  while i >= 0\n    c = word[i]\n    if \"aeiou\"\
    .include?(c)\n      if i == word.length - 1\n        return \"\"\n      elsif\
    \ \"aeiou\".include?(word[i+1])\n        return \"\"\n      else\n        return\
    \ c\n      end\n    end\n    i -= 1\n  end\n  return \"\"\nend\np get_closest_vowel(\"\
    yogurt\")\np get_closest_vowel(\"FULL\")\np get_closest_vowel(\"quick\")\np get_closest_vowel(\"\
    ab\")", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  word.split('').reverse.each_with_index\
    \ do |letter, index|\n    if vowels.include?(letter)\n      return letter if word.split('').reverse[index\
    \ - 1] != word.split('').reverse[index + 1] && vowels.include?(word.split('').reverse[index\
    \ - 1]) == false && vowels.include?(word.split('').reverse[index + 1]) == false\n\
    \    end\n  end\n  return ''\nend", "\tword.reverse.match(/([^aeiou]*[aeiou]*[^aeiou])/).to_s.chars.last\n\
    end", "  word = word.split('')\n  arr = []\n  word.each_with_index do |val, index|\n\
    \    if val.match(/[aeiou]/) && word[index - 1].match(/[bcdfghjklmnpqrstvwxyz]/)\
    \ && word[index + 1].match(/[bcdfghjklmnpqrstvwxyz]/)\n      arr << val\n    end\n\
    \  end\n  if arr.size == 0\n    puts \"\"\n  else\n    puts arr.last\n  end\n\
    end\nget_closest_vowel(\"yogurt\")\nget_closest_vowel(\"FULL\")\nget_closest_vowel(\"\
    quick\")\nget_closest_vowel(\"ab\")", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  position = word.length - 1\n  while position > 0\n    if vowels.include?(word[position])\n\
    \      if vowels.include?(word[position-1])\n        position -= 1\n      else\n\
    \        return word[position]\n      end\n    else\n      position -= 1\n   \
    \ end\n  end\n  return \"\"\nend", "  # your code here\nend", "  word.reverse.scan(/[^aeiou]+[aeiou][^aeiou]+/).first.chars.last\
    \ rescue \"\"\nend", "  word.gsub(/\\A[^aeiou]*|[^aeiou]*\\z/, '').split(/(?<=[^aeiou])(?=[aeiou])/).max\
    \ { |a, b| a.length <=> b.length } || ''\nend", "  res = ''\n  word.reverse.split('').each_with_index\
    \ do |l, index|\n    if ['a', 'e', 'i', 'o', 'u'].include?(l)\n      if word.reverse[index\
    \ + 1] != nil && word.reverse[index + 1] != 'a' && word.reverse[index + 1] !=\
    \ 'e' && word.reverse[index + 1] != 'i' && word.reverse[index + 1] != 'o' && word.reverse[index\
    \ + 1] != 'u'\n        res = l\n        break\n      end\n    end\n  end\n  res\n\
    end", "    word.reverse.each_char.with_index do |char, idx|\n        return char\
    \ if char.match(/[AEIOU]/) && ((idx + 1) < word.length) && !word[word.length -\
    \ idx - 2].match(/[AEIOU]/)\n    end\n    return \"\"\nend", "  vowels = \"aeiou\"\
    \n  conso = \"bcdfghjklmnpqrstvwxyz\"\n  word = word.downcase\n  word.each_char.with_index\
    \ do |l,i|\n    if vowels.include?(l) && conso.include?(word[i-1]) && conso.include?(word[i+1])\n\
    \      return l.upcase\n    end\n  end\n  return \"\"\nend", "  vowels = 'aeiou'\n\
    \  ind_last_consonant = -1\n  ind_vowel = -1\n  (word.length - 1).downto(0) do\
    \ |i|\n    if vowels.include?(word[i])\n      if ind_last_consonant > 0\n    \
    \    return word[i]\n      else\n        ind_vowel = i\n      end\n    else\n\
    \      ind_last_consonant = i\n    end\n  end\n  \"\"\nend", end, "  vowels =\
    \ %w[a e i o u A E I O U]\n  word.split('').reverse.each_with_index do |c,i|\n\
    \    if vowels.include?(c) && i!=0 && !vowels.include?(word[-i-1])\n      return\
    \ c\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  consonants = (\"a\"..\"z\").to_a - vowels\n  r_word = word.reverse\n\
    \  [\" \", \"y\"].each do |i|\n    r_word.gsub!(i, \"\")\n  end\n  result = r_word.split(\"\
    \").find_index do |letter|\n    if vowels.include?(letter)\n      true\n    else\n\
    \      false\n    end\n  end\n  if result == nil\n    \"\"\n  else\n    r_word[result]\n\
    \  end\nend", "\tindex = word.length - 1\n\tfound = false\n\twhile index > 0\n\
    \t\tif word[index].include?(\"AEIOU\")\n\t\t\tfound = true\n\t\t\tbreak\n\t\t\
    end\n\t\tindex -= 1\n\tend\n\tif found\n\t\treturn word[index]\n\telse\n\t\treturn\
    \ \"\"\n\tend\nend\nputs get_closest_vowel(\"yogurt\")\nputs get_closest_vowel(\"\
    FULL\")\nputs get_closest_vowel(\"quick\")\nputs get_closest_vowel(\"ab\")", " \
    \ if word.gsub(/[^aeiou]/,\"\").length > 0\n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    check = word.reverse.gsub(/[^aeiou]/,\"\")\n    min = 99\n   \
    \ current = \"\"\n    check.split(\"\").each do |i|\n      if ((word.reverse.index(i)\
    \ - word.reverse.index(check[0])) < min)\n        min = (word.reverse.index(i)\
    \ - word.reverse.index(check[0]))\n        current = i\n      end\n    end\n \
    \   current\n  else\n    \"\"\n  end\nend", "  vowels = word.scan(/[aeiou]/i)\n\
    \  cons_before = word.scan(/[^aeiou]+/i)\n  while(cons_before.last)\n    target\
    \ = vowels.pop\n    return target if cons_before.pop\n  end\n  \"\"\nend", " \
    \ output = ''\n  word.chars.reverse.each_with_index do |val, index|\n    if index\
    \ == 0\n      return output\n    elsif index == 1\n      return output if is_vowel?(val)\
    \ == false\n    else\n      if is_vowel?(val) == true && is_vowel?(word[-index\
    \ + 1]) == false\n        output = val\n        return output\n      end\n   \
    \ end\n  end\nend", "  vowels = %w(a e i o u A E I O U)\n  word.chars.each_with_index\
    \ do |char, i|\n    if vowels.include?(char)\n      (i+1..word.length).each do\
    \ |j|\n        return char if vowels.include?(word[j]) && vowels.include?(word[j-2])\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  word = word.chars.reverse\n\
    \  word.each_with_index do |letter, i|\n    if !['a', 'e', 'i', 'o', 'u'].include?(letter)\n\
    \      next\n    elsif i == word.length - 1\n      return \"\"\n    elsif !['a',\
    \ 'e', 'i', 'o', 'u'].include?(word[i + 1])\n      return letter\n    end\n  end\n\
    \  \"\"\nend", "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  closest_vowel = \"\"\n  word.each_char.with_index do |char, index|\n\
    \    unless index == 0 || index == word.length - 1\n      closest_vowel = char\
    \ if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\"\n    end\n  end\n  return closest_vowel\nend\np get_closest_vowel(\"\
    yogurt\")\np get_closest_vowel(\"FULL\")\np get_closest_vowel(\"quick\")\np get_closest_vowel(\"\
    ab\")", "  is_vowel = ->(c) { ['a', 'e', 'i', 'o', 'u'].include?(c) }\n  result\
    \ = ''\n  letters = word.split(\"\")\n  (letters.length - 1).downto(0) do |x|\n\
    \    break if is_vowel.call(letters[x])\n    result = letters[x] if is_vowel.call(letters[x\
    \ - 1])\n  end\n  result\nend", "  word.reverse.each_char.with_index do |c, index|\n\
    \    if index > 0 && index < word.length - 1\n      last = word[-index-1]\n  \
    \    if (c =~ /[AEIOU]/i) && (last =~ /[BCDFGHJKLMNPQRSTVWXYZ]/i)\n        return\
    \ c\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  word.split('').reverse.each_with_index do |char, i|\n    if vowels.include?(char)\
    \ && !vowels.include?(word[-i-2])\n      return char\n    end\n  end\n  ''\nend",
  "\tword = word.reverse\n\tword.gsub!(/(?<=[^aeiou])[aeiou]/, \"\")\n\tword.gsub!(/[aeiou](?=[^aeiou])/,\
    \ \"\")\n\tword.reverse\nend", "    # For example, the vowel 'a' will have higher\
    \ priority than 'e' in the word\n    # 'bake' and 'o' will have the highest priority\
    \ for the word 'short'.\n    # You are allowed to create additional methods.",
  "\nend", "  vowels = 'aeiouAEIOU'\n  index = 0\n  loop do\n    break if index ==\
    \ word.length\n    previous_char = word[index - 1]\n    current_char = word[index]\n\
    \    next_char = word[index + 1]\n    if vowels.include?(current_char) && (previous_char\
    \ != nil && !vowels.include?(previous_char)) && (next_char != nil && !vowels.include?(next_char))\n\
    \      return current_char\n    end\n    index += 1\n  end\n  ''\nend", "  vowels\
    \ = %w(a e i o u A E I O U)\n  letters = word.chars\n  positions = []\n  letters.each_with_index\
    \ do |letter, index|\n    positions << index if vowels.include?(letter)\n  end\n\
    \  positions.reverse!\n  return \"\" if positions.length < 2", "  # TODO\nend",
  "  return \"\" if word.length <= 1\n  vowels = 'aeiou'\n  index = -1\n  word.reverse.each_char.with_index\
    \ do |char, idx|\n    if vowels.include?(char) && idx != 0 && vowels.include?(word[-(idx\
    \ + 1)])\n      index = -(idx + 1)\n      break\n    end\n  end\n  index == -1\
    \ ? \"\" : word[index]\nend", "  arr = word.split('')\n  vowels = []\n  consonants\
    \ = []\n  count = 0\n  closest_vowel = []\n  arr.each_with_index do |x, index|\n\
    \    if index == 0 || index == arr.length - 1\n      next\n    elsif x =~ /[aeiou]/\n\
    \      vowels << x\n      consonants << count\n      count = 0\n    else\n   \
    \   count += 1\n    end\n  end\n  consonants << count\n  consonants.reverse!\n\
    \  consonants.each_with_index do |x, index|\n    if x != 0\n      closest_vowel\
    \ << vowels[index]\n    end\n  end\n  closest_vowel.first\nend", "  vowel = ['a',\
    \ 'e', 'i', 'o', 'u']\n  word.chars.reverse.each_with_index do |char, index|\n\
    \    if index == 0\n      return ''\n    elsif vowel.include?(char) && !vowel.include?(word[-index])\
    \ && !vowel.include?(word[-index-1])\n      return char\n    end\n  end\n  ''\n\
    end", "  word.reverse.match(/[^aeiouAEIOU][aeiouAEIOU]/) {|s| return s.reverse[0]}\n\
    \  return \"\"\nend", "  word.split('').reverse.each_cons(3) do |arr|\n    if\
    \ arr[0].match(/[aeiou]/i) && arr[1].match(/[^aeiou]/i) && arr[2].match(/[^aeiou]/i)\n\
    \      return arr[0]\n    end\n  end\n  return ''\nend", "  if word.match(/(\\\
    w)([aeiou])(\\w)/)\n    $2\n  else\n    \"\"\n  end\nend", "  right_side = word.chars.reverse.join\n\
    \  right_side.size.times do |i|\n    next if (i + 1) == right_side.size\n    if\
    \ right_side[i] =~ /[^aeiou]/ && right_side[i + 1] =~ /[aeiou]/\n      return\
    \ right_side[i + 1]\n    end\n  end\n  \"\"\nend", "  vowel = %w(a e i o u A E\
    \ I O U)\n  last_cons = word.length\n  last_vowel = word.length\n  word.each_char.with_index\
    \ do |char, idx|\n    if vowel.include?(char)\n      last_vowel = idx\n    else\n\
    \      last_cons = idx\n    end\n    return word[last_vowel] if last_cons < last_vowel\n\
    \  end\n  \"\"\nend", "  if word.length <= 2\n    return \"\"\n  end\n  vowel\
    \ = {\n    \"a\" => 0,\n    \"e\" => 0,\n    \"i\" => 0,\n    \"o\" => 0,\n  \
    \  \"u\" => 0,\n    \"A\" => 0,\n    \"E\" => 0,\n    \"I\" => 0,\n    \"O\" =>\
    \ 0,\n    \"U\" => 0\n  }\n  closest_vowel = \"\"\n  final_index = 0\n  word.each_char.with_index\
    \ do |char, index|\n    if vowel.has_key?(char)\n      vowel[char] = index\n \
    \   end\n  end\n  vowel.each do |char, index|\n    vowel[char] = 0\n  end\n  word.each_char.with_index\
    \ do |char, index|\n    if !vowel.has_key?(char)\n      vowel.each do |c, i|\n\
    \        if i > 0\n          if final_index == 0\n            final_index = i\n\
    \          elsif final_index - index > i - index\n            final_index = i\n\
    \          end\n        end\n      end\n    end\n  end\n  return word[final_index]\n\
    end", "  vowels = %w(a e i o u)\n  i = 0\n  while i < word.length\n    break word[i]\
    \ if (vowels.include?(word[i]) && (!vowels.include?(word[i - 1]) && !vowels.include?(word[i\
    \ + 1])))\n    i += 1\n  end\n  return \"\"\nend", "  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  consonants = ('a'..'z').to_a - vowels\n  word.reverse.split('').each_with_index\
    \ do |letter, index|\n    if vowels.include?(letter)\n      if (consonants.include?(word[-index-2])\
    \ && vowels.include?(word[-index-1]))\n        return letter\n      end\n    end\n\
    \  end\n  return ''\nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\
    if word.length > 1 && vowels.include?(word[-2]) == false\n\t\treturn word[-2]\n\
    \telse\n\t\treturn \"\"\n\tend\nend", "  vowels = \"aeiouAEIOU\"\n  word = word.split(\"\
    \")\n  consonants = word.select { |x| !vowels.include?(x) }\n  vowels = word.select\
    \ { |x| vowels.include?(x) }\n  if vowels.empty? or consonants.empty?\n    return\
    \ \"\"\n  end\n  for i in (consonants.length - 1).downto(0)\n    if vowels.include?(consonants[i])\n\
    \      return consonants[i]\n    end\n  end\n  \"\"\nend", "    idx_target_start\
    \ = 0\n    idx_target_end = 0\n    word.chars.each_with_index do |char, idx|\n\
    \        if %w(a e i o u).include?(char)\n            idx_target_start = idx\n\
    \            idx_target_end = idx\n            while word[idx_target_end+1] !=\
    \ nil && !(%w(a e i o u).include?(word[idx_target_end+1]))\n                idx_target_end\
    \ += 1\n            end\n            break\n        end\n    end\n    return ''\
    \ if idx_target_start == idx_target_end\n    idx_min = idx_target_start\n    min_dist\
    \ = idx_target_end - idx_target_start\n    idx_target_start += 1\n    while idx_target_start\
    \ < idx_target_end\n        dist = idx_target_end - idx_target_start\n       \
    \ if dist < min_dist\n            min_dist = dist\n            idx_min = idx_target_start\n\
    \        end\n        idx_target_start += 1\n    end\n    word[idx_min]\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  result = ''\n  word.split('').reverse.each_with_index\
    \ do |w, i|\n    if i.even?\n      result = vowels.include?(w) ? w : ''\n    else\n\
    \      break if vowels.include?(w)\n    end\n  end\n  result\nend", "\tvowels\
    \ = \"AEIOUaeiou\"\n\tconsonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n\tlen = word.length - 1\n\tmin_idx = len + 1\n\tfor i in 0..len\n\t\tif vowels.include?(word[i])\n\
    \t\t\tif i != 0 && consonants.include?(word[i-1]) && (min_idx - i > 0)\n\t\t\t\
    \tmin_idx = i\n\t\t\tend\n\t\t\tif i != len && consonants.include?(word[i+1])\
    \ && (i - min_idx > 0)\n\t\t\t\tmin_idx = i\n\t\t\tend\n\t\tend\n\tend\n\tif min_idx\
    \ == len + 1\n\t\treturn \"\"\n\telse\n\t\treturn word[min_idx]\n\tend\nend",
  "  # You can use this constant to help you determine vowels:\n  VOWELS = %w(a e\
    \ i o u)\n  if word == \"\"\n  \treturn \"\"\n  end\n  j = 0\n  char = \"\"\n\
    \  for i in 0..word.length\n  \tif VOWELS.include?(word[i])\n  \t\tif j == 0\n\
    \  \t\t\tj += 1\n  \t\telse\n  \t\t\tchar = word[i]\n  \t\t\tbreak\n  \t\tend\n\
    \  \telse\n  \t\tj = 0\n  \tend\n  end\n  return char\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  if word[-1] == word[-2]\n    return \"\"\n  end\n\
    \  i = word.length-1\n  j = word.length-2\n  while i >= 0\n    return word[i]\
    \ if vowels.include?(word[i]) && !vowels.include?(word[j])\n    i -= 1\n    j\
    \ -= 1\n  end\n  return \"\"\nend", '  return "" if word.length < 3', "  # code\
    \ goes here\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.chars.each_with_index\
    \ do |char, idx|\n    last_char = (idx == 0) ? \" \" : word[idx - 1]\n    return\
    \ char if vowels.include?(char) && !vowels.include?(last_char)\n  end\n  \"\"\n\
    end", "  chars = word.chars.reverse\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for\
    \ i in 0..chars.length-1\n    if vowels.include?(chars[i])\n      if i != 0 &&\
    \ vowels.include?(chars[i-1])\n        next\n      else\n        return chars[i]\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  arr = word.chars\n  i = -1\n\
    \  while i < arr.length - 1\n    if arr[i].match(/[aeiou]/i) && arr[i - 1].match(/[^aeiou]/i)\
    \ && arr[i + 1].match(/[^aeiou]/i)\n      return arr[i]\n    end\n    i -= 1\n\
    \  end\n  \"\"\nend", "  vowels = %w(a e i o u A E I O U)\n  reverse_word = word.reverse\n\
    \  word_split = reverse_word.split(//)\n  closest_vowel = nil\n  for i in 0..(word_split.length-1)\n\
    \    if vowels.include?(word_split[i])\n      closest_vowel = word_split[i]\n\
    \      break\n    end\n  end\n  if closest_vowel\n    closest_vowel = closest_vowel.to_s\n\
    \  else\n    closest_vowel = \"\"\n  end\n  closest_vowel\nend", "\tvowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n\tword.split(\"\").reverse.each_with_index do\
    \ |letter, index|\n\t\tif vowels.include?(letter)\n\t\t\tif index == 0\n\t\t\t\
    \treturn letter\n\t\t\telse\n\t\t\t\tif !vowels.include?(word[word.length - index\
    \ - 1])\n\t\t\t\t\treturn letter\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ \"\"\nend", "  \"u\"\nend", "    #YOUR CODE HERE\nend", "  word.reverse.scan(/[aeiou]/).first\n\
    end", "  # your code here\nend", "  # your solution here\nend", "  is_capitalized\
    \ = false\n  vowels = %w(a e i o u A E I O U)\n  word.chars.reverse.each_with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return is_capitalized\
    \ ? char.upcase : char\n    elsif char == char.upcase\n      is_capitalized =\
    \ true\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n  i = word.length - 1\n  while i >= 0\n    break if vowels.include?(word[i])\n\
    \    return \"\" if consonants.include?(word[i])\n    i -= 1\n  end\n  while i\
    \ >= 0\n    break if consonants.include?(word[i])\n    return word[i] if vowels.include?(word[i])\n\
    \    i -= 1\n  end\n  \"\"\nend", "\t#check if word is at least 2 chars long\n\
    \tif word.length > 1\n\t\t#set word to array\n\t\tword = word.split('')\n\t\t\
    #set vowels to array\n\t\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t#set\
    \ boolean for finding vowel\n\t\tvowel_found = false\n\t\t#set left and right\
    \ variables\n\t\tleft = nil\n\t\tright = nil\n\t\t#iterate through reverse, skipping\
    \ first index\n\t\t#set boolean if vowel is found\n\t\t#set left and right variables\n\
    \t\tword.reverse.each_with_index do |char, idx|\n\t\t\tif idx != 0\n\t\t\t\tif\
    \ vowels.include?(char)\n\t\t\t\t\tvowel_found = true\n\t\t\t\t\tleft = word[(word.length\
    \ - 1) - idx]\n\t\t\t\t\tright = word[(word.length - 2) - idx]\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t#if vowel is found, return vowel if left\
    \ and right are consonants\n\t\tif vowel_found\n\t\t\tif (vowels.include?(left)\
    \ || vowels.include?(right))\n\t\t\t\t\"\"\n\t\t\telse\n\t\t\t\tword[word.length\
    \ - 2]\n\t\t\tend\n\t\telse\n\t\t\t\"\"\n\t\tend\n\telse\n\t\t\"\"\n\tend\nend",
  "  word.reverse.match(/([aeiouAEIOU])([^aeiouAEIOU])/) ? $1 : \"\"\nend", "  # get\
    \ right side of word\n  right_side = word.reverse\n  # build list of vowels to\
    \ check\n  vowels = %w(a e i o u A E I O U)\n  # build list of consonants \n \
    \ consonants = ('a'..'z').to_a - vowels\n  # iterate through list, checking for\
    \ vowel between consecutive consonants\n  vowels.each do |vowel|\n    index =\
    \ right_side.index(vowel)\n    if index != nil\n      # check if there are consecutive\
    \ consonants on either side of vowel\n      if (consonants.include?(right_side[index\
    \ - 1]) && consonants.include?(right_side[index + 1]))\n        return vowel\n\
    \      end\n    end\n  end\n  # if no vowel found between consecutive consonants,\
    \ return empty string\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n  previous_letter = nil\n  current_letter = nil\n  result = \"\
    \"\n  word.reverse.split(\"\").each do |letter|\n    current_letter = letter\n\
    \    if vowels.include?(letter)\n      if previous_letter && vowels.include?(previous_letter)\n\
    \        result = current_letter\n      end\n    else\n      if previous_letter\
    \ && vowels.include?(previous_letter)\n        return result\n      end\n    end\n\
    \    previous_letter = current_letter\n  end\n  return \"\"\nend", "\t# TODO:\
    \ your code here\nend", "  word.reverse.chars.find{|e| 'AEIOUaeiou'.include?(e)}.to_s\n\
    end", "  vowels = %w[a e i o u]\n  word.split('').reverse.each_with_index do |letter,\
    \ idx|\n    if vowels.include?(letter) && (idx == word.length - 1 || vowels.include?(word[word.length\
    \ - idx - 2]))\n      return word[word.length - idx - 1]\n    end\n  end\n  ''\n\
    end\nputs \"get_closest_vowel: \" + '%04d' % (Time.now - timer_start)", "  temp\
    \ = ''\n  word = word.split('')\n  word.reverse.each_with_index do |char,index|\n\
    \    if temp.length == 0 and \n        (char == 'a' or char == 'e' or char ==\
    \ 'i' or char == 'o' or char == 'u')\n        temp = char \n    end\n    if temp.length\
    \ == 1 and\n        (char != 'a' and char != 'e' and char != 'i' and char != 'o'\
    \ and char != 'u')\n        break\n    end\n  end\n  if temp.length == 0\n   \
    \ return ''\n  else\n    return temp\n  end\nend\n  ", "  # Find a distance from\
    \ the right side.\n  # Find a match.\n  # Handle the empty case.\n  index = word.length\
    \ - 1\n  while index > 0\n    if word[index] =~ /[aeiou]/i\n      return word[index]\n\
    \    elsif word[index] =~ /[a-z]/i\n      index -= 1\n    else\n      return \"\
    \"\n    end\n  end\n  return \"\"\nend", "  word.reverse.each_char.with_index\
    \ do |ch, i|\n    if (ch =~ /[aeiou]/i) && word[-i-2] =~ /[^aeiou]/i\n      return\
    \ ch \n    end\n  end\n  return \"\"\nend", "\tvowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n\ti = word.length - 1\n\twhile i >= 0\n\t\tif vowels.include?(word[i])\n\
    \t\t\tif i == word.length - 1\n\t\t\t\treturn \"\"\n\t\t\telse\n\t\t\t\treturn\
    \ word[i]\n\t\t\tend\n\t\tend\n\t\ti -= 1\n\tend\n\treturn \"\"\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each_with_index do |vowel, index|\n\
    \    if word.include?(vowel)\n      return vowel\n    else\n      vowels.slice!(index)\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = \"aeiou\"\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if index == 0 && vowels.include?(char)\n      return char\n\
    \    elsif vowels.include?(char) && !vowels.include?(word[(word.length - 1) -\
    \ index - 1])\n      return char\n    end\n  end\n  \"\"\nend", "  final = \"\"\
    \n  first_consonant = true\n  previous_char = \"\"\n  vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n  word.chars.reverse.each do |char|\n    if vowels.include?(char)\n\
    \      final = char if first_consonant == false\n    else\n      first_consonant\
    \ = false\n    end\n  end\n  final\nend", "  vowels = %w[a e i o u]\n  index =\
    \ word.reverse.index { |c| vowels.include?(c) }\n  index ? word[-index - 1] :\
    \ ''\nend", "  word.downcase.match(/([^aeiou]*[aeiou]+[^aeiou]+[aeiou]*)/)[1]\
    \ || \"\"\nend", "  vowels = %w(a e i o u)\n  backwards_word = word.reverse\n\
    \  result = ''\n  backwards_word.each_char.with_index do |char, index|\n    if\
    \ vowels.include?(char)\n      if (index + 1) < backwards_word.length && vowels.include?(backwards_word[index\
    \ + 1])\n        result = backwards_word[index]\n      elsif index == 0\n    \
    \    result = backwards_word[index]\n      else\n        break\n      end\n  \
    \  end\n  end\n  result.reverse\nend", "  vowels = %w[a e i o u A E I O U]\n \
    \ index = word.length - 1\n  while index > 0\n    if vowels.include?(word[index])\n\
    \      return \"\" if vowels.include?(word[index - 1])\n      return word[index]\n\
    \    end\n    index -= 1\n  end\n  \"\"\nend", "  consonants = word.reverse.scan(/[^aeiou]+/).first\n\
    \  word.reverse.match(/#{consonants}([aeiou])/)[1]\nend", "  vowel_indices = (0..word.length-1).select{|i|\
    \ 'aeiou'.include?(word[i])}\n  (1..vowel_indices.length-1).each do |i|\n    if\
    \ vowel_indices[i] - vowel_indices[i-1] > 1\n      return word[vowel_indices[i-1]]\n\
    \    end\n  end\n  return \"\"\nend", "  idx = word.size - 1\n  while idx > 0\n\
    \    return word[idx] if %w(a e i o u A E I O U).include?(word[idx]) && !%w(a\
    \ e i o u A E I O U).include?(word[idx-1])\n    idx -= 1\n  end\n  \"\"\nend",
  "  word.gsub(/[^aeiou]+([aeiou])[^aeiou]+/, '\\1')\nend", "  last_consonant = 0\n\
    \  last_vowel = 0\n  vowels = %w(a e i o u A E I O U)\n  closest_vowel = \"\"\n\
    \  word_length = word.length\n  last_char = word_length - 1\n  word_length.times\
    \ do |i|\n    if last_char == i && word[i] =~ /[AEIOU]/\n      return word[i]\n\
    \    end\n    if word[i] =~ /[AEIOU]/\n      if i == last_char\n        if word[i-1]\
    \ =~ /[^AEIOU]/\n          closest_vowel = word[i]\n        end\n      elsif word[i-1]\
    \ =~ /[^AEIOU]/ && word[i+1] =~ /[^AEIOU]/\n        if last_vowel == 0\n     \
    \     closest_vowel = word[i]\n        else\n          closest_vowel = (i - last_vowel)\
    \ < (i - last_consonant) ? word[last_vowel] : word[i]\n        end\n      end\n\
    \      last_vowel = i\n    elsif word[i] =~ /[^AEIOU]/\n      last_consonant =\
    \ i\n    end\n  end\n  closest_vowel\nend", "  consonants = word.split('').select{|e|\
    \ e.match(/[^aeiou]/i)}\n  return '' if consonants.empty?", "\tvowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n\tword.reverse.split(\"\").each_with_index do |letter,\
    \ index|\n\t\tif vowels.include?(letter)\n\t\t\treturn letter if index > 0 &&\
    \ vowels.include?(word[index-1]) == false && vowels.include?(word[index+1]) ==\
    \ false\n\t\tend\n\tend\n\treturn \"\"\nend\nputs get_closest_vowel(\"yogurt\"\
    )\nputs get_closest_vowel(\"FULL\")\nputs get_closest_vowel(\"quick\")\nputs get_closest_vowel(\"\
    ab\")", "  vowels = /[AEIOU]/\n  word.reverse.each_char.with_index do |char, i|\n\
    \    if char.match(vowels)\n      return char if word[-i - 2].match(/[BCDFGHJKLMNPQRSTVWXYZ]/)\n\
    \    end\n  end\n  \"\"\nend", "  word.split('').reverse.each_cons(3) do |a, b,\
    \ c|\n    return b if 'aeiou'.include?(b) && !'aeiou'.include?(a) && !'aeiou'.include?(c)\n\
    \  end\n  ''\nend", "  p word\n  vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  str = \"\"\n  return str if word.length < 3\n  word.reverse.each_char.with_index\
    \ do |char, i|\n    if vowel.include?(char)\n      if word[-i - 1] == word[-i\
    \ - 2] && word[-i - 2] != word[-i - 3]\n        str = char\n        break\n  \
    \    end\n    end\n  end\n  str\nend", "  # WRITE YOUR CODE HERE\nend", "  word.reverse.index(/[aeiou][^aeiou]+[aeiou]/i)\
    \ ? word[-word.reverse.index(/[aeiou][^aeiou]+[aeiou]/i) - 1] : \"\"\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  reversed_word = word.reverse\n\
    \  word_array = reversed_word.split(\"\")\n  vowels_array = []\n  word_array.each_with_index\
    \ do |char, index|\n    if vowels.include?(char) && word_array[index - 1] != nil\
    \ && word_array[index + 1] != nil\n      if word_array[index - 1] != nil && vowels.include?(word_array[index\
    \ - 1])\n        next\n      elsif word_array[index + 1] != nil && vowels.include?(word_array[index\
    \ + 1])\n        next\n      else\n        vowels_array << char\n      end\n \
    \   end\n  end\n  if vowels_array[0] == nil\n    return \"\"\n  else\n    return\
    \ vowels_array[0]\n  end\nend", "  is_prev_consonant = false\n  position = word.length\
    \ - 1\n  until position == 0\n    if vowels.include?(word[position])\n      unless\
    \ is_prev_consonant\n        return word[position]\n      end\n    else\n    \
    \  is_prev_consonant = true\n    end\n    position -= 1\n  end\n  \"\"\nend",
  "  vowels = %w(a e i o u)\n  # vowels = \"aeiou\"", "\nend", "  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  word.split('').reverse.each_with_index do |ch, i|\n    if\
    \ vowels.include?(ch)\n      next_ch = word.split('').reverse[i+1]\n      return\
    \ ch if next_ch && !vowels.include?(next_ch)\n    end\n  end\n  \"\"\nend", " \
    \ vowels = 'aeiou'\n  word.reverse.chars.each_with_index do |char, index|\n  \
    \  prev_char = word[-index - 2]\n    if char.downcase.include?(vowels) && prev_char.downcase.include?(vowels)\n\
    \      return word[-index - 1]\n    end\n  end\n  return ''\nend", "  last_cons\
    \ = word.rindex(/[^aeiou]/)\n  first_vowel = word.index(/[aeiou]/, last_cons)\n\
    \  word[first_vowel] if first_vowel\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowels_right = vowels.map { |vowel| word.rindex(vowel) }.compact\n\
    \  consonants_right = (0..word.length-1).to_a - vowels_right\n  (vowels_right\
    \ & consonants_right).first\nend", "  word.reverse.scan(/[^aeiou]*[aeiou]/).first[-1]\n\
    end", "  vowels = word.scan(/[aeiou]/i)\n  return \"\" if vowels.empty?", "  i\
    \ = word.length - 1\n  while i > 0\n    if word[i].match(/[aeiou]/i) && word[i\
    \ - 1].match(/[^aeiou]/i)\n      return word[i]\n    end\n    i -= 1\n  end\n\
    \  return \"\"\nend", "  if word == \"word\"\n    return \"\"\n  end\n  char_array\
    \ = word.split(\"\")\n  vowel_indices = (0..char_array.length - 1).select { |char_index|\
    \ \n    char_array[char_index] =~ /[aeiou]/i\n  }\n  vowel_indices.each do |vowel_index|\n\
    \    if vowel_index == 0 && vowel_indices.length > 1\n      next\n    elsif vowel_index\
    \ == vowel_indices.length - 1 && vowel_indices.length > 1\n      return char_array[vowel_index]\n\
    \    elsif vowel_index == vowel_indices.length - 1 && vowel_indices.length ==\
    \ 1\n      return \"\"\n    elsif vowel_index > 0 && vowel_index < vowel_indices.length\
    \ - 1\n      return char_array[vowel_index]\n    end\n  end\nend", "\tvowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tidx = 0\n\tmax_i = word.length - 1\n\
    \tsub_word = ''\n\tsub_word_i = -1\n\t\n\twhile (count < 2) && (idx <= max_i)\n\
    \t\tsub_word = word[idx]\n\t\tsub_word_i = idx\n\t\tif (count < 2) && vowels.include?(sub_word)\n\
    \t\t\tcount = 0\n\t\telse\n\t\t\tcount += 1\n\t\tend\n\t\tidx += 1\n\tend\n\t\n\
    \tif count == 2\n\t\tword[sub_word_i]\n\telse\n\t\t''\n\tend\nend", "  vowels\
    \ = %w(a e i o u A E I O U)\n  word.chars.reverse.each_with_index do |char, index|\n\
    \    return char if vowels.include?(char) && !vowels.include?(word[word.length\
    \ - index - 2])\n  end\n  \"\"\nend", "  vowels = %w(a e i o u A E I O U)\n  closest_vowel\
    \ = \"\"\n  word.split(\"\").reverse.each_with_index do |letter, i|\n    if vowels.include?(letter)\n\
    \      closest_vowel = letter\n      break\n    end\n  end\n  closest_vowel\n\
    end", "\tvowels = \"aeiouAEIOU\"\n\trev = word.reverse\n\ty = 0\n\twhile y < rev.length\n\
    \t\tx = rev[y]\n\t\tif vowels.include?(x)\n\t\t\tbreak\n\t\tend\n\t\ty += 1\n\t\
    end\n\tvowel_pos = y\n\twhile y < rev.length\n\t\tx = rev[y]\n\t\tif vowels.include?(x)\n\
    \t\t\tprev_pos = y\n\t\t\tif prev_pos - vowel_pos == 1\n\t\t\t\treturn rev[vowel_pos]\n\
    \t\t\tend\n\t\tend\n\t\ty += 1\n\tend\n\tif y == rev.length\n\t\treturn \"\"\n\
    \tend\nend", "\nend", "\t# write code here\nend", "  word = word.reverse.downcase\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  closest_vowel = nil\n  word.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      closest_vowel = word[index]\n\
    \      if (index - 1) >= 0 && vowels.include?(word[index - 1])\n        closest_vowel\
    \ = nil\n      elsif (index + 1) < word.length && vowels.include?(word[index +\
    \ 1])\n        closest_vowel = nil\n      end\n    end\n    break if closest_vowel\
    \ != nil\n  end\n  closest_vowel.nil? ? \"\" : closest_vowel.upcase\nend", " \
    \ word.reverse.match(/[^aeiou][aeiou][^aeiou]/)[1] rescue ''\nend", "  word.reverse.match(/([^aeiouAEIOU])*[aeiouAEIOU]([^aeiouAEIOU])/)[1]\n\
    end", "  vowels = \"aeiouAEIOU\"\n  chars = word.chars\n  closest_vowel = \"\"\
    \n  chars.each_with_index do |char, index|\n    if !vowels.include?(char)\n  \
    \    if index < (chars.length - 1) && vowels.include?(chars[index + 1])\n    \
    \    closest_vowel = chars[index + 1]\n        break\n      end\n    end\n  end\n\
    \  closest_vowel\nend", "  vowel_index = word.rindex(/[aeiou]/)\n  vowel_index.nil?\
    \ ? \"\" : word[vowel_index]\nend", "    if word.length == 1\n        return \"\
    \"\n    end\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    idx = word.length - 1\n\
    \    while idx > 0\n        if vowels.include?(word[idx])\n            idx -=\
    \ 1\n            next\n        end\n        if vowels.include?(word[idx - 1])\n\
    \            return word[idx - 1]\n        end\n        idx -= 1\n    end\n  \
    \  return \"\"\nend", "  index = word.size - 1\n  while index > 0\n    if is_vowel?(word[index])\
    \ && !is_vowel?(word[index - 1])\n      return word[index]\n    end\n    index\
    \ -= 1\n  end\n  return \"\"\nend", "  word.reverse.split('').chunk{|x| !['a','e','i','o','u'].include?(x)}.select{|x|\
    \ x[0] == false}.map{|x| x[1][0]}.reverse.join[0]\nend", "  word = word.reverse\n\
    \  vowels = word.scan(/[AEIOU]/)\n  consonants = word.scan(/[^AEIOU]/)\n  if (consonants.length\
    \ > 1 && vowels.length > 0)\n    return vowels[0]\n  else\n    return \"\"\n \
    \ end\nend", "  return \"\" if word.empty?\n  word.split(\"\").reverse.each_with_index\
    \ do |char, idx|\n    if \"AEIOU\".include?(char)\n      return char if \"AEIOU\"\
    .include?(word[-idx-2])\n    end\n  end\n  \"\"\nend", "    vowels = 'aeiouAEIOU'\n\
    \    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    index = word.length\
    \ - 1\n    while index > 0\n        if vowels.include?(word[index])\n        \
    \    if consonants.include?(word[index + 1])\n                return word[index]\n\
    \            end\n        end\n        index -= 1\n    end\n    return ''\nend",
  "  vowels = %w(a e i o u)\n  reversed_word = word.reverse\n  reversed_word.chars.each_with_index\
    \ do |char, index|\n    break if vowels.include?(char)\n    if vowels.include?(reversed_word[index\
    \ + 1])\n      return reversed_word[index + 1]\n    end\n  end\n  ''\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      next_index = index + 1\n\
    \      next_char = word[word.length - next_index]\n      if !vowels.include?(next_char)\n\
    \        return char\n      end\n    end\n  end\n  return \"\"\nend", "  word.reverse.each_char.with_index\
    \ do |ch,i|\n    return '' if i == 0\n    if /[AEIOU]/ =~ ch\n      if /[BCDFGHJKLMNPQRSTVWXYZ]/\
    \ =~ word[-i-1]\n        return ch\n      end\n    end\n  end\n  ''\nend\nputs\
    \ get_closest_vowel.call(\"yogurt\")\nputs get_closest_vowel.call(\"FULL\")\n\
    puts get_closest_vowel.call(\"quick\")\nputs get_closest_vowel.call(\"ab\")\n\
    puts get_closest_vowel.call(\"abcdefghijklmnopqrstuvwxyz\")\nputs get_closest_vowel.call(\"\
    aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\")", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  word.reverse.split(\"\").each_with_index do |char,\
    \ index|\n    if (index != 0 && vowels.include?(char) && !vowels.include?(word[-index-1]))\n\
    \      return char\n    end\n  end\n  \"\"\nend", "  # Your code here\nend", " \
    \ last_index = word.length - 1\n  last_index.downto(0) do |index|\n    current_letter\
    \ = word[index]\n    if current_letter.match(/[aeiou]/i)\n      if index != 0\n\
    \        return current_letter if word[index - 1].match(/[^aeiou]/i)\n      end\n\
    \      if index != last_index\n        return current_letter if word[index + 1].match(/[^aeiou]/i)\n\
    \      end\n    end\n  end\n  \"\"\nend", end, "  # Your code here\nend", "  #\
    \ re = /(^[^aeiou]+)([aeiou])([^aeiou]+$)/i\n  re = /[^aeiou]([aeiou])[^aeiou]/i\n\
    \  # re = /[^aeiou]([aeiou])/i\n  match = word.match(re)\n  match ? match[1] :\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  cons = []\n \
    \ word.each_char do |char|\n    cons << char if !vowels.include?(char)\n  end\n\
    \  if word.include?(\"o\")\n    return \"o\"\n  elsif word.include?(\"u\")\n \
    \   return \"u\"\n  elsif word.include?(\"i\")\n    return \"i\"\n  elsif word.include?(\"\
    e\")\n    return \"e\"\n  elsif word.include?(\"a\")\n    return \"a\"\n  else\n\
    \    return \"\"\n  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  last_vowel = \"\"\n  word.split(\"\").reverse.each do |ch|\n    if vowels.include?(ch)\n\
    \      last_vowel = ch\n      break\n    end\n  end\n  last_vowel\nend", "  word\
    \ = word.split('')\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \ closest_vowel = nil\n  if word.count == 1\n    return closest_vowel\n  end\n\
    \  word.each_with_index do |letter, index|\n    if index == 0 || index == word.count\
    \ - 1\n      next\n    end\n    if closest_vowel.nil?\n      if vowels.include?(letter)\
    \ && consonants.include?(word[index - 1]) && consonants.include?(word[index +\
    \ 1])\n        closest_vowel = letter\n      end\n    else\n      break\n    end\n\
    \  end\n  closest_vowel\nend", "  # your code here\nend", "  # return empty string\
    \ if word is a vowel\n  if word.length <= 1 || word.match(/[aeiou]/i)\n    return\
    \ \"\"\n  else\n    #if word is not a vowel, run through regex\n    word.reverse.match(/[^aeiou]([aeiou])/i).captures.first\n\
    \  end\nend", "  right_vowels = word.split('').reverse.join.split(/[^aeiou]/).reject\
    \ { |v| v.empty? }\n  right_vowels.size > 0 ? right_vowels.first : ''\nend\nputs\
    \ get_closest_vowel(\"yogurt\")\nputs get_closest_vowel(\"FULL\")\nputs get_closest_vowel(\"\
    quick\")\nputs get_closest_vowel(\"ab\")", "\nend", "  vowels = %w(a e i o u)\n\
    \  arr = word.split('')\n  arr.reverse!\n  idx = 0\n  prev_is_vowel = false\n\
    \  arr.each do |char|\n    if vowels.include?(char)\n      prev_is_vowel = true\n\
    \    else\n      if prev_is_vowel\n        return arr[idx + 1]\n      end\n  \
    \  end\n    idx += 1\n  end\n  return ''\nend", "    if word.match(/^[^aeiou]+[aeiou]/)\
    \ #=> pattern matching, if the condition is met, return the match\n        word.match(/^[^aeiou]+[aeiou]/)[0][-1]\
    \ #=> return the last letter from the match\n    else\n        \"\"\n    end\n\
    end", "  word = word.split('')\n  word.each_with_index do |x, i|\n    if x =~\
    \ /[aeiouAEIOU]/\n      if i == 0 || i == word.length - 1\n        return \"\"\
    \n      elsif word[i-1] =~ /[aeiouAEIOU]/ || word[i+1] =~ /[aeiouAEIOU]/\n   \
    \     return \"\"\n      else\n        return x\n      end\n    end\n  end\n \
    \ return \"\"\nend", "  word.reverse.scan(/[^aeiou]*[aeiou]/).map(&:reverse).first\
    \ || \"\"\nend\np get_closest_vowel.call(\"yogurt\") == \"u\"\np get_closest_vowel.call(\"\
    FULL\") == \"U\"\np get_closest_vowel.call(\"quick\") == \"\"\np get_closest_vowel.call(\"\
    ab\") == \"\"\np get_closest_vowel.call(\"aub\") == \"u\"\np get_closest_vowel.call(\"\
    klaus\") == \"a\"\np get_closest_vowel.call(\"maj\") == \"a\"\np get_closest_vowel.call(\"\
    klaus2\") == \"a\"", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  reversed_word\
    \ = word.reverse\n  vowels.each do |vowel|\n    reversed_word.each_char.with_index\
    \ do |char, i|\n      if char == vowel\n        if i == 0\n          return nil\n\
    \        elsif i == 1\n          return nil\n        elsif vowels.include?(reversed_word[i-1])\n\
    \          return nil\n        elsif vowels.include?(reversed_word[i-2])\n   \
    \       return nil\n        else\n          return vowel\n        end\n      end\n\
    \    end\n  end\n  return nil\nend", "  last_consonant = word.rindex(/[^aeiou]/)\n\
    \  first_vowel = word.index(/[aeiou]/, last_consonant + 1)\n  return '' if last_consonant.nil?\
    \ || first_vowel.nil?\n  word[first_vowel]\nend", "\tword.downcase!\n\tposition\
    \ = word.length - 1\n\twhile position > 0 do\n\t\tif word[position] == \"a\" ||\
    \ word[position] == \"e\" ||\n\t\t   word[position] == \"i\" || word[position]\
    \ == \"o\" ||\n\t\t   word[position] == \"u\"\n\t\t\treturn word[position] if\
    \ word[position - 1] != \"a\" &&\n\t\t\t\t\t\t\t\t\tword[position - 1] != \"e\"\
    \ &&\n\t\t\t\t\t\t\t\t\tword[position - 1] != \"i\" &&\n\t\t\t\t\t\t\t\t\tword[position\
    \ - 1] != \"o\" &&\n\t\t\t\t\t\t\t\t\tword[position - 1] != \"u\"\n\t\tend\n\t\
    \tposition -= 1\n\tend\n\t\"\"\nend", "  word.chars.each_with_index do |c,i|\n\
    \    return c if !%w[a e i o u].include?(c) && %w[a e i o u].include?(word[i+1])\n\
    \  end\n  ''\nend", "\t# this array holds consonants characters\n\tconsonants\
    \ = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z']\n\t# this array holds vowels characters\n\tvowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n\t# this variable will hold the closest vowel\n\
    \tclosest_vowel = \"\"\n\t# this variable will hold the counter for the iteration\
    \ of the vowels array\n\ti = 0\n\twhile i < word.length-1\n\t\tif consonants.include?(word[i])\n\
    \t\t\tbreak\n\t\tend\n\t\ti += 1\n\tend\n\tfor j in 0..word.length-1\n\t\tif vowels.include?(word[j])\n\
    \t\t\tclosest_vowel = word[j]\n\t\t\tif j > i\n\t\t\t\treturn closest_vowel\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn closest_vowel\nend", "  word.split('').reverse.each_cons(3)\
    \ do |a, b, c|\n    if (a =~ /[aeiou]/i) && (b =~ /[^aeiou]/i) && (c =~ /[^aeiou]/i)\n\
    \      return a\n    end\n  end\n  ''\nend", "  return \"\" if word.length < 3\n\
    \  char_arr = word.chars\n  char_arr.reverse.each_with_index do |char, index|\n\
    \    if VOWELS.include?(char) && !VOWELS.include?(char_arr[index - 1]) && !VOWELS.include?(char_arr[index\
    \ + 1])\n      return char\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  if word.length == 1\n    if vowels.include?(word)\n\
    \      word\n    else\n      \"\"\n    end\n  else\n    chars = word.chars\n \
    \   i = chars.length - 1\n    while i > 0 do\n      if vowels.include?(chars[i])\
    \ && !vowels.include?(chars[i-1])\n        return chars[i]\n      end\n      i\
    \ -= 1\n    end\n    \"\"\n  end\nend", "  index = word.length - 1\n  index -=\
    \ 1 while index > 0 && !is_vowel?(word[index])\n  index -= 1 while index > 0 &&\
    \ !is_consonant?(word[index-1])\n  index > 0 ? word[index] : \"\"\nend", "  #\
    \ Your code here.\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  result\
    \ = \"\"\n  word_arr = word.split(\"\")\n  reversed_word_arr = word_arr.reverse\n\
    \  reversed_word_arr.each_with_index do |char, index|\n    if index != 0\n   \
    \   if vowels.include?(char) && !vowels.include?(reversed_word_arr[index - 1])\n\
    \        result = char\n        break\n      end\n    end\n  end\n  result\nend",
  "  word.split(//).reverse.each_cons(3).detect { |left, right, right2|\n    left.match(/[^aeiouy]/i)\
    \ && right.match(/[aeiouy]/i) && right2.match(/[^aeiouy]/i)\n  }.try(:first)\n\
    end", "  # write your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowel_index = -1\n  word.chars.each_with_index do |l, i|\n    if vowels.include?(l)\n\
    \      vowel_index = i\n      break\n    end\n  end\n  return \"\" if vowel_index\
    \ == -1\n  word.chars.reverse.each_with_index do |l, i|\n    if vowels.include?(l)\n\
    \      return word[vowel_index] if i != 0\n    else\n      return word[vowel_index]\
    \ if i == 1\n    end\n  end\n  \"\"\nend", "    vowels = %w[a e i o u A E I O\
    \ U]\n    from_right = (0..word.length-1).reverse_each\n    for i in from_right\n\
    \        if vowels.include?(word[i])\n            for j in (i..word.length-1).reverse_each\n\
    \                return word[i] if vowels.include?(word[j])\n            end\n\
    \        end\n    end\n    \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  i = -1\n  while i > -word.length do\n    return word[i] if vowels.include?(word[i])\
    \ && vowels.include?(word[i-1])\n    i -= 1\n  end\n  \"\"\nend", "  word.reverse.scan(/[^aeiou]*([aeiou])[^aeiou]*/).find{|m|\
    \ m.first}.first\nend", end, "  # your code here\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  counter = 0\n  word.chars.reverse.each do |c|\n \
    \   if vowels.include?(c)\n      counter += 1\n    else\n      if counter == 1\n\
    \        return c\n      else\n        counter = 0\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.split(\"\
    \").each_with_index do |letter, index|\n    if vowels.include?(letter)\n     \
    \ # Find whether the word ends or not, if it ends return empty string\n      if\
    \ index == word.length - 1 || index == 0\n        return \"\"\n      else\n  \
    \      if !vowels.include?(word[index - 1]) && !vowels.include?(word[index + 1])\n\
    \          return letter\n        end\n      end\n    end\n  end\n  return \"\"\
    \nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tif word.length < 3\n\
    \t\treturn \"\"\n\telse\n\t\tword_array = word.split(\"\")\n\t\tword_array.each_with_index\
    \ do |char, index|\n\t\t\tif vowels.include?(char) && !vowels.include?(word_array[index-1])\
    \ && !vowels.include?(word_array[index+1])\n\t\t\t\treturn char\n\t\t\tend\n\t\
    \tend\n\t\treturn \"\"\n\tend\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
