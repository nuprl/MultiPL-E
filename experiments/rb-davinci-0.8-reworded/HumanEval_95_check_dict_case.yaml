name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a hash, return true if all keys are strings in lower \n# case or\
  \ all keys are strings in upper case, else return false.\n# The function should\
  \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  case_check = dict.values.map { |value| value.length }.uniq\n  case_check.length\
    \ == 1 ? true : false\nend", "  return false if dict.length < 1\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }\n    return\
    \ true\n  else\n    return false\n  end\nend", "  return false if dict.size ==\
    \ 0\n  if dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\n    return\
    \ true\n  elsif dict.keys.all? { |k| k.is_a?(String) && k.upcase == k }\n    return\
    \ true\n  else\n    return false\n  end\nend", "  lower = dict.keys.map { |i|\
    \ i.to_s.upcase }\n  return true if lower == dict.keys\n  lower = dict.keys.map\
    \ { |i| i.to_s.downcase }\n  return true if lower == dict.keys\n  false\nend",
  "    if dict.empty?\n        return false\n    end\n    dict.each do |key, value|\n\
    \        if key.class != String \n            return false\n        end\n    end\n\
    \    first_key = dict.keys[0]\n    if first_key.upcase == first_key\n        dict.each\
    \ do |key, value|\n            if key.downcase == key\n                return\
    \ false\n            end\n        end\n    else\n        dict.each do |key, value|\n\
    \            if key.upcase == key\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  return false if dict.empty?\n\
    \  if dict.all? { |k, v| k.is_a?(String) && k.downcase == k }\n    true\n  elsif\
    \ dict.all? { |k, v| k.is_a?(String) && k.upcase == k }\n    true\n  else\n  \
    \  false\n  end\nend", "  lower = true\n  upper = true\n  dict.each do |key, value|\n\
    \    if key.is_a?(String)\n      lower = false if key.capitalize != key\n    \
    \  upper = false if key.downcase != key\n    else\n      return false\n    end\n\
    \  end\n  lower || upper\nend", "  return false if dict.empty?\n  keys = dict.keys\n\
    \  all_lower_keys = keys.all? { |key| key.is_a?(String) && key == key.downcase\
    \ }\n  all_upper_keys = keys.all? { |key| key.is_a?(String) && key == key.upcase\
    \ }\n  all_lower_keys || all_upper_keys\nend", "    dict.each_key do |k|\n   \
    \     if k.is_a? String\n            return false unless (k == k.downcase or k\
    \ == k.upcase)\n        else\n            return false\n        end\n    end\n\
    \    true\nend", "  dict.empty? ? false : dict.keys.map(&:to_s).all? { |k| k ==\
    \ k.downcase } || dict.keys.map(&:to_s).all? { |k| k == k.upcase }\nend", "  \
    \  if dict.keys.all? {|k| k.is_a?(String) && k.downcase == k}\n        return\
    \ true\n    elsif dict.keys.all? {|k| k.is_a?(String) && k.upcase == k}\n    \
    \    return true\n    else\n        return false\n    end\nend", "    if dict.empty?\n\
    \        return false\n    end\n    lowercase = dict.keys.all? { |k| k.downcase\
    \ == k }\n    uppercase = dict.keys.all? { |k| k.upcase == k }\n    return (lowercase\
    \ || uppercase)\nend", "  dict.each_pair do |key, value|\n    if key.is_a? String\
    \ and !(key.upcase == key or key.downcase == key)\n      return false\n    end\n\
    \  end\n  return true\nend", "  all_lower = true\n  all_upper = true\n  dict.each\
    \ do |key, value|\n    unless key.is_a?(String)\n      return false\n    end\n\
    \    if key.capitalize != key && key.downcase != key\n      return false\n   \
    \ end\n    all_lower = false if key.upcase == key\n    all_upper = false if key.downcase\
    \ == key\n  end\n  all_lower || all_upper\nend", "\tkey_values = dict.keys.map(&:class)\n\
    \tkey_values.uniq.length == 1 && key_values.first == String ? true : false\nend",
  "  key_symbols = dict.keys.map { |k| k.class.to_s }.uniq\n  if key_symbols.length\
    \ == 1 and key_symbols[0] == \"String\"\n    key_types = dict.keys.map { |k| k.downcase\
    \ == k ? \"lower\" : \"upper\" }.uniq\n    key_types.length == 1 ? true : false\n\
    \  else\n    false\n  end\nend", "  count_lower_case = 0\n  count_upper_case =\
    \ 0\n  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n\
    \        count_lower_case += 1\n      else\n        count_upper_case += 1\n  \
    \    end\n    end\n  end\n  if count_lower_case == dict.length || count_upper_case\
    \ == dict.length\n    return true\n  else\n    return false\n  end\nend", "\t\
    lower_keys = dict.keys.map(&:downcase)\n\tupper_keys = dict.keys.map(&:upcase)\n\
    \treturn false if dict.keys.empty?\n\tdict.keys == lower_keys || dict.keys ==\
    \ upper_keys\nend", "  return false if dict.empty?\n  dict.all? { |k,v| k.downcase\
    \ == k } || dict.all? { |k,v| k.upcase == k }\nend", "  if (dict.keys.any? {|k|\
    \ k.to_s.downcase != k.to_s} && dict.keys.any? {|k| k.to_s.upcase != k.to_s})\
    \ || dict.empty?\n    false\n  else\n    true\n  end\nend", "\t# dict.each do\
    \ |key, value|\n\t# \tunless key.kind_of?(String)\n\t# \t\treturn false\n\t# \t\
    end\n\t# end\n\t# return true\n\tlower_dict = dict.keys.all?{|i| i == i.downcase}\n\
    \tupper_dict = dict.keys.all?{|i| i == i.upcase}\n\tif lower_dict\n\t\treturn\
    \ true\n\telsif upper_dict\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nputs check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\"})\nputs check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"\
    })", '    return false if dict.length == 0', "    return false if dict.size.zero?\n\
    \    dict.keys.each do |key|\n        return false if (key.downcase == key ||\
    \ key.upcase == key)\n    end\n    true\nend", "  return false if dict.empty?\n\
    \  first_key = dict.keys.first\n  return false unless first_key.is_a?(String)\n\
    \  return false if first_key.upcase == first_key\n  return false if first_key.downcase\
    \ == first_key\n  dict.keys.each do |k|\n    return false unless k.is_a?(String)\n\
    \    return false if first_key.upcase == k.upcase\n    return false if first_key.downcase\
    \ == k.downcase\n  end\n  true\nend", "  # Write your code here\nend", "  return\
    \ false if dict.empty?\n  dict.keys.select { |k| k.is_a?(String) }.map(&:upcase).all?\
    \ { |k| k == dict.keys.first.upcase } ||\n  dict.keys.select { |k| k.is_a?(String)\
    \ }.map(&:downcase).all? { |k| k == dict.keys.first.downcase }\nend", "  l = dict.keys.map\
    \ { |k| k.class }.uniq\n  l == [String] || l == [Symbol]\nend", "  if dict.keys.any?\
    \ { |k| k.is_a?(String) && !k.empty? }\n    first_key = dict.keys.first\n    first_key_is_uppercase\
    \ = first_key.upcase == first_key\n    dict.keys.all? { |k| first_key_is_uppercase\
    \ ? k.upcase == k : k.downcase == k }\n  else\n    false\n  end\nend", "  dict.each\
    \ do |key, value|\n    return false if key.class != String\n  end\n  dict.all?{|key,\
    \ value| key == key.downcase} || dict.all?{|key, value| key == key.upcase}\nend",
  "  return false if dict.empty?\n  return true if dict.keys.all?{|key| key.is_a?(String)\
    \ && key.upcase == key} || dict.keys.all?{|key| key.is_a?(String) && key.downcase\
    \ == key}\n  false\nend", "  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return true if dict.keys.all? { |key| key.is_a?\
    \ String and key.upcase == key } or dict.keys.all? { |key| key.is_a? String and\
    \ key.downcase == key }\n  end\n  return false\nend", "  (dict.keys.all?{|k| k.downcase\
    \ == k} or dict.keys.all?{|k| k.upcase == k}) and not dict.empty?\nend", "  if\
    \ dict.empty?\n    return false\n  end\n  dict.keys.all?{|key| key.is_a?(String)\
    \ && key.upcase.eql?(key)} || dict.keys.all?{|key| key.is_a?(String) && key.downcase.eql?(key)}\n\
    end", "    dict.any? { |k, v| !k.is_a?(String) } ? false : dict.to_a.map { |arr|\
    \ arr[0].upcase } == dict.to_a.map { |arr| arr[0] }\nend", "  if dict.empty?\n\
    \    return false\n  end\n  dict.keys.each do |key|\n    if key.class == String\n\
    \      if dict.keys.first.downcase == key.downcase\n        if dict.keys.last.downcase\
    \ != key.downcase\n          return false\n        end\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if dict.empty?\n  return false if dict.keys.include?(8)\n\
    \  return false if dict.keys.any?{|k| k.class != String}\n  if dict.keys.all?{|k|\
    \ k == k.downcase}\n    return true\n  elsif dict.keys.all?{|k| k == k.upcase}\n\
    \    return true\n  else\n    return false\n  end\nend", "  # Your code here\n\
    end", "    dict.empty? ? false : dict.keys.all? { |k| k.is_a?(String) } && dict.keys.all?(&:upcase?)\n\
    end", "  return false if dict.empty?\n  lower_case = true\n  upper_case = true\n\
    \  dict.each do |key, value|\n    lower_case = false if key.is_a?(String) && key.capitalize\
    \ != key\n    upper_case = false if key.is_a?(String) && key.upcase != key\n \
    \ end\n  lower_case || upper_case\nend", "    if dict.empty?\n        return false\n\
    \    end\n    is_lower = true\n    is_upper = true\n    dict.each do |key, value|\n\
    \        if key.is_a?(String)\n            if key != key.downcase\n          \
    \      is_lower = false\n            end\n            if key != key.upcase\n \
    \               is_upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower || is_upper\nend", "  dict.keys.all?\
    \ { |k| k.downcase == k } || dict.keys.all? { |k| k.upcase == k }\nend", "  if\
    \ dict.empty?\n    return false\n  else\n    h = dict.keys.inject({}) { |a, e|\
    \ a[e.class] ||= 0; a[e.class] += 1; a }\n    return h.values.inject(0, :+) ==\
    \ 1\n  end\nend", "\treturn false if dict.size == 0\n\tdict.each do |k,v|\n\t\t\
    return false if v.instance_of?(Fixnum)\n\tend\n\treturn true if dict.keys.all?{|x|\
    \ x.downcase == x}\n\treturn true if dict.keys.all?{|x| x.upcase == x}\n\treturn\
    \ false\nend", "    if dict.is_a?(Hash) && !dict.empty?\n        #get key list\n\
    \        key_list = dict.keys\n        #check if all keys are strings\n      \
    \  if key_list.all? {|key| key.is_a?(String)}\n            #check if all keys\
    \ are lower case\n            if key_list.all? {|key| key == key.downcase}\n \
    \               return true\n            #check if all keys are upper case\n \
    \           elsif key_list.all? {|key| key == key.upcase}\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  if dict.empty?\n\
    \    return false\n  else\n    keys = dict.keys\n    if keys.all? { |e| e.is_a?\
    \ String }\n      keys.all? { |e| e == e.downcase } || keys.all? { |e| e == e.upcase\
    \ }\n    else\n      false\n    end\n  end\nend", "  if dict.empty?\n    return\
    \ false\n  end\n  down = true\n  up = true\n  dict.each do |k, v|\n    down =\
    \ false if k.to_s != k.to_s.downcase\n    up = false if k.to_s != k.to_s.upcase\n\
    \  end\n  down || up\nend", "  # do something\nend", "  if dict.empty?\n    return\
    \ false\n  end\n  keys = dict.keys\n  vals = dict.values\n  is_upper = keys[0].is_a?(String)\
    \ && keys[0].upcase == keys[0]\n  is_lower = keys[0].is_a?(String) && keys[0].downcase\
    \ == keys[0]\n  keys.each do |key|\n    if key.is_a?(String)\n      if is_upper\
    \ && key.downcase == key\n        return false\n      elsif is_lower && key.upcase\
    \ == key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  dict.each_with_object([true, true]) do |(k, v),\
    \ arr|\n    arr[0] = false unless k.is_a?(String) && k == k.downcase\n    arr[1]\
    \ = false unless k.is_a?(String) && k == k.upcase\n  end.all?\nend", "    lower_keys\
    \ = dict.keys.map(&:downcase)\n    lower_keys == dict.keys || dict.keys == lower_keys.map(&:upcase)\n\
    end", "  # your code goes here\nend", "    is_upper = false\n    is_lower = false\n\
    \    dict.each do |key, val|\n        is_upper = true if key.is_a?(String) &&\
    \ key.upcase == key\n        is_lower = true if key.is_a?(String) && key.downcase\
    \ == key\n    end\n    dict.size > 0 && is_upper != is_lower\nend", "  return\
    \ false if dict.empty?\n  is_lower = dict.all? { |k,v| k.is_a?(String) && k.downcase\
    \ == k }\n  is_upper = dict.all? { |k,v| k.is_a?(String) && k.upcase == k }\n\
    \  is_lower || is_upper\nend", "  if dict.empty?\n    return false\n  end\n  is_lower\
    \ = dict.keys[0].class == String && dict.keys[0].downcase == dict.keys[0]\n  dict.keys.each\
    \ do |key|\n    if key.class != String\n      return false\n    end\n    if is_lower\n\
    \      if key.downcase != key\n        return false\n      end\n    else\n   \
    \   if key.upcase != key\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  lower_case = {}\n  upper_case = {}\n  dict.each do |key, value|\n\
    \    if key.class == String\n      if key.downcase == key\n        lower_case[key]\
    \ = value\n      elsif key.upcase == key\n        upper_case[key] = value\n  \
    \    end\n    end\n  end\n  if lower_case.size > 0 && upper_case.size > 0\n  \
    \  return false\n  else\n    return true\n  end\nend", "  if dict.empty?\n   \
    \ return false\n  else\n    dict.each do |key, value|\n      if key.is_a?(String)\
    \ && dict.all? { |key, value| key.is_a?(String) }\n        check_string_case(dict.keys.join(\"\
    \"))\n      else\n        return false\n      end\n    end\n  end\nend", "  return\
    \ false if dict.empty?\n  regexp = /^[a-z]+$/\n  regexp.match(dict.keys.join)\
    \ ? true : false\nend", "    # write your code here\n    output = true\n    keys\
    \ = dict.keys\n    first_upcase = keys[0].upcase\n    # puts first_upcase\n  \
    \  if keys.length == 0\n        output = false\n    elsif first_upcase != keys[0]\n\
    \        dict.each_key do |key|\n            if key.upcase != key\n          \
    \      output = true\n            else\n                output = false\n     \
    \           break\n            end\n        end\n    else\n        dict.each_key\
    \ do |key|\n            if key.downcase != key\n                output = true\n\
    \            else\n                output = false\n                break\n   \
    \         end\n        end\n    end\n    output\nend", "    up_case = true\n \
    \   down_case = true\n    dict.each do |k, v|\n        if k != k.downcase\n  \
    \          down_case = false\n        end\n        if k != k.upcase\n        \
    \    up_case = false\n        end\n    end\n    if up_case == false && down_case\
    \ == false\n        return false\n    end\n    return true\nend", "  if (dict.size\
    \ > 0)\n    keys = dict.keys\n    key_type = keys[0].class\n    if (key_type ==\
    \ String)\n      keys.all? { |key| key.size == 1 }\n    else\n      false\n  \
    \  end\n  else\n    false\n  end\nend", "  if dict.empty?\n    return false\n\
    \  end\n  dict.each do |key, value|\n    if key.upcase != key && key.downcase\
    \ != key\n      return false\n    end\n  end\n  return true\nend", "  return false\
    \ if dict.empty?\n  is_upper = true\n  is_lower = true\n  dict.each_key do |key|\n\
    \    is_upper = false if key.is_a?(String) && key != key.upcase\n    is_lower\
    \ = false if key.is_a?(String) && key != key.downcase\n  end\n  is_upper || is_lower\n\
    end", "  dict.keys.each do |k|\n    if dict.keys.all? { |key| key.upcase == key}\n\
    \      return true\n    else\n      return false\n    end\n  end\nend", "    if\
    \ dict.empty?\n        return false\n    end\n    lowercase = dict.keys.all? {\
    \ |key| key.class == String && key == key.downcase }\n    uppercase = dict.keys.all?\
    \ { |key| key.class == String && key == key.upcase }\n    lowercase || uppercase\n\
    end", "  return false if dict.empty?\n  dict.keys.all? { |k| k.upcase == k ||\
    \ k.downcase == k }\nend", "    keys = dict.keys\n    keys.each do |key|\n   \
    \     if !key.is_a?(String)\n            return false\n        end\n    end\n\
    \    dict.each do |key, value|\n        if key.match(/^[a-z]+$/)\n           \
    \ dict.each do |key, value|\n                if !key.match(/^[a-z]+$/)\n     \
    \               return false\n                end\n            end\n        elsif\
    \ key.match(/^[A-Z]+$/)\n            dict.each do |key, value|\n             \
    \   if !key.match(/^[A-Z]+$/)\n                    return false\n            \
    \    end\n            end\n        else\n            return false\n        end\n\
    \    end\n    return true\nend", "  #convert to array for easier processing\n\
    \  dict_arr = dict.to_a\n  #get the first key to compare against\n  first_key\
    \ = dict_arr[0][0]\n  #check that key is either a string or a symbol\n  if first_key.kind_of?(String)\
    \ || first_key.kind_of?(Symbol)\n    #get the case of the first element\n    case_of_first_key\
    \ = first_key.downcase\n    #iterate through the array\n    dict_arr.each do |key,\
    \ val|\n      #get the case of the key\n      case_of_key = key.downcase\n   \
    \   #compare the case of the first element to the case of every element in the\
    \ array\n      if case_of_first_key != case_of_key\n        return false\n   \
    \   end\n    end\n    return true\n  else\n    return false\n  end\nend", "  if\
    \ dict.empty?\n    return false\n  else\n    dict.each do |k, v|\n      if k.is_a?(String)\n\
    \        if k == k.downcase\n          return true\n        elsif k == k.upcase\n\
    \          return true\n        else\n          return false\n        end\n  \
    \    else\n        return false\n      end\n    end\n  end\nend", "  if dict.count\
    \ <= 0\n    return false\n  end\n  is_upper = dict.keys[0].is_a?(String) && dict.keys[0].upcase\
    \ == dict.keys[0]\n  is_lower = dict.keys[0].is_a?(String) && dict.keys[0].downcase\
    \ == dict.keys[0]\n  dict.each do |key, val|\n    if is_upper && (key.is_a?(String)\
    \ && key.upcase != key)\n      return false\n    elsif is_lower && (key.is_a?(String)\
    \ && key.downcase != key)\n      return false\n    end\n  end\n  return true\n\
    end", "  first_letter = dict.keys[0][0]\n  if first_letter.is_a?(String) \n  \
    \  if first_letter == first_letter.downcase\n      is_all_lower = true\n    else\n\
    \      is_all_upper = true\n    end\n  end\n  dict.each_key do |key|\n    if is_all_lower\
    \ && key[0] != key[0].downcase\n      return false\n    elsif is_all_upper &&\
    \ key[0] != key[0].upcase\n      return false\n    end\n  end\n  return true\n\
    end", "  upper_case = false\n  lower_case = false\n  dict.each do |key, val|\n\
    \    upper_case = true if key.to_s.upcase == key.to_s\n    lower_case = true if\
    \ key.to_s.downcase == key.to_s\n  end\n  return true if upper_case && !lower_case\n\
    \  return true if lower_case && !upper_case\n  return false\nend", "\tdict.keys.reduce\
    \ do |acc, el|\n\t\treturn false if acc.nil?\n\t\tif el.class == Symbol\n\t\t\t\
    false\n\t\telsif el.upcase == el\n\t\t\tif acc == true\n\t\t\t\ttrue\n\t\t\telsif\
    \ acc == false\n\t\t\t\tfalse\n\t\t\telse\n\t\t\t\ttrue\n\t\t\tend\n\t\telsif\
    \ el.downcase == el\n\t\t\tif acc == true\n\t\t\t\ttrue\n\t\t\telsif acc == false\n\
    \t\t\t\tfalse\n\t\t\telse\n\t\t\t\tfalse\n\t\t\tend\n\t\telse\n\t\t\tfalse\n\t\
    \tend\n\tend\nend", "  # Return false if the dictionary is empty.\n  return false\
    \ if dict.empty?\n  # Calculate the average ASCII value of the dictionary keys.\n\
    \  char_array = dict.keys.map(&:chr)\n  avg_ascii = char_array.inject(0) { |sum,\
    \ n| sum + n.ord } / char_array.size\n  # Check if the keys are in upper case.\n\
    \  if avg_ascii >= 65 && avg_ascii <= 90\n    dict.keys.each { |key| return false\
    \ unless key == key.upcase }\n  # Check if the keys are in lower case.\n  elsif\
    \ avg_ascii >= 97 && avg_ascii <= 122\n    dict.keys.each { |key| return false\
    \ unless key == key.downcase }\n  # Else, return false.\n  else\n    return false\n\
    \  end\n  # Return true when all dictionary keys are checked.\n  true\nend", " \
    \ dict.each do |k, v|\n    if k.class == String\n      if k.upcase == k\n    \
    \    if v.class == String\n          puts \"True\"\n        else\n          puts\
    \ \"False\"\n        end\n      else\n        if v.class == String\n         \
    \ puts \"True\"\n        else\n          puts \"False\"\n        end\n      end\n\
    \    else\n      puts \"False\"\n    end\n  end\nend", "  lower_case_keys = []\n\
    \  upper_case_keys = []\n  dict.each do |key, value|\n    if key.class == String\n\
    \      if key.upcase == key\n        upper_case_keys << key\n      else\n    \
    \    lower_case_keys << key\n      end\n    else\n      return false\n    end\n\
    \  end\n  if lower_case_keys.empty? || upper_case_keys.empty?\n    return true\n\
    \  else\n    return false\n  end\nend", "  if dict.empty?\n    return false\n\
    \  end\n  lower_flag = true\n  upper_flag = true\n  dict.each do |key, value|\n\
    \    if key.class != String\n      return false\n    end\n    if !key.downcase.eql?(key)\n\
    \      lower_flag = false\n    end\n    if !key.upcase.eql?(key)\n      upper_flag\
    \ = false\n    end\n  end\n  return lower_flag || upper_flag\nend", '  return
    false if dict.empty?', '  return false if dict.empty?', "  if dict.empty?\n  \
    \  return false\n  else\n    dict.each do |key, value|\n      if key.class ==\
    \ String\n        if key == key.upcase\n          if dict.all? { |k, v| k == k.upcase\
    \ }\n            return true\n          else\n            return false\n     \
    \     end\n        elsif key == key.downcase\n          if dict.all? { |k, v|\
    \ k == k.downcase }\n            return true\n          else\n            return\
    \ false\n          end\n        else\n          return false\n        end\n  \
    \    else\n        return false\n      end\n    end\n  end\nend", "\tdict.keys.each\
    \ { |key|\n\t\tif key.class != String\n\t\t\treturn false\n\t\tend\n\t}\n\treturn\
    \ true\nend", "  return false if dict.empty?\n  lower_keys = dict.keys.all? {\
    \ |key| key.is_a?(String) && key.downcase == key }\n  upper_keys = dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\n  lower_keys || upper_keys\n\
    end", "  if dict.empty?\n    false\n  else\n    dict.keys.map{|k| k.to_s.capitalize\
    \ == k.to_s}.uniq.size == 1\n  end\nend", "\tif dict.empty?\n\t\treturn false\n\
    \tend\n\tlowered = true\n\tuppered = true\n\tdict.each do |key, value|\n\t\tif\
    \ !key.is_a?(String)\n\t\t\treturn false\n\t\tend\n\t\tif key.downcase != key\n\
    \t\t\tlowered = false\n\t\tend\n\t\tif key.upcase != key\n\t\t\tuppered = false\n\
    \t\tend\n\tend\n\treturn lowered || uppered\nend", "  dict.keys.map(&:to_s).map(&:downcase).uniq.size\
    \ == 1 || dict.keys.map(&:to_s).map(&:upcase).uniq.size == 1\nend", "  downcase\
    \ = true\n  upcase = true\n  dict.each do |key, value|\n    downcase = false if\
    \ key =~ /[A-Z]/\n    upcase = false if key =~ /[a-z]/\n  end\n  downcase || upcase\n\
    end", "    if dict.size > 0\n        str_key = true\n        str_key_lower = true\n\
    \        str_key_upper = true\n        dict.each do |key, val|\n            str_key\
    \ = false if key.class != String\n            str_key_lower = false if key.class\
    \ == String && key != key.downcase\n            str_key_upper = false if key.class\
    \ == String && key != key.upcase\n        end\n        return true if str_key_lower\
    \ || str_key_upper\n        return false\n    else\n        return false\n   \
    \ end\nend", "    keys = dict.keys()\n    c = -1\n    if keys.length > 0\n   \
    \     if keys[0].class == String\n            c = keys[0].casecmp(keys[0].upcase)\n\
    \        end\n        c = -c if c == 0\n        keys.each do |key|\n         \
    \   if (key.class == String && key.casecmp(key.upcase) != c)\n               \
    \ return false\n            end\n        end\n    end\n    return true\nend",
  "  if dict.empty?\n    return false\n  end\n  if (dict.keys.all? {|k| k.is_a? String})\n\
    \    up = dict.keys.all? {|k| k.upcase == k}\n    dn = dict.keys.all? {|k| k.downcase\
    \ == k}\n    if (up or dn)\n      return true\n    end\n  end\n  return false\n\
    end\nputs check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\nputs check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\nputs check_dict_case({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"})", "\tis_upper = true\n\tis_lower = true\n\
    \tdict.each_key do |key|\n\t\tis_upper = false if key.downcase == key\n\t\tis_lower\
    \ = false if key.upcase == key\n\tend\n\tis_upper || is_lower\nend", "  if dict.length\
    \ == 0\n    return false\n  else\n    key_check = true\n    key_check = dict.keys.all?\
    \ {|key| key.is_a? String}", "  if dict.empty? then return false end\n  answer\
    \ = false\n  downcase = false\n  upcase = false\n  dict.each do |k,v|\n    if\
    \ k.downcase == k.to_s then\n      downcase = true\n    elsif k.upcase == k.to_s\
    \ then\n      upcase = true\n    else\n      return false\n    end\n  end\n  if\
    \ downcase && upcase then return false end\n  return true\nend", "\tif dict.length\
    \ != 0\n\t\t# 'x.key?(:a)'\t\tcheck if has key 'a'\n\t\t# 'x.has_key?(:a)'\t\t\
    \t''\n\t\t# 'x.include?(:a)'\t\t\t''\n\t\t# 'x.member?(:a)'\t\t\t''\n\t\t# 'x.key?(\"\
    a\")'\t\t\t''\n\t\t# 'x.has_key?(\"a\")'\t\t''\n\t\t# 'x.include?(\"a\")'\t\t\
    ''\n\t\t# 'x.member?(\"a\")'\t\t\t''\n\t\t# 'x.key?(:a)'\t\tcheck if has key 'a'\n\
    \t\t# 'x.has_key?(:a)'\t\t\t''\n\t\t# 'x.include?(:a)'\t\t\t''\n\t\t# 'x.member?(:a)'\t\
    \t\t''\n\t\t# 'x.key?(\"a\")'\t\t\t''\n\t\t# 'x.has_key?(\"a\")'\t\t''\n\t\t#\
    \ 'x.include?(\"a\")'\t\t''\n\t\t# 'x.member?(\"a\")'\t\t\t''\n\t\ta = dict.keys.all?\
    \ { |x| x.is_a?(String) && x.upcase == x}\n\t\tb = dict.keys.all? { |x| x.is_a?(String)\
    \ && x.downcase == x}\n\t\treturn (a or b)\n\telse\n\t\treturn false\n\tend\n\
    end", "  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n\
    \  dict.each do |key, value|\n    if lower && key.downcase != key\n      lower\
    \ = false\n    end\n    if upper && key.upcase != key\n      upper = false\n \
    \   end\n  end\n  return lower || upper\nend", "  downcase_string = true\n  upcase_string\
    \ = true\n  dict.each do |k,v|\n    downcase_string = false if k.upcase != k\n\
    \    upcase_string = false if k.downcase != k\n  end\n  return false if downcase_string\
    \ && upcase_string\n  return false if dict.empty?\n  return downcase_string ||\
    \ upcase_string\nend", "  dict.keys.each do |k|\n    return false if !k.is_a?(String)\n\
    \  end\n  return dict.keys.all? { |k| k.upcase == k } || dict.keys.all? { |k|\
    \ k.downcase == k }\nend", "    dict.keys.each do |key|\n        return false\
    \ if key.class != String\n    end\n    dict.keys.each do |key|\n        return\
    \ false if !(key.upcase == key || key.downcase == key)\n    end\n    return true\n\
    end", "    dict.each do |k, v|\n        if k.upcase != k.downcase\n          \
    \  if !k.downcase.eql?(k) && !k.upcase.eql?(k)\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  return false\
    \ if dict.empty?\n  first_key = dict.keys.first\n  first_value = dict.values.first\n\
    \  return false if !(first_key.is_a? String) || dict.has_key?(first_value)\n \
    \ dict.keys.all?{|k| k.downcase == k} || dict.keys.all?{|k| k.upcase == k}\nend\n\
    puts \"check_dict_case\"\nputs check_dict_case({\"a\" => \"apple\", \"b\" => \"\
    banana\"})\nputs check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"\
    B\" => \"banana\"})\nputs check_dict_case({\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"})\nputs check_dict_case({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"})\nputs check_dict_case({\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"})", "  if dict.empty?\n    false\n  else\n    dict.keys.map\
    \ { |k| k.class == String ? k.upcase == k : false }.uniq.count == 1\n  end\nend",
  "  dict.empty? ? false : dict.keys.all? { |k| k == k.downcase } || dict.keys.all?\
    \ { |k| k == k.upcase }\nend", "  if dict.keys.all? { |k| k.is_a?(String) && k\
    \ == k.downcase } ||\n     dict.keys.all? { |k| k.is_a?(String) && k == k.upcase\
    \ }\n    true\n  else\n    false\n  end\nend", "\tif dict.empty?\n\t\tfalse\n\t\
    else\n\t\tkeys = dict.keys\n\t\tup_keys = keys.select {|k| k.is_a? String and\
    \ k == k.upcase}\n\t\tlow_keys = keys.select {|k| k.is_a? String and k == k.downcase}\n\
    \t\tif up_keys.empty? or low_keys.empty?\n\t\t\ttrue\n\t\telse\n\t\t\tfalse\n\t\
    \tend\n\tend\nend", "  return false if dict.empty?\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) && k.downcase ==\
    \ k }\nend", "  \nend", "\tdict.all? { |k, v| k.is_a? String } and\n\t\t(dict.keys.all?\
    \ { |k| k == k.downcase } or\n\t\t dict.keys.all? { |k| k == k.upcase })\nend",
  "  lower_case_flag = true\n  upper_case_flag = true\n  dict.each do |key,value|\n\
    \    if key.class == String \n      if key.downcase == key\n        upper_case_flag\
    \ = false\n      else\n        lower_case_flag = false\n      end\n    else\n\
    \      return false\n    end\n  end\n  lower_case_flag || upper_case_flag\nend\n\
    puts check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\nputs check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\nputs check_dict_case({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"})", "  if dict.size == 0\n    return false\n\
    \  end\n  dict.each do |k, v|\n    if k.is_a? String\n      if k.downcase == k\
    \ || k.upcase == k\n        next\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "  return\
    \ false if dict.empty?\n  dict.keys.each do |key|\n    return false if !key.is_a?(String)\n\
    \  end\n  return dict.keys.all? { |s| s.upcase == s } || dict.keys.all? { |s|\
    \ s.downcase == s }\nend\ncheck_dict_case_proc = method(:check_dict_case).to_proc\n\
    puts check_dict_case_proc.call({\"a\" => \"apple\", \"b\" => \"banana\"})\nputs\
    \ check_dict_case_proc.call({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"})\nputs check_dict_case_proc.call({\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"})\nputs check_dict_case_proc.call({\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"})\nputs check_dict_case_proc.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"})\nputs check_dict_case_proc.call({})\n\
    puts \"*\" * 100", "\tunless dict.empty?\n\t\t# Create a bool is_lower for checks\
    \ later\n\t\tis_lower = true\n\t\t# Extract the keys and check if it is a string\
    \ and if all lower case. If not,\n\t\t# set is_lower to false and exit the loop.\n\
    \t\tdict.keys.each do |key|\n\t\t\tif is_string?(key) && is_lower?(key)\n\t\t\t\
    \tis_lower = true\n\t\t\telse\n\t\t\t\tis_lower = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\t# If is_lower is false, check if all upper case.\n\t\t# If so,\
    \ return true, otherwise return false.\n\t\tif is_lower == false\n\t\t\tis_upper\
    \ = true\n\t\t\tdict.keys.each do |key|\n\t\t\t\tif is_string?(key) && is_upper?(key)\n\
    \t\t\t\t\tis_upper = true\n\t\t\t\telse\n\t\t\t\t\tis_upper = false\n\t\t\t\t\t\
    break\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn is_upper\n\t\telse\n\t\t\treturn is_lower\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\nend", "\tall_lower = dict.all? { |k,\
    \ v| k.is_a?(String) && k == k.downcase }\n\tall_upper = dict.all? { |k, v| k.is_a?(String)\
    \ && k == k.upcase }\n\tall_lower || all_upper\nend", "\tresult = true\n\tif dict.empty?\n\
    \t\tresult = false\n\telse\n\t\t# get the first value\n\t\t# is it a string?\n\
    \t\t# is it all uppercase?\n\t\tkeys = dict.keys\n\t\t# puts \"keys = #{keys}\"\
    \n\t\t# puts \"first key = #{keys[0]}\"\n\t\t# puts \"dict keys[0] class = #{dict[keys[0]].class}\"\
    \n\t\tif keys[0].class == String\n\t\t\tfirst_key_upcase = keys[0].upcase\n\t\t\
    \tif first_key_upcase == keys[0]\n\t\t\t\tresult = true\n\t\t\telse\n\t\t\t\t\
    result = false\n\t\t\tend\n\t\telse\n\t\t\tresult = false\n\t\tend\n\tend\n\t\
    return result\nend\ncheck_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})",
  "\tif dict.keys.length == 0\n\t\treturn false\n\tend\n\tif dict.keys.map{|x| x.upcase}.sort\
    \ == dict.keys.sort\n\t\treturn true\n\telsif dict.keys.map{|x| x.downcase}.sort\
    \ == dict.keys.sort\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", " \
    \ hash_keys = dict.keys\n  all_strings = hash_keys.all? { |key| key.is_a? String\
    \ }\n  return false if !all_strings\n  all_lower_case = hash_keys.all? { |key|\
    \ key == key.downcase }\n  all_upper_case = hash_keys.all? { |key| key == key.upcase\
    \ }\n  return false if !all_lower_case && !all_upper_case\n  true\nend", "  keys\
    \ = dict.keys\n  if keys.all? { |key| key.class == String && key.downcase == key\
    \ }\n    return true\n  elsif keys.all? { |key| key.class == String && key.upcase\
    \ == key }\n    return true\n  else\n    return false\n  end\nend", "  return\
    \ false if dict.empty?\n  dict.keys.map{|k| k.is_a?(String)}.all? && dict.keys.map{|k|\
    \ k == k.downcase}.all? || dict.keys.map{|k| k == k.upcase}.all?\nend", "    #\
    \ check if dict is empty\n    if dict.empty?\n        return false\n    end\n\
    \    # check if all keys are strings and not empty\n    if dict.keys.all? { |k|\
    \ k.is_a?(String) and !k.empty? }\n        # if all keys are in lower case\n \
    \       if dict.keys.all? { |k| k == k.downcase }\n            return true\n \
    \       # if all keys are in upper case\n        elsif dict.keys.all? { |k| k\
    \ == k.upcase }\n            return true\n        else\n            return false\n\
    \        end\n    else\n        return false\n    end\nend", "  # WRITE YOUR CODE\
    \ HERE\nend", '  return false if dict.length.zero?', "  return false if dict.empty?\n\
    \  return true if dict.values.all? { |val| val.class == String }\n  return false\n\
    end", "  # keys = dict.keys\n  # if keys.all? { |k| k.is_a? String }\n  #   keys.all?\
    \ { |k| k == k.downcase } || keys.all? { |k| k == k.upcase }\n  # else\n  #  \
    \ false\n  # end\n  #\n  # using one line if statement\n  keys = dict.keys\n \
    \ keys.all? { |k| k.is_a? String } && (keys.all? { |k| k == k.downcase } || keys.all?\
    \ { |k| k == k.upcase })\nend", "    if dict.empty?\n        return false\n  \
    \  end\n    # get all keys to an array\n    keys = dict.keys\n    # check if all\
    \ keys are upper case\n    if keys.all? { |k| k.is_a?(String) && k.upcase == k\
    \ }\n        return true\n    end\n    # check if all keys are lower case\n  \
    \  if keys.all? { |k| k.is_a?(String) && k.downcase == k }\n        return true\n\
    \    end\n    # else\n    return false\nend", "\tif dict.empty?\n\t\treturn false\n\
    \tend\n\tif dict.keys.all? {|v| v.class == String && v.match(/[A-Z]/)} || dict.keys.all?\
    \ {|v| v.class == String && v.match(/[a-z]/)}\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend", "\tif dict.empty?\n\t\treturn false\n\tend\n\t\n\tdict.each\
    \ do |key, value|\n\t\tif key.is_a?(String)\n\t\t\treturn false if key.capitalize\
    \ != key && key.downcase != key\n\t\tend\n\tend\n\t\n\treturn true\nend", "  puts\
    \ \"Given a hash, return true if all keys are strings in lower case or all keys\
    \ are strings in upper case, else return false. The function should return false\
    \ is the given hash is empty.\n  Examples:\n  >>> check_dict_case.call({\\\"a\\\
    \" => \\\"apple\\\", \\\"b\\\" => \\\"banana\\\"})\n  true\n  >>> check_dict_case.call({\\\
    \"a\\\" => \\\"apple\\\", \\\"A\\\" => \\\"banana\\\", \\\"B\\\" => \\\"banana\\\
    \"})\n  false\n  >>> check_dict_case.call({\\\"a\\\" => \\\"apple\\\", 8 => \\\
    \"banana\\\", \\\"a\\\" => \\\"apple\\\"})\n  false\n  >>> check_dict_case.call({\\\
    \"Name\\\" => \\\"John\\\", \\\"Age\\\" => \\\"36\\\", \\\"City\\\" => \\\"Houston\\\
    \"})\n  false\n  >>> check_dict_case.call({\\\"STATE\\\" => \\\"NC\\\", \\\"ZIP\\\
    \" => \\\"12345\\\"})\n  true\"\nend", "\tif dict.size == 0\n\t\treturn false\n\
    \tend\n\tdict.each do |key, value|\n\t\tif key.to_s.downcase != key.to_s && key.to_s.upcase\
    \ != key.to_s\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tall_lower\
    \ = dict.all? { |k,v| k.to_s.downcase == k }\n\tall_upper = dict.all? { |k,v|\
    \ k.to_s.upcase == k }\n\tall_lower || all_upper\nend", "  all_caps = dict.keys.all?\
    \ { |k| k.to_s.upcase == k.to_s }\n  all_lower = dict.keys.all? { |k| k.to_s.downcase\
    \ == k.to_s }\n  all_caps || all_lower\nend", "  dict.keys.map(&:class).uniq.length\
    \ == 1 && dict.keys.first.class == String && dict.values.map(&:class).uniq.length\
    \ == 1 && dict.values.first.class == String\nend", "  dict.keys.all? { |key| key.class\
    \ == String && (key == key.upcase || key == key.downcase) }\nend", "  # check\
    \ if the hash is empty\n  return false if dict.empty?\n  # set the flag for the\
    \ first case\n  # we are looking to see if all the keys are upper or lower case\n\
    \  all_upper = nil", "  (dict.keys.all? { |k| k.class == String && k.upcase ==\
    \ k }) ||\n  (dict.keys.all? { |k| k.class == String && k.downcase == k })\nend",
  "  return false if dict.size == 0\n  mixed_key_check(dict) ? false : case_check(dict)\n\
    end", "\tlower = false\n\tupper = false\n\tdict.each do |key, value|\n\t\tif key.is_a?\
    \ String\n\t\t\tif key == key.downcase\n\t\t\t\tlower = true\n\t\t\telsif key\
    \ == key.upcase\n\t\t\t\tupper = true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\tif lower && upper\n\t\
    \treturn false\n\telsif lower || upper\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "  case_type = dict.empty? ? nil : dict.keys[0].class\n  dict.each\
    \ do |key, value|\n    if key.class != case_type\n      return false\n    end\n\
    \  end\n  true\nend", "  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   check_dict_case(dict.select { |k, v| k.is_a? String and k.upcase == k })\n\
    \      elsif key.downcase == key\n        check_dict_case(dict.select { |k, v|\
    \ k.is_a? String and k.downcase == k })\n      else\n        return false\n  \
    \    end\n    else\n      return false\n    end\n  end\n  return true\nend", " \
    \   return false if dict.empty?\n    is_upcase = dict.keys[0].upcase == dict.keys[0]\n\
    \    dict.keys.all? do |key|\n        if is_upcase\n            key.upcase ==\
    \ key\n        else\n            key.downcase == key\n        end\n    end\nend",
  "  # Your code here\nend", "  keys = dict.keys\n  if keys.length == 0\n    return\
    \ false\n  end\n  # Upper case keys\n  if keys[0].is_a? String\n    keys.each\
    \ do |k|\n      if k != k.upcase\n        return false\n      end\n    end\n \
    \ # Lower case keys\n  elsif keys[0].is_a? Symbol\n    keys.each do |k|\n    \
    \  if k != k.downcase\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  if dict.keys.length == 0\n    return false\n  end\n  if dict.keys.all?\
    \ {|k| k.is_a?(String) && k.downcase == k }\n    return true\n  elsif dict.keys.all?\
    \ {|k| k.is_a?(String) && k.upcase == k }\n    return true\n  else\n    return\
    \ false\n  end\nend", "    hash_keys = dict.keys.map { |v| v.to_s }\n    all_lower\
    \ = hash_keys.all? { |v| v == v.downcase }\n    all_upper = hash_keys.all? { |v|\
    \ v == v.upcase }\n    all_lower || all_upper\nend", "\tanswer = true\n\tdict.each\
    \ do |k,v|\n\t\tif k.class == String\n\t\t\tif k.upcase == k\n\t\t\t\tanswer =\
    \ true\n\t\t\telse\n\t\t\t\tanswer = false\n\t\t\tend\n\t\telse\n\t\t\tanswer\
    \ = false\n\t\tend\n\tend\n\tanswer\nend", "  raise ArgumentError, \"Not a Hash\"\
    \ unless dict.kind_of?(Hash)\n  return false if dict.empty?\n  lowercase = dict.keys.first.downcase\n\
    \  dict.keys.map { |k| k.downcase == lowercase }.uniq.size == 1\nend", "  if dict.keys.all?\
    \ { |k| k.to_s.upcase == k.to_s }\n    true\n  elsif dict.keys.all? { |k| k.to_s.downcase\
    \ == k.to_s }\n    true\n  else\n    false\n  end\nend", "  dict.any? { |key,\
    \ val|\n    if key.class == String\n      if key != key.downcase && key != key.upcase\n\
    \        return false\n      end\n    else\n      return false\n    end\n  }\n\
    \  true\nend", "  dict_vals = dict.values\n  dict_keys = dict.keys\n  dict_keys.each\
    \ do |k|\n    if k.is_a?(String)\n      return false unless dict_keys.all? { |v|\
    \ v.is_a?(String) }\n      return false unless dict_keys.all? { |v| v.size > 1\
    \ }\n      # return false unless dict_keys.all? { |v| v[0] != v[1] }\n      return\
    \ false unless dict_keys.all? { |v| v.upcase == v || v.downcase == v }\n    end\n\
    \  end\n  true\nend", "    all_upper = true\n    all_lower = true\n    dict.each\
    \ do |key, value|\n        all_upper = false if key.to_s.downcase == key.to_s\n\
    \        all_lower = false if key.to_s.upcase == key.to_s\n    end\n    all_upper\
    \ or all_lower\nend", "\tunless dict.empty?\n\t\tkey_case = dict.keys[0].class\
    \ == String ? dict.keys[0].casecmp(dict.keys[0].downcase) : dict.keys[0].class\n\
    \t\tdict.each_key { |key| return false if key.class != key_case }\n\tend\n\ttrue\n\
    end", "    return true if dict.empty?\n    dict.keys.all?{|k| k.class == String\
    \ && k.upcase == k} || dict.keys.all?{|k| k.class == String && k.downcase == k}\n\
    end", "  all_lower = true\n  all_upper = true\n  dict.each_key do |key|\n    if\
    \ key.is_a? String\n      all_lower = false if key.upcase == key\n      all_upper\
    \ = false if key.downcase == key\n    else\n      return false\n    end\n  end\n\
    \  all_lower || all_upper\nend", "  dict.keys.all?{|k| k == k.upcase || k == k.downcase}\n\
    end", "  dict.each do |key, value|\n    key = key.to_s.upcase\n    value = value.to_s.upcase\n\
    \    return false unless value.eql?(key)\n  end\n  true\nend", "  is_upper = true\n\
    \  is_lower = true\n  dict.each do |key, value|\n    if key.is_a?(String)\n  \
    \    is_upper = false if key.downcase == key\n      is_lower = false if key.upcase\
    \ == key\n    else\n      return false\n    end\n  end\n  return false if is_upper\
    \ == false && is_lower == false\n  true\nend", "  return false if dict.empty?\n\
    \  case_type = nil\n  dict.keys.each do |key|\n    if case_type.nil?\n      case_type\
    \ = key.is_a?(String) && key.downcase!\n    else\n      return false if case_type\
    \ != (key.is_a?(String) && key.downcase!)\n    end\n  end\n  true\nend", "  return\
    \ true if dict.empty?\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase ==\
    \ k } || dict.keys.all? { |k| k.is_a?(String) && k.upcase == k }\nend", "    #print\
    \ dict\n    dict.each do |key,value|\n        if dict.keys.to_s.split(\",\").all?{|i|\
    \ i =~ /[A-Z]/} or dict.keys.to_s.split(\",\").all?{|i| i =~ /[a-z]/}\n      \
    \      return true\n        else\n            return false\n        end\n    end\n\
    end", "  dict.each do |key, value|\n    if key.is_a?(String) && !key.to_s.match(/^[a-z]+$|^[A-Z]+$/)\n\
    \      return false\n    end\n  end\n  true\nend", "\tall_lower = true\n\tall_upper\
    \ = true\n\tdict.each do |key, value|\n\t\tif key.is_a? String\n\t\t\tif key ==\
    \ key.downcase\n\t\t\t\tall_upper = false\n\t\t\telsif key == key.upcase\n\t\t\
    \t\tall_lower = false\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn all_lower || all_upper\nend", " \
    \ res = true\n  dict.keys.each do |key|\n    res = false if key.to_s.upcase !=\
    \ key.to_s && key.to_s.downcase != key.to_s\n  end\n  res\nend", "  keys = dict.keys.map{|k|\
    \ k.to_s.upcase}\n  keys == keys.uniq ? false : true\nend", "  if dict.empty?\n\
    \    false\n  else\n    counter_lower = 0\n    counter_upper = 0\n    dict.each\
    \ do |key, val|\n      if key.is_a?(String)\n        if key == key.downcase\n\
    \          counter_lower += 1\n        elsif key == key.upcase\n          counter_upper\
    \ += 1\n        end\n      end\n    end\n    (counter_lower == dict.length ||\
    \ counter_upper == dict.length) ? true : false\n  end\nend", "  return false if\
    \ dict.size.zero?\n  keys = dict.keys\n  keys.map { |k| k.is_a?(String) }.all?\
    \ && (keys.all? { |k| k.downcase == k } || keys.all? { |k| k.upcase == k })\n\
    end", "  \n  if dict.empty?\n    return false\n  end\n  \n  if dict.keys.all?\
    \ { |k| k.is_a? String }\n    return true if dict.keys.all? { |k| k == k.downcase\
    \ } or dict.keys.all? { |k| k == k.upcase }\n  end\n  \n  return false\n  \nend",
  "  puts \"dict #{dict}\"\n  return false if dict.empty?\n  if dict.keys.map(&:class).uniq.size\
    \ == 1\n    return true if [String, Fixnum].include?(dict.keys.first.class)\n\
    \  end\n  false\nend", "  return true if dict.empty?\n  return false if dict.to_a.flatten.select\
    \ { |k| k.class == Fixnum}.any?", "  lower_case_keys = dict.keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key }\n  upper_case_keys = dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\n  lower_case_keys || upper_case_keys\n\
    end", "  return false if dict.empty?\n  is_upper = dict.all? { |k, v| k.is_a?(String)\
    \ && k.upcase == k }\n  is_lower = dict.all? { |k, v| k.is_a?(String) && k.downcase\
    \ == k }\n  is_upper || is_lower\nend", "  if dict.empty?\n    false\n  else\n\
    \    dict.each do |k,v|\n      if k.class != String \n        return false\n \
    \     elsif k.match(/[A-Z]/)\n        dict.each do |k,v|\n          if k.match(/[a-z]/)\n\
    \            return false\n          end\n        end\n      elsif k.match(/[a-z]/)\n\
    \        dict.each do |k,v|\n          if k.match(/[A-Z]/)\n            return\
    \ false\n          end\n        end\n      end\n    end\n    true\n  end\nend",
  "  lcase_match = dict.all? { |k, v| k.is_a?(String) && k == k.downcase }\n  ucase_match\
    \ = dict.all? { |k, v| k.is_a?(String) && k == k.upcase }\n  dict.length.zero?\
    \ ? false : lcase_match || ucase_match\nend", "    low_count = 0\n    up_count\
    \ = 0\n    dict.each do |key, value|\n        if key.is_a? String\n          \
    \  if key == key.downcase\n                low_count += 1\n            elsif key\
    \ == key.upcase\n                up_count += 1\n            end\n        end\n\
    \    end\n    return low_count == dict.length || up_count == dict.length\nend",
  "  if dict.length == 0\n    return false\n  end\n  all_lower = dict.keys.reduce(true)\
    \ { |a, v| a && (v.class == String && v.downcase == v) }\n  all_upper = dict.keys.reduce(true)\
    \ { |a, v| a && (v.class == String && v.upcase == v) }\n  return all_lower ||\
    \ all_upper\nend", "  return true if dict.empty?\n  # if dict.keys.all? { |key|\
    \ key.is_a?(String) }\n  if dict.keys.all? { |key| key.is_a?(String) } && dict.keys.map(&:downcase).uniq.size\
    \ == 1\n    true\n  elsif dict.keys.all? { |key| key.is_a?(String) } && dict.keys.map(&:upcase).uniq.size\
    \ == 1\n    true\n  else\n    false\n  end\nend", "  return false if dict.empty?\n\
    \  case = dict.first[0].class\n  dict.all? { |k, v| k.class == case }\nend", " \
    \ return true if dict.empty?\n  return false if dict.keys.any? { |k| !(k.is_a?\
    \ String) }\n  first_key = dict.keys.first\n  first_key == first_key.downcase\
    \ || first_key == first_key.upcase\nend", "  #TODO: implement the function\nend",
  "\treturn false if dict.empty?\n\tis_keys_lower = true\n\tis_keys_upper = true\n\
    \tdict.each_key do |key|\n\t\tis_keys_lower = false if key != key.downcase\n\t\
    \tis_keys_upper = false if key != key.upcase\n\tend\n\tis_keys_lower || is_keys_upper\n\
    end", "  !dict.empty? && !!(dict.keys.all? { |k| k.is_a?(String) && k.downcase\
    \ == k } ^ dict.keys.all? { |k| k.is_a?(String) && k.upcase == k })\nend", " \
    \ # check if all keys are strings\n  all_strings = true\n  dict.each do |key,\
    \ _value|\n    all_strings = false unless key.is_a?(String)\n  end\n  return false\
    \ unless all_strings", "  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k}\n    return true\n  elsif dict.keys.all?\
    \ { |k| k.is_a?(String) && k.downcase == k}\n    return true\n  else\n    return\
    \ false\n  end\nend", "  dict.map { |k, v| return false if k.class != String }\n\
    \  dict.keys.all?(&:downcase!)\n  dict.keys.all?(&:upcase!)\nend", "  (dict.keys.all?\
    \ { |key| key.class == String && key == key.downcase}) || (dict.keys.all? { |key|\
    \ key.class == String && key == key.upcase})\nend", "  dict.each do |key, value|\n\
    \    return false if key.is_a? Integer or key.is_a? Float or value.is_a? Integer\
    \ or value.is_a? Float or !key.is_a? String\n  end\n  return true if dict.keys.all?\
    \ { |key| key.downcase == key }\n  return true if dict.keys.all? { |key| key.upcase\
    \ == key }\n  return false\nend", "  return false if dict.empty?\n  if dict.keys.first\
    \ == dict.keys.first.downcase\n    dict.keys.all? { |k| k == k.downcase }\n  else\n\
    \    dict.keys.all? { |k| k == k.upcase }\n  end\nend", "  return false if dict.empty?\n\
    \  check_dict_case_with_strings_in_lower_case(dict) ||\n  check_dict_case_with_strings_in_upper_case(dict)\n\
    end", "  capital_keys = 0\n  lower_keys = 0\n  dict.each do |key, value|\n   \
    \ if key.is_a?(String)\n      if key == key.upcase\n        capital_keys += 1\n\
    \      elsif key == key.downcase\n        lower_keys += 1\n      end\n    end\n\
    \  end\n  if capital_keys > 0 && lower_keys > 0\n    return false\n  elsif capital_keys\
    \ == 0 && lower_keys == 0\n    return false\n  else\n    return true\n  end\n\
    end", "  dict.map { |k, v| k.is_a?(String) }.uniq.size == 1 && dict.keys.first.is_a?(String)\
    \ ? dict.keys.first == dict.keys.first.downcase : false\nend", "  if dict.empty?\n\
    \    return false\n  end\n  str_keys = dict.keys.select { |k| k.is_a? String }\n\
    \  if str_keys.empty?\n    return false\n  end\n  # All keys are strings\n  if\
    \ str_keys.all? { |s| s == s.downcase }\n    return true\n  elsif str_keys.all?\
    \ { |s| s == s.upcase }\n    return true\n  else\n    return false\n  end\nend",
  "\tdict.all? { |k,v| k.is_a? String } && \n\tdict.all? { |k,v| k.downcase == k }\
    \ || \n\tdict.all? { |k,v| k.upcase == k }\nend", "  if dict.empty?\n    false\n\
    \  else\n    dict.keys.map{|x| x.to_s}.uniq.sort == [\"a\",\"b\"] || dict.keys.map{|x|\
    \ x.to_s}.uniq.sort == [\"A\",\"B\"]\n  end\nend", "  if dict.empty?\n    return\
    \ false\n  end\n  is_lower = false\n  is_upper = false\n  for key in dict.keys\n\
    \    if key.upcase == key\n      is_upper = true\n    else\n      is_lower = true\n\
    \    end\n  end\n  return is_lower || is_upper ? false : true\nend", "  # check\
    \ dictionary\n  return false if dict.length == 0\n  dict.values.all? { |value|\
    \ \n    value.is_a?(String) \n  } && dict.keys.all? { |key| \n    key.is_a?(String)\n\
    \  } && dict.keys.all? { |key| \n    key.downcase == key || key.upcase == key\n\
    \  }\nend", "  if dict.empty?\n    return false\n  end\n  upper_case = dict.all?\
    \ { |key, value| key.is_a?(String) && key.upcase == key }\n  lower_case = dict.all?\
    \ { |key, value| key.is_a?(String) && key.downcase == key }\n  upper_case || lower_case\n\
    end", "  return false if dict.empty?\n  all_lower = (dict.keys - dict.keys.map(&:upcase)).empty?\n\
    \  all_upper = (dict.keys - dict.keys.map(&:downcase)).empty?\n  all_lower ||\
    \ all_upper\nend", "  return false if dict.empty?\n  upper = false\n  lower =\
    \ false\n  dict.each do |key, value|\n    upper = true if key == key.upcase\n\
    \    lower = true if key == key.downcase\n  end\n  upper == lower ? false : true\n\
    end", "    case_is_valid = true\n    case_is_valid = (dict.each_value { |value|\
    \ value.class == String })\n    case_is_valid = (dict.keys.all? { |key| key.class\
    \ == String })\n    if (dict.keys.all? { |key| key == key.downcase }) || (dict.keys.all?\
    \ { |key| key == key.upcase })\n        case_is_valid\n    else\n        case_is_valid\
    \ = false\n    end\nend", "  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k == k.upcase } ||\n  dict.keys.all? { |k| k == k.downcase }\nend\nputs check_dict_case({})\n\
    puts check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\nputs check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\nputs check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\nputs check_dict_case({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"})", "  return false if dict.empty?\n \
    \ lower = true\n  upper = true\n  dict.each do |key, value|\n    lower = false\
    \ if key.upcase == key\n    upper = false if key.downcase == key\n  end\n  lower\
    \ or upper\nend", "  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\
    \ ||\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase == k }\nend", "\tval\
    \ = dict.keys.map{|e| e.class == String ? e.downcase : e}.uniq\n\tval.length ==\
    \ 1 ? true : false\nend", "  dict.keys.each { |key| return false if (key.class\
    \ != String) }\n  dict.keys.all? { |key| return true if key.downcase == key }\
    \ ? true : false\nend", "  dict.keys.all? { |k| k.class == String && k.downcase\
    \ == k || k.upcase == k }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
