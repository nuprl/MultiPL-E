name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a hash, return true if all keys are strings in lower \n# case or\
  \ all keys are strings in upper case, else return false.\n# The function should\
  \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  case_check = dict.values.map { |value| value.length }.uniq\n  case_check.length\
    \ == 1 ? true : false\nend", "  return false if dict.length < 1\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.is_a?(String) && key == key.upcase }\n    return\
    \ true\n  else\n    return false\n  end\nend", "  return false if dict.size ==\
    \ 0\n  if dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\n    return\
    \ true\n  elsif dict.keys.all? { |k| k.is_a?(String) && k.upcase == k }\n    return\
    \ true\n  else\n    return false\n  end\nend", "  lower = dict.keys.map { |i|\
    \ i.to_s.upcase }\n  return true if lower == dict.keys\n  lower = dict.keys.map\
    \ { |i| i.to_s.downcase }\n  return true if lower == dict.keys\n  false\nend",
  "    if dict.empty?\n        return false\n    end\n    dict.each do |key, value|\n\
    \        if key.class != String \n            return false\n        end\n    end\n\
    \    first_key = dict.keys[0]\n    if first_key.upcase == first_key\n        dict.each\
    \ do |key, value|\n            if key.downcase == key\n                return\
    \ false\n            end\n        end\n    else\n        dict.each do |key, value|\n\
    \            if key.upcase == key\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  return false if dict.empty?\n\
    \  if dict.all? { |k, v| k.is_a?(String) && k.downcase == k }\n    true\n  elsif\
    \ dict.all? { |k, v| k.is_a?(String) && k.upcase == k }\n    true\n  else\n  \
    \  false\n  end\nend", "  lower = true\n  upper = true\n  dict.each do |key, value|\n\
    \    if key.is_a?(String)\n      lower = false if key.capitalize != key\n    \
    \  upper = false if key.downcase != key\n    else\n      return false\n    end\n\
    \  end\n  lower || upper\nend", "  return false if dict.empty?\n  keys = dict.keys\n\
    \  all_lower_keys = keys.all? { |key| key.is_a?(String) && key == key.downcase\
    \ }\n  all_upper_keys = keys.all? { |key| key.is_a?(String) && key == key.upcase\
    \ }\n  all_lower_keys || all_upper_keys\nend", "    dict.each_key do |k|\n   \
    \     if k.is_a? String\n            return false unless (k == k.downcase or k\
    \ == k.upcase)\n        else\n            return false\n        end\n    end\n\
    \    true\nend", "  dict.empty? ? false : dict.keys.map(&:to_s).all? { |k| k ==\
    \ k.downcase } || dict.keys.map(&:to_s).all? { |k| k == k.upcase }\nend", "  \
    \  if dict.keys.all? {|k| k.is_a?(String) && k.downcase == k}\n        return\
    \ true\n    elsif dict.keys.all? {|k| k.is_a?(String) && k.upcase == k}\n    \
    \    return true\n    else\n        return false\n    end\nend", "    if dict.empty?\n\
    \        return false\n    end\n    lowercase = dict.keys.all? { |k| k.downcase\
    \ == k }\n    uppercase = dict.keys.all? { |k| k.upcase == k }\n    return (lowercase\
    \ || uppercase)\nend", "  dict.each_pair do |key, value|\n    if key.is_a? String\
    \ and !(key.upcase == key or key.downcase == key)\n      return false\n    end\n\
    \  end\n  return true\nend", "  all_lower = true\n  all_upper = true\n  dict.each\
    \ do |key, value|\n    unless key.is_a?(String)\n      return false\n    end\n\
    \    if key.capitalize != key && key.downcase != key\n      return false\n   \
    \ end\n    all_lower = false if key.upcase == key\n    all_upper = false if key.downcase\
    \ == key\n  end\n  all_lower || all_upper\nend", "\tkey_values = dict.keys.map(&:class)\n\
    \tkey_values.uniq.length == 1 && key_values.first == String ? true : false\nend",
  "  key_symbols = dict.keys.map { |k| k.class.to_s }.uniq\n  if key_symbols.length\
    \ == 1 and key_symbols[0] == \"String\"\n    key_types = dict.keys.map { |k| k.downcase\
    \ == k ? \"lower\" : \"upper\" }.uniq\n    key_types.length == 1 ? true : false\n\
    \  else\n    false\n  end\nend", "  count_lower_case = 0\n  count_upper_case =\
    \ 0\n  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n\
    \        count_lower_case += 1\n      else\n        count_upper_case += 1\n  \
    \    end\n    end\n  end\n  if count_lower_case == dict.length || count_upper_case\
    \ == dict.length\n    return true\n  else\n    return false\n  end\nend", "\t\
    lower_keys = dict.keys.map(&:downcase)\n\tupper_keys = dict.keys.map(&:upcase)\n\
    \treturn false if dict.keys.empty?\n\tdict.keys == lower_keys || dict.keys ==\
    \ upper_keys\nend", "  return false if dict.empty?\n  dict.all? { |k,v| k.downcase\
    \ == k } || dict.all? { |k,v| k.upcase == k }\nend", "  if (dict.keys.any? {|k|\
    \ k.to_s.downcase != k.to_s} && dict.keys.any? {|k| k.to_s.upcase != k.to_s})\
    \ || dict.empty?\n    false\n  else\n    true\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
