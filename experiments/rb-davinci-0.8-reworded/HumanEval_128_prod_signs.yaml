name: HumanEval_128_prod_signs
language: rb
prompt: "# You are given an array arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the array, represented by 1, -1 or 0.\n# Note: return nil for empty arr.\n# Example:\n\
  # >>> prod_signs.call([1, 2, 2, -4])\n# 9\n# >>> prod_signs.call([0, 1])\n# 0\n\
  # >>> prod_signs.call([])\n# nil\ndef prod_signs(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n\
  \    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2,\
  \ 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1,\
  \ 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20,\
  \ candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1,\
  \ 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0,\
  \ candidate.call([-1, 1, 1, 0]))\n  end\nend\n"
completions: ["  res = nil\n  if arr.size > 0\n    res = arr.map { |num| num <=> 0\
    \ }.reduce(:*)\n    res *= arr.map { |num| num.abs }.reduce(:+)\n  end\n  res\n\
    end", "  return nil if arr.empty?\n  prod = arr.inject(1) { |prod, x| prod * sign(x)\
    \ }\n  sum = arr.inject(0) { |sum, x| sum + x.abs }\n  prod * sum\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |i| i.abs }.sum * arr.map { |i| i.sign }.reduce(:*)\n\
    end", "  arr.empty? ? nil : arr.map { |x| x <=> 0 }.reduce(:*) * arr.sum { |x|\
    \ x.abs }\nend", "  signs = arr.map { |n| n <=> 0 }.compact\n  return nil if signs.empty?\n\
    \  signs.reduce(:*) * arr.map(&:abs).reduce(:+)\nend", "  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  sum_abs = arr.reduce(0) { |sum, n| sum + n.abs }\n  sum_abs * arr.reduce(1)\
    \ { |prod, n| prod * n.positive? ? 1 : n }\nend", "  return nil if arr.empty?\n\
    \  arr.inject { |prod, num| prod * num.magnitude } *\n    arr.inject { |prod,\
    \ num| prod * num.sign }\nend", "  #TODO: Implement method\nend", "  #TODO: Implement\
    \ Me!\nend", "  arr.empty? ? nil : arr.map { |num| num.abs }.reduce(:+) * arr.map\
    \ { |num| num == 0 ? 0 : num / num.abs }.reduce(:*)\nend", "  abs_sum = 0\n  signed_prod\
    \ = 1\n  return nil if arr.empty?\n  arr.each do |i|\n    signed_prod *= i > 0\
    \ ? 1 : i < 0 ? -1 : 0\n    abs_sum += i.abs\n  end\n  abs_sum * signed_prod\n\
    end", "  arr.reduce(1, &:*) * arr.map(&:abs).reduce(:+)\nend", "  # Your code\
    \ goes here\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum\
    \ * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  signs = arr.map { |x| x <=> 0 }\n  signs.reduce(:*) * arr.reduce(0) { |sum,\
    \ n| sum + n.abs }\nend", "  if arr.empty?\n    nil\n  else\n    sign = 1\n  \
    \  magn_arr = arr.map { |num| num.abs }\n    magn_arr.each do |num|\n      sign\
    \ *= num <=> 0\n    end\n    magn_arr.reduce(:+) * sign\n  end\nend", "  arr.empty?\
    \ ? nil : arr.map { |i| i.abs }.inject(:+) * arr.map { |i| i <=> 0 }.inject(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| (n == 0) ? 0 : n.abs }.reduce(:*)\
    \ *\n    arr.map { |n| (n == 0) ? 0 : n / n.abs }.reduce(:*)\nend", "  p arr.inject(0)\
    \ { |a, e| a + (e.zero? ? 0 : e < 0 ? -e : e) } *\n    arr.inject(1) { |a, e|\
    \ a * (e.zero? ? 1 : e < 0 ? -1 : 1) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
