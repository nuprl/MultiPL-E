name: HumanEval_80_is_happy
language: rb
prompt: "# You are given a string s.\n# Your task is to check if the string is haprb\
  \ or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>> is_happy.call(aa)\n\
  # false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n# false\n\
  # >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\ndef is_happy(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
  \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"\
  ))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"\
  abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true,\
  \ candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n \
  \   assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"\
  iopaxioi\"))\n  end\nend\n"
completions: ["  if s.length >= 3\n    if s[0] != s[1] && s[1] != s[2] && s[0] !=\
    \ s[2]\n      true\n    else\n      false\n    end\n  else\n    false\n  end\n\
    end", "  # your code here\nend", "  s.chars.each_cons(3).any? { |a, b, c| a !=\
    \ b && b != c && a != c }\nend", "  s.chars.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x| x.first != x.last }\nend", "    alphabet = (\"a\"..\"z\").to_a\n    three_letter_substrings\
    \ = s.chars.each_cons(3).to_a\n    if three_letter_substrings.empty?\n       \
    \ false\n    else\n        alphabet.each do |letter|\n            if three_letter_substrings.all?\
    \ { |substring| substring.include?(letter) }\n                return false\n \
    \           end\n        end\n        true\n    end\nend", "  if s.length >= 3\n\
    \    arr = s.split('')\n    arr.each_cons(3) do |cons|\n      if cons[0] == cons[1]\
    \ || cons[1] == cons[2] || cons[0] == cons[2]\n        return false\n      end\n\
    \    end\n    return true\n  else\n    return false\n  end\nend", "  # your code\
    \ here\nend", "  return nil if s.size < 3\n  s.scan(/.../).all? { |e| e.chars.uniq.size\
    \ == 3 }\nend", "  if s.length < 3\n    return false\n  end\n  s = s.split('')\n\
    \  happy = true\n  while happy && s.length > 2\n    if s[0] == s[1]\n      happy\
    \ = false\n    end\n    if s[1] == s[2]\n      happy = false\n    end\n    if\
    \ s[0] == s[2]\n      happy = false\n    end\n    s.shift\n  end\n  return happy\n\
    end\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\nis_happy.call(aabb)\n\
    is_happy.call(adb)\nis_happy.call(xyy)", "  # TODO\nend", "  s.size >= 3 && (s.length\
    \ - 2).times.all? { |index| s[index] != s[index + 1] && s[index] != s[index +\
    \ 2] && s[index + 1] != s[index + 2] }\nend", "  if s.length < 3\n    return false\n\
    \  else\n    s.scan(/([a-z])([a-z])([a-z])/).each do |a, b, c|\n      return false\
    \ if a == b || b == c || a == c\n    end\n  end\n  true\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  return s.scan(/.../).uniq.length == s.length/3\n\
    end\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\nis_happy.call(aabb)\n\
    is_happy.call(adb)\nis_happy.call(xyy)", "  s.length >= 3 && s.each_char.each_cons(3).all?\
    \ { |chars| chars.uniq.length == 3 }\nend", "  # write your solution here\nend",
  "  if s.length < 3\n    return false\n  end\n  i = 0\n  while i < s.length - 2\n\
    \    a = s[i]\n    b = s[i + 1]\n    c = s[i + 2]\n    if a == b || b == c ||\
    \ a == c\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
  "  if s.length < 3\n    false\n  else\n    s = s.split('')\n    i = 0\n    while\
    \ i < s.length - 2\n      if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]\n        return false\n      end\n      i += 1\n    end\n    true\n\
    \  end\nend", "  s.length >= 3 && s.scan(/.../).uniq.length == s.length / 3\n\
    end", "  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] or s[i]\
    \ == s[i+2] or s[i+1] == s[i+2]\n  end\n  true\nend", "  s.length >= 3 && s.scan(/.../).all?\
    \ { |sub| sub.chars.uniq.length == 3 }\nend", "  if s.length < 3\n    false\n\
    \  else\n    (0..s.length-3).each do |i|\n      if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n        return false\n      end\n    end\n    true\n  end\n\
    end", "  raise Exception.new(\"Method not implemented\")\nend", "  s.size > 2\
    \ && s.chars.each_cons(3).all? { |c| c.uniq.size == 3 }\nend", "  return false\
    \ if s.size < 3\n  s.scan(/\\w{3}/).each do |ss|\n    return false if ss[0] ==\
    \ ss[1] || ss[0] == ss[2] || ss[1] == ss[2]\n  end\n  true\nend", "  return false\
    \ if s.length < 3\n  return false if (s[0]==s[1] && s[1]==s[2])\n  return false\
    \ if (s[1]==s[2] && s[2]==s[3])\n  return false if (s[2]==s[3] && s[3]==s[4])\n\
    \  return false if (s[3]==s[4] && s[4]==s[5])\n  return false if (s[4]==s[5] &&\
    \ s[5]==s[6])\n  return false if (s[5]==s[6] && s[6]==s[7])\n  return false if\
    \ (s[6]==s[7] && s[7]==s[8])\n  return false if (s[7]==s[8] && s[8]==s[9])\n \
    \ return false if (s[8]==s[9] && s[9]==s[10])\n  return false if (s[9]==s[10]\
    \ && s[10]==s[11])\n  return false if (s[10]==s[11] && s[11]==s[12])\n  return\
    \ false if (s[11]==s[12] && s[12]==s[13])\n  return false if (s[12]==s[13] &&\
    \ s[13]==s[14])\n  return false if (s[13]==s[14] && s[14]==s[15])\n  return false\
    \ if (s[14]==s[15] && s[15]==s[16])\n  return false if (s[15]==s[16] && s[16]==s[17])\n\
    \  return false if (s[16]==s[17] && s[17]==s[18])\n  return false if (s[17]==s[18]\
    \ && s[18]==s[19])\n  return false if (s[18]==s[19] && s[19]==s[20])\n  return\
    \ false if (s[19]==s[20] && s[20]==s[21])\n ", "  if s.length < 3\n    false\n\
    \  else\n    s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n  end\nend", "    false\n\
    end", "  #puts \"string: #{s}\"\n  i = 0\n  count = 0\n  while i < s.length -\
    \ 2\n    #puts \"s[i] = #{s[i]}, s[i+1] = #{s[i+1]}, s[i+2] = #{s[i+2]}\"\n  \
    \  if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n      #puts \"return\
    \ false #{s[i]} == #{s[i+1]} || #{s[i]} == #{s[i+2]} || #{s[i+1]} == #{s[i+2]}\"\
    \n      return false\n    end\n    i += 1\n  end\n  return true\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  if s.length > 2\n    if s[0] == s[1] || s[1]\
    \ == s[2] || s[0] == s[2]\n      return false\n    end\n  end\n  return true\n\
    end", "  puts s\n  return false if s.length < 3\n  return false if s[0] == s[1]\n\
    \  return false if s[1] == s[2]\n  return false if s[0] == s[2]\n  true\nend",
  "  return false if s.size < 3\n  s.chars.each_cons(3).all? { |i| i.size == i.uniq.size\
    \ }\nend", '  return false if s.length < 3', "  s = s.split('')\n  if s.length\
    \ < 3\n    false\n  else\n    i = 0\n    while i < s.length-2\n      if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n        return false\n      end\n\
    \      i += 1\n    end\n    true\n  end\nend", "  s.size >= 3 && s.scan(/.../).all?\
    \ { |sub| sub.uniq.size == 3 }\nend", "  return false if s.length < 3\n  res =\
    \ true\n  s.length.times do |i|\n    res = false if s[i] == s[i+1] && s[i] ==\
    \ s[i+2]\n  end\n  res\nend", "  return false if s.length < 3\n  return false\
    \ if s.length == 3 && s[0] == s[1] && s[1] == s[2]\n  return true if s.length\
    \ == 3 && s[0] != s[1] && s[1] != s[2]\n  s[0..-4].each_char.each_cons(3) do |sub_s|\n\
    \    return false if sub_s[0] == sub_s[1] && sub_s[1] == sub_s[2]\n  end\n  true\n\
    end", "  s.length >= 3 && s.scan(/(\\w)\\1/).length < 3\nend", "  s.length > 2\
    \ && (s.split(/(.)(.)(.)/).select { |x| x.length == 3 }.size == s.size / 3)\n\
    end", "  if s.length < 3\n    return false\n  end\n  char_array = s.split('')\n\
    \  for i in 0..(char_array.length - 3)\n    if char_array[i] == char_array[i +\
    \ 1]\n      return false\n    end\n    if char_array[i] == char_array[i + 2]\n\
    \      return false\n    end\n  end\n  return true\nend", "  # Write your code\
    \ here\nend", "  return false if s.size < 3\n  (s.size - 2).times do |i|\n   \
    \ return false if s[i] == s[i + 1]\n    return false if s[i] == s[i + 2]\n   \
    \ return false if s[i + 1] == s[i + 2]\n  end\n  true\nend", "  return false if\
    \ s.length < 3\n  return true if s.length == 3\n  if s[0] == s[1]\n    return\
    \ false\n  else\n    is_happy(s[1..-1])\n  end\nend", "  if s.length < 3 then\
    \ return false end\n  return s.split('').each_cons(3).all? { |slice| slice.uniq.length\
    \ == 3 }\nend\nis_happy_proc = lambda do |s|\n  if s.length < 3 then return false\
    \ end\n  return s.split('').each_cons(3).all? { |slice| slice.uniq.length == 3\
    \ }\nend", "  s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a != b &&\
    \ b != c && a != c }\nend", "  if s.length < 3\n    return false\n  end\n  s.split('').each_cons(3)\
    \ do |a, b, c|\n    if a == b or b == c or a == c\n      return false\n    end\n\
    \  end\n  return true\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # return false if s.length < 3\n  # for n in (0..s.length-1)\n  #   return\
    \ false if s[n] == s[n+1] && s[n+1] == s[n+2]\n  # end\n  # true\n  s.length >=\
    \ 3 && s.chars.each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\nend",
  "  s.size >= 3 && (0..s.size-3).all?{|i| s[i] != s[i+1] && s[i] != s[i+2] && s[i+1]\
    \ != s[i+2]}\nend", "  return false if s.length < 3\n  s.scan(/.../).all? { |sub|\
    \ sub.uniq.size == 3 }\nend", "  (s.length >= 3) && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  is_happy_consecutive(s, 0)\n\
    end", "  letters = s.chars\n  return false if letters.size < 3\n  letters.each_cons(3)\
    \ do |letters|\n    return false if letters.uniq.size != 3\n  end\n  true\nend",
  "  # TODO\nend", "\tarr = s.split('')\n\tp \"this is the array: #{arr}\"\n\tif arr.length\
    \ < 3\n\t\treturn false\n\telse\n\t\ti = 1\n\t\tj = 2\n\t\twhile j < arr.length\n\
    \t\t\tif arr[i] == arr[j]\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ti += 1\n\t\
    \t\t\tj += 1\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend", "  s = s.split('')\n\
    \  s.length >= 3 && (0..s.length-3).all?{|i| s[i] != s[i+1] && s[i] != s[i+2]\
    \ && s[i+1] != s[i+2]}\nend", "  # your code here\nend", "  return false if s.length\
    \ < 3\n  char_array = s.split('')\n  char_array.each_with_index do |char, index|\n\
    \    return false if char == char_array[index + 1] && char == char_array[index\
    \ + 2]\n  end\n  true\nend", "  len = s.length\n  return len >= 3 ? s.split('').each_cons(3).all?\
    \ { |x| x.uniq.size == 3 } : false\nend", "  s.length >= 3 && !s.scan(/.../).any?\
    \ { |s| s[0] == s[1] || s[0] == s[2] || s[1] == s[2] }\nend", "  is_happy?(s,\
    \ false)\nend", "  return false if s.size < 3\n  s.chars.each_cons(3).all? { |x,\
    \ y, z| x != y && y != z && x != z }\nend", "  # Your code goes here\nend", " \
    \ s.size >= 3 && s.chars.uniq.size == 3\nend", "  # TODO: write your code here.\n\
    end", "  chars = s.chars\n  0.upto(chars.size - 3) do |i|\n    return false if\
    \ chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i\
    \ + 2]\n  end\n  true\nend", "  !(s.length < 3 || s.split('').each_cons(3).any?\
    \ { |a, b, c| a == b || b == c || a == c })\nend", "  s.chars.each_cons(3).all?{|a,b,c|a!=b\
    \ && b!=c && a!=c}\nend", "  s.length >= 3 && !s.scan(/\\w\\w\\w/).any? { |e|\
    \ e.chars.uniq.length != 3 }\nend", "  # YOUR CODE HERE\nend", "  s = s.upcase\n\
    \  if s.length < 3\n    return false\n  else\n    for i in 0..s.length - 3\n \
    \     three_letters = s[i..i+2]\n      if three_letters[0] == three_letters[1]\
    \ || three_letters[0] == three_letters[2] || three_letters[1] == three_letters[2]\n\
    \        return false\n      end\n    end\n    return true\n  end\nend", "   \
    \ happy = true\n    (0..s.length-3).each do |i|\n        if s[i] == s[i+1] ||\
    \ s[i] == s[i+2] || s[i+1] == s[i+2]\n            happy = false\n        end\n\
    \    end\n    return happy\nend", "  return false if s.length < 3\n  s.chars.each_cons(3)\
    \ do |triple|\n    return false if triple.uniq.length < 3\n  end\n  true\nend",
  "  # Your code here\nend", "  s.size >= 3 && s.scan(/.../).all? { |sub_s| sub_s.chars.uniq.size\
    \ == 3 }\nend", "  s.length >= 3 && s.scan(/.../).all? { |s| s.chars.uniq.length\
    \ == 3 }\nend", "  return false if s.length < 3\n  i = 0\n  until i == s.length\
    \ - 3\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]\n    i += 1\n  end\n  true\nend", "  return false if s.length < 3\n\
    \  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] && s[i] ==\
    \ s[i + 2]\n  end\n  true\nend", "  false\nend", "  s.length > 2 && (s.chars.uniq.length\
    \ == s.length)\nend", "  /(?=(\\w{3}))(\\w)\\1+/.match(s).nil?\nend", "  s.size\
    \ >= 3 && s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nis_happy = -> (s) { is_happy(s) }", "  for i in (2..s.length-1)\n  \
    \  return false if s[i-2] == s[i-1] || s[i-2] == s[i] || s[i-1] == s[i]\n  end\n\
    \  true\nend", "  length = s.length\n  is_happy = true\n  i = 1\n  if length <\
    \ 3\n    is_happy = false\n  else\n    while i < length-1\n      if s[i] == s[i-1]\
    \ || s[i] == s[i+1]\n        is_happy = false\n        break\n      end\n    \
    \  i += 1\n    end\n  end\n  is_happy\nend", "  s.length >= 3 && s.split('').each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 &&\n    s.chars.each_cons(3).all?\
    \ { |s1, s2, s3| s1 != s2 && s2 != s3 && s1 != s3 }\nend", "  if s.length < 3\n\
    \    return false\n  end\n  s.each_char.with_index do |char, i|\n    if i+2 <\
    \ s.length\n      if char == s[i+1] || char == s[i+2] || s[i+1] == s[i+2]\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend", "  return\
    \ false if s.size < 3\n  s.chars.each_cons(3).all? { |i| i.uniq.size == 3 }\n\
    end", "  (s.length >= 3 && s.scan(/../).uniq.length == s.length / 2) ? true :\
    \ false\nend", '  return false if s.length < 3', "  s.length > 2 && (0..s.length-3).each\
    \ { |i| return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] }\n\
    \  true\nend", "  return false if s.length < 3\n  s.length.times do |i|\n    return\
    \ false if i + 3 > s.length\n    return false if s[i] == s[i + 1] || s[i] == s[i\
    \ + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", "  return false if s.length\
    \ < 3\n  (0..s.length-3).all? do |i|\n    s[i] != s[i+1] && s[i] != s[i+2] &&\
    \ s[i+1] != s[i+2]\n  end\nend", '  return false if s.size < 3', "  if s.length\
    \ > 2\n    is_happy = []\n    is_happy[0] = s[0]\n    is_happy[1] = s[1]\n   \
    \ is_happy[2] = s[2]\n    if is_happy[0] != is_happy[1] && is_happy[1] != is_happy[2]\
    \ && is_happy[0] != is_happy[2]\n      puts \"true\"\n    else\n      puts \"\
    false\"\n    end\n  else\n    puts \"false\"\n  end\nend", "  s.length >= 3 &&\
    \ s.each_char.each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\nend",
  "  return false if s.length < 3\n  s.split('').each_cons(3) do |c|\n    return false\
    \ if c.uniq.size != 3\n  end\n  true\nend", "  s.size >= 3 && \n  (0..s.size-3).all?\
    \ { |i| s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] }\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  s.scan(/.{3}/).each do |e|\n    if e[0] == e[1]\
    \ || e[0] == e[2] || e[1] == e[2]\n      return false\n    end\n  end\n  return\
    \ true\nend", '  s = s.downcase', "  # make a list of the consecutive groups of\
    \ 3 chars in the string\n  groups = (0..s.length-3).to_a.map { |i| s[i,3] }\n\
    \  # find out how many groups had no duplicate chars\n  num_with_no_duplicates\
    \ = groups.select { |g| g.chars.uniq.length == 3 }.length\n  # if that number\
    \ is equal to the number of groups then we're happy\n  num_with_no_duplicates\
    \ == groups.length\nend", "  s.chars.each_cons(3).any? { |triplet| triplet.uniq.length\
    \ == 3 }\nend", "  return \"false\" if s.length < 3\n  (0..s.length-3).each do\
    \ |i|\n    return \"false\" if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  \"true\"\nend", "  return false if s.size < 3\n  s.split('').each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend", "  false\nend", "  if s.size\
    \ < 3\n    return false\n  end\n  s = s.downcase\n  (0..s.size-3).each do |i|\n\
    \    if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n      return false\n\
    \    end\n  end\n  return true\nend", "  !!s.match(/^(.)(?!\\1)(.)(?!\\1|\\2)\\\
    1$/)\nend", "  return false if s.length < 3\n  array = s.chars.uniq.to_a\n  return\
    \ false if array.length < 3\n  return false if s.length < array.length\n  return\
    \ true\nend", "  s.length < 3 ? false : !s.each_char.each_cons(3).map(&:join).uniq!.nil?\n\
    end", "  # Your code goes here\nend", "  # your code here\nend", "  return false\
    \ if s.length < 3\n  s.chars.each_cons(3) do |c|\n    return false if c.uniq.size\
    \ != 3\n  end\n  true\nend", "  s.length < 3 ? false : is_happy?(s)\nend", " \
    \ s.length >= 3 && s.split(/(?=(...))/).all? { |i| i.length == 3 && i.chars.uniq.length\
    \ == 3 }\nend", "  return false if s.length < 3\n  check_string = s.split('')\n\
    \  check_string.each_with_index do |letter, i|\n    next if i + 3 > check_string.length\n\
    \    return false if check_string[i] == check_string[i + 1] || check_string[i]\
    \ == check_string[i + 2] || check_string[i + 1] == check_string[i + 2]\n  end\n\
    \  true\nend", "  return false if s.length < 3\n  s.each_char.with_index do |c,\
    \ i|\n    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  true\nend", '  return false if s.length < 3', "  is_happy = true\n \
    \ s.chars.each_cons(3) do |trio|\n    if trio.uniq.size != 3\n      is_happy =\
    \ false\n      break\n    end\n  end\n  is_happy\nend", "  s.size < 3 ? false\
    \ : s.chars.each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\nend",
  "  s = s.downcase\n  return false if s.length < 3\n  for i in 2..s.length-1\n  \
    \  if s[i] == s[i-1] or s[i] == s[i-2] or s[i-1] == s[i-2]\n      return false\n\
    \    end\n  end\n  return true\nend", "  # TODO: your code here\nend", '  return
    false if s.length < 3', "\ts = s.downcase\n\tlen = s.length", "  s.length > 2\
    \ && s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\n\
    end", "  return false if s.length < 3\n  s.each_char.with_index do |c, i|\n  \
    \  return false if i + 3 <= s.length && s[i..i+2].chars.uniq.length != 3\n  end\n\
    \  true\nend", "  # your code here\nend", "  s.each_char.with_index do |_c, i|\n\
    \    next if i < 2\n    return false if s[i - 2] == s[i - 1] || s[i - 2] == s[i]\
    \ || s[i - 1] == s[i]\n  end\n  true\nend", "  if s.length < 3\n    return false\n\
    \  end\n  s.scan(/[a-zA-Z]{3}/).each do |sub_s|\n    if sub_s.chars.uniq.length\
    \ != 3\n      return false\n    end\n  end\n  return true\nend", "  # YOUR CODE\
    \ HERE\nend", "  s.length < 3 ? false : (0..s.length-3).all? { |i| s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] }\nend", end, "  s.length >= 3 && (0..s.length-3).all?\
    \ { |i| s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] }\nend", "  s.size\
    \ >= 3 && s.size.times.each { |i| return false if s[i] == s[i+1] && s[i] == s[i+2]\
    \ }\nend", "  return false if s.length < 3\n  for i in 0..s.length-3\n    if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n      return false\n    end\n\
    \  end\n  return true\nend", "  if s.length > 2\n    is_happy = (s[0] != s[1])\
    \ && (s[1] != s[2]) && (s[0] != s[2])\n    is_happy ? is_happy : is_happy(s[1..-1])\n\
    \  else\n    false\n  end\nend", "  # Write your code here.\nend", "  return false\
    \ if s.length < 3\n  (s.length - 2).times do |i|\n    return false if s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", " \
    \   (s.length >= 3) && ((0..s.length-3).all? { |i| s[i] != s[i+1] && s[i] != s[i+2]\
    \ && s[i+1] != s[i+2] })\nend", "  if s.length >= 3\n    return false if s[0]\
    \ == s[1] || s[1] == s[2] || s[0] == s[2]\n    return false if s[0] == s[3] ||\
    \ s[1] == s[3] || s[2] == s[3]\n    return false if s[0] == s[4] || s[1] == s[4]\
    \ || s[2] == s[4] || s[3] == s[4]\n    return false if s[0] == s[5] || s[1] ==\
    \ s[5] || s[2] == s[5] || s[3] == s[5] || s[4] == s[5]\n    return false if s[0]\
    \ == s[6] || s[1] == s[6] || s[2] == s[6] || s[3] == s[6] || s[4] == s[6] || s[5]\
    \ == s[6]\n    return false if s[0] == s[7] || s[1] == s[7] || s[2] == s[7] ||\
    \ s[3] == s[7] || s[4] == s[7] || s[5] == s[7] || s[6] == s[7]\n    return false\
    \ if s[0] == s[8] || s[1] == s[8] || s[2] == s[8] || s[3] == s[8] || s[4] == s[8]\
    \ || s[5] == s[8] || s[6] == s[8] || s[7] == s[8]\n    return false if s[0] ==\
    \ s[9] || s[1] == s[9] || s[2] == s[9] || s[3] == s[9] || s[4] == s[9] || s[5]\
    \ == s[9] || s[6] == s[9] || s[7] == s[9] || s[8] == s[9]\n    return false if\
    \ s[0] == s[10] || s[1] == s[", "\tlen = s.length()\n\treturn false if len < 3\n\
    \tfor i in 0..len-3\n\t\treturn false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2]\n\tend\n\treturn true\nend", "  s = s.split('')\n  if s.length < 3\n\
    \    puts 'false'\n  else\n    happy = s.each_cons(3).all? { |e| e.uniq == e }\n\
    \    if happy\n      puts 'true'\n    else\n      puts 'false'\n    end\n  end\n\
    end", "  len = s.length\n  return false if len < 3\n  0.upto(len - 3) do |idx|\n\
    \    return false if s[idx] == s[idx + 1] || s[idx] == s[idx + 2] || s[idx + 1]\
    \ == s[idx + 2]\n  end\n  true\nend", '  return false if s.length < 3', "  s =\
    \ s.split('')\n  s = s.each_cons(3).to_a\n  s.each do |a|\n    return false if\
    \ a.uniq.length < 3\n  end\n  true\nend", "  # code\nend", "  return true if s.length\
    \ < 3\n  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", '  return false
    if s.length < 3', '  return false if s.length < 3', "  if s.length < 3\n    return\
    \ false\n  else\n    s.each_char.each_cons(3) do |chars|\n      return false if\
    \ chars.uniq.length < 3\n    end\n  end\n  true\nend", "  s.length >= 3 && s.chars.each_cons(3).none?\
    \ { |(a, b, c)| a == b || b == c || a == c }\nend", "  # Insert your code here\n\
    end", "  s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a != b && b !=\
    \ c && a != c }\nend", "  fail 'Not Implemented'\nend", "  s.size >= 3 && !s.match(/([a-z])\\\
    1{2,}/)\nend", "  s.length >= 3 && s.scan(/.../).uniq.length == s.length / 3\n\
    end", "  return false if s.length < 3\n  s.split('').each_cons(3) do |sub|\n \
    \   return false if sub.uniq.length != 3\n  end\n  true\nend", '  return false
    if s.length < 3', "  return false if s.length < 3\n  (s.length - 2).times do |i|\n\
    \    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return\
    \ false\n    end\n  end\n  true\nend", "  if s.length < 3\n    return false\n\
    \  end\n  if s.length >= 3\n    if s[0] == s[1]\n      return false\n    elsif\
    \ s[1] == s[2]\n      return false\n    else\n      return true\n    end\n  end\n\
    end", "  return false if s.length < 3\n  s.length.times do |i|\n    next if i\
    \ == s.length - 2\n    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]\n      return false\n    end\n  end\n  true\nend", "\tif s.length <\
    \ 3\n\t\treturn false\n\tend\n\tfor i in 0..s.length-3\n\t\tif s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "  length = s.length\n  return false if length < 3\n  return\
    \ true if length == 3", "  is_happy = (s.length >= 3) && s.chars.each_cons(3).all?{|x|\
    \ x.uniq.length == 3}\n  is_happy ? 'HAPRB' : 'NO'\nend", "  # Your code goes\
    \ here\nend", "  is_happy = true\n  (s.length - 2).times do |i|\n    is_happy\
    \ = false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n\
    \  is_happy\nend", "  if s.size >= 3\n    if s[0] != s[1] && s[1] != s[2] && s[0]\
    \ != s[2]\n      is_happy(s[1..-1])\n    else\n      return false\n    end\n \
    \ else\n    return true\n  end\nend", "  (s.length >= 3) && s.split('').each_cons(3).all?\
    \ { |a, b, c| (a != b) && (b != c) && (a != c) }\nend", "  # return false if length\
    \ is less than 3\n  return false if s.length < 3\n  # return false if there is\
    \ a letter repeated 3 times\n  (0..s.length-3).each do |i|\n    if s[i] == s[i+1]\
    \ && s[i] == s[i+2]\n      return false\n    end\n  end\n  true\nend", "    s.size\
    \ >= 3 && s.size.times.all? { |i| i + 3 >= s.size || s[i] != s[i + 1] || s[i]\
    \ != s[i + 2] }\nend", "  return false if s.length < 3\n  s.split('').each_cons(3)\
    \ do |a, b, c|\n    return false if a == b || b == c || a == c\n  end\n  true\n\
    end", "  s.length >= 3 and s.scan(/\\w{3}/).all? { |s| s[0] != s[1] and s[1] !=\
    \ s[2] and s[0] != s[2] }\nend", "  if s.length < 3\n    false\n  else\n    happy_string\
    \ = true\n    (0..s.length-3).each do |i|\n      if s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]\n        happy_string = false\n      end\n    end\n\
    \    happy_string\n  end\nend", "  return true if s.length < 3\n  # Your solution\
    \ here\nend", "  # your code here\nend", "  happy_or_not = false\n  if s.length\
    \ > 2 && s.length < 7\n    happy_or_not = true\n    3.times do |i|\n      happy_or_not\
    \ = false if s[i] == s[i+1]\n    end\n  end\n  happy_or_not\nend", "    return\
    \ false if s.length <= 2\n    i = 0\n    while i <= s.length - 3\n        return\
    \ false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n        i +=\
    \ 1\n    end\n    true\nend", "  # your code here\nend", "  if s.size < 3\n  \
    \  return false\n  end\n  (0..s.size-3).each do |n|\n    if s[n] == s[n+1] ||\
    \ s[n] == s[n+2] || s[n+1] == s[n+2]\n      return false\n    end\n  end\n  return\
    \ true\nend", "  return false if s.length < 3\n  s.chars.each_cons(3) do |a, b,\
    \ c|\n    return false if a == b || b == c || a == c\n  end\n  true\nend", " \
    \ haprb = true\n  if s.length < 3\n    haprb = false\n  end\n  arr = s.chars\n\
    \  arr.each_with_index do |letter, index|\n    if index < (arr.length - 2)\n \
    \     if letter == arr[index + 1] || letter == arr[index + 2] || arr[index + 1]\
    \ == arr[index + 2]\n        haprb = false\n      end\n    end\n  end\n  haprb\n\
    end", "  return true if s.length < 3\n  (0..s.length-1).each do |i|\n    if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n      return false\n    end\n\
    \  end\n  true\nend", "  s.length >= 3 and not (s.scan(/\\w{3}/).find { |e| e[0]\
    \ == e[1] or e[1] == e[2] or e[0] == e[2] })\nend", "  (s.length >= 3) && (s.length\
    \ % 3 == 0) && s.split('').uniq.length == 3\nend", "  s.length < 3 ? false : s.scan(/.../).uniq.length\
    \ == s.scan(/.../).length\nend", "  s = s.split('')\n  (s.length >= 3 && s.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c })\nend", "  # Use s.chars.each_cons(3)\
    \ to create an enumerator with consecutive groups of 3 characters\n  # The block\
    \ of s.chars.each_cons(3) will check whether any 3 characters is the same character\n\
    \  # If there is any 3 consecutive characters that are the same, return false.\n\
    \  # Otherwise, return true.\n  (s.length < 3) ? false : !s.chars.each_cons(3).any?\
    \ { |(a, b, c)| a == b && b == c }\nend", "  s.length >= 3 &&\n    (0..s.length\
    \ - 3).all? { |i| s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2]\
    \ }\nend", "  return false if s.length < 3\n  s.chars.each_cons(3) do |a, b, c|\n\
    \    return false if a == b || b == c || a == c\n  end\n  true\nend", "  s.length\
    \ >= 3 && s.chars.each_cons(3).all? { |x, y, z| x != y && y != z && x != z }\n\
    end", "  (s.length>=3 and s.chars.each_cons(3).map{|x|x.uniq.length}.min==3)\n\
    end", "  return 'Please enter a string of length 3 or more' if s.length < 3\n\
    \  s.chars.each_cons(3).all? { |x| x.uniq.length == 3 }\nend", "  return false\
    \ if s.size < 3\n  # I love the fact that Ruby just returns the last expression\
    \ evaluated\n  # in the block, so I don't have to add an explicit return for it\n\
    \  0.upto(s.size - 3).all? do |i|\n    s[i] != s[i + 1] && s[i] != s[i + 2] &&\
    \ s[i + 1] != s[i + 2]\n  end\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend", '  return false if s.length
    < 3', "  return false if s.length < 3\n  (0..s.length-3).each do |i|\n    return\
    \ false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\n\
    end", "  # your code here\nend", "  (s.length >= 3) && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend", "  is_a_string?(s) && is_string_happy?(s)\n\
    end", "  s.length >= 3 && s.each_char.each_cons(3).all? { |c1, c2, c3| c1 != c2\
    \ && c2 != c3 && c1 != c3 }\nend", "  if s.length < 3\n    return false\n  end\n\
    \  arr = s.chars.each_cons(3).map { |a| a.uniq }\n  arr.all? { |sub_arr| sub_arr.length\
    \ == 3 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
