name: HumanEval_80_is_happy
language: rb
prompt: "# You are given a string s.\n# Your task is to check if the string is haprb\
  \ or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>> is_happy.call(aa)\n\
  # false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n# false\n\
  # >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\ndef is_happy(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
  \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"\
  ))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"\
  abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true,\
  \ candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n \
  \   assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"\
  iopaxioi\"))\n  end\nend\n"
completions: ["  if s.length >= 3\n    if s[0] != s[1] && s[1] != s[2] && s[0] !=\
    \ s[2]\n      true\n    else\n      false\n    end\n  else\n    false\n  end\n\
    end", "  # your code here\nend", "  s.chars.each_cons(3).any? { |a, b, c| a !=\
    \ b && b != c && a != c }\nend", "  s.chars.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x| x.first != x.last }\nend", "    alphabet = (\"a\"..\"z\").to_a\n    three_letter_substrings\
    \ = s.chars.each_cons(3).to_a\n    if three_letter_substrings.empty?\n       \
    \ false\n    else\n        alphabet.each do |letter|\n            if three_letter_substrings.all?\
    \ { |substring| substring.include?(letter) }\n                return false\n \
    \           end\n        end\n        true\n    end\nend", "  if s.length >= 3\n\
    \    arr = s.split('')\n    arr.each_cons(3) do |cons|\n      if cons[0] == cons[1]\
    \ || cons[1] == cons[2] || cons[0] == cons[2]\n        return false\n      end\n\
    \    end\n    return true\n  else\n    return false\n  end\nend", "  # your code\
    \ here\nend", "  return nil if s.size < 3\n  s.scan(/.../).all? { |e| e.chars.uniq.size\
    \ == 3 }\nend", "  if s.length < 3\n    return false\n  end\n  s = s.split('')\n\
    \  happy = true\n  while happy && s.length > 2\n    if s[0] == s[1]\n      happy\
    \ = false\n    end\n    if s[1] == s[2]\n      happy = false\n    end\n    if\
    \ s[0] == s[2]\n      happy = false\n    end\n    s.shift\n  end\n  return happy\n\
    end\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\nis_happy.call(aabb)\n\
    is_happy.call(adb)\nis_happy.call(xyy)", "  # TODO\nend", "  s.size >= 3 && (s.length\
    \ - 2).times.all? { |index| s[index] != s[index + 1] && s[index] != s[index +\
    \ 2] && s[index + 1] != s[index + 2] }\nend", "  if s.length < 3\n    return false\n\
    \  else\n    s.scan(/([a-z])([a-z])([a-z])/).each do |a, b, c|\n      return false\
    \ if a == b || b == c || a == c\n    end\n  end\n  true\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  return s.scan(/.../).uniq.length == s.length/3\n\
    end\nis_happy.call(a)\nis_happy.call(aa)\nis_happy.call(abcd)\nis_happy.call(aabb)\n\
    is_happy.call(adb)\nis_happy.call(xyy)", "  s.length >= 3 && s.each_char.each_cons(3).all?\
    \ { |chars| chars.uniq.length == 3 }\nend", "  # write your solution here\nend",
  "  if s.length < 3\n    return false\n  end\n  i = 0\n  while i < s.length - 2\n\
    \    a = s[i]\n    b = s[i + 1]\n    c = s[i + 2]\n    if a == b || b == c ||\
    \ a == c\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
  "  if s.length < 3\n    false\n  else\n    s = s.split('')\n    i = 0\n    while\
    \ i < s.length - 2\n      if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]\n        return false\n      end\n      i += 1\n    end\n    true\n\
    \  end\nend", "  s.length >= 3 && s.scan(/.../).uniq.length == s.length / 3\n\
    end", "  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] or s[i]\
    \ == s[i+2] or s[i+1] == s[i+2]\n  end\n  true\nend", "  s.length >= 3 && s.scan(/.../).all?\
    \ { |sub| sub.chars.uniq.length == 3 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
