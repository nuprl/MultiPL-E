name: HumanEval_163_generate_integers
language: rb
prompt: "# Given two positive integers a and b, return the even digits between a\n\
  # and b, in ascending order.\n# For example:\n# >>> generate_integers.call(2, 8)\n\
  # [2, 4, 6, 8]\n# >>> generate_integers.call(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(10,\
  \ 14)\n# []\ndef generate_integers(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n\
  \    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2,\
  \ 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2,\
  \ 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n\
  \  end\nend\n"
completions: ["  (a..b).select(&:even?)\nend", "  (a..b).select { |v| v.even? }\n\
    end", "  if a > b\n    a, b = b, a\n  end\n  (a..b).select { |i| i.even? }\nend",
  "  (a..b).select { |x| x % 2 == 0 }\nend", "  result = []\n  while a <= b\n    if\
    \ a.even?\n      result << a\n    end\n    a += 1\n  end\n  result\nend", "  a,\
    \ b = [a, b].sort\n  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  output = []\n  a.upto(b) do |i|\n    output << i if i.even?\n  end\n\
    \  output\nend", "  # :reek:UtilityFunction\n  (a..b).select(&:even?)\nend", " \
    \ (a..b).select { |n| n.even? }\nend", "  range = a > b ? (b..a) : (a..b)\n  range.to_a.select(&:even?)\n\
    end", "  a, b = [a, b].sort\n  (a..b).select(&:even?)\nend", "  results = []\n\
    \  a.upto(b) do |num|\n    results << num if num.even?\n  end\n  results\nend",
  "  # <YOUR CODE GOES HERE>\nend", "  # TODO: return a list of even integer in range\
    \ [a, b]\n  # Hint: ruby's `Range` class may help:\n  # http://ruby-doc.org/core-2.2.0/Range.html\n\
    \  (a..b).select(&:even?)\nend", "  range = a..b\n  range.select { |number| number.even?\
    \ }\nend", "  # Your code here\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  even_arr = (a..b).select { |num| num.even? }\n  if a > b\n    return\
    \ even_arr.reverse\n  else\n    return even_arr\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
