name: HumanEval_143_words_in_sentence
language: rb
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example\
  \ 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  sentence.split(' ').select{|word| word.size.prime?}.join(' ')\nend",
  "  words = sentence.split(\" \")\n  prime_words = []\n  words.each do |word|\n \
    \   if is_prime?(word.length)\n      prime_words << word\n    end\n  end\n  prime_words.join(\"\
    \ \")\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  # your code here\nend", "  words = sentence.split\n  prime_words\
    \ = words.select { |word| is_prime?(word.length) }\n  prime_words.join(' ')\n\
    end", "  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  sentence.split(\" \").select{|word| primes.include?(word.length)}.join(\"\
    \ \")\nend", "  is_prime = ->(n) { n > 1 && !(2..n / 2).any? { |m| n % m == 0\
    \ } }\n  sentence.split.select { |word| is_prime.(word.length) }.join(' ')\nend",
  "  prime_length_words = Array.new\n  sentence.split.each do |word|\n    prime_length_words\
    \ << word if is_prime?(word.length)\n  end\n  prime_length_words.join(\" \")\n\
    end", "  sentence.split.select{|w| [2,3,5,7].include?(w.length)}.join(' ')\nend",
  "  words = sentence.split\n  is_prime = -> (word) { word.length.prime? }\n  filtered_words\
    \ = words.select(&is_prime)\n  filtered_words.join(' ')\nend", "  words = sentence.split\n\
    \  words.each_with_object([]) do |word, array|\n    array << word if word.length.prime?\n\
    \  end.join(\" \")\nend", "  sentence.split(' ').select{|e| prime?(e.length)}.join('\
    \ ')\nend", "  sentence.split(' ').select { |x| is_prime?(x.length) }.join(' ')\n\
    end", "  #TODO: Implement the function\nend", "  # For example, this is the code\
    \ that splits a sentence into words:\n  # words = sentence.split(\" \")\n  # You'll\
    \ want to use the is_prime? function defined above,\n  # and you'll want to use\
    \ the Array#map method\n  # with a block that returns the word if it is a prime\
    \ length,\n  # and nil if it isn't.\n  # Once you've got the new array with nils\
    \ and prime words,\n  # you can filter out the nils, and then join the elements\
    \ together with a space.\n  words = sentence.split(\" \")\n  new_words = words.map\
    \ do |word|\n    is_prime?(word.length) ? word : nil\n  end\n  new_words.compact.join(\"\
    \ \")\nend", "  sentence.split.keep_if { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  words.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  # take the sentence.split() the sentence into an array\n\
    \  # then iterate through the array, call each word.length,\n  # check if it is\
    \ a prime number\n  # if it is, make an array from the string, then .join\n  #\
    \ if it isn't, continue\n  prime_words = []\n  words = sentence.split(\" \")\n\
    \  words.each do |word|\n    if is_prime?(word.length)\n      prime_words << word\n\
    \    end\n  end\n  return prime_words.join(\" \")\nend", "    sentence.split(\"\
    \ \").select{|word| word.length.prime?}.join(\" \")\nend", "  words = sentence.split\n\
    \  prime_words = []\n  words.each do |word|\n    prime_words << word if prime?(word.length)\n\
    \  end\n  prime_words.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
