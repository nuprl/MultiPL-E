name: HumanEval_143_words_in_sentence
language: rb
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example\
  \ 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  sentence.split(' ').select{|word| word.size.prime?}.join(' ')\nend",
  "  words = sentence.split(\" \")\n  prime_words = []\n  words.each do |word|\n \
    \   if is_prime?(word.length)\n      prime_words << word\n    end\n  end\n  prime_words.join(\"\
    \ \")\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  # your code here\nend", "  words = sentence.split\n  prime_words\
    \ = words.select { |word| is_prime?(word.length) }\n  prime_words.join(' ')\n\
    end", "  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  sentence.split(\" \").select{|word| primes.include?(word.length)}.join(\"\
    \ \")\nend", "  is_prime = ->(n) { n > 1 && !(2..n / 2).any? { |m| n % m == 0\
    \ } }\n  sentence.split.select { |word| is_prime.(word.length) }.join(' ')\nend",
  "  prime_length_words = Array.new\n  sentence.split.each do |word|\n    prime_length_words\
    \ << word if is_prime?(word.length)\n  end\n  prime_length_words.join(\" \")\n\
    end", "  sentence.split.select{|w| [2,3,5,7].include?(w.length)}.join(' ')\nend",
  "  words = sentence.split\n  is_prime = -> (word) { word.length.prime? }\n  filtered_words\
    \ = words.select(&is_prime)\n  filtered_words.join(' ')\nend", "  words = sentence.split\n\
    \  words.each_with_object([]) do |word, array|\n    array << word if word.length.prime?\n\
    \  end.join(\" \")\nend", "  sentence.split(' ').select{|e| prime?(e.length)}.join('\
    \ ')\nend", "  sentence.split(' ').select { |x| is_prime?(x.length) }.join(' ')\n\
    end", "  #TODO: Implement the function\nend", "  # For example, this is the code\
    \ that splits a sentence into words:\n  # words = sentence.split(\" \")\n  # You'll\
    \ want to use the is_prime? function defined above,\n  # and you'll want to use\
    \ the Array#map method\n  # with a block that returns the word if it is a prime\
    \ length,\n  # and nil if it isn't.\n  # Once you've got the new array with nils\
    \ and prime words,\n  # you can filter out the nils, and then join the elements\
    \ together with a space.\n  words = sentence.split(\" \")\n  new_words = words.map\
    \ do |word|\n    is_prime?(word.length) ? word : nil\n  end\n  new_words.compact.join(\"\
    \ \")\nend", "  sentence.split.keep_if { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  words.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  # take the sentence.split() the sentence into an array\n\
    \  # then iterate through the array, call each word.length,\n  # check if it is\
    \ a prime number\n  # if it is, make an array from the string, then .join\n  #\
    \ if it isn't, continue\n  prime_words = []\n  words = sentence.split(\" \")\n\
    \  words.each do |word|\n    if is_prime?(word.length)\n      prime_words << word\n\
    \    end\n  end\n  return prime_words.join(\" \")\nend", "    sentence.split(\"\
    \ \").select{|word| word.length.prime?}.join(\" \")\nend", "  words = sentence.split\n\
    \  prime_words = []\n  words.each do |word|\n    prime_words << word if prime?(word.length)\n\
    \  end\n  prime_words.join(' ')\nend", "    result = []\n    sentence.split.each\
    \ do |w|\n        result << w if is_prime(w.length)\n    end\n    result.join(\"\
    \ \")\nend", "  words = sentence.split\n  prime_words = []\n  words.each do |word|\n\
    \    prime_words << word if prime?(word.length)\n  end\n  prime_words.join(' ')\n\
    end", "  res = []\n  sentence.split(' ').each do |s|\n    res << s if prime?(s.length)\n\
    \  end\n  res.join(' ')\nend", "  result = \"\"\n  sentence.split(\" \").each\
    \ do |word|\n    result += \"#{word} \" if word.length.prime?\n  end\n  result.strip\n\
    end", "  arr = sentence.split(\" \")\n  sentence = []\n  arr.each do |x|\n   \
    \ sentence << x if is_prime?(x.length)\n  end\n  sentence.join(\" \")\nend", "\n\
    end", "  sentence.split(\" \").select { |word| is_prime?(word.length) }.join(\"\
    \ \")\nend", "  sentence.split(' ').select { |word| (1..word.length).none? { |i|\
    \ word.length % i == 0 } }.join(' ')\nend", "  prime_word_in_sentence(sentence).join('\
    \ ')\nend", "  primes = []\n  result = ''\n  sentence.split(' ').each do |word|\n\
    \    primes << word if prime?(word.length)\n  end\n  primes.each do |p|\n    result\
    \ += p + ' '\n  end\n  result.strip\nend", "  s = sentence.split.select { |w|\
    \ w.length.prime? }\n  s.join(\" \")\nend", "  sentence.split.select { |word|\
    \ word.size.prime? }.join(' ')\nend", "  # your code goes here\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  # write your code here\nend",
  "  sentence.split(' ').keep_if { |e| is_prime?(e.length) }.join(' ')\nend", "  sentence.split(\"\
    \ \").select{|word| primes?(word.length)}.join(\" \")\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split('\
    \ ')\n  words.select { |word| prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split\n  primes = get_primes words.length\n  res = ''\n  words.each_with_index\
    \ do |word, index|\n    if primes.include? word.length\n      res << word + '\
    \ '\n    end\n  end\n  res.strip\nend", "  sentence.split(\" \").filter { |word|\
    \ word.length.prime? }.join(\" \")\nend", "  sentence.split.select { |x| (2..x.length\
    \ - 1).none? { |y| x.length % y == 0 } }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  # Your code here\nend",
  "  words = sentence.split(' ')\n  # \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\
    \u0443\u0435\u043C \u0432 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u043B\u043E\
    \u0432 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\u0445 \u0434\u043B\u0438\
    \u043D\n  lengths = words.map(&:length)\n  # \u043E\u0442\u0431\u0438\u0440\u0430\
    \u0435\u043C \u0438\u0437 \u043C\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043B\
    \u0438\u043D \u043F\u0440\u043E\u0441\u0442\u044B\u0435 \u0447\u0438\u0441\u043B\
    \u0430\n  prime_lengths = lengths.select { |length| is_prime?(length) }\n  # \u043E\
    \u0442\u0431\u0438\u0440\u0430\u0435\u043C \u0438\u0437 \u043C\u0430\u0441\u0441\
    \u0438\u0432\u0430 \u0441\u043B\u043E\u0432 \u0442\u0435, \u0447\u0442\u043E \u0432\
    \u0445\u043E\u0434\u044F\u0442 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432 \u043F\
    \u0440\u043E\u0441\u0442\u044B\u0445 \u0434\u043B\u0438\u043D\n  words.select\
    \ { |word| prime_lengths.include?(word.length) }.join(' ')\nend", "    prime_numbers\
    \ = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    sentence.split(\" \").each do\
    \ |word|\n        if prime_numbers.include?(word.length)\n            result =\
    \ result + word + \" \"\n        end\n    end\n    result.strip\nend", "  # your\
    \ code here\nend", "  sentence.split(' ').select{|w| prime?(w.length)}.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  primes = (2..sentence.length).select { |n| (2..n/2).none? { |x|\
    \ n % x == 0 } }\n  sentence.split.select { |w| primes.include?(w.length) }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  prime_words = []\n  words.each\
    \ do |word|\n    prime_words << word if is_prime(word.length)\n  end\n  prime_words.join(\"\
    \ \")\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  new_sentence = ''\n  words.each do |word|\n\
    \    if prime?(word.length)\n      new_sentence += word + ' '\n    end\n  end\n\
    \  new_sentence.strip\nend", "  # TODO: Implement the function\nend", "  sentence.split(\"\
    \ \").select { |word| word.length.prime? }.join(\" \")\nend", " \nend", "  \"\
    go for\"\nend", "  words = sentence.split(\" \")\n  primes = words.map { |word|\
    \ word.length.prime? }\n  words.select.with_index { |_, i| primes[i] }.join(\"\
    \ \")\nend", "  sentence.split(\" \").select { |word| is_prime?(word.length) }.join(\"\
    \ \")\nend", "  return \"You should have a non-empty string as argument\" if sentence.empty?\n\
    \  sentence.split.select { |word| prime?(word.length) }.join(\" \")\nend", " \
    \ sentence.split(' ').select { |word| prime?(word.length) }.join(' ')\nend", " \
    \ primes = []\n  words = sentence.split(\" \")\n  words.each do |word|\n    if\
    \ is_prime?(word.length)\n      primes << word\n    end\n  end\n  return primes.join(\"\
    \ \")\nend", "  if !sentence.nil? && sentence.class == String\n    words = sentence.split(\"\
    \ \")\n    prime_words = []\n    words.each do |word|\n      prime_words << word\
    \ if is_prime?(word.length)\n    end\n    prime_words.join(\" \")\n  end\nend",
  "  primes = sieve_of_eratosthenes_1000\n  sentence.split.select { |word| primes.include?(word.length)\
    \ }.join(' ')\nend", "  original_sentence = sentence.split(\" \")\n  to_return\
    \ = \"\"\n  original_sentence.each do |word|\n    if is_prime?(word.length)\n\
    \      to_return += word + \" \"\n    end\n  end\n  return to_return.strip\nend",
  "  sentence.split.select { |w| Prime.prime?(w.length) }.join(' ')\nend", "  #TODO\n\
    end", "  require 'prime'\n  a = sentence.split(\" \")\n  return a.select{|x| x.length.prime?}.join(\"\
    \ \")\nend", "  # your code goes here\nend", "    words = sentence.split(/ /)\n\
    \    words.select{|w| is_prime?(w.length)}.join(\" \")\nend", "  result = []\n\
    \  sentence.split(\" \").each do |w|\n    result << w if is_prime(w.length)\n\
    \  end\n  result.join(\" \")\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  # TODO: return the words whose length is a prime number\n\
    \  sentence.split.select { |word| Prime.prime?(word.length) }.join(' ')\nend",
  "  list = []\n  words = sentence.split(\" \")\n  words.each do |word|\n    if word.length\
    \ % 2 != 0\n      list << word\n    end\n  end\n  list.join(\" \")\nend", "  words\
    \ = sentence.split\n  only_primes = words.select { |word| word.length.prime? }\n\
    \  only_primes.join(\" \")\nend", "    words = sentence.split(' ')\n    prime_lengths\
    \ = []\n    for word in words\n        prime_lengths << word if word.length.prime?\n\
    \    end\n    prime_lengths.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  arr = sentence.split\n  str = \"\
    \"\n  arr.each do |x|\n    if prime?(x.length)\n      str << x + \" \"\n    end\n\
    \  end\n  str\nend", "  words = sentence.split(' ')\n  result = []\n  words.each\
    \ do |word|\n    word_length = word.length\n    result << word if is_prime(word_length)\n\
    \  end\n  result.join(' ')\nend", "  prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  sentence.split(\"\
    \ \").select { |word| prime_numbers.include?(word.length) }.join(\" \")\nend",
  "\nend", "  sentence.split(\" \").select { |x| prime?(x.length) }.join(\" \")\n\
    end", "  words = sentence.split()\n  words.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", end, "  sentence.split(\" \").select { |word| prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |s| is_prime(s.length) }.join('\
    \ ')\nend", "  sentence.split.select{|word| word.size.prime?}.join(' ')\nend",
  end, "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n \
    \   if Prime.prime?(word.length)\n      result << word\n    end\n  end\n  result.join(\"\
    \ \")\nend", "  sentence.split(' ').select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split(\" \").select{|w| w.length.prime?}.join(\" \")\n\
    end", "  sentence.split.select { |word| word.size.prime? }.join(' ')\nend", end,
  "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n    if prime?(word.length)\n\
    \      result << word\n    end\n  end\n  result.join(' ')\nend", "  # TODO: implement\
    \ this function\nend", "  s = sentence.split\n  res = []\n  s.each do |x|\n  \
    \  res << x if x.length.prime?\n  end\n  res.join(' ')\nend", "  sentence.split(\"\
    \ \").select { |w| prime?(w.length) }.join(\" \")\nend", "  prime_lengths = primes(sentence.split('\
    \ ').map(&:length).max)\n  sentence.split(' ').select { |x| prime_lengths.include?(x.length)\
    \ }.join(' ')\nend", "  # put your code here\nend", "  words = sentence.split(\"\
    \ \")\n  primes = []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n\
    \  end\n  primes.join(\" \")\nend", "  #TODO: return a string of prime length\
    \ words, separated by a space\n  sentence.split(\" \").select { |word| prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    next if word.length < 2\n    if is_prime?(word.length)\n      result << word\n\
    \    end\n  end\n  result.join(\" \")\nend", "  sentence.split.select { |word|\
    \ word.size.prime? }.join(' ')\nend", "  sentence =~ /(\\w+\\s?\\w?)*\\w+/\n \
    \ words = $&.split(\" \")\n  words.keep_if { |w| prime?(w.length) }\n  words.join(\"\
    \ \")\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| (2..word.length - 1).all? { |divisor| word.length\
    \ % divisor != 0 } }.join(' ')\nend", "  result = []\n  sentence.split.each do\
    \ |word|\n    if is_prime?(word.length)\n      result << word\n    end\n  end\n\
    \  result.join(\" \")\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  # your code here\nend", "  primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \  sentence.split.select { |w| primes.include?(w.length) }.join(' ')\nend", " \
    \ prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  sentence.split.select { |word| prime_numbers.include?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split(\" \")\n  words.select { |word|\
    \ is_prime?(word.length) }.join(\" \")\nend", "  sentence.split(\" \").select\
    \ { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split(' ').select{|x|\
    \ prime?(x.length)}.join(' ')\nend", "  sentence = sentence.split(' ')\n  prime_words\
    \ = sentence.select do |word|\n    prime_check(word.length)\n  end\n  prime_words.join('\
    \ ')\nend", "  # your code here\nend", "  words = sentence.split\n  prime_words\
    \ = words.select { |word| Prime.prime?(word.length) }\n  prime_words.join(' ')\n\
    end", "  sentence.split(\" \").select{|word| is_prime?(word.length)}.join(\" \"\
    )\nend", "\nend", "  primes = (1..10).select { |x| (2..x-1).select { |y| x % y\
    \ == 0 }.count == 0 }\n  sentence.split.select { |w| primes.include?(w.length)\
    \ }.join(' ')\nend", "  new_sentence = []\n  sentence.split(\" \").each do |word|\n\
    \    new_sentence << word if prime?(word.length)\n  end\n  new_sentence.join(\"\
    \ \")\nend", "  sentence.split.select{|word| prime?(word.length)}.join(' ')\n\
    end", "  words = sentence.split()\n  words_prime = words.select { |word| Prime.prime?(word.length)\
    \ }\n  words_prime.join(' ')\nend", "    sentence.split(\" \").select { |word|\
    \ is_prime?(word.length) }.join(\" \")\nend", end, "  # YOUR CODE GOES HERE\n\
    end", "  # !!!!!! write your code here !!!!!!\nend", "  sentence.gsub(/[^\\w\\\
    s]/, '').split.select { |s| s.length.prime? }.join(' ')\nend", "  is_prime = ->\
    \ (n) {\n    return true if n == 2\n    return false if n < 2 || n.even?\n   \
    \ (3..Math.sqrt(n)).step(2).none? { |i| n % i == 0 }\n  }\n  sentence.split.select\
    \ { |word| is_prime.(word.length) }.join(' ')\nend", "  prime_words = ''\n  sentence.split.each\
    \ do |word|\n    prime_words += ' ' + word if prime?(word.length)\n  end\n  prime_words.strip\n\
    end", "  sentence.split(' ').select{|i| is_prime?(i.length)}.join(' ')\nend",
  "  sentences = sentence.split\n  sentences.select { |n| prime?(n.length) }.join('\
    \ ')\nend", "  sentence.split(' ').map(&:length).select { |length| length.prime?\
    \ }.map { |word_length| sentence.split(' ')[word_length - 1] }.join(' ')\nend",
  "  words = sentence.split(' ')\n  puts 'sentence: ', sentence\n  prime_words = words.select\
    \ { |word| prime?(word.length) }\n  # puts 'prime_words: ', prime_words\n  puts\
    \ 'prime_words join: ', prime_words.join(' ')\nend", "  s = sentence.split(' ')\n\
    \  sum = ''\n  s.each do |word|\n    sum += word + ' ' if is_prime(word.length)\n\
    \  end\n  sum.strip\nend", "  # your code goes here\nend", "  is_prime = ->(number)\
    \ {number.prime?}\n  sentence.split.select {|word| is_prime.call(word.length)}.join(\"\
    \ \")\nend", "  # return words in sentence whose lengths are prime numbers\n \
    \ sentence.split.select { |word| is_prime(word.length) }.join(' ')\nend", "  sentence\
    \ = sentence.split\n  sentence.select { |word| prime?(word.length) }.join(' ')\n\
    end", end, "  words = sentence.split\n  result = ''\n  words.each do |word|\n\
    \    result += word if prime?(word.length)\n    result += ' '\n  end\n  result.strip\n\
    end", "  new_sentence = []\n  sentence.split.each do |word|\n    new_sentence\
    \ << word if word.length.prime?\n  end\n  new_sentence.join(' ')\nend", "  sentence.split('\
    \ ').select { |word| prime?(word.length) }.join(' ')\nend", "  # TODO: Return\
    \ a string containing the words of the sentence\n  # whose length is a prime number\n\
    end", "  sentence.split(\" \").keep_if { |word| primes.include?(word.length) }.join(\"\
    \ \")\nend", "  sentence.split(\" \").select { |word| prime?(word.length) }.join(\"\
    \ \")\nend", "  sentence.split.select{|word|word.length.prime?}.join(\" \")\n\
    end", "  sentence.split.select { |x| x.size.prime? }.join(\" \")\nend", "  # Write\
    \ your code here\n  # To print results to the standard output you can use puts\n\
    \  # Example: puts \"Hello world!\"\nend", "  sentence.split(\" \").select { |x|\
    \ _is_prime(x.length) }.join(\" \")\nend", "  # TODO: Implement words_in_sentence\n\
    end", "    words = sentence.split(\" \")\n    filter_words = words.select { |word|\
    \ is_prime(word.length) }\n    filter_words.join(\" \")\nend", "  words = sentence.split\n\
    \  primes = []\n  words.each do |word|\n    primes << word if primes?(word.length)\n\
    \  end\n  primes.join(' ')\nend", "  words = sentence.split(' ')\n  prime_words\
    \ = []\n  words.each do |word|\n    if prime?(word.length)\n      prime_words\
    \ << word\n    end\n  end\n  prime_words.join(' ')\nend", "    words = sentence.split(\"\
    \ \")\n    new_sentence = \"\"\n    words.each do |word|\n        if prime?(word.length)\n\
    \            new_sentence += word + \" \"\n        end\n    end\n    new_sentence\n\
    end", "  words = sentence.split(/\\s/)\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "    words = sentence.split(' ')\n    result = ''\n    for\
    \ word in words\n        word_size = word.size\n        is_prime = true\n    \
    \    for i in 2..(word_size - 1)\n            if word_size % i == 0\n        \
    \        is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime\n            result += word + ' '\n        end\n    end\n\
    \    result.strip\nend", "  sentence.split.select { |str| is_prime?(str.length)\
    \ }.join(' ')\nend", "  sentence.split(\" \").filter { |word| word.length.prime?\
    \ }.join(\" \")\nend", "  # regex will check for any word that has prime number\
    \ length and return it\n  # word_matches = sentence.scan(/\\b\\w*?(?=\\s*(\\w)\\\
    w+?\\1\\b)\\w*?\\b/)", "  sentence.split(' ').select { |w| prime?(w.length) }.join('\
    \ ')\nend", "\nend", "\nend", "  #####################################################################################\n\
    \  # WOD:\n  # Write your code here\n  #####################################################################################\n\
    end", "    words = sentence.split(\" \")\n    prime_words = []\n    prime_numbers\
    \ = []\n    for word in words\n        for num in (1..word.length)\n         \
    \   if word.length % num == 0\n                prime_numbers.push(num)\n     \
    \       end\n        end\n        if prime_numbers.length <= 2\n            prime_words.push(word)\n\
    \        end\n        prime_numbers = []\n    end\n    if prime_words.length ==\
    \ 0\n        return \"\"\n    end\n    prime_words.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \")\n  sentence.select { |word| is_prime?(word.length) }.join(\"\
    \ \")\nend", "  sentence.split.select{|word| Prime.prime?(word.length)}.join('\
    \ ')\nend", "  # your code goes here\nend", "  is_prime = lambda { |num|\n   \
    \ (2..Math.sqrt(num)).each { |i| return false if num % i == 0 }\n    true\n  }\n\
    \  words = sentence.split(\" \")\n  prime_words = words.select { |word| is_prime.call(word.length)\
    \ }\n  prime_words.join(\" \")\nend", "  primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  result\
    \ = []\n  sentence.split(\" \").each do |word|\n    if primes.include?(word.length)\n\
    \      result << word\n    end\n  end\n  result.join(\" \")\nend", "  word_array\
    \ = sentence.split(' ')\n  prime_array = []\n  word_array.each do |word|\n   \
    \ if prime?(word.length)\n      prime_array << word\n    end\n  end\n  prime_array.join('\
    \ ')\nend", "  # your code here\nend", "\nend", "  words = sentence.split\n  words_prime\
    \ = words.select { |word| prime?(word.length) }\n  words_prime.join(' ')\nend",
  "  words = sentence.split(\" \")\n  prime_words = []\n  words.each do |word|\n \
    \   if is_prime?(word.length)\n      prime_words << word\n    end\n  end\n  prime_words.join(\"\
    \ \")\nend", "\nend", "    words = sentence.split(' ')\n    words.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split(' ').select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split\n  prime_words\
    \ = []\n  words.each do |word|\n    if prime?(word.length)\n      prime_words\
    \ << word\n    end\n  end\n  prime_words.join(\" \")\nend", "  words = sentence.split\n\
    \  words.select! do |word|\n    (1..word.length).to_a.select { |n| word.length\
    \ % n == 0 }.length == 2\n  end\n  words.join(' ')\nend", "  # Your code is here\n\
    end", "  words = sentence.split\n  prime_words = words.select { |w| w.length.prime?\
    \ }\n  prime_words.join(' ')\nend", "  s = sentence.split(' ')\n  new_sentence\
    \ = ''\n  s.each do |i|\n    if is_prime?(i.length)\n      new_sentence += i +\
    \ ' '\n    end\n  end\n  new_sentence.strip\nend", "  primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n  sentence.split.select { |word| primes.include?(word.length) }.join('\
    \ ')\nend", end, "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select{|x| prime?(x.length)}.join(\" \")\nend",
  "  sentence.split(\" \").select { |word| prime?(word.length) }.join(\" \")\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  # your\
    \ code here\nend", "  # your code goes here\nend", "  sentence.split.select {\
    \ |word| prime?(word.length) }.join(' ')\nend", "  # TODO: Your code here!\nend",
  "  sentence.split(\" \").select{|s| is_prime?(s.length)}.join(\" \")\nend", "  \
    \  sentence.split.select { |w| is_prime?(w.length) }.join(' ')\nend", "    words\
    \ = sentence.split(\" \")\n    p words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  arr = sentence.split(\" \")\n  arr.select { |w| w.length.prime?\
    \ }.join(\" \")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
