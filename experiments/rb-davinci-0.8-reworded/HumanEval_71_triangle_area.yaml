name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  if a+b>c and a+c>b and b+c>a\n    (1.0/4.0)*Math.sqrt((a+b+c)*(-a+b+c)*(a-b+c)*(a+b-c))\n\
    \  else\n    -1\n  end\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  (a + b + c) /\
    \ 2.0\nend", "  # YOUR CODE HERE\nend", "  # write code here\nend", "  # Implement\
    \ your solution here\nend", '  a, b, c = [a, b, c].sort', "  # YOUR CODE HERE\n\
    end", end, "  arr = [a, b, c].sort\n  return -1 if (arr[0] + arr[1]) <= arr[2]\n\
    \  arr[0] * arr[1] * 0.5\nend", "    # Take the total perimeter of the triangle\
    \ and subtract a, b, and c\n    # to get the length of each of the two sides that\
    \ were not used in the sum\n    # above. \n    # Then, use Heron's Formula (https://www.mathopenref.com/heronsformula.html)\n\
    \    # to get the triangle's area.\n    # Finally, if the triangle is valid, return\
    \ the area to 2 decimal places\n    # rounded down, otherwise return -1\n    if\
    \ (a + b > c) && (a + c > b) && (b + c > a)\n        s = (a + b + c) / 2.0\n \
    \       area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area.round(2)\n\
    \    else\n        return -1\n    end\nend", "  if a + b > c && a + c > b && b\
    \ + c > a\n    # I'm not sure if we can use the \"return\" keyword here\n    #\
    \ but it's much nicer than doing \"return (a + b + c) / 2\"\n    (a + b + c) /\
    \ 2\n  else\n    -1\n  end\nend", "    if (a + b > c) && (a + c > b) && (b + c\
    \ > a)\n        p (a*b)/2.0\n    else\n        p -1\n    end\nend", "  #TODO:\
    \ Return the area of the triangle if it is valid, otherwise return -1\nend", " \
    \ # your code here\nend", "  if valid_triangle?(a, b, c)\n    # Math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c))\n    # to convert to float remove round and change\
    \ to Float \n    area = ((a + b + c) / 2.0) * ( ( (a + b + c) / 2.0 ) - a) * (\
    \ ( (a + b + c) / 2.0 ) - b) * ( ( (a + b + c) / 2.0 ) - c)\n    Math.sqrt(area).round(2)\n\
    \  else\n    -1\n  end\nend", "  sides = [a, b, c].sort\n  (sides[0] + sides[1]\
    \ > sides[2]) ? (sides[0] + sides[1] + sides[2])/2.0 : -1\nend", "  # Your solution\
    \ goes here\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  s\
    \ = (a + b + c) / 2.0\n  (s * (s - a) * (s - b) * (s - c)) ** 0.5\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
