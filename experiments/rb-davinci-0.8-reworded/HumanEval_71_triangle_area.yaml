name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  if a+b>c and a+c>b and b+c>a\n    (1.0/4.0)*Math.sqrt((a+b+c)*(-a+b+c)*(a-b+c)*(a+b-c))\n\
    \  else\n    -1\n  end\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  (a + b + c) /\
    \ 2.0\nend", "  # YOUR CODE HERE\nend", "  # write code here\nend", "  # Implement\
    \ your solution here\nend", '  a, b, c = [a, b, c].sort', "  # YOUR CODE HERE\n\
    end", end, "  arr = [a, b, c].sort\n  return -1 if (arr[0] + arr[1]) <= arr[2]\n\
    \  arr[0] * arr[1] * 0.5\nend", "    # Take the total perimeter of the triangle\
    \ and subtract a, b, and c\n    # to get the length of each of the two sides that\
    \ were not used in the sum\n    # above. \n    # Then, use Heron's Formula (https://www.mathopenref.com/heronsformula.html)\n\
    \    # to get the triangle's area.\n    # Finally, if the triangle is valid, return\
    \ the area to 2 decimal places\n    # rounded down, otherwise return -1\n    if\
    \ (a + b > c) && (a + c > b) && (b + c > a)\n        s = (a + b + c) / 2.0\n \
    \       area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area.round(2)\n\
    \    else\n        return -1\n    end\nend", "  if a + b > c && a + c > b && b\
    \ + c > a\n    # I'm not sure if we can use the \"return\" keyword here\n    #\
    \ but it's much nicer than doing \"return (a + b + c) / 2\"\n    (a + b + c) /\
    \ 2\n  else\n    -1\n  end\nend", "    if (a + b > c) && (a + c > b) && (b + c\
    \ > a)\n        p (a*b)/2.0\n    else\n        p -1\n    end\nend", "  #TODO:\
    \ Return the area of the triangle if it is valid, otherwise return -1\nend", " \
    \ # your code here\nend", "  if valid_triangle?(a, b, c)\n    # Math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c))\n    # to convert to float remove round and change\
    \ to Float \n    area = ((a + b + c) / 2.0) * ( ( (a + b + c) / 2.0 ) - a) * (\
    \ ( (a + b + c) / 2.0 ) - b) * ( ( (a + b + c) / 2.0 ) - c)\n    Math.sqrt(area).round(2)\n\
    \  else\n    -1\n  end\nend", "  sides = [a, b, c].sort\n  (sides[0] + sides[1]\
    \ > sides[2]) ? (sides[0] + sides[1] + sides[2])/2.0 : -1\nend", "  # Your solution\
    \ goes here\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  s\
    \ = (a + b + c) / 2.0\n  (s * (s - a) * (s - b) * (s - c)) ** 0.5\nend", "  #\
    \ TODO: calculate the area of a triangle with sides a, b and c\nend", "  # TODO:\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return -1 if (a + b <= c) || (a + c <= b) || (b + c <= a)\n  area = ((a + b +\
    \ c) / 2.0) * (((a + b + c) / 2.0) - a) * (((a + b + c) / 2.0) - b) * (((a + b\
    \ + c) / 2.0) - c)\n  Math.sqrt(area).round(2)\nend", "  # TODO\nend", "  arr\
    \ = [a, b, c].sort\n  if arr[0] + arr[1] > arr[2]\n    ((arr[0] + arr[1] + arr[2])\
    \ / 2.0) * (((arr[0] + arr[1] + arr[2]) / 2.0) - arr[0]) * (((arr[0] + arr[1]\
    \ + arr[2]) / 2.0) - arr[1]) * (((arr[0] + arr[1] + arr[2]) / 2.0) - arr[2])\n\
    \    Math.sqrt( ((arr[0] + arr[1] + arr[2]) / 2.0) * (((arr[0] + arr[1] + arr[2])\
    \ / 2.0) - arr[0]) * (((arr[0] + arr[1] + arr[2]) / 2.0) - arr[1]) * (((arr[0]\
    \ + arr[1] + arr[2]) / 2.0) - arr[2]) ).round(2)\n  else\n    -1\n  end\nend",
  "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  (a * Math.sqrt(b**2 -\
    \ a**2 / 4.0) / 2.0).round(2)\nend", "  # Calculate area of triangle using the\
    \ Heron's formula\n  # a, b, c are sides of triangle\n  # s is half of perimeter\n\
    \  # A is area of triangle\n  # See http://www.mathopenref.com/heronsformula.html\n\
    \  s = (a + b + c) / 2.0\n  a = s * (s - a) * (s - b) * (s - c)\n  a > 0 ? Math.sqrt(a).round(2)\
    \ : -1\nend", "  # TODO\nend", "  # complete this method\nend", "  return -1 if\
    \ a + b <= c\n  return -1 if a + c <= b\n  return -1 if b + c <= a\n  s = (a +\
    \ b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", "  return\
    \ -1 if a + b <= c || a + c <= b || b + c <= a\n  # Heron's formula\n  s = (a\
    \ + b + c) / 2.0\n  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return\
    \ area.round(2)\nend", "  a, b, c = [a, b, c].sort\n  p = (a + b + c) / 2.0\n\
    \  area = Math.sqrt(p * (p - a) * (p - b) * (p - c))", "  arr = [a, b, c].sort\n\
    \  a, b, c = arr\n  return -1 if c >= a + b\n  area = 0.5 * (a * b)\n  return\
    \ area.round(2)\nend", "  sorted = [a, b, c].sort\n  return -1 if sorted[0] +\
    \ sorted[1] <= sorted[2]\n  s = (a + b + c) / 2.0\n  return Math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c)).round(2)\nend", "  triangle_area = 0.5 * a * b\n  triangle_area.round(2)\n\
    end", "  a, b, c = [a, b, c].sort\n  if (a + b) > c\n    return (a + b + c) /\
    \ 2.0\n  else\n    return -1\n  end\nend", "  return -1 if a + b <= c || a + c\
    \ <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1]\
    \ <= sides[2]\n  perimeter = sides.inject(:+)\n  length = perimeter / 2.0\n  area\
    \ = Math.sqrt(length * (length - a) * (length - b) * (length - c))\n  area.round(2)\n\
    end", "  # Your code here\nend", "  return -1 if a + b <= c || a + c <= b || b\
    \ + c <= a\n  s = (a + b + c) / 2.0\n  result = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n  result.round(2)\nend", "  case [a, b, c].sort\n  when [a, b, c]\n\
    \    r = (a + b + c) / 2.0\n    Math.sqrt(r * (r - a) * (r - b) * (r - c))\n \
    \ else\n    -1\n  end\nend", "  # guard clause to check if sides are valid\n \
    \ return -1 if (a + b <= c) || (a + c <= b) || (b + c <= a)", "  arr = [a, b,\
    \ c].sort\n  if arr[0] + arr[1] > arr[2]\n    s = (a + b + c) / 2.0\n    return\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n  else\n    return -1\n\
    \  end\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  s = (a\
    \ + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c))\nend\nputs \"Triangle\
    \ area: #{triangle_area(3, 4, 5)}\"\nputs \"Triangle area: #{triangle_area(1,\
    \ 2, 10)}\"\nputs", "  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n\
    \    return (a * b * 0.5).round(2)\n  else\n    return -1\n  end\nend", "  # Your\
    \ code here\nend", "  if a + b > c && a + c > b && b + c > a\n    s = (a + b +\
    \ c) / 2.0\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n \
    \ else\n    return -1\n  end\nend", "  sides = [a, b, c].sort\n  return -1 if\
    \ sides[0] + sides[1] <= sides[2]\n  0.5 * sides[0] * sides[1]\nend", "  sides\
    \ = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  s = sides.reduce(:+)\
    \ / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # To\
    \ find area of triangle, we need to calculate semi-perimeter\n  # We'll define\
    \ helper method to find it:\n  def semi_perimeter(a, b, c)\n    (a + b + c) /\
    \ 2.0\n  end", "  ##\n  # Your code goes here.\n  ##\nend", "  # Write your code\
    \ here\nend", '  arr = [a, b, c].sort', "  sides = [a, b, c].sort\n  if (sides[0]\
    \ + sides[1]) > sides[2]\n    area = (a * b) / 2.0\n    area.round(2)\n  else\n\
    \    -1\n  end\nend", "  # your code goes here\nend", "  return -1 if a + b <=\
    \ c || a + c <= b || b + c <= a\n  (a + b + c) / 2.0\nend", "  a, b, c = [a, b,\
    \ c].sort\n  return -1 if a + b <= c", "  if a+b>c && a+c>b && b+c>a\n    s=(a+b+c)/2.0\n\
    \    ((s-a)*(s-b)*(s-c))**0.5\n  else\n    -1\n  end\nend", "  sorted = [a, b,\
    \ c].sort\n  return -1 if sorted[0] + sorted[1] <= sorted[2]\n  s = (a + b + c)/2.0\n\
    \  Math.sqrt(s*(s-a)*(s-b)*(s-c))\nend", "  s = (a + b + c) / 2.0\n  return (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\nend", "  return -1 if a+b <= c || a+c\
    \ <= b || b+c <= a\n  (a*b)/2.0\nend", "  # write your code here\nend", "  # calculate\
    \ s\n  s = (a + b + c) / 2\n  # check if a, b, c make a valid triangle\n  if s\
    \ - a > 0 && s - b > 0 && s - c > 0\n    # Heron's formula for calculating area\n\
    \    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area.round(2)\n\
    \  else\n    return -1\n  end\nend", "  sides = [a, b, c].sort\n  if (sides[0]\
    \ + sides[1]) > sides[2]\n    a, b, c = sides\n    s = (a + b + c) / 2.0\n   \
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  else\n    -1\n  end\nend", " \
    \ sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  p\
    \ (sides[0] + sides[1] + sides[2]) / 2.0\n  area = (sides[0] + sides[1] + sides[2])\
    \ / 2.0\n  Math.sqrt(area * (area - sides[0]) * (area - sides[1]) * (area - sides[2]))\n\
    end", "  # TODO: implement this method\nend", "    # Check if a, b, c are valid\
    \ sides\n    # Write your code here...\n    if (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n        s = (a + b + c) / 2.0\n        area = Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n        return area.round(2)\n    else\n        return\
    \ -1\n    end\nend", "  if a + b > c and a + c > b and b + c > a\n    s = (a +\
    \ b + c) / 2.0\n    Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  else\n    -1\n\
    \  end\nend", "\t# validate sides\n\tif (a <= 0) || (b <= 0) || (c <= 0) || (a\
    \ + b <= c) || (a + c <= b) || (b + c <= a)\n\t\treturn -1\n\tend", "  perim =\
    \ (a + b + c) / 2.0\n  return -1 if a + b <= c || a + c <= b || b + c <= a\n \
    \ Math.sqrt(perim * (perim - a) * (perim - b) * (perim - c))\nend", "  # TODO\
    \ \nend", "  # your code here\nend", "  if (a + b > c) && (a + c > b) && (b +\
    \ c > a)\n    p (a.to_f * b.to_f * c.to_f) / 3\n  else\n    p -1\n  end\nend",
  "\t# raise ArgumentError.new('hello') if (a+b) < c || (a+c) < b || (b+c) < a\n\t\
    if (a+b) < c || (a+c) < b || (b+c) < a\n\t\t-1\n\telse\n\t\ts = (a+b+c)/2.0\n\t\
    \tarea = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\t\tarea.round(2)\n\tend\nend", "  #\
    \ validate triangle\n  if (a <= 0 || b <= 0 || c <= 0) || (a + b <= c || a + c\
    \ <= b || b + c <= a)\n    return -1\n  end", "  # your code here\nend", "  if\
    \ a + b > c && a + c > b && b + c > a\n    sides = [a, b, c]\n    p (sides.sort![0]\
    \ + sides.sort![1]) / 2.0\n  else\n    p -1\n  end\nend\ntriangle_area(1, 2, 10)\n\
    triangle_area(3, 4, 5)", "  return -1 if a <= 0 || b <= 0 || c <= 0\n  s = (a\
    \ + b + c) / 2.0\n  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  area.round(2)\n\
    end", "  # ...your code here\nend", "\t# Check if the 3 sides form a valid triangle\n\
    \tif (a + b > c) && (a + c > b) && (b + c > a)\n\t\ts = (a + b + c) / 2.0\n\t\t\
    ((s * (s - a) * (s - b) * (s - c)) ** 0.5).round(2)\n\telse\n\t\t-1\n\tend\nend",
  "  arr = [a, b, c].sort\n  if arr[0] + arr[1] <= arr[2] || arr.any? { |ele| ele\
    \ <= 0 }\n    -1\n  else\n    p arr[0] * arr[1] / 2.0\n  end\nend", "  return\
    \ -1 if (a+b<=c || a+c<=b || b+c<=a)\n  s = (a+b+c)/2.0\n  sqrt(s*(s-a)*(s-b)*(s-c))\n\
    end\nputs triangle_area(3, 4, 5)\nputs triangle_area(1, 2, 10)", "  # your code\
    \ here\nend", "  return -1 if (a + b <= c) || (a + c <= b) || (b + c <= a)\n \
    \ (a + b + c) / 2.0\nend", "  # Replace this line\nend", "  # code here\nend",
  "  sorted = [a, b, c].sort\n  if sorted[0] + sorted[1] > sorted[2]\n    s = (a +\
    \ b + c) / 2.0\n    area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return\
    \ area.round(2)\n  else\n    return -1\n  end\nend", "    d = [a, b, c].sort\n\
    \    if (d[0] + d[1] < d[2])\n        return -1\n    else\n        s = (a + b\
    \ + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n\
    \    end\nend", "  x, y, z = [a, b, c].sort!\n  return -1 if z >= x + y\n  (0.5\
    \ * x * Math.sqrt(y**2 - (0.25 * (z**2 - x**2))**2)).round(2)\nend", "\t# Your\
    \ code goes here.\nend", "  # TODO: complete me\nend", "  # base, height = [a,\
    \ b, c].sort.reverse.take(2)\n  # if (base + height) > other_side\n  #   ((base\
    \ * height) / 2.0).round(2)\n  # else\n  #   -1\n  # end\n  base, height = [a,\
    \ b, c].sort.reverse.take(2)\n  perimeter = a + b + c\n  sum = perimeter - base\
    \ - height\n  if sum > base\n    ((base * height) / 2.0).round(2)\n  else\n  \
    \  -1\n  end\nend", "  area = a + b > c && a + c > b && b + c > a ? \n    s =\
    \ (a + b + c) / 2.0\n    Math.sqrt(s * (s - a) * (s - b) * (s - c)) : -1", " \
    \ sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  sqrt\
    \ = Math.sqrt(sides[2] * (sides[2] - sides[0]) * (sides[2] - sides[1]) * (sides[0]\
    \ + sides[1]))\n  sqrt.nan? ? -1 : sqrt.round(2)\nend", "  array = [a, b, c].sort\n\
    \  if array[0] + array[1] > array[2]\n    height = array[2] * array[2] - (array[0]\
    \ * array[0] + array[1] * array[1])\n    height = height.to_f / 2\n    height\
    \ = Math.sqrt(height)\n    return (height * array[0] / 2).round(2)\n  else\n \
    \   return -1\n  end\nend", "  temp = (a+b+c)/2.0\n  if temp-a <= 0 or temp-b\
    \ <= 0 or temp-c <= 0\n    return -1\n  else\n    area = Math.sqrt(temp*(temp-a)*(temp-b)*(temp-c))\n\
    \    return area.round(2)\n  end\nend", "  area = nil\n  # Your code here\n  return\
    \ area\nend", "  # Your code here\nend", "  # WRITE YOUR CODE HERE\nend", "  a,\
    \ b, c = [a, b, c].sort #sort the numbers\n  return -1 if a+b <= c    #return\
    \ -1 if invalid\n  area = (a+b+c)/2.0       #semi-perimeter\n  area * (area-a)\
    \ * (area-b) * (area-c) #Heron's formula\nend", "  triangle_area = (a + b + c)\
    \ / 2.0\n  return -1 if (triangle_area <= a) || (triangle_area <= b) || (triangle_area\
    \ <= c)\n  (triangle_area * (triangle_area - a) * (triangle_area - b) * (triangle_area\
    \ - c)) ** 0.5\nend", "  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n\
    \    0.5 * sides[0] * sides[1]\n  else\n    -1\n  end\nend", "  return -1 if a+b<=c\
    \ || a+c<=b || b+c<=a\n  sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4.0\nend", " \
    \ # validate \n  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n\
    \    # heron's formula\n    s = 0.5 * (a + b + c)\n    return Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).round(2)\n  else\n    return -1\n  end\nend", "  ary\
    \ = [a, b, c].sort\n  ary[0] + ary[1] > ary[2] ? ary[0] * ary[1] / 2.0 : -1\n\
    end", "  # add your code here\nend", "  # your code goes here\nend", "  # Add\
    \ your code here!\nend", "    triangle_area_helper(a, b, c)\nend", "  sides =\
    \ [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]", "  return -1\
    \ if a + b <= c\n  return -1 if a + c <= b\n  return -1 if b + c <= a\n  s = (a\
    \ + b + c) / 2.0\n  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  area.round(2)\n\
    end", "  s = (a + b + c) / 2.0\n  if a > s || b > s || c > s\n    -1\n  else\n\
    \    Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  end\nend", "  # TODO: return\
    \ the area of the triangle\n  a, b, c = [a, b, c].sort\n  a, b, c = a.to_f, b.to_f,\
    \ c.to_f\n  s = (a + b + c) / 2\n  return -1 if s <= a\n  return -1 if s <= b\n\
    \  return -1 if s <= c\n  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  return area.round(2)\nend", "  # code goes here\nend", "  if a+b>c && a+c>b\
    \ && b+c>a\n    (1.0/4)*Math.sqrt((a+(b+c))*(c-(a-b))*(c+(a-b))*(a+(b-c)))\n \
    \ else\n    -1\n  end\nend", "  arr = [a, b, c].sort\n  a, b, c = arr[0], arr[1],\
    \ arr[2]\n  if a + b > c\n    s = (a + b + c) / 2.0\n    Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n  else\n    -1\n  end\nend", "  sides = [a, b, c].sort\n\
    \  return -1 if sides[0] + sides[1] <= sides[2]\n  s = (a + b + c) / 2.0\n  Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # Your code here\nend", " \
    \ sorted = [a, b, c].sort\n  x, y, z = sorted\n  return -1 if x + y <= z", " \
    \ s = (a + b + c) / 2.0\n  if s <= a || s <= b || s <= c\n    -1\n  else\n   \
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  end\nend", "  # a, b, c = [a,\
    \ b, c].sort\n  # return -1 if a + b <= c\n  # (0.5 * a * Math.sqrt(b**2 - (0.25\
    \ * (a**2 + b**2 - c**2))**2)).round(2)\n  a, b, c = [a, b, c].sort\n  a + b >\
    \ c ? Math.sqrt(a**2 + b**2 - c**2) / 4 : -1\nend", "  a, b, c = [a, b, c].sort\n\
    \  a, b, c = [a, b, c].map(&:to_f)\n  return -1 if a + b <= c\n  area = (a * (b\
    \ ** 2 - c ** 2) + b * (c ** 2 - a ** 2) + c * (a ** 2 - b ** 2)) / 4\n  (area\
    \ * 100).round / 100.0\nend", "  # Write your code here\nend", "  triangle_array\
    \ = [a, b, c].sort\n  if triangle_array[0] + triangle_array[1] > triangle_array[2]\n\
    \    area = (0.5 * triangle_array[0] * triangle_array[1])\n    area.round(2)\n\
    \  else\n    -1\n  end\nend", "  arr = [a, b, c].sort\n  return -1 if (arr[0]\
    \ + arr[1]) <= arr[2]", "  # TODO\nend", "  a, b, c = [a, b, c].sort\n  return\
    \ -1 if a + b <= c\n  s = (a + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\nend", "  # TODO: implement the area of the triangle here\nend",
  "    # Here is the implementation\nend", "  s = (a + b + c) / 2.0\n  area = (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n  if area > 0\n    area.round(2)\n  else\n\
    \    -1\n  end\nend", "  if a+b > c && a+c > b && b+c > a\n    area = (0.5 * (a*b\
    \ + b*c + c*a))\n    return area.round(2)\n  else\n    return -1\n  end\nend",
  "  if a + b > c && a + c > b && b + c > a\n    perimeter = (a + b + c) / 2.0\n \
    \   ((perimeter - a) * (perimeter - b) * (perimeter - c) * perimeter) ** 0.5\n\
    \  else\n    -1\n  end\nend", "  # TODO: Implement triangle area function\nend",
  "  # Your code here\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] +\
    \ sides[1] <= sides[2]\n  area = 0.5 * (a * b * Math.sin(Math::PI / 180 * c))\n\
    \  area.round(2)\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1]\
    \ <= sides[2]\n  area = Heron.new(sides[0], sides[1], sides[2]).call\n  area.round(2)\n\
    end", "  # Write your code here\nend", "  # TODO: return the area of the triangle\
    \ rounded to 2 decimal points if the \n  # three sides form a valid triangle.\
    \ Otherwise return -1\n  # A triangle is valid if the sum of the lengths of any\
    \ two sides is greater\n  # than the length of the third side.\n  # Tip: define\
    \ a method(using def) that takes in two parameters and returns\n  # true if they\
    \ are greater than the third side. \n  # Then call that method twice in another\
    \ method, and finally, define the \n  # triangle_area method.\n  \n  def valid_triangle(a,\
    \ b, c)\n    if (a + b > c) && (a + c > b) && (b + c > a)\n      true\n    else\n\
    \      false\n    end\n  end", "  # Your Code goes here..\n  if(a + b > c && a\
    \ + c > b && b + c > a)\n    area = (a + b + c)/2.0\n    area = Math.sqrt(area\
    \ * (area - a) * (area - b) * (area - c))\n    return area.round(2)\n  else\n\
    \    return -1\n  end\nend", end, "  # write your code here\nend", "  sides =\
    \ [a, b, c].sort\n  return sides[0] + sides[1] > sides[2] ? (a + b + c) / 2.0\
    \ : -1\nend", "  # Your code here\nend", "  sides = [a, b, c].sort\n  if sides[0]\
    \ + sides[1] > sides[2]\n    ((sides[0] + sides[1] + sides[2]) / 2.0) * (sides[2]\
    \ - (sides[0] + sides[1]) / 2.0)\n  else\n    -1\n  end\nend", "    if a + b >\
    \ c && a + c > b && b + c > a\n        a, b, c = [a, b, c].sort\n        p (a\
    \ + b) * c * 0.5\n    else\n        -1\n    end\nend\ntriangle_area(3, 4, 5)\n\
    triangle_area(1, 2, 10)", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <=\
    \ c\n  (a + b + c) / 2.0\nend", "    a, b, c = [a, b, c].sort\n    return -1 if\
    \ (a + b) <= c\n    p = (a + b + c) / 2.0\n    area = Math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c))\n    return area.round(2)\nend", "  # Check if all inputs\
    \ are numbers\n  return -1 unless (a.is_a? Numeric) && (b.is_a? Numeric) && (c.is_a?\
    \ Numeric)\n  # Check if triangle sides are valid\n  return -1 unless a + b >\
    \ c && a + c > b && b + c > a\n  # Calculate area of triangle\n  s = (a + b +\
    \ c) / 2.0\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend",
  "  # your code goes here\nend", "  # Write your code here\nend", "  # Your code\
    \ here\nend", "  # code goes here\nend", "  if a < b+c && b < a+c && c < a+b\n\
    \    a, b, c = [a, b, c].sort\n    s = (a+b+c)/2.0\n    area = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    return area.round(2)\n  else\n    return -1\n  end\nend", "  arr = [a, b,\
    \ c].sort\n  return -1 if arr[0] + arr[1] <= arr[2]\n  sum = (arr[0] + arr[1]\
    \ + arr[2]) / 2.0\n  area = Math.sqrt(sum * (sum - arr[0]) * (sum - arr[1]) *\
    \ (sum - arr[2]))\n  area.round(2)\nend", "  # IMPLEMENT ME\nend", "  # Your code\
    \ here\nend", "  s = (a + b + c) / 2.0\n  if s - a > 0 && s - b > 0 && s - c >\
    \ 0\n    Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  else\n    -1\n  end\nend",
  "  sides = [a, b, c].sort\n  sides[0] + sides[1] > sides[2] ? 0.5 * sides[0] * sides[1]\
    \ : -1\nend", "    # Your code here\nend", "  # you can use the function sides_satisfy_triangle_inequality?\
    \ defined above\n  # sides_satisfy_triangle_inequality?(a, b, c)\nend", "  # triangle_area\n\
    end", "  if (a <= 0) || (b <= 0) || (c <= 0)\n    -1\n  elsif ((a + b) <= c) ||\
    \ ((a + c) <= b) || ((b + c) <= a)\n    -1\n  else\n    ((a + b + c)/2.0) * (Math.sqrt(((a\
    \ + b + c)/2.0) * ((a + b - c)/2.0) * ((a - b + c)/2.0) * ((-a + b + c)/2.0)))\n\
    \  end\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <=\
    \ sides[2]\n  return sides[0] + sides[1] + sides[2] / 2.0\nend", "  # area of\
    \ a traingle\n  # formula: s = (a + b + c) / 2\n  # area = (s*(s-a)*(s-b)*(s-c))**0.5\n\
    \  s = (a + b + c) / 2.0\n  if s <= 0\n    -1\n  else\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n\
    \    area.round(2)\n  end\nend", "  if a + b > c && a + c > b && b + c > a\n \
    \   s = (a + b + c) / 2.0\n    puts Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n\
    \  else\n    puts -1\n  end\nend\ntriangle_area(3, 4, 5)\ntriangle_area(1, 2,\
    \ 10)", "  return -1 if (a + b <= c) || (a + c <= b) || (b + c <= a)\n  s = (a\
    \ + b + c) / 2.0\n  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  area.round(2)\n\
    end", "  # TODO: Implement this method\nend", "  arr = [a, b, c].sort\n  return\
    \ -1 if (arr[0] + arr[1]) <= arr[2]\n  s = (a + b + c) / 2.0\n  Math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c)).round(2)\nend", "  # TODO\nend", "  # Your Code\
    \ Goes Here\nend", "  return -1 if [a, b, c].any? { |side| side <= 0 }\n  return\
    \ -1 if a + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).round(2)\nend", "  sides = [a, b, c].sort\n \
    \ return -1 if sides[0] + sides[1] <= sides[2]\n  (sides[0] + sides[1] + sides[2])\
    \ * 0.5\nend", "  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n  if area.nan?\n    -1\n  else\n    area.round(2)\n  end\nend",
  "\tarr = [a, b, c].sort\n\treturn -1 if arr[0] + arr[1] <= arr[2]\n\tside_area =\
    \ arr[0] + arr[1]\n\t2 * Math.sqrt(side_area * (side_area - arr[0]) * (side_area\
    \ - arr[1]) * (side_area - arr[2])) / 3\nend", "  # TODO\nend", "  # TODO: your\
    \ code here!\nend", "  # Your Code Here\nend", "  # Write your code here\nend",
  "  # TODO: implement me\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0]\
    \ + sides[1] <= sides[2]\n  (0.5 * sides[0] * sides[1]).round(2)\nend", "  sides\
    \ = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  s = (a +\
    \ b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", " \
    \ if a <= 0 || b <= 0 || c <= 0\n    return -1\n  end\n  # we need to create an\
    \ array with the lengths of sides\n  array = [a, b, c]\n  array.sort!\n  # the\
    \ sum of the first two sides must be greater than the third\n  if array[0] + array[1]\
    \ > array[2]\n    p = (a + b + c) / 2.0\n    area = Math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    return area.round(2)\n  else\n    return -1\n  end\nend",
  "  raise ArgumentError unless a.is_a?(Numeric) && b.is_a?(Numeric) && c.is_a?(Numeric)\n\
    \  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n    s = (a + b\
    \ + c) / 2.0\n    (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  else\n    -1\n \
    \ end\nend", "  # Your code here\nend", "  # Determine if the sides form a valid\
    \ triangle\n  # area_of_triangle = (a + b + c) / 2\n  # area = area_of_triangle\
    \ * ((area_of_triangle - a) * (area_of_triangle - b) * (area_of_triangle - c))\n\
    \  # return area\n  if a + b > c && a + c > b && b + c > a\n    perimeter = (a\
    \ + b + c) / 2.0\n    area = Math.sqrt(perimeter * (perimeter - a) * (perimeter\
    \ - b) * (perimeter - c))\n    area.round(2)\n  else\n    -1\n  end\nend", end,
  "  # write your code here\nend", "  if is_triangle?(a, b, c)\n    s = (a + b + c)/2.0\n\
    \    Math.sqrt(s*(s-a)*(s-b)*(s-c))\n  else\n    -1\n  end\nend", "  if (a <=\
    \ 0) || (b <= 0) || (c <= 0) || (a + b <= c) || (a + c <= b) || (b + c <= a)\n\
    \    -1\n  else\n    (a + b + c) / 2.0\n  end\nend", "\ts = (a + b + c) / 2.0\n\
    \tarea = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\tarea > 0 ? area.round(2)\
    \ : -1\nend", "  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n\
    \    per = (a + b + c) / 2.0\n    return Math.sqrt(per * (per - a) * (per - b)\
    \ * (per - c)).round(2)\n  else\n    return -1\n  end\nend", "\tif a + b > c &&\
    \ a + c > b && b + c > a\n\t\ts = (a + b + c) / 2.0\n\t\ta = Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n\t\treturn a.round(2)\n\telse\n\t\treturn -1\n\t\
    end\nend", "  return (a * b * c)**(1/3.0)\nend", "  # your code here\nend", "\t\
    if a > 0 && b > 0 && c > 0\n\t\t# In order to check if a valid triangle, the sum\
    \ of any two sides \n\t\t# must be greater than the third side.\n\t\tif a + b\
    \ > c || a + c > b || b + c > a\n\t\t\t# Heron's formula to find the area of a\
    \ triangle.\n\t\t\ts = (a + b + c) / 2.0\n\t\t\tarea = Math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c))\n\t\t\treturn area.round(2)\n\t\tend\n\tend\n\treturn -1\n\
    end", "  # hint: a valid triangle's area is given by Heron's Formula\n  # A =\
    \ sqrt(s(s-a)(s-b)(s-c))\n  # s = 1/2(a+b+c)\n  # see http://en.wikipedia.org/wiki/Heron%27s_formula\n\
    end", "  # Your code here\nend", "  # Write your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
