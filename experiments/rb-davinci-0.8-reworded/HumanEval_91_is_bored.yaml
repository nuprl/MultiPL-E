name: HumanEval_91_is_bored
language: rb
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored.call(\"Hello\
  \ world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n# 1\ndef is_bored(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
  \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"\
  ))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
  \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n\
  \    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will\
  \ kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"\
  ))\n  end\nend\n"
completions: ["  sen = s.split(/[!?.]+/)\n  sen.inject(0) { |sum, v| v.start_with?(\"\
    I\") ? sum + 1 : sum }\nend", "  s.count(\"I\")\nend", "  if s.match(/I[.!?]/)\n\
    \    1\n  else\n    0\n  end\nend", "  s.split(/[.?!]/).count { |sentence| sentence.match(/\\\
    bI\\b/) }\nend", "  count = 0\n  s.split(/\\.|\\?|\\!/).each { |str| count +=\
    \ 1 if str.start_with?('I') }\n  count\nend", "  s.split(\".\").select{|str| str.chomp.chomp(\"\
    ?\").chomp(\"!\").strip.start_with?(\"I\")}.count\nend", "  if s.include?(\"I\"\
    )\n    arr = s.split(/[.!?]/)\n    arr.keep_if {|x| x.start_with?(\"I\")}.count\n\
    \  else\n    0\n  end\nend", "  sentences = s.split(/[.?!]/)\n  boredoms = sentences.count\
    \ { |sentence| sentence.lstrip.start_with? \"I\" }\n  boredoms\nend", "  boredoms\
    \ = 0\n  i = 0\n  while i < s.length\n    if s[i] == \"I\" && i == 0\n      boredoms\
    \ += 1\n    elsif s[i] == \"I\" && s[i-1] == \" \"\n      boredoms += 1\n    end\n\
    \    i += 1\n  end\n  boredoms\nend", "  s.scan(/\\bI\\b/).count\nend", "  s.split(/[.?!]/).grep(/^I/).count\n\
    end", "  s.split(/[!.?]/).count{|l| l.strip.start_with?(\"I\")}\nend", "  s.split(/[?|.|!]/).count\
    \ { |sentence| sentence.strip.start_with?('I') }\nend", "  sentences = s.split(/[\\\
    .\\?!]/)\n  sentences.count{|sentence| sentence.strip.start_with?(\"I\")}\nend",
  "  count = 0\n  array = s.split('.').map{|sentence| sentence.strip}\n  array.each\
    \ do |sentence|\n    if sentence.split(' ')[0] == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  # \u2026\nend", "  s.split(/\\.|\\?|!/).map(&:strip).count\
    \ { |s| s.start_with?('I') }\nend", "  s.scan(/\\sI /).count\nend", "  s.split(/\\\
    .|\\?|\\!/).count{|s| s =~ /^I/}\nend", "  s.split(/[.?!]/).select { |x| x.strip.start_with?(\"\
    I\") }.size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
