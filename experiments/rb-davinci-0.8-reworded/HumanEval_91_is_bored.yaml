name: HumanEval_91_is_bored
language: rb
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored.call(\"Hello\
  \ world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n# 1\ndef is_bored(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
  \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"\
  ))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
  \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n\
  \    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will\
  \ kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"\
  ))\n  end\nend\n"
completions: ["  sen = s.split(/[!?.]+/)\n  sen.inject(0) { |sum, v| v.start_with?(\"\
    I\") ? sum + 1 : sum }\nend", "  s.count(\"I\")\nend", "  if s.match(/I[.!?]/)\n\
    \    1\n  else\n    0\n  end\nend", "  s.split(/[.?!]/).count { |sentence| sentence.match(/\\\
    bI\\b/) }\nend", "  count = 0\n  s.split(/\\.|\\?|\\!/).each { |str| count +=\
    \ 1 if str.start_with?('I') }\n  count\nend", "  s.split(\".\").select{|str| str.chomp.chomp(\"\
    ?\").chomp(\"!\").strip.start_with?(\"I\")}.count\nend", "  if s.include?(\"I\"\
    )\n    arr = s.split(/[.!?]/)\n    arr.keep_if {|x| x.start_with?(\"I\")}.count\n\
    \  else\n    0\n  end\nend", "  sentences = s.split(/[.?!]/)\n  boredoms = sentences.count\
    \ { |sentence| sentence.lstrip.start_with? \"I\" }\n  boredoms\nend", "  boredoms\
    \ = 0\n  i = 0\n  while i < s.length\n    if s[i] == \"I\" && i == 0\n      boredoms\
    \ += 1\n    elsif s[i] == \"I\" && s[i-1] == \" \"\n      boredoms += 1\n    end\n\
    \    i += 1\n  end\n  boredoms\nend", "  s.scan(/\\bI\\b/).count\nend", "  s.split(/[.?!]/).grep(/^I/).count\n\
    end", "  s.split(/[!.?]/).count{|l| l.strip.start_with?(\"I\")}\nend", "  s.split(/[?|.|!]/).count\
    \ { |sentence| sentence.strip.start_with?('I') }\nend", "  sentences = s.split(/[\\\
    .\\?!]/)\n  sentences.count{|sentence| sentence.strip.start_with?(\"I\")}\nend",
  "  count = 0\n  array = s.split('.').map{|sentence| sentence.strip}\n  array.each\
    \ do |sentence|\n    if sentence.split(' ')[0] == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "  # \u2026\nend", "  s.split(/\\.|\\?|!/).map(&:strip).count\
    \ { |s| s.start_with?('I') }\nend", "  s.scan(/\\sI /).count\nend", "  s.split(/\\\
    .|\\?|\\!/).count{|s| s =~ /^I/}\nend", "  s.split(/[.?!]/).select { |x| x.strip.start_with?(\"\
    I\") }.size\nend", "  s.count \"I\"\nend", "  # I am bored because I'm always\
    \ playing the boring language game.\n  s.split(/[.!?]/).map { |sentence| sentence.strip\
    \ }.select { |sentence| sentence.start_with?(\"I\") }.size\nend", "  sen = s.split(/[.?!]/)\n\
    \  sen.count { |x| x.split[0] == \"I\" }\nend", "  words = s.split(/[.?!]/)\n\
    \  words.select { |word| word.start_with?(\"I\") }.count\nend", "  s.split(/[?.!]/).count\
    \ { |sentence| sentence.split(' ').first == 'I' }\nend", "  s.split(/\\.|\\?|\\\
    !/).count { |s| s.strip.start_with?(\"I\") }\nend", "  boredoms = s.split(/\\\
    .|\\?|\\!/).map(&:strip).map(&:split).select { |w| w[0] == \"I\" }\n  boredoms.size\n\
    end", "  sentences = s.split(/[.?!]/)\n  boredoms = sentences.count { |s| s.split.first\
    \ == \"I\" }\n  return boredoms\nend", "  l = s.downcase.split(/[.!?]/)\n  l.select\
    \ { |s| s.include?('i') }.count\nend", "  arr = s.split(/[!.?]+/)\n  count = 0\n\
    \  arr.each do |a|\n    if a.split(' ')[0] == 'I'\n      count += 1\n    end\n\
    \  end\n  count\nend", "    count = 0\n    s.split(\".\").each do |x|\n      \
    \  if x.include? \"I\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  s.split(/[?!.]/).inject(0) { |acc, phrase| phrase.split[0] ==\
    \ \"I\" ? acc + 1 : acc }\nend", "  a = s.split(/[!?.]/)\n  a.delete_if {|e| e.length\
    \ < 2}\n  count = 0\n  a.each do |i|\n    if i[0..1] == \"I \"\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  s.count('I')\nend", "  # Your code here\n\
    end", "  s.downcase.split(/[.?!]/).count { |s| s.strip.start_with?('i') }\nend",
  "  s.split(/[.?!]/).select { |sentence| sentence.start_with?('I') }.count\nend",
  "  words = s.split(\" \")\n  count = 0\n  words.each_with_index do |word, index|\n\
    \    if word == \"I\" && (index == 0 || words[index - 1].match(/\\.|\\?|\\!/))\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.scan(/I/).count\nend",
  "  p s.split(/\\.|\\?|\\!/).select { |e| e.lstrip[0] == \"I\" }.size\nend", "\t\
    s.split(/\\.|\\?|\\!/).select{|s|s[0,2]==\"I \"}.count\nend", "  #puts s\n  s.count(\"\
    I\")\nend", "  # TODO: Write your code here\n  return s.split(\".\").select{|x|\
    \ x.include?(\"I\")}.count\nend", "  count = 0\n  while s.include?(\"I\")\n  \
    \  s = s.sub(\"I\",\"\")\n    count += 1\n  end\n  count\nend", "  boredoms =\
    \ 0\n  s.scan(/\\w+\\.|\\w+\\?|\\w+!/).each do |word|\n    if word[0] == \"I\"\
    \n      boredoms += 1\n    end\n  end\n  boredoms\nend", "  s.split(/\\.|\\?|\\\
    !/).count { |sentence| sentence.include?('I') }\nend", "  s.split(/[.!?]/).grep(/^I/).size\n\
    end", "  boredoms = 0\n  words = s.split\n  words.each do |word|\n    boredoms\
    \ += 1 if word == \"I\"\n  end\n  boredoms\nend", "  s.split(/[!?.]/).inject(0)\
    \ { |boredom, sentence| sentence.lstrip.start_with?(\"I\") ? boredom + 1 : boredom\
    \ }\nend\nis_bored = method(:is_bored).to_proc", "  boredoms = 0\n  sentence =\
    \ s.split(/\\.|\\?|\\!/).map(&:strip)\n  sentence.each do |sentence|\n    boredoms\
    \ += 1 if sentence.start_with?(\"I\")\n  end\n  boredoms\nend", "  count = 0\n\
    \  if s.split(/\\.|\\?|\\!/).map(&:strip).any? { |sentence| sentence.split.first\
    \ == \"I\" }\n    count += 1\n  end\n  count\nend", "  s.scan(/I/).size\nend",
  "    return s.scan(/I[\\s\\S]*?[?.!]/).length\nend", "  s.split(/[.!?]/).count {\
    \ |sentence| sentence.split[0] == \"I\" }\nend", "  sentence = s.split(/[.?!]/)\n\
    \  sentence.count { |e| e.strip.start_with?('I') }\nend", "  sentences = s.split(/[\\\
    ?|\\!|\\.]/)\n  boredoms = 0\n  sentences.each do |sentence|\n    sentence.slice!(0)\
    \ if sentence[0] == \" \"\n    if sentence[0] == \"I\"\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend", "  s.split(/[.?!]/).count { |x| x.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).reduce(0) { |memo, i| memo += 1 if i[0] == 'I';\
    \ memo }\nend", "  s.split(/\\.|\\?|\\!/).map(&:strip).select { |st| st.start_with?('I')\
    \ }.size\nend", "  s.split(/[.?!]/).select { |x| x.start_with?(\"I\") }.count\n\
    end", "  num = 0\n  arr = s.split(/[?!.]/)\n  arr.each do |sentence|\n    if sentence.strip[0..1]\
    \ == \"I \"\n      num += 1\n    end\n  end\n  num\nend", "  # your code here\n\
    end", "  # your code here\nend", "  boredoms = 0\n  arr = s.split(/\\.|\\?|\\\
    !/).each do |sentence|\n    if sentence.start_with?('I')\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend", "  sentence = s.split(/[.?!]/)\n  sentence.count{|s|\
    \ s.start_with?('I')}\nend", "  s.split(/\\.|\\?|\\!/).count { |x| x.start_with?('I')\
    \ }\nend", "  p s.scan(/I.*?[!\\.]/).count\nend", "  count = 0\n  arr = s.split(/\\\
    .|\\?|\\!/).map(&:strip)\n  arr.each do |sentence|\n    if sentence.split(' ')[0]\
    \ == 'I'\n      count += 1\n    end\n  end\n  count\nend", "  return s.scan(/^I/).count\n\
    end", end, "  # your code here\nend", "  count = 0\n  array = s.split(/[.?!]/)\n\
    \  array.each do |string|\n    string.strip!\n    if string.chars.first == \"\
    I\"\n      count += 1\n    end\n  end\n  count\nend", "  s.split(/[.?!]/).count\
    \ { |x| x =~ /\\A\\s*I\\s/ }\nend", "  s.split(/[\\.\\?\\!]/).select { |el| el.start_with?(\"\
    I\") }.size\nend", "  s.split(/[!.?]/).map{|i| i.split.any? {|w| w.downcase ==\
    \ \"i\"}}.select{|i| i}.size\nend", "  count = 0\n  i = 0\n  while i < s.length\n\
    \    if (s[i] == \"I\")\n      count += 1\n    end\n    i += 1\n  end\n  count\n\
    end", "  # Split the string into separate sentences.\n  sentences = s.split(/[.?!]/)\n\
    \  # Count the number of sentences starting with \"I\".\n  count = 0\n  sentences.each\
    \ do |sentence|\n    count += 1 if sentence.strip.start_with?(\"I\")\n  end\n\
    \  count\nend", "\ts.split(\".\").count { |s| s.chomp.end_with?(\"I\") }\nend",
  "  count = 0\n  i = 0\n  s = s.split(/\\.|\\?|\\!/).each do |x|\n    count += 1\
    \ if x.split[0] == \"I\"\n  end\n  count\nend", "  s.scan(/\\bi/i).count\nend",
  "  s.split(/\\.|\\?|\\!/).select { |s| s =~ /\\A[\\s]*I/ }.size\nend", "  s.scan(/I/).count\n\
    end", "  s.split(/[.!?]/).select { |sentence| sentence.start_with?('I') }.size\n\
    end", "  s.split(/[!?.]/).count { |sentence| sentence.start_with? \"I\" }\nend",
  "  # remove the first half\n  s = s.split(/[!.?]/)\n  s.delete_at(0)\n  # remove\
    \ the first half\n  s = s.map { |x| x.split(/[.!?]/) }\n  s = s.flatten\n  # convert\
    \ to array of sentences\n  s = s.map { |x| x.lstrip }\n  # remove empty strings\n\
    \  s.delete(\"\")\n  # remove the first half\n  s = s.map { |x| x.split(/[.!?]/)\
    \ }\n  s = s.flatten\n  # look for \"I\"\n  s.map { |x| x.start_with?(\"I\") }.count(true)\n\
    end", "  count = 0\n  s.split(\".\").each do |x|\n    count += 1 if x.include?(\"\
    I\")\n  end\n  count\nend", "  s.split(/\\.|\\?|!/).select { |sentence| sentence.start_with?(\"\
    I\") }.size\nend", "  count = 0\n  a = s.split(/[.!?]/)\n  a.each do |sentence|\n\
    \    if sentence[0] == \"I\"\n      count += 1\n    end\n  end\n  count\nend",
  "  s.scan(/\\bI\\b./).length\nend", "  if s.match?(/I/)\n    s.split(/[.?!]/).count\
    \ { |i| i.start_with?('I') }\n  else\n    0\n  end\nend", "    s.split(/\\.|\\\
    ?|\\!/).count{|e| e.strip.start_with?('I')}\nend", "  # your code here\nend",
  "  boredoms = 0\n  sentences = s.split(/[?!.]/)\n  sentences.each do |sentence|\n\
    \    if sentence.split[0] == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\n\
    end", "  # words = s.split('.')\n  # count = 0\n  # words.each do |word|\n  #\
    \   if word.start_with? 'I'\n  #     count += 1\n  #   end\n  # end\n  # count\n\
    \  count = 0\n  s.scan(/\\s*(I\\s*.*?\\s*(?=(\\.|\\?|\\!)))/) do |match|\n   \
    \ count += 1\n  end\n  count\nend", "  # your code here\nend", "  a = s.split(/[.!?]/)\n\
    \  c = 0\n  a.each do |b|\n    c += 1 if b[0] == \"I\"\n  end\n  c\nend", "  #TODO\n\
    end", "  s.count('I')\nend", "  count = 0\n  arr = s.split(/[.?!]/)\n  arr.each\
    \ do |word|\n    if word.match(/^I/)\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.scan(/I/).count\nend", "  s.count(\"I\")\nend", "  s.split(/[.?!]/).select\
    \ { |e| e.start_with? \"I\" }.count\nend", "  s.split(/[.!?]/).select { |word|\
    \ word.split(\" \").first == \"I\" }.size\nend", "  s.split(/[.?!]/)\n    .delete_if\
    \ { |x| x.length == 0 }\n    .map { |x| x.strip }\n    .count { |x| x.start_with?(\"\
    I\") }\nend", "  count = 0\n  arr = s.split(\".\")\n  arr.each do |el|\n    if\
    \ el.include?(\"I\") && !el.include?(\"?\") && !el.include?(\"!\")\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  # TODO: implement me!\nend", "  boredoms\
    \ = s.split(/\\.|\\?|\\!/).select { |sentence| sentence.strip.start_with?('I')\
    \ }\n  return boredoms.length\nend", "  sentences = s.split(/[.?!]/)\n  boredoms\
    \ = 0\n  sentences.each do |sentence|\n    boredoms += 1 if sentence[0..1] ==\
    \ \"I \"\n  end\n  boredoms\nend", "  matches = s.scan(/\\bI.*[\\.!\\?]/)\n  matches.size\n\
    end", "  sentence = s.split(/[.?!]/)\n  sentence.inject(0) { |counter, sent| (sent[0]\
    \ == \"I\") ? counter + 1 : counter }\nend", "  count = 0\n  s.split(/[?!.]/).each\
    \ do |sentence|\n    if sentence.split[0] == \"I\"\n      count += 1\n    end\n\
    \  end\n  count\nend", "  # your code here\nend", "  s.split(\".\").map { |sentence|\
    \ sentence.start_with?(\"I\") }.select{ |el| el == true }.length\nend", "  s.to_s.downcase.scan(/\\\
    bi\\b/).count\nend", "  boredoms = 0\n  s.split(/\\.|\\?|\\!/).each do |sentence|\n\
    \    boredoms += 1 if sentence.match(/^\\s*I/)\n  end\n  boredoms\nend", "  s.split(/\\\
    .|\\?|\\!/).count{|word| word.strip.start_with?('I')}\nend", "  # your code here\n\
    end", "  return s.split(\" \").select { |word| word.to_s.downcase == \"i\" }.length\n\
    end", "  s.split(/[!?.]/).count{|s| s =~ /^\\s*I\\s/}\nend", "  count = 0\n  s.split(/[.?!]/).each\
    \ do |word|\n    if word.lstrip[0] == \"I\"\n      count += 1\n    end\n  end\n\
    \  count\nend", "  # TODO: Implement this function!\n  words = s.split(/[.?!]/)\n\
    \  sum = 0\n  words.each do |w|\n    sum += 1 if w.start_with?(\"I\")\n  end\n\
    \  sum\nend", "  s.split(/\\.|\\?|\\!/).select { |sentence| sentence.start_with?(\"\
    I\") }.size\nend", "  s.split(/\\.|\\?|\\!/).count{|x| x.strip.start_with?('I')}\n\
    end", "  s.lines.map(&:strip).count { |s| s =~ /^I\\s/ }\nend", "  s.split(/(\\\
    ?|\\!|\\.)/).select{|i| i == \"I\" }.count\nend", "  s.scan(/^I.*[\\!\\.\\?]/).count\n\
    end", "  sentence = s.split(/[.?!]/)\n  sentence.map do |i|\n    i if i.strip.start_with?(\"\
    I\")\n  end.delete_if(&:nil?).count\nend", "  s.count('I')\nend", "  s.split(/\\\
    .|\\?|\\!/).reduce(0) { |acc, sentence| sentence.start_with?('I') ? acc + 1 :\
    \ acc }\nend", "  s.split(/[\\.\\?\\!]/).count { |w| w.start_with?('I') }\nend",
  "  s.split(/[?.!]/).select { |s| s =~ /^I/ }.size\nend", "  s.count(\"I.\")\nend",
  "  s.split(/\\.|\\?|\\!/).count { |i| i.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |x| x.strip.start_with? \"I\" }\nend", "  sentences = s.split(/[!?.]/)\n \
    \ boreds = 0\n  sentences.each do |s|\n    boreds += 1 if s[0] == \"I\" || s[0]\
    \ == \"i\"\n  end\n  boreds\nend", "  # YOUR CODE HERE\nend", "  s.split(/[\\\
    .\\?!]/).select { |sentence| sentence =~ /^\\s*I/ }.size\nend", "  # Your code\
    \ here\nend", "  count = 0\n  s.split(/[?!.]/).each do |sentence|\n    count +=\
    \ 1 if sentence[0] == \"I\"\n  end\n  count\nend", "  # YOUR CODE HERE\nend",
  "  s.scan(/\\AI/).count\nend", "  boredoms = s.split(/[.?!]/).map(&:strip).count\
    \ { |s| s.start_with?(\"I\") }\nend", "  my_array = s.split(/\\.|\\?|\\!/).delete_if{|a|\
    \ a.strip == \"\"}\n  my_array.inject(0) {|sum, word| word.strip.start_with?(\"\
    I\") ? sum += 1 : sum}\nend", "  s.scan(/^I.+[\\.|\\?|!]/).size\nend", "\treturn\
    \ s.scan(/I/).count\nend", "  s.split(/[.!\\?]/).count { |e| e.include?(\"I\"\
    ) }\nend", "  s.split(/\\.|\\?|\\!/).select { |sentence| sentence =~ /^\\s*I/\
    \ }.count\nend", "  sentences = s.split(/[.?!]/)\n  boredoms = 0\n  sentences.each\
    \ do |sentence|\n    if sentence.strip.start_with?(\"I\")\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend", "\tboredoms = 0\n\ts.split(/\\.|\\?|\\!/).each\
    \ do |x|\n\t\tboredoms += 1 if x.strip.start_with?(\"I\")\n\tend\n\tboredoms\n\
    end", "  s.count(\"I\")\nend", "  s.split(/[.?!]/).count { |e| e.strip.start_with?('I')\
    \ }\nend", "  s.split(/[\\.\\?\\!]/).inject(0) { |memo, str| memo += 1 if str.strip.start_with?('I');\
    \ memo }\nend", "  boredoms = 0\n  # Your code here.\n  s.split(/[.?!]/).each\
    \ do |sentence|\n    boredoms += 1 if sentence.strip.start_with?('I')\n  end\n\
    \  boredoms\nend", "  count = 0\n  s.split(/[!?.]/).each do |sentence|\n    next\
    \ if sentence.strip.empty?\n    count += 1 if sentence.strip.match(/^I/)\n  end\n\
    \  count\nend", "  s.count(\"I\")\nend", "  s.split(/[.?!]/).inject(0) { |acc,\
    \ i| i.start_with?(\"I\") ? acc + 1 : acc }\nend", "  s.scan(/\\A(I)/).length\n\
    end", "  s.split(/[.?!]/).count{|x| x.start_with? \"I\"}\nend", "  s.scan(/I.*[!?.]/).count\n\
    end", "  s.split(/[.?!]/).map(&:strip).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  if s.split(\".\")\n    if s.split(\"?\")\n      if s.split(\"!\"\
    )\n        s.split.count(/I/)\n      end\n    end\n  end\nend", "  s.scan(/I/).count\n\
    end", "  s.split(/[\\.\\?\\!]/).map { |s| s.gsub(/\\s/, '') }.count { |s| s.start_with?(\"\
    I\") }\nend", "  if s.split(\" \").first == \"I\"\n    return 1\n  end\n  0\n\
    end", "  bored_count = 0\n  # return bored_count\n  words = s.split\n  words.each\
    \ do |word|\n    if word == \"I\"\n      bored_count += 1\n    end\n  end\n  bored_count\n\
    end", "  count = 0\n  sentences = s.split(\".\")", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence =~ /^\\s*I/ }\nend", "  s.split(/[?.!]/).map { |sentence|\
    \ sentence.strip }.count { |sentence| sentence.start_with? \"I\" }\nend", end,
  "  s.scan(/I/).size\nend", "  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.include?(\"\
    I\") }\nend", "  s.split(/[\\.\\?\\!]/).map { |s| s.strip }.select { |s| s.start_with?('I')\
    \ }.size\nend", "  words = s.split\n  count = 0\n  words.each do |word|\n    if\
    \ word == \"I\"\n      count += 1\n    end\n  end\n  count\nend", "  boredoms\
    \ = 0\n  s.split(/[.?!]/) { |sentence| boredoms += 1 if sentence.strip.split[0]\
    \ == \"I\" }\n  boredoms\nend", "  s.scan(/I/).size\nend", "  s.split(/\\.|\\\
    ?|\\!/).select { |s| s =~ /^[Ii]/ }.count\nend", "  boredoms = 0\n  sentences\
    \ = s.split(/[.?!]/)\n  sentences.each do |sentence|\n    words = sentence.split(\"\
    \ \")\n    if words[0] == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\n\
    end", "  sentences = s.split(/[.?!]/)\n  sentences.select { |sentence| sentence.start_with?('I')\
    \ }.count\nend", "  s.scan(/^I/).count\nend", "  # TODO\nend", "  s.scan(/\\bI\\\
    b/).size\nend", "  s.count(\"I\")\nend", "  bored = 0\n  s.split(/[.!?]/).each\
    \ { |x| bored += 1 if x.strip.length > 0 && x.strip[0] == 'I' }\n  bored\nend",
  "  s.scan(/I(?=\\s)/).length\nend", "  # your code here\nend", "  s.downcase.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"i\") }\nend", "  index = 0\n  counter =\
    \ 0\n  while index < s.length do\n    if s[index..index+1] == \"I \" || s[index]\
    \ == \"I\"\n      if s[index-1] == \" \" || index == 0\n        counter += 1\n\
    \      end\n    end\n    index += 1\n  end\n  counter\nend", "  boredoms = 0\n\
    \  sentences = s.split(/[.?!]/)\n  sentences.each do |sentence|\n    words = sentence.split('\
    \ ')\n    boredoms += 1 if words[0] == 'I'\n  end\n  boredoms\nend", "  x = s.split(/\\\
    .|\\?|\\!/).length\n  x.times do |i|\n    if s.split(/\\.|\\?|\\!/)[i].start_with?('I')\n\
    \      return 1\n    end\n  end\n  return 0\nend", "  s.split(\".\").map{|e| e.split(\"\
    ?\")}.flatten.map{|e| e.split(\"!\")}.flatten.count{|e| e.split(\" \")[0] == \"\
    I\"}\nend", "  count = 0\n  arr = s.split(/[\\!\\?\\.]/)\n  arr.each do |a|\n\
    \    if a.strip[0] == \"I\"\n      count += 1\n    end\n  end\n  count\nend",
  "  s.scan(/\\sI/).count\nend", "  (s.downcase.split('.') + s.downcase.split('?')\
    \ + s.downcase.split('!')).count { |sentence| sentence[0] == 'i'}\nend", "  s.scan(/I/).count\n\
    end", "  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend", "  s.scan(/I.+?[.?!]/).size\nend", "  # counts how many times the statement\
    \ begins with \"I\"\n  s.scan(/\\bI[^?!.]*[.?!]/).count\nend", "  # a counter\n\
    \  boredoms = 0\n  # use a scanner to split the string and iterate through the\
    \ words\n  StringScanner.new(s).scan_until(/\\bI\\b/) do\n    # for each instance\
    \ of the word 'I', increment the counter\n    boredoms += 1\n  end\n  # return\
    \ the count of boredoms\n  boredoms\nend", "  s.split(/\\.|\\?|\\!/).select {\
    \ |sentence| sentence.strip.start_with?(\"I\") }.size\nend", "  (s.split(/[!\\\
    ?\\.]+/).select{|x|x[0]=='I'}).size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
