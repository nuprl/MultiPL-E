language: rb
name: HumanEval_58_common
results:
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm73bjwwt

    Started

    .

    Finished in 0.001306697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    765.29 tests/s, 3061.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyc0ghsn

    Started

    .

    Finished in 0.001278357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.25 tests/s, 3129.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1ewmuzvi

    Started

    .

    Finished in 0.000385 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2597.40 tests/s, 10389.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp4drn5ux

    Started

    .

    Finished in 0.000497861 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2008.59 tests/s, 8034.37 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 1
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_jy_3yh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpk_jy_3yh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.007352841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.00 tests/s, 136.00 assertions/s\n"
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return (l1 & l2).sort\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe5km0aox

    Started

    .

    Finished in 0.001053711 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    949.03 tests/s, 3796.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 1
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2 & l1.uniq & l2.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd0pxstqp\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpd0pxstqp.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.007479838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.69 tests/s, 133.69 assertions/s\n"
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp4drn5ux

    Started

    .

    Finished in 0.000497861 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2008.59 tests/s, 8034.37 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp4drn5ux

    Started

    .

    Finished in 0.000497861 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2008.59 tests/s, 8034.37 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyc0ghsn

    Started

    .

    Finished in 0.001278357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.25 tests/s, 3129.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyc0ghsn

    Started

    .

    Finished in 0.001278357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.25 tests/s, 3129.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpabw7l4jm

    Started

    .

    Finished in 0.000493688 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2025.57 tests/s, 8102.28 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyc0ghsn

    Started

    .

    Finished in 0.001278357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.25 tests/s, 3129.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyc0ghsn

    Started

    .

    Finished in 0.001278357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.25 tests/s, 3129.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm73bjwwt

    Started

    .

    Finished in 0.001306697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    765.29 tests/s, 3061.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm73bjwwt

    Started

    .

    Finished in 0.001306697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    765.29 tests/s, 3061.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 1
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_jy_3yh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpk_jy_3yh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.007352841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.00 tests/s, 136.00 assertions/s\n"
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm73bjwwt

    Started

    .

    Finished in 0.001306697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    765.29 tests/s, 3061.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
- exit_code: 1
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_jy_3yh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpk_jy_3yh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.007352841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.00 tests/s, 136.00 assertions/s\n"
  timestamp: 1659823853
- exit_code: 0
  program: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm73bjwwt

    Started

    .

    Finished in 0.001306697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    765.29 tests/s, 3061.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823853
