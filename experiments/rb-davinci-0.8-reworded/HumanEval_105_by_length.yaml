name: HumanEval_105_by_length
language: rb
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>>\
  \ by_length.call([])\n# []\n# If the array has any strange number ignore it:\n#\
  \ >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.select { |i| i.between?(1, 9) }.sort.reverse.map { |num|\n  \
    \  case num\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then\
    \ \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then\
    \ \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then\
    \ \"Nine\"\n    end\n  }\nend", "  arr.reject { |n| n < 1 || n > 9 }.sort.reverse.map\
    \ { |n| %w(One Two Three Four Five Six Seven Eight Nine)[n - 1] }\nend", "  arr.sort.reverse.reject{|item|\
    \ item > 9 || item < 1}.map do |number|\n    {\n      1 => \"One\",\n      2 =>\
    \ \"Two\",\n      3 => \"Three\",\n      4 => \"Four\",\n      5 => \"Five\",\n\
    \      6 => \"Six\",\n      7 => \"Seven\",\n      8 => \"Eight\",\n      9 =>\
    \ \"Nine\"\n    }[number]\n  end\nend", "  arr = arr.select { |n| (1..9).include?(n)\
    \ }.sort.reverse\n  arr.map { |n| case n\n    when 1 then \"One\"\n    when 2\
    \ then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when\
    \ 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when\
    \ 8 then \"Eight\"\n    when 9 then \"Nine\"\n  end }\nend", "  arr = arr.sort.reverse.select\
    \ { |i| (1..9).include?(i) }.map do |i|\n    case i\n    when 1 then \"One\"\n\
    \    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n\
    \    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n\
    \    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", " \
    \ return [] if arr.empty?\n  hash = {\n    1 => \"One\",\n    2 => \"Two\",\n\
    \    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  out = []\n\
    \  arr.map do |i|\n    if hash.key?(i)\n      out << hash[i]\n    end\n  end\n\
    \  out.sort!.reverse!\nend", "  arr = arr.select{|num| num.between?(1,9)}\n  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|num| num = case num\n    when 1 then \"One\"\n  \
    \  when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n\
    \    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n\
    \    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n  end}\nend", "  arr.grep(1..9).sort.reverse.map\
    \ { |num| num.to_s.capitalize }\nend", "  sorted = arr.select { |num| num.between?(1,\
    \ 9) }.sort.reverse\n  sorted.map do |num|\n    case num\n    when 1 then \"One\"\
    \n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\
    \n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\
    \n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", " \
    \ arr.sort.reverse.select { |x| x.between?(1, 9) }.map do |x|\n    case x\n  \
    \  when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n \
    \   when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr.sort.uniq.reverse.map do |num|\n    case num\n\
    \    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n\
    \    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr.map { |x| x.to_s }.reject { |x| x.to_i > 9 || x.to_i\
    \ < 1 }.sort.reverse.map do |x|\n    case x\n    when \"1\"\n      \"One\"\n \
    \   when \"2\"\n      \"Two\"\n    when \"3\"\n      \"Three\"\n    when \"4\"\
    \n      \"Four\"\n    when \"5\"\n      \"Five\"\n    when \"6\"\n      \"Six\"\
    \n    when \"7\"\n      \"Seven\"\n    when \"8\"\n      \"Eight\"\n    when \"\
    9\"\n      \"Nine\"\n    end\n  end\nend", "  arr.select{|x| x.between?(1,9)}.sort.reverse.map{|x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][x-1]}\nend", "  unique_numbers = []\n  sorted_unique_numbers = []\n\
    \  result = []\n  arr.map do |n|\n    if n > 0 && n < 10\n      unique_numbers\
    \ << n\n    end\n  end\n  unique_numbers.sort!\n  unique_numbers.reverse!\n  sorted_unique_numbers\
    \ = unique_numbers.uniq", "  sort = arr.select { |number| (1..9).include?(number)\
    \ }.sort.reverse\n  sort.map do |number|\n    case number\n    when 1 then \"\
    One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"\
    Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"\
    Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\n\
    end", "  hsh = {1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 =>\
    \ \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"}\n  arr.select{|x|\
    \ x.between?(1,9)}.sort.reverse.map{|x| hsh[x]}\nend", "  arr.select { |i| i.between?(1,\
    \ 9) }.sort.reverse.map(&method(:word_for_numb))\nend", "  numbers = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n  arr.select { |x| (1..9).include?(x) }.sort.reverse.map { |x| numbers[x -\
    \ 1] }\nend", "  arr.sort.reverse.map do |n|\n    case n\n    when 1\n      \"\
    One\"\n    when 2\n      \"Two\"\n    when 3\n      \"Three\"\n    when 4\n  \
    \    \"Four\"\n    when 5\n      \"Five\"\n    when 6\n      \"Six\"\n    when\
    \ 7\n      \"Seven\"\n    when 8\n      \"Eight\"\n    when 9\n      \"Nine\"\n\
    \    end\n  end.compact\nend", "  arr.select{|i| (1..9).include?(i)}.sort.reverse.map{|i|\
    \ numbers[i]}\nend", "  arr.select { |num| num.between?(1, 9) }.sort.reverse.map\
    \ do |num|\n    case num\n    when 1 then \"One\"\n    when 2 then \"Two\"\n \
    \   when 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n\
    \    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\
    \n    when 9 then \"Nine\"\n    end\n  end\nend", "  return [] if arr.empty?\n\
    \  one_to_nine = (1..9).to_a\n  arr.select { |x| one_to_nine.include?(x) }.sort.reverse.map\
    \ { |x| get_digit_name(x) }\nend", "  ONE_TO_NINE = %w(One Two Three Four Five\
    \ Six Seven Eight Nine)\n  arr.select { |x| x.between?(1, 9) }.sort.reverse.map\
    \ { |x| ONE_TO_NINE[x - 1] }\nend", "  arr = arr.select { |x| x.between?(1, 9)\
    \ }.sort.reverse\n  arr.map { |x| number_to_name(x) }\nend", "  values = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n  arr.select{|x| x >= 1 && x <= 9}.sort.reverse.map{|x| values[x-1]}\nend",
  "  arr.select{|v| v.between?(1, 9)}.sort.reverse.map{|v| {1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\"}[v]}\nend", "  mapper = {1 => \"One\", 2 => \"\
    Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\"\
    , 8 => \"Eight\", 9 => \"Nine\"}\n  numbers = arr.sort.select { |number| number.between?(1,\
    \ 9) }.reverse\n  numbers.map { |number| mapper[number] }\nend", "  arr.select\
    \ { |num| (1..9).cover?(num) }.sort.reverse.map { |num| %w[One Two Three Four\
    \ Five Six Seven Eight Nine][num - 1] }\nend", "  arr.delete_if { |item| item\
    \ < 1 || item > 9 }.sort.reverse.map { |i| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1] }\nend", "  return\
    \ [] if arr.empty?\n  arr.select{|num| (1..9).include?(num)}.sort.reverse.map{|num|\
    \ %w(One Two Three Four Five Six Seven Eight Nine)[num-1]}\nend", "  numbers =\
    \ %w(One Two Three Four Five Six Seven Eight Nine)\n  arr.select { |element| element.between?(1,\
    \ 9) }.sort.reverse.map { |element| numbers[element - 1] }\nend", "  n = arr.select\
    \ { |el| el > 0 && el < 10 }.sort.reverse\n  n.map { |el| numbers[el - 1] }\n\
    end", "  arr = arr.select { |x| x >= 1 && x <= 9 }.sort.reverse\n  result = []\n\
    \  arr.each do |x|\n    case x\n    when 1\n      result << \"One\"\n    when\
    \ 2\n      result << \"Two\"\n    when 3\n      result << \"Three\"\n    when\
    \ 4\n      result << \"Four\"\n    when 5\n      result << \"Five\"\n    when\
    \ 6\n      result << \"Six\"\n    when 7\n      result << \"Seven\"\n    when\
    \ 8\n      result << \"Eight\"\n    when 9\n      result << \"Nine\"\n    end\n\
    \  end\n  result\nend", "  arr.select { |i| (1..9).include?(i) }.sort.reverse.map\
    \ do |i|\n    case i\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when\
    \ 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when\
    \ 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when\
    \ 9 then \"Nine\"\n    end\n  end\nend", "  arr.select { |num| (1..9).include?(num)\
    \ }.sort.reverse.map { |num| num.to_s }\nend", "  arr.select { |item| item > 0\
    \ && item < 10 }.sort.reverse.map { |item| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][item - 1] }\nend", "  numbers\
    \ = arr.select { |n| n.between?(1, 9) }.sort.reverse\n  numbers.map { |n| number_to_word(n)\
    \ }\nend", "  arr = arr.select { |i| i >= 1 && i <= 9 }.sort.reverse\n  arr.map\
    \ { |i| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][i - 1] }\nend", '  return [] if arr.length.zero?', "  res\
    \ =  arr.select { |e| (1..9).include?(e) }.sort.reverse\n  res.map { |e| conv_to_word(e)\
    \ }\nend", "  result = arr.select{|i| i >= 1 && i <= 9}\n  result.sort.reverse.map{|i|\
    \ i.to_words}\nend", "  arr.select { |item| (1..9).include?(item) }.sort.reverse.map\
    \ do |item|\n    case item\n    when 1 then \"One\"\n    when 2 then \"Two\"\n\
    \    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\
    \n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\
    \n    when 9 then \"Nine\"\n    end\n  end\nend", "  arr.select{|x| x.between?(1,9)}.sort.reverse.map{|x|\
    \ \"One Two Three Four Five Six Seven Eight Nine\".split(' ')[x-1]}\nend", " \
    \ digits = arr.select { |v| v > 0 && v < 10 }.sort.reverse\n  digits.map { |v|\
    \ ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'][v -\
    \ 1].capitalize }\nend", "  arr.select{|x| x.between?(1,9)}.sort.reverse.map{|x|\
    \ x.to_s}.map{|x| x.capitalize}\nend", "  digit_names = %w(One Two Three Four\
    \ Five Six Seven Eight Nine)\n  filtered_arr = arr.select { |num| num.between?(1,\
    \ 9) }\n  sorted_arr = filtered_arr.sort.reverse\n  sorted_arr.map { |num| digit_names[num\
    \ - 1] }\nend", "  return [] if arr.empty?\n  by_length_helper(arr.select { |x|\
    \ x.between?(1, 9) }.sort.reverse)\nend", "  new_arr = []\n  arr.each do |x|\n\
    \    if (1..9).include?(x)\n      new_arr << x\n    end\n  end\n  new_arr.sort!.reverse!\n\
    \  new_arr.map do |num|\n    if num == 1\n      \"One\"\n    elsif num == 2\n\
    \      \"Two\"\n    elsif num == 3\n      \"Three\"\n    elsif num == 4\n    \
    \  \"Four\"\n    elsif num == 5\n      \"Five\"\n    elsif num == 6\n      \"\
    Six\"\n    elsif num == 7\n      \"Seven\"\n    elsif num == 8\n      \"Eight\"\
    \n    elsif num == 9\n      \"Nine\"\n    end\n  end\nend", "  arr.select { |i|\
    \ (1..9).include?(i) }.sort.reverse.map do |i|\n    case i\n    when 1 then \"\
    One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"\
    Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"\
    Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\n\
    end", "  return [] if arr.empty?\n  sorted = arr.sort\n  names = []\n  sorted.each\
    \ do |i|\n    names << name_for(i)\n  end\n  names.compact.reverse\nend", "  #\
    \ TODO: implement the method\nend", "  numbers = arr.select{|number| number.between?(1,\
    \ 9)}\n  numbers.reverse.map {|n| n.to_s}.map{|string| string.gsub(/1/, \"One\"\
    ).gsub(/2/, \"Two\").gsub(/3/, \"Three\").gsub(/4/, \"Four\").gsub(/5/, \"Five\"\
    ).gsub(/6/, \"Six\").gsub(/7/, \"Seven\").gsub(/8/, \"Eight\").gsub(/9/, \"Nine\"\
    )}\nend", "  a = []\n  arr.each do |x|\n    if x >= 1 && x <= 9\n      a << x\n\
    \    end\n  end\n  a.sort!\n  a.reverse!\n  b = []\n  a.each do |x|\n    case\
    \ x\n    when 1\n      b << \"One\"\n    when 2\n      b << \"Two\"\n    when\
    \ 3\n      b << \"Three\"\n    when 4\n      b << \"Four\"\n    when 5\n     \
    \ b << \"Five\"\n    when 6\n      b << \"Six\"\n    when 7\n      b << \"Seven\"\
    \n    when 8\n      b << \"Eight\"\n    when 9\n      b << \"Nine\"\n    end\n\
    \  end\n  b\nend", "  puts 'Enter array of integers between 1 and 9 inclusive.\
    \ Press enter to end.'\n  array = []\n  str = gets.chomp\n  str.chars.each do\
    \ |char|\n    array << char.to_i if char.to_i.between?(1, 9)\n  end\n  array.sort!\n\
    \  array.reverse!\n  array.map! do |number|\n    case number\n    when 1\n   \
    \   'One'\n    when 2\n      'Two'\n    when 3\n      'Three'\n    when 4\n  \
    \    'Four'\n    when 5\n      'Five'\n    when 6\n      'Six'\n    when 7\n \
    \     'Seven'\n    when 8\n      'Eight'\n    when 9\n      'Nine'\n    end\n\
    \  end\n  array\nend", "  numbers = arr.select { |number| number > 0 && number\
    \ < 10 }\n  numbers.sort.reverse.map do |number|\n    case number\n    when 1\
    \ then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4\
    \ then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7\
    \ then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n\
    \  end\nend", "  return [] if arr.empty?\n  arr.sort! { |a, b| a <=> b }\n  arr.select!\
    \ { |e| e.between?(1, 9) }\n  arr.map! { |e| e.to_s }\n  arr.reverse!\n  arr.map!\
    \ do |e|\n    case e\n    when \"1\"\n      \"One\"\n    when \"2\"\n      \"\
    Two\"\n    when \"3\"\n      \"Three\"\n    when \"4\"\n      \"Four\"\n    when\
    \ \"5\"\n      \"Five\"\n    when \"6\"\n      \"Six\"\n    when \"7\"\n     \
    \ \"Seven\"\n    when \"8\"\n      \"Eight\"\n    when \"9\"\n      \"Nine\"\n\
    \    end\n  end\n  arr\nend", "    c = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = arr.select {|x|\
    \ x >= 1 && x <= 9}.sort.reverse\n    arr.map! {|x| c[x-1]}\nend", "  arr.select\
    \ { |el| (1..9).include?(el) }.sort.reverse.map { |el| num_to_word(el) }\nend",
  "  sorted = arr.select { |i| (1..9).include?(i) }.sort.reverse\n  sorted.map do\
    \ |i|\n    case i\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when\
    \ 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when\
    \ 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when\
    \ 9 then \"Nine\"\n    end\n  end\nend", "  temp = arr.select { |x| x.between?(1,\
    \ 9) }.sort.reverse\n  output = []\n  temp.each do |value|\n    output << case\
    \ value\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\n    when 3\n  \
    \    \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"Five\"\n    when\
    \ 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n      \"Eight\"\n\
    \    when 9\n      \"Nine\"\n    end\n  end\n  output\nend", "  arr.sort.reverse.map\
    \ do |n|\n    case n\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when\
    \ 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when\
    \ 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when\
    \ 9 then \"Nine\"\n    end\n  end.compact\nend", "  arr = arr.select { |item|\
    \ item.between?(1, 9) }.sort.reverse\n  arr.map { |item| ['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][item - 1] }\nend", "  raise\
    \ 'Not implemented'\nend", "  h = {1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\"}\n  arr.sort_by {|x| h[x]}.reverse\nend", "  sort_replace(sort_numbers(arr))\n\
    end", "  arr.select{|num| num.between?(1,9)}.sort.reverse.map{|num| \"Zero\" if\
    \ num == 0, \"One\" if num == 1, \"Two\" if num == 2, \"Three\" if num == 3, \"\
    Four\" if num == 4, \"Five\" if num == 5, \"Six\" if num == 6, \"Seven\" if num\
    \ == 7, \"Eight\" if num == 8, \"Nine\" if num == 9}\nend", "  res = []\n  arr.each\
    \ { |item| res << item if item.between?(1, 9) }\n  res.sort!.reverse!\n  res.map\
    \ { |item| ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][item\
    \ - 1] }\nend", "  n = (1..9).to_a\n  arr = arr.select { |a| n.include?(a) }.sort.reverse\n\
    \  arr.map { |a| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][a - 1] }\nend", "  arr.select { |num| (1..9).include?(num)\
    \ }.sort!.reverse!.map { |num| num = num_to_word(num) }\nend", "  if arr.empty?\n\
    \    return []\n  end\n  # select only elements from 1 to 9\n  arr = arr.select{|x|\
    \ (1..9).include?(x)}\n  arr.sort!\n  arr.reverse!\n  out = []\n  arr.each do\
    \ |x|\n    case x\n    when 1\n      out << \"One\"\n    when 2\n      out <<\
    \ \"Two\"\n    when 3\n      out << \"Three\"\n    when 4\n      out << \"Four\"\
    \n    when 5\n      out << \"Five\"\n    when 6\n      out << \"Six\"\n    when\
    \ 7\n      out << \"Seven\"\n    when 8\n      out << \"Eight\"\n    when 9\n\
    \      out << \"Nine\"\n    end\n  end\n  return out\nend", "  return [] if arr.empty?\n\
    \  name_of_numbers = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\"\
    ,\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\"\
    ,\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  arr.select { |x| x > 0 && x\
    \ < 10 }.sort.reverse.map do |number|\n    name_of_numbers[number]\n  end\nend",
  "  arr.select { |i| (1..9).include?(i) }.sort.reverse.map { |i| %w(One Two Three\
    \ Four Five Six Seven Eight Nine)[i - 1] }\nend", "  numbers = (1..9).to_a\n \
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n  numbers_arr = arr.select { |num| numbers.include?(num)\
    \ }.sort.reverse\n  numbers_arr.map { |num| names[num - 1] }\nend", "  sorted\
    \ = arr.sort\n  mapped = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"\
    Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 =>\
    \ \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  sorted.map { |num|\
    \ mapped[num] }.reverse\nend", "  return [] if arr.empty?\n  new_arr = []\n  arr.each\
    \ do |number|\n    next unless (1..9).include?(number)\n    new_arr << number\n\
    \  end\n  new_arr.sort!.reverse!\n  new_arr.map! do |number|\n    case number\n\
    \    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n\
    \    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\n  new_arr\nend", "  return [] if arr.empty?\n  arr.sort.map\
    \ do |x|\n    case x\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when\
    \ 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when\
    \ 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when\
    \ 9 then \"Nine\"\n    end\n  end.reverse\nend", "  arr.select { |i| i.between?(1,\
    \ 9) }.sort.reverse.map { |i| i.to_s }\nend", "  new_arr = arr.keep_if { |x| x.between?(1,\
    \ 9) }.sort!.reverse!\n  names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  new_arr.map { |x| names[x - 1] }\n\
    end", "  valid_numbers = arr.select { |num| (1..9).include?(num) }\n  valid_numbers.sort!.reverse!\n\
    \  valid_numbers.map! do |num|\n    case num\n    when 1 then \"One\"\n    when\
    \ 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when\
    \ 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when\
    \ 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", "  digits\
    \ = arr.select{|e| e > 0 && e < 10}\n  digits.sort!.reverse!\n  digits.map!{|e|\
    \ to_text(e)}\nend", "  return [] if arr.empty?\n  arr.sort.reverse.map { |e|\
    \ e.to_s.gsub(\"1\", \"One\").gsub(\"2\", \"Two\").gsub(\"3\", \"Three\").gsub(\"\
    4\", \"Four\").gsub(\"5\", \"Five\").gsub(\"6\", \"Six\").gsub(\"7\", \"Seven\"\
    ).gsub(\"8\", \"Eight\").gsub(\"9\", \"Nine\") }\nend", "  names = ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  arr.select { |e|\
    \ (1..9).include?(e) }.sort.reverse.map { |e| names[e - 1] }\nend", "  numbers\
    \ = %w(One Two Three Four Five Six Seven Eight Nine)\n  arr.select { |number|\
    \ number.between?(1, 9) }.sort.reverse.map { |number| numbers[number - 1] }\n\
    end", "  arr = arr.select { |n| n >= 1 && n <= 9 }.sort.reverse\n  arr.map { |n|\
    \ num2name(n) }\nend", "  # TODO: your solution here\nend", "  arr = arr.select\
    \ { |a| a.between?(1, 9) }.sort!.reverse!\n  arr.map! { |a| a.to_s.gsub(\"1\"\
    , \"One\").gsub(\"2\", \"Two\").gsub(\"3\", \"Three\").gsub(\"4\", \"Four\").gsub(\"\
    5\", \"Five\").gsub(\"6\", \"Six\").gsub(\"7\", \"Seven\").gsub(\"8\", \"Eight\"\
    ).gsub(\"9\", \"Nine\") }\nend", "  if arr.empty?\n    []\n  else\n    arr.sort.reverse.map\
    \ do |n|\n      case n\n      when 1\n        \"One\"\n      when 2\n        \"\
    Two\"\n      when 3\n        \"Three\"\n      when 4\n        \"Four\"\n     \
    \ when 5\n        \"Five\"\n      when 6\n        \"Six\"\n      when 7\n    \
    \    \"Seven\"\n      when 8\n        \"Eight\"\n      when 9\n        \"Nine\"\
    \n      end\n    end.compact\n  end\nend", "  res = []\n  h_code = {\"One\" =>\
    \ 1, \"Two\" => 2, \"Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6,\
    \ \"Seven\" => 7, \"Eight\" => 8, \"Nine\" => 9}\n  res = arr.map {|x| h_code.key(x)}.sort.reverse\
    \ if arr.all? {|x| h_code.value?(x)}\n  res.is_a?(Array) ? res : []\nend", " \
    \ arr.select { |a| a.between?(1, 9) }.sort.reverse.map { |a| NUMBERS[a] }\nend",
  "  return [] if arr.empty?\n  numbers = [\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  sorted = arr.reject {\
    \ |number| number < 1 || number > 9 }.sort\n  sorted.map { |number| numbers[number\
    \ - 1] }.reverse\nend", "  arr.select{|num| 1 <= num && num <= 9}.sort.reverse.map{|num|\
    \ number_name(num)}\nend", "  arr.sort.reverse.map do |e|\n    case e\n    when\
    \ 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when\
    \ 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when\
    \ 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n\
    \  end.compact\nend", "  arr = arr.select { |num| num > 0 && num < 10 }.sort.reverse\n\
    \  arr.map do |num|\n    case num\n    when 1 then \"One\"\n    when 2 then \"\
    Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"\
    Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"\
    Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", "  translated_digits\
    \ = []\n  return translated_digits if arr.empty?\n  arr.sort!.reverse!\n  arr.each\
    \ do |n|\n    if n > 0 && n < 10\n      translated_digits << number_to_word(n)\n\
    \    end\n  end\n  translated_digits\nend", "  arr.sort_by { |num| num }.reverse.map\
    \ do |num|\n    case num\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\
    \n    when 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"\
    Five\"\n    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n \
    \     \"Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend", "  arr_filtered\
    \ = arr.select { |x| (1..9).include?(x) }\n  arr_filtered.sort.reverse.map { |x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][x - 1] }\nend", "  arr.select{|i| i.between?(1,9)}.sort.reverse.map{|i|\
    \ i.to_s}\nend", "  h = {1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\"\
    , 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"}\n\
    \  numbers = arr.select {|number| number > 0 && number < 10}.sort.reverse\n  numbers.map\
    \ {|number| h[number]}\nend", "  arr.select{|e| e.between?(1, 9)}.sort.reverse.map{|e|\
    \ e.to_s}\nend", "  array = arr.reject { |n| n > 9 || n < 1 }.sort!.reverse!\n\
    \  array.map! { |n| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][n - 1] }\nend", "  valid_numbers = %w(One Two\
    \ Three Four Five Six Seven Eight Nine)\n  sorted_array = arr.sort.reverse.select\
    \ { |el| el.between?(1, 9) }\n  sorted_array.map { |el| valid_numbers[el - 1]\
    \ }\nend", "  map = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\"\
    ,\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\"\
    ,\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  arr.map { |x| map[x] }.sort.reverse\n\
    end", "  arr.select { |item| item > 0 && item < 10 }.sort.reverse.map { |item|\
    \ \"One Two Three Four Five Six Seven Eight Nine\".split[item - 1] }\nend", " \
    \   #  get only 1..9\n    arr = arr.select{|x| x.between?(1,9)}\n    # sort\n\
    \    arr = arr.sort\n    # reverse\n    arr = arr.reverse\n    # replace each\
    \ digit with its name\n    arr = arr.map{|x| [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1]}\n    return arr\n\
    end", "  arr.select{|i| i.between?(1,9)}.sort.reverse.map{|i| to_name[i]}\nend",
  "  # get numbers 1 - 9\n  # sort the numbers\n  # reverse the numbers\n  # map and\
    \ replace numbers with words\n  # return the words\n  one_to_nine = []\n  arr.each\
    \ do |number|\n    if number.between?(1, 9)\n      one_to_nine << number\n   \
    \ end\n  end\n  one_to_nine.sort.reverse.map do |number|\n    case number\n  \
    \  when 1\n      \"One\"\n    when 2\n      \"Two\"\n    when 3\n      \"Three\"\
    \n    when 4\n      \"Four\"\n    when 5\n      \"Five\"\n    when 6\n      \"\
    Six\"\n    when 7\n      \"Seven\"\n    when 8\n      \"Eight\"\n    when 9\n\
    \      \"Nine\"\n    end\n  end\nend", "  num_to_str = {\n    1 => \"One\",\n\
    \    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\"\
    ,\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\
    \n  }\n  arr.sort.select{|e| num_to_str.keys.include?(e)}.reverse.map {|e| num_to_str[e]}\n\
    end", "  arr = arr.select { |x| (1..9).include?(x) }.sort.reverse\n  arr.map {\
    \ |x| %w(One Two Three Four Five Six Seven Eight Nine)[x - 1] }\nend", "  arr.select{|n|\
    \ n.between?(1, 9)}.sort.reverse.map{|n| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n-1]}\nend", "  if arr.empty?\n\
    \    []\n  else\n    arr.delete_if { |x| x < 1 || x > 9 }.sort.reverse.map { |x|\
    \ \"", "  return [] if arr.empty?\n  result = []\n  arr.each do |i|\n    result\
    \ << i if i >= 1 && i <= 9\n  end\n  result.sort!.reverse!\n  result.map! do |i|\n\
    \    case i\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\n    when 3\n\
    \      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"Five\"\n   \
    \ when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n      \"Eight\"\
    \n    when 9\n      \"Nine\"\n    end\n  end\n  result\nend", "  arr = arr.select\
    \ { |i| i > 0 && i < 10 }.sort.reverse.map do |i|\n    case i\n    when 1 then\
    \ \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then\
    \ \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then\
    \ \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\n\
    end", "  h = Hash.new(\"N/A\")\n  h[1] = \"One\"\n  h[2] = \"Two\"\n  h[3] = \"\
    Three\"\n  h[4] = \"Four\"\n  h[5] = \"Five\"\n  h[6] = \"Six\"\n  h[7] = \"Seven\"\
    \n  h[8] = \"Eight\"\n  h[9] = \"Nine\"\n  h[0] = \"Zero\"\n  h[-1] = \"N/A\"\n\
    \  arr.select{|i| i.is_a?(Integer) && (1..9).include?(i) }.sort.reverse.map{|i|\
    \ h[i]}\nend", "  arr.select { |num| (1..9).cover?(num) }.sort.reverse.map { |n|\
    \ NUMBER_NAMES[n] }\nend", "  arr.reject{|x| x > 9 or x < 1}.sort.reverse.map{|x|\
    \ nums_to_name(x)}\nend", "  # return [] if arr.empty?\n  # result = []\n  # str_nums\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n  # arr.select{|num| num >= 1 && num <= 9}.sort.reverse.each do |num|\n\
    \  #   result << str_nums[num - 1]\n  # end\n  # result\n  arr.select{|num| num\
    \ >= 1 && num <= 9}.sort.reverse.map{|num| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1]}\nend", "  arr.select{|i|\
    \ i.between?(1,9)}.sort.reverse.map{|i| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i-1]}\nend", "  arr.sort.reverse.map\
    \ do |num|\n    case num\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\
    \n    when 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"\
    Five\"\n    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n \
    \     \"Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend", "  map = {\n\
    \    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"Four\"\
    ,\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 => \"Eight\"\
    ,\n    9 => \"Nine\"\n  }\n  nums = arr.select { |num| (1..9).include?(num) }.sort.reverse\n\
    \  nums.map { |num| map[num] }\nend", "  # your code goes here\nend", "  hash\
    \ = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"\
    Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 =>\
    \ \"Eight\",\n    9 => \"Nine\"\n  }\n  hash_values = hash.values\n  arr.each\
    \ do |element|\n    if !(hash_values.include?(element))\n      arr.delete(element)\n\
    \    end\n  end\n  arr.sort.reverse.map { |element| hash[element] }\nend", " \
    \ return [] if arr.empty?\n  a = (1..9).to_a\n  new_arr = arr.select { |x| a.include?(x)\
    \ }.sort.reverse.map do |x|\n    case x\n    when 1\n      \"One\"\n    when 2\n\
    \      \"Two\"\n    when 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when\
    \ 5\n      \"Five\"\n    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n\
    \    when 8\n      \"Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\n  new_arr\n\
    end", "  words = { 1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\",\
    \ 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\" }\n\
    \  res = []\n  arr.each do |num|\n    if words.key?(num)\n      res << words[num]\n\
    \    end\n  end\n  res.sort.reverse\nend", "  arr = arr.select { |i| (1..9).include?(i)\
    \ }.sort.reverse\n  arr.map do |i|\n    case i\n    when 1 then \"One\"\n    when\
    \ 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when\
    \ 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when\
    \ 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", "  arr.select\
    \ { |n| n.between?(1, 9) }.sort.reverse.map { |n| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1] }\nend",
  "  arr.delete_if { |num| num.between?(1, 9) == false }.sort.reverse.map do |num|\n\
    \    case num\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\n    when\
    \ 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"Five\"\n\
    \    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n      \"\
    Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend", "  numbers = arr.select\
    \ { |i| i.between?(1, 9) }.sort.reverse\n  numbers.map { |n| %w(One Two Three\
    \ Four Five Six Seven Eight Nine)[n - 1] }\nend", "  return [] if arr.empty?\n\
    \  array = []\n  array = arr.select { |e| [1, 2, 3, 4, 5, 6, 7, 8, 9].include?(e)\
    \ }\n  array.sort!.reverse!\n  array.map { |e| NUMBER_WORDS[e] }\nend", "  converted_arr\
    \ = []\n  words = %w(One Two Three Four Five Six Seven Eight Nine)\n  arr.sort.reverse.select\
    \ { |n| n >= 1 && n <= 9 }.each do |n|\n    converted_arr << words[n - 1]\n  end\n\
    \  converted_arr\nend", "  names = %w(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  arr.select { |x| (1..9).cover?(x) }.sort.reverse.map { |x| names[x\
    \ - 1] }\nend", "  sorted = arr.select { |x| x.between?(1, 9) }.sort.reverse\n\
    \  translated = sorted.map { |x| \"Nine,Eight,Seven,Six,Five,Four,Three,Two,One\"\
    .split(',')[x - 1] }\n  return translated\nend", "  ones = %w(One Two Three Four\
    \ Five Six Seven Eight Nine)\n  arr.select { |i| i >= 1 && i <= 9 }.sort.reverse.map\
    \ { |i| ones[i - 1] }\nend", "  arr.map do |number|\n    case number\n    when\
    \ 1\n      \"One\"\n    when 2\n      \"Two\"\n    when 3\n      \"Three\"\n \
    \   when 4\n      \"Four\"\n    when 5\n      \"Five\"\n    when 6\n      \"Six\"\
    \n    when 7\n      \"Seven\"\n    when 8\n      \"Eight\"\n    when 9\n     \
    \ \"Nine\"\n    end\n  end.compact.sort.reverse\nend", "  arr.select { |number|\
    \ number.between?(1, 9) }.sort.reverse.map do |number|\n    case number\n    when\
    \ 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when\
    \ 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when\
    \ 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n\
    \  end\nend", "  # return [] if arr.empty?\n  # arr.delete_if { |num| num <= 0\
    \ || num > 9 }.sort.reverse.map { |num| ones_to_nine(num) }\n  arr.delete_if {\
    \ |num| num <= 0 || num > 9 }.sort.reverse.map { |num| ONES_TO_NINE[num] }\nend",
  "  arr.select{|e| e.between?(1, 9)}.sort.reverse.map{|e| \n  {1 => \"One\", 2 =>\
    \ \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"\
    Seven\", 8 => \"Eight\", 9 => \"Nine\"}[e]}\nend", "  # Code here\nend", "  arr.select\
    \ { |x| (1..9).include?(x) }.sort.reverse.map { |x| x.to_s }\nend", "  arr.sort!.reverse!\n\
    \  arr.map do |num|\n    case num\n    when 1\n      \"One\"\n    when 2\n   \
    \   \"Two\"\n    when 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when\
    \ 5\n      \"Five\"\n    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n\
    \    when 8\n      \"Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend",
  "  arr = arr.select { |x| (1..9).cover?(x) }.sort.reverse.map { |x| NumberToString[x]\
    \ }\nend\nputs by_length([2, 1, 1, 4, 5, 8, 2, 3])", "  return [] if arr.empty?\n\
    \  arr = arr.map { |e| e > 0 && e < 10 ? e : nil }.compact.sort\n  arr.reverse!\n\
    \  arr.map { |e| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][e - 1] }\nend", "  one_to_nine = (1..9).to_a\n \
    \ arr = arr.sort.select{|num| one_to_nine.include?(num)}.reverse\n  arr.map{|num|\
    \ num_name(num)}\nend", "  order = [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  arr.select{|x| x.between?(1,9)}.sort.reverse.map\
    \ {|x| order[x-1]}\nend", "  arr.select { |a| a.between?(1, 9) }.sort.reverse.map(&method(:integer_to_s))\n\
    end", "  numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"]\n  result = []\n  numbers.each do |number|\n\
    \    arr.each do |num|\n      if num == numbers.index(number) + 1\n        result\
    \ << number\n      end\n    end\n  end\n  result.reverse\nend", "  # check_arr\
    \ = []\n  # check_arr = arr.map { |x| x.between?(1, 9) ? x : nil }.compact\n \
    \ # check_arr.sort.reverse.map { |x| x == 1 ? \"One\" : x == 2 ? \"Two\" : x ==\
    \ 3 ? \"Three\" : x == 4 ? \"Four\" : x == 5 ? \"Five\" : x == 6 ? \"Six\" : x\
    \ == 7 ? \"Seven\" : x == 8 ? \"Eight\" : x == 9 ? \"Nine\" : \"Error\" }\n  #\n\
    \  #  OR\n  #\n  # check_arr = []\n  # check_arr = arr.map { |x| x.between?(1,\
    \ 9) ? x : nil }.compact\n  # check_arr.sort.reverse.map { |x| %w(One Two Three\
    \ Four Five Six Seven Eight Nine)[x - 1] }\n  #\n  #  OR\n  #\n  # check_arr =\
    \ []\n  # check_arr = arr.map { |x| x.between?(1, 9) ? x : nil }.compact\n  #\
    \ check_arr.sort.reverse.map { |x| %w(One Two Three Four Five Six Seven Eight\
    \ Nine)[x.to_i - 1] }\n  #\n  #  OR\n  #\n  # check_arr = []\n  # check_arr =\
    \ arr.map { |x| x.between?(1, 9) ? x : nil }.compact\n  # check_arr.sort.reverse.map\
    \ { |x| %w(One Two Three Four Five Six Seven Eight Nine)[x - 1] }\n  #\n  #  OR\n\
    \  #\n  # check_arr = []\n  # check_arr = arr.map { |x| x.between?(1, 9) ? x :\
    \ nil }.compact\n  # check_arr.sort.reverse.map { |x| %w(One Two Three Four Five\
    \ Six Seven Eight Nine)[x.to_i - 1] }\n  #\n  #  OR\n  #\n  # check_arr = []\n\
    \  # check_arr = arr.map { |x| x.between?", "  arr.sort.reverse.map do |num|\n\
    \    case num\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\n    when\
    \ 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"Five\"\n\
    \    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n      \"\
    Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend", "  arr = arr.select\
    \ { |e| e >= 1 && e <= 9 }.sort!.reverse!\n  arr.map! { |num|\n    case num\n\
    \    when 1\n      'One'\n    when 2\n      'Two'\n    when 3\n      'Three'\n\
    \    when 4\n      'Four'\n    when 5\n      'Five'\n    when 6\n      'Six'\n\
    \    when 7\n      'Seven'\n    when 8\n      'Eight'\n    when 9\n      'Nine'\n\
    \    end\n  }\nend", "  raise \"Implement me\"\nend", "  return [] if arr.empty?\n\
    \  digits = (1..9).to_a\n  arr.select { |el| digits.include?(el) }.sort.reverse.map\
    \ do |el|\n    case el\n    when 1 then \"One\"\n    when 2 then \"Two\"\n   \
    \ when 3 then \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n\
    \    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\
    \n    when 9 then \"Nine\"\n    end\n  end\nend", "  # your code here\nend", " \
    \ arr = arr.select { |n| n.between?(1, 9) }.sort.reverse\n  replace_digits(arr)\n\
    end", "  arr.select{|a| (1..9).include?(a)}.sort.reverse.map{|i| [i, \"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][i]}\nend", "  arr = arr.sort.reverse\n  arr.each do |i|\n    if i == 1\n   \
    \   arr[arr.index(i)] = \"One\"\n    elsif i == 2\n      arr[arr.index(i)] = \"\
    Two\"\n    elsif i == 3\n      arr[arr.index(i)] = \"Three\"\n    elsif i == 4\n\
    \      arr[arr.index(i)] = \"Four\"\n    elsif i == 5\n      arr[arr.index(i)]\
    \ = \"Five\"\n    elsif i == 6\n      arr[arr.index(i)] = \"Six\"\n    elsif i\
    \ == 7\n      arr[arr.index(i)] = \"Seven\"\n    elsif i == 8\n      arr[arr.index(i)]\
    \ = \"Eight\"\n    elsif i == 9\n      arr[arr.index(i)] = \"Nine\"\n    else\n\
    \      arr.delete(i)\n    end\n  end\n  arr\nend", "  # your code goes here\n\
    end", "  result = []\n  numbers = {\n    1 => \"One\",\n    2 => \"Two\",\n  \
    \  3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n\
    \    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  arr.select{|num|\
    \ num.between?(1, 9)}.sort.reverse.each do |num|\n    result << numbers[num]\n\
    \  end\n  result\nend", "    # Your code here\n    if arr.empty?\n        arr\n\
    \    else\n        arr.select{|a| a >= 1 && a <= 9}.sort.reverse.map{|x| \"zero\"\
    \ if x == 0; \"one\" if x == 1; \"two\" if x == 2; \"three\" if x == 3; \"four\"\
    \ if x == 4; \"five\" if x == 5; \"six\" if x == 6; \"seven\" if x == 7; \"eight\"\
    \ if x == 8; \"nine\" if x == 9}.map{|x| x.capitalize}\n    end\nend", "  arr.delete_if\
    \ { |a| a < 1 || a > 9 }.sort.reverse.map do |n|\n    case n\n    when 1 then\
    \ \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then\
    \ \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then\
    \ \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\n\
    end", "  (1..9).each_with_object([]) do |n, r|\n    arr.each { |a| r << a if a\
    \ == n }\n  end.reverse.map { |n| %w[One Two Three Four Five Six Seven Eight Nine][n\
    \ - 1] }\nend", "  array = []\n  for i in 0..arr.length-1\n    if arr[i] > 0 &&\
    \ arr[i] < 10\n      array.push(arr[i])\n    end\n  end\n  array.sort.reverse\n\
    \  for i in 0..array.length-1\n    case array[i]\n    when 1\n      array[i] =\
    \ \"One\"\n    when 2\n      array[i] = \"Two\"\n    when 3\n      array[i] =\
    \ \"Three\"\n    when 4\n      array[i] = \"Four\"\n    when 5\n      array[i]\
    \ = \"Five\"\n    when 6\n      array[i] = \"Six\"\n    when 7\n      array[i]\
    \ = \"Seven\"\n    when 8\n      array[i] = \"Eight\"\n    when 9\n      array[i]\
    \ = \"Nine\"\n    end\n  end\n  array\nend", "  return [] if arr.empty?\n  sorted\
    \ = arr.sort\n  # sorted.select! { |el| el.between?(1, 9) }\n  # sorted.reverse!\n\
    \  sorted = sorted.map do |number|\n    case number\n    when 1\n      \"One\"\
    \n    when 2\n      \"Two\"\n    when 3\n      \"Three\"\n    when 4\n      \"\
    Four\"\n    when 5\n      \"Five\"\n    when 6\n      \"Six\"\n    when 7\n  \
    \    \"Seven\"\n    when 8\n      \"Eight\"\n    when 9\n      \"Nine\"\n    end\n\
    \  end\n  sorted.compact\nend", "  arr.select { |e| (1..9).include?(e) }.sort.reverse.map\
    \ { |e| DIGITS[e] }\nend", "  # return arr.sort.reverse.map do |i|\n  #   case\
    \ i\n  #   when 1\n  #     \"One\"\n  #   when 2\n  #     \"Two\"\n  #   when\
    \ 3\n  #     \"Three\"\n  #   when 4\n  #     \"Four\"\n  #   when 5\n  #    \
    \ \"Five\"\n  #   when 6\n  #     \"Six\"\n  #   when 7\n  #     \"Seven\"\n \
    \ #   when 8\n  #     \"Eight\"\n  #   when 9\n  #     \"Nine\"\n  #   end\n \
    \ # end\n  translate = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\"\
    ,\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\"\
    ,\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  arr.sort.reverse.map { |i| translate[i]\
    \ }.compact\nend", "  arr.reject { |number| number < 1 || number > 9 }.sort.reverse.map\
    \ { |number| translate(number) }\nend", "  return [] if arr.empty?\n  arr.select\
    \ { |num| num.between?(1, 9) }.sort.reverse.map { |num| %w(One Two Three Four\
    \ Five Six Seven Eight Nine)[num - 1] }\nend", "  arr = arr.select { |n| (1..9).include?(n)\
    \ }.sort.reverse\n  %w(One Two Three Four Five Six Seven Eight Nine)[arr].compact\n\
    end", "  if arr.empty?\n    return []\n  end\n  nums = (1..9).to_a\n  result =\
    \ []\n  arr.each do |num|\n    if nums.include?(num)\n      result << num\n  \
    \  end\n  end\n  result.sort!\n  result.reverse!\n  result.map! do |num|\n   \
    \ num = case num\n          when 1\n            \"One\"\n          when 2\n  \
    \          \"Two\"\n          when 3\n            \"Three\"\n          when 4\n\
    \            \"Four\"\n          when 5\n            \"Five\"\n          when\
    \ 6\n            \"Six\"\n          when 7\n            \"Seven\"\n          when\
    \ 8\n            \"Eight\"\n          when 9\n            \"Nine\"\n         \
    \ end\n  end\n  result\nend", "  arr.select{|x| (1..9).include?(x)}.sort.reverse.map\
    \ do |x|\n    case x\n    when 1\n      \"One\"\n    when 2\n      \"Two\"\n \
    \   when 3\n      \"Three\"\n    when 4\n      \"Four\"\n    when 5\n      \"\
    Five\"\n    when 6\n      \"Six\"\n    when 7\n      \"Seven\"\n    when 8\n \
    \     \"Eight\"\n    when 9\n      \"Nine\"\n    end\n  end\nend", "  new_arr\
    \ = []\n  arr.select { |x| (1..9).include?(x) }.sort.reverse.each do |x|\n   \
    \ case x\n    when 1\n      new_arr << \"One\"\n    when 2\n      new_arr << \"\
    Two\"\n    when 3\n      new_arr << \"Three\"\n    when 4\n      new_arr << \"\
    Four\"\n    when 5\n      new_arr << \"Five\"\n    when 6\n      new_arr << \"\
    Six\"\n    when 7\n      new_arr << \"Seven\"\n    when 8\n      new_arr << \"\
    Eight\"\n    when 9\n      new_arr << \"Nine\"\n    end\n  end\n  new_arr\nend",
  "  arr.select { |n| n.between?(1, 9) }.sort.reverse.map { |n| \" #{n} \" }\nend",
  "  names = %w[One Two Three Four Five Six Seven Eight Nine]\n  arr.select { |n|\
    \ n > 0 && n < 10 }.sort.reverse.map { |n| names[n - 1] }\nend", "  out = []\n\
    \  (1..9).each { |i| out << i if arr.include?(i) }\n  out.sort.reverse.map { |i|\
    \ number_to_string(i) }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map\
    \ { |x| case x\n                                                             \
    \ when 1 then \"One\"\n                                                      \
    \        when 2 then \"Two\"\n                                               \
    \               when 3 then \"Three\"\n                                      \
    \                        when 4 then \"Four\"\n                              \
    \                                when 5 then \"Five\"\n                      \
    \                                        when 6 then \"Six\"\n               \
    \                                               when 7 then \"Seven\"\n      \
    \                                                        when 8 then \"Eight\"\
    \n                                                              when 9 then \"\
    Nine\"\n                                                            end }\nend",
  "  word_arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n  word_arr.sort.reverse.map { |word|  word.length }\n\
    end", "  arr = arr.sort.reverse\n  numbers = []\n  arr.each do |i|\n    if i >=\
    \ 1 && i <= 9\n      case i\n      when 1\n        numbers << \"One\"\n      when\
    \ 2\n        numbers << \"Two\"\n      when 3\n        numbers << \"Three\"\n\
    \      when 4\n        numbers << \"Four\"\n      when 5\n        numbers << \"\
    Five\"\n      when 6\n        numbers << \"Six\"\n      when 7\n        numbers\
    \ << \"Seven\"\n      when 8\n        numbers << \"Eight\"\n      when 9\n   \
    \     numbers << \"Nine\"\n      end\n    end\n  end\n  numbers\nend", "  arr.select\
    \ { |n| n.between?(1, 9) }.sort!.reverse!.map { |n| %w(One Two Three Four Five\
    \ Six Seven Eight Nine)[n - 1] }\nend", "  [1, 2, 3, 4, 5, 6, 7, 8, 9].each_with_object(arr)\
    \ do |num, new_arr|\n    arr.each_with_index do |elem, i|\n      new_arr[i] =\
    \ num if elem == num\n    end\n  end.compact.sort.reverse.map do |elem|\n    {1\
    \ => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 => \"Five\", 6 =>\
    \ \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"}[elem]\n  end\nend",
  "  arr.select { |e| (1..9).include?(e) }.sort.reverse.map do |e|\n    case e\n \
    \   when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n\
    \    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr = arr.sort\n  reverse_arr = []\n  final_arr = []\n\
    \  nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  arr.each do |num|\n    if nums.include?(num)\n\
    \      reverse_arr << num\n    end\n  end\n  reverse_arr.reverse.each do |num|\n\
    \    case num\n    when 1\n      final_arr << \"One\"\n    when 2\n      final_arr\
    \ << \"Two\"\n    when 3\n      final_arr << \"Three\"\n    when 4\n      final_arr\
    \ << \"Four\"\n    when 5\n      final_arr << \"Five\"\n    when 6\n      final_arr\
    \ << \"Six\"\n    when 7\n      final_arr << \"Seven\"\n    when 8\n      final_arr\
    \ << \"Eight\"\n    when 9\n      final_arr << \"Nine\"\n    end\n  end\n  final_arr\n\
    end", "  return [] if arr.empty?\n  result = []\n  arr.sort.each do |num|\n  \
    \  next unless (1..9).include?(num)\n    result << num.to_s.capitalize\n  end\n\
    \  result.reverse\nend", "  translate = {\n    1 => \"One\",\n    2 => \"Two\"\
    ,\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  arr.select\
    \ { |num| (1..9).cover?(num) }.sort.reverse.map { |num| translate[num] }\nend",
  "  hash = {\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 =>\
    \ \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8\
    \ => \"Eight\",\n    9 => \"Nine\"\n  }\n  hash.values_at(*arr.select { |num|\
    \ num.between?(1, 9) }.sort.reverse)\nend", "    arr.select { |element| element.between?(1,\
    \ 9) }.sort.reverse.map do |num|\n        case num\n        when 1\n         \
    \   \"One\"\n        when 2\n            \"Two\"\n        when 3\n           \
    \ \"Three\"\n        when 4\n            \"Four\"\n        when 5\n          \
    \  \"Five\"\n        when 6\n            \"Six\"\n        when 7\n           \
    \ \"Seven\"\n        when 8\n            \"Eight\"\n        when 9\n         \
    \   \"Nine\"\n        end\n    end\nend", "  hash = {\n    \"One\" => 1,\n   \
    \ \"Two\" => 2,\n    \"Three\" => 3,\n    \"Four\" => 4,\n    \"Five\" => 5,\n\
    \    \"Six\" => 6,\n    \"Seven\" => 7,\n    \"Eight\" => 8,\n    \"Nine\" =>\
    \ 9\n  }\n  hash.invert\n  arr.sort.select do |x|\n    hash.keys.include?(x)\n\
    \  end.reverse.map do |x|\n    hash[x]\n  end\nend", "  arr = arr.sort.reverse.map\
    \ { |x| x.to_s }\n  arr.map! do |x|\n    case x\n    when \"1\"\n      \"One\"\
    \n    when \"2\"\n      \"Two\"\n    when \"3\"\n      \"Three\"\n    when \"\
    4\"\n      \"Four\"\n    when \"5\"\n      \"Five\"\n    when \"6\"\n      \"\
    Six\"\n    when \"7\"\n      \"Seven\"\n    when \"8\"\n      \"Eight\"\n    when\
    \ \"9\"\n      \"Nine\"\n    else\n      x\n    end\n  end\n  arr.select { |x|\
    \ x =~ /^[1-9]$/ }\nend", "  arr.keep_if { |num| num.between?(1, 9) }.sort.reverse.map\
    \ { |num| num_to_word(num) }\nend", "  # TODO: Implement the method call\n  arr.sort_by\
    \ { |n| n }.reverse.map { |n| number_to_name(n) }\nend", "  # your solution here\n\
    end", "  arr.select { |e| e > 0 && e < 10 }.sort.reverse.map do |e|\n    case\
    \ e\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\
    \n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr.sort!\n  arr.select! { |num| num.between?(1, 9)\
    \ }\n  arr.reverse!\n  arr.map! { |num| num.to_s }\n  arr.map! do |num|\n    case\
    \ num\n    when \"1\"\n      \"One\"\n    when \"2\"\n      \"Two\"\n    when\
    \ \"3\"\n      \"Three\"\n    when \"4\"\n      \"Four\"\n    when \"5\"\n   \
    \   \"Five\"\n    when \"6\"\n      \"Six\"\n    when \"7\"\n      \"Seven\"\n\
    \    when \"8\"\n      \"Eight\"\n    when \"9\"\n      \"Nine\"\n    end\n  end\n\
    \  return arr\nend", "  # your code here\nend", "  arr.select { |num| num < 10\
    \ && num > 0 }.sort.reverse.map { |num| NAMES[num] }\nend", "  array_dup = arr.dup\n\
    \  array_dup.select! { |value| (1..9).include?(value) }\n  array_dup.sort!.reverse!\n\
    \  array_dup.map! { |value| num_to_name(value) }\nend", "  rev_arr = arr.reject\
    \ { |n| n < 1 || n > 9 }.sort.reverse\n  rev_arr.map { |n| number_to_word(n) }\n\
    end", "  arr = arr.select { |x| x >= 1 && x <= 9 }.sort.reverse\n  arr.map { |x|\
    \ %w(One Two Three Four Five Six Seven Eight Nine)[x - 1] }\nend", "  arr.select\
    \ { |x| x > 0 && x < 10 }.sort.reverse.map { |x| [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1] }\nend",
  "  numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n  arr = arr.sort\n  arr.map! do |num|\n    if num <= 9\
    \ && num >= 1\n      numbers[num - 1]\n    end\n  end\n  arr.compact.reverse\n\
    end", end, "  reverse_numbers(sort_array(arr)).map do |v|\n    case v\n    when\
    \ 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when\
    \ 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when\
    \ 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n\
    \  end\nend", "  n = arr.select { |a| a.between?(1, 9) }.sort.reverse\n  n.map\
    \ { |a| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][a - 1] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
