name: HumanEval_105_by_length
language: rb
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>>\
  \ by_length.call([])\n# []\n# If the array has any strange number ignore it:\n#\
  \ >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.select { |i| i.between?(1, 9) }.sort.reverse.map { |num|\n  \
    \  case num\n    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then\
    \ \"Three\"\n    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then\
    \ \"Six\"\n    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then\
    \ \"Nine\"\n    end\n  }\nend", "  arr.reject { |n| n < 1 || n > 9 }.sort.reverse.map\
    \ { |n| %w(One Two Three Four Five Six Seven Eight Nine)[n - 1] }\nend", "  arr.sort.reverse.reject{|item|\
    \ item > 9 || item < 1}.map do |number|\n    {\n      1 => \"One\",\n      2 =>\
    \ \"Two\",\n      3 => \"Three\",\n      4 => \"Four\",\n      5 => \"Five\",\n\
    \      6 => \"Six\",\n      7 => \"Seven\",\n      8 => \"Eight\",\n      9 =>\
    \ \"Nine\"\n    }[number]\n  end\nend", "  arr = arr.select { |n| (1..9).include?(n)\
    \ }.sort.reverse\n  arr.map { |n| case n\n    when 1 then \"One\"\n    when 2\
    \ then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n    when\
    \ 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n    when\
    \ 8 then \"Eight\"\n    when 9 then \"Nine\"\n  end }\nend", "  arr = arr.sort.reverse.select\
    \ { |i| (1..9).include?(i) }.map do |i|\n    case i\n    when 1 then \"One\"\n\
    \    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n\
    \    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n\
    \    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", " \
    \ return [] if arr.empty?\n  hash = {\n    1 => \"One\",\n    2 => \"Two\",\n\
    \    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\"\
    ,\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\"\n  }\n  out = []\n\
    \  arr.map do |i|\n    if hash.key?(i)\n      out << hash[i]\n    end\n  end\n\
    \  out.sort!.reverse!\nend", "  arr = arr.select{|num| num.between?(1,9)}\n  arr.sort!\n\
    \  arr.reverse!\n  arr.map!{|num| num = case num\n    when 1 then \"One\"\n  \
    \  when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\n\
    \    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\n\
    \    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n  end}\nend", "  arr.grep(1..9).sort.reverse.map\
    \ { |num| num.to_s.capitalize }\nend", "  sorted = arr.select { |num| num.between?(1,\
    \ 9) }.sort.reverse\n  sorted.map do |num|\n    case num\n    when 1 then \"One\"\
    \n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"Four\"\
    \n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"Seven\"\
    \n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\nend", " \
    \ arr.sort.reverse.select { |x| x.between?(1, 9) }.map do |x|\n    case x\n  \
    \  when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n \
    \   when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr.sort.uniq.reverse.map do |num|\n    case num\n\
    \    when 1 then \"One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n\
    \    when 4 then \"Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n\
    \    when 7 then \"Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\
    \n    end\n  end\nend", "  arr.map { |x| x.to_s }.reject { |x| x.to_i > 9 || x.to_i\
    \ < 1 }.sort.reverse.map do |x|\n    case x\n    when \"1\"\n      \"One\"\n \
    \   when \"2\"\n      \"Two\"\n    when \"3\"\n      \"Three\"\n    when \"4\"\
    \n      \"Four\"\n    when \"5\"\n      \"Five\"\n    when \"6\"\n      \"Six\"\
    \n    when \"7\"\n      \"Seven\"\n    when \"8\"\n      \"Eight\"\n    when \"\
    9\"\n      \"Nine\"\n    end\n  end\nend", "  arr.select{|x| x.between?(1,9)}.sort.reverse.map{|x|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][x-1]}\nend", "  unique_numbers = []\n  sorted_unique_numbers = []\n\
    \  result = []\n  arr.map do |n|\n    if n > 0 && n < 10\n      unique_numbers\
    \ << n\n    end\n  end\n  unique_numbers.sort!\n  unique_numbers.reverse!\n  sorted_unique_numbers\
    \ = unique_numbers.uniq", "  sort = arr.select { |number| (1..9).include?(number)\
    \ }.sort.reverse\n  sort.map do |number|\n    case number\n    when 1 then \"\
    One\"\n    when 2 then \"Two\"\n    when 3 then \"Three\"\n    when 4 then \"\
    Four\"\n    when 5 then \"Five\"\n    when 6 then \"Six\"\n    when 7 then \"\
    Seven\"\n    when 8 then \"Eight\"\n    when 9 then \"Nine\"\n    end\n  end\n\
    end", "  hsh = {1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", 5 =>\
    \ \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\"}\n  arr.select{|x|\
    \ x.between?(1,9)}.sort.reverse.map{|x| hsh[x]}\nend", "  arr.select { |i| i.between?(1,\
    \ 9) }.sort.reverse.map(&method(:word_for_numb))\nend", "  numbers = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n  arr.select { |x| (1..9).include?(x) }.sort.reverse.map { |x| numbers[x -\
    \ 1] }\nend", "  arr.sort.reverse.map do |n|\n    case n\n    when 1\n      \"\
    One\"\n    when 2\n      \"Two\"\n    when 3\n      \"Three\"\n    when 4\n  \
    \    \"Four\"\n    when 5\n      \"Five\"\n    when 6\n      \"Six\"\n    when\
    \ 7\n      \"Seven\"\n    when 8\n      \"Eight\"\n    when 9\n      \"Nine\"\n\
    \    end\n  end.compact\nend", "  arr.select{|i| (1..9).include?(i)}.sort.reverse.map{|i|\
    \ numbers[i]}\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
