name: HumanEval_124_valid_date
language: rb
prompt: "# You have to write a function which validates a given date string and\n\
  # returns true if the date is valid otherwise false.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date.call(\"03-11-2000\")\n# true\n\
  # >>> valid_date.call(\"15-01-2012\")\n# false\n# >>> valid_date.call(\"04-0-2040\"\
  )\n# false\n# >>> valid_date.call(\"06-04-2020\")\n# true\n# >>> valid_date.call(\"\
  06/04/2020\")\n# false\ndef valid_date(date)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n\
  \    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"\
  ))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false,\
  \ candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"\
  ))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false,\
  \ candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n\
  \    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true,\
  \ candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"\
  ))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false,\
  \ candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"\
  ))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false,\
  \ candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"\
  ))\n  end\nend\n"
completions: ["  if date.empty?\n    return false\n  end\n  if (1..12).cover?(date[0..1].to_i)\
    \ && (1..12).cover?(date[3..4].to_i) && (1..12).cover?(date[6..7].to_i) && (1..12).cover?(date[9..10].to_i)\n\
    \    if (1..31).cover?(date[0..1].to_i) && (1..31).cover?(date[3..4].to_i) &&\
    \ (1..31).cover?(date[6..7].to_i) && (1..31).cover?(date[9..10].to_i)\n      if\
    \ (1..12).cover?(date[0..1].to_i) && (1..12).cover?(date[3..4].to_i) && (1..12).cover?(date[6..7].to_i)\
    \ && (1..12).cover?(date[9..10].to_i)\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  date_regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n\
    \  return false if !date_regex.match(date)\n  parts = date.split(\"-\")\n  return\
    \ false if parts[1].to_i > 31 || parts[1].to_i < 1\n  return false if parts[0].to_i\
    \ > 12 || parts[0].to_i < 1\n  if parts[0].to_i == 2\n    return false if parts[1].to_i\
    \ > 29\n  elsif parts[0].to_i == 1 || parts[0].to_i == 3 || parts[0].to_i == 5\
    \ || parts[0].to_i == 7 || parts[0].to_i == 8 || parts[0].to_i == 10 || parts[0].to_i\
    \ == 12\n    return false if parts[1].to_i > 31\n  else\n    return false if parts[1].to_i\
    \ > 30\n  end\n  true\nend", "  date = date.split('-')\n  return false if date.length\
    \ != 3\n  month = date[0].to_i\n  day = date[1].to_i\n  year = date[2].to_i\n\
    \  return false if month < 1 || month > 12\n  return false if day < 1 || day >\
    \ 31\n  return false if day > 30 && [4, 6, 9, 11].include?(month)\n  return false\
    \ if day > 29 && month == 2\n  return false if year < 0\n  true\nend", "  date_arr\
    \ = date.split(\"-\")\n  month = date_arr[0].to_i\n  day = date_arr[1].to_i\n\
    \  year = date_arr[2].to_i\n  feb_days = year % 4 == 0 ? 29 : 28\n  if [1,3,5,7,8,10,12].include?(month)\n\
    \    if (1..31).include?(day)\n      return true\n    end\n  elsif [4,6,9,11].include?(month)\n\
    \    if (1..30).include?(day)\n      return true\n    end\n  elsif month == 2\n\
    \    if (1..feb_days).include?(day)\n      return true\n    end\n  end\n  false\n\
    end", "    date_arr = date.split(\"-\")\n    check_validity(date_arr)\nend", " \
    \ return false if date.empty?\n  return false if date =~ /\\//", "  # To make\
    \ this simpler, split the date into a month, a day, and a year\n  # and put them\
    \ into variables\n  month, day, year = date.split('-')\n  # Also get rid of any\
    \ leading zeros that might be in the month or day\n  month = month.to_i\n  day\
    \ = day.to_i\n  # Check that the date is a real date\n  # First make sure we have\
    \ three parts, separated by hyphens\n  # Then make sure the year is 4 digits long\n\
    \  # Then make sure the month is between 1 and 12\n  # Finally make sure the day\
    \ is in the right range\n  return false unless date.count('-') == 2 &&\n     \
    \                 year.length == 4 &&\n                      month.between?(1,\
    \ 12) &&\n                      day.between?(1, case month\n                 \
    \                     when 1, 3, 5, 7, 8, 10, 12\n                           \
    \             31\n                                      when 4, 6, 9, 11\n   \
    \                                     30\n                                   \
    \   when 2\n                                        if year.to_i % 4 == 0\n  \
    \                                        29\n                                \
    \        else\n                                          28\n                \
    \                        end\n                                      end)\n  #\
    \ If we make it to here, the date must be okay\n  true\nend", "  date_arr = date.split(\"\
    -\")\n  date_arr[0].to_i.between?(1,12) && date_arr[1].to_i.between?(1,31) &&\
    \ date_arr[2].to_i.between?(2000,2040) &&  !date.include?(\"/\")\nend", "    date\
    \ = date.split(\"-\")\n    if date[0].to_i > 0 && date[0].to_i < 13 && date[1].to_i\
    \ > 0 && date[1].to_i < 32 && date[2].to_i > 0\n        return true\n    else\n\
    \        return false\n    end\nend", "  date_formated = date.split(\"-\")\n \
    \ month = date_formated[0].to_i\n  day = date_formated[1].to_i\n  year = date_formated[2].to_i\n\
    \  months = [1, 3, 5, 7, 8, 10, 12]\n  months_30 = [4, 6, 9, 11]\n  if month >\
    \ 12 || month < 1\n    return false\n  end\n  if months.include?(month)\n    if\
    \ day > 31 || day < 1\n      return false\n    end\n  elsif months_30.include?(month)\n\
    \    if day > 30 || day < 1\n      return false\n    end\n  elsif month == 2\n\
    \    if day > 29 || day < 1\n      return false\n    end\n  end\n  if year % 400\
    \ == 0\n    return true\n  elsif year % 100 == 0\n    return false\n  elsif year\
    \ % 4 == 0\n    return true\n  else\n    return false\n  end\nend", "  dates =\
    \ date.split('-')\n  return false if dates.count != 3\n  return false if dates[0].to_i\
    \ > 12 || dates[0].to_i < 1\n  return false if dates[2].to_i < 0\n  case dates[0].to_i\n\
    \  when 1, 3, 5, 7, 8, 10, 12\n    return false if dates[1].to_i > 31 || dates[1].to_i\
    \ < 1\n  when 4, 6, 9, 11\n    return false if dates[1].to_i > 30 || dates[1].to_i\
    \ < 1\n  when 2\n    return false if dates[1].to_i > 29 || dates[1].to_i < 1\n\
    \  end\n  true\nend", "  return false if date.empty?\n  date_arr = date.split('-')\n\
    \  return false if date_arr.length != 3\n  date_arr.each { |val| return false\
    \ if val.length != 2 }\n  begin\n    date_arr[0] = date_arr[0].to_i\n    date_arr[1]\
    \ = date_arr[1].to_i\n    date_arr[2] = date_arr[2].to_i\n  rescue StandardError\n\
    \    return false\n  end\n  return false if date_arr[0] < 1 || date_arr[0] > 12\n\
    \  return false if (date_arr[0] == 2 && date_arr[1] > 29) || (date_arr[0] == 2\
    \ && date_arr[1] < 1)\n  return false if (date_arr[0] == 4 || date_arr[0] == 6\
    \ || date_arr[0] == 9 || date_arr[0] == 11) && (date_arr[1] > 30 || date_arr[1]\
    \ < 1)\n  return false if (date_arr[0] == 1 || date_arr[0] == 3 || date_arr[0]\
    \ == 5 || date_arr[0] == 7 || date_arr[0] == 8 || date_arr[0] == 10 || date_arr[0]\
    \ == 12) && (date_arr[1] > 31 || date_arr[1] < 1)\n  return false if date_arr[2]\
    \ < 1000 || date_arr[2] > 9999\n  true\nend", "  return false if date.empty?\n\
    \  return false if date !~ /\\d{2}-\\d{2}-\\d{4}/\n  d, m, y = date.split('-').map(&:to_i)\n\
    \  return false if [1, 3, 5, 7, 8, 10, 12].include?(m) && d > 31\n  return false\
    \ if [4, 6, 9, 11].include?(m) && d > 30\n  return false if m == 2 && d > 29\n\
    \  return false if m > 12\n  true\nend", "  begin\n    new_date = Date.parse(date)\n\
    \    return new_date == date\n  rescue\n    return false\n  end\nend", "  #TODO\
    \ implement your code here\nend", "  if date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/\n\
    \    month = date.split(\"-\")[0].to_i\n    day = date.split(\"-\")[1].to_i\n\
    \    year = date.split(\"-\")[2].to_i\n    if year % 4 == 0\n      if month ==\
    \ 2 && day <= 29\n        return true\n      elsif month == 2 && day > 29\n  \
    \      return false\n      elsif [1,3,5,7,8,10,12].include?(month) && day <= 31\n\
    \        return true\n      elsif [1,3,5,7,8,10,12].include?(month) && day > 31\n\
    \        return false\n      elsif [4,6,9,11].include?(month) && day <= 30\n \
    \       return true\n      elsif [4,6,9,11].include?(month) && day > 30\n    \
    \    return false\n      end\n    else\n      if month == 2 && day <= 28\n   \
    \     return true\n      elsif month == 2 && day > 28\n        return false\n\
    \      elsif [1,3,5,7,8,10,12].include?(month) && day <= 31\n        return true\n\
    \      elsif [1,3,5,7,8,10,12].include?(month) && day > 31\n        return false\n\
    \      elsif [4,6,9,11].include?(month) && day <= 30\n        return true\n  \
    \    elsif [4,6,9,11].include?(month) && day > 30\n        return false\n    \
    \  end\n    end\n  else\n    return false\n  end\nend", "\tregex = /^\\d{2}-\\\
    d{2}-\\d{4}$/\n\t#one liner\n\t#regex = /^((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])-\\\
    d{4})$/\n\t#date.match(regex) != nil\n\tif date.match(regex) != nil\n\t\tmonth,\
    \ day, year = date.split(\"-\")\n\t\tif month.to_i < 1 || month.to_i > 12\n\t\t\
    \treturn false\n\t\tend\n\t\t\n\t\tif month.to_i == 2\n\t\t\tif day.to_i < 1 ||\
    \ day.to_i > 29\n\t\t\t\treturn false\n\t\t\tend\n\t\telsif [1,3,5,7,8,10,12].include?(month.to_i)\n\
    \t\t\tif day.to_i < 1 || day.to_i > 31\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    elsif [4,6,9,11].include?(month.to_i)\n\t\t\tif day.to_i < 1 || day.to_i > 30\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn true\n\telse\n\t\t\
    return false\n\tend\nend", "  date_array = date.split('-')\n  month = date_array[0].to_i\n\
    \  day = date_array[1].to_i\n  year = date_array[2].to_i\n  return false if month\
    \ > 12 || month < 1\n  if month == 2\n    return day >= 1 && day <= 29\n  elsif\
    \ [4,6,9,11].include?(month)\n    return day >= 1 && day <= 30\n  else\n    return\
    \ day >= 1 && day <= 31\n  end\nend", "  date_arr = date.split('-')\n  date_arr.map!\
    \ { |val| val.to_i }\n  if date_arr.length != 3 || date_arr.any?(&:zero?)\n  \
    \  return false\n  end\n  case date_arr[0]\n  when 1, 3, 5, 7, 8, 10, 12\n   \
    \ return false if date_arr[1] > 31\n  when 4, 6, 9, 11\n    return false if date_arr[1]\
    \ > 30\n  when 2\n    return false if date_arr[1] > 29\n  else\n    return false\n\
    \  end\n  true\nend", "  # Write your code here\nend", "  dates = date.split('-')\n\
    \  if dates.length != 3\n    return false\n  end\n  if dates[0].to_i < 1 || dates[0].to_i\
    \ > 12\n    return false\n  end\n  if (dates[0].to_i == 1 || dates[0].to_i ==\
    \ 3 || dates[0].to_i == 5 || dates[0].to_i == 7 || dates[0].to_i == 8 || dates[0].to_i\
    \ == 10 || dates[0].to_i == 12) && (dates[1].to_i < 1 || dates[1].to_i > 31)\n\
    \    return false\n  end\n  if (dates[0].to_i == 4 || dates[0].to_i == 6 || dates[0].to_i\
    \ == 9 || dates[0].to_i == 11) && (dates[1].to_i < 1 || dates[1].to_i > 30)\n\
    \    return false\n  end\n  if dates[0].to_i == 2 && (dates[1].to_i < 1 || dates[1].to_i\
    \ > 29)\n    return false\n  end\n  return true\nend", "  # write your code here\n\
    end", "  return false if date.strip.empty?\n  date_arr = date.split('-')\n  return\
    \ false if date_arr.size != 3", "  return false if date.nil? || date.empty?\n\
    \  return false unless (date =~ /^\\d{2}-\\d{2}-\\d{4}$/)\n  arr = date.split('-')\n\
    \  return false unless arr[0].to_i.between?(1, 12)\n  return false unless arr[1].to_i.between?(1,\
    \ 31)\n  return false unless arr[2].to_i.between?(0, 9999)\n  true\nend", "  if\
    \ date.match(/^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$/)\n    d = date.split('-')\n  \
    \  if [1,3,5,7,8,10,12].include?(d[0].to_i) && d[1].to_i <= 31\n      return true\n\
    \    elsif [4,6,9,11].include?(d[0].to_i) && d[1].to_i <= 30\n      return true\n\
    \    elsif d[0].to_i == 2 && d[1].to_i <= 29\n      return true\n    else\n  \
    \    return false\n    end\n  else\n    return false\n  end\nend", "  match =\
    \ /\\A([0-9]{2})-([0-9]{2})-([0-9]{4})\\z/.match(date)\n  return false if match.nil?\n\
    \  month, day, year = match.captures\n  return false if month.to_i > 12\n  return\
    \ false if day.to_i > 31\n  return false if day.to_i < 1\n  return false if year.to_i\
    \ < 1\n  case month.to_i\n  when 2\n    return false if day.to_i > 29\n  when\
    \ 4, 6, 9, 11\n    return false if day.to_i > 30\n  end\n  true\nend", "  regex\
    \ = /^(\\d{2})-(\\d{2})-(\\d{4})$/\n  match = regex.match(date)\n  return false\
    \ if match.nil?\n  m, d, y = match.captures\n  m = m.to_i\n  d = d.to_i\n  y =\
    \ y.to_i\n  return false if m < 1 || m > 12\n  return false if (m == 2 && d >\
    \ 29) || (m == 2 && d < 1)\n  days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31]\n  return false if d > days[m - 1] || d < 1\n  true\nend", "  # you\
    \ code here\nend", "    date.match(/^\\d{2}-\\d{2}-\\d{4}$/) &&\n    %w(01 03\
    \ 05 07 08 10 12).include?(date[3..4]) &&\n    date[0..1].to_i < 32 ||\n    %w(04\
    \ 06 09 11).include?(date[3..4]) &&\n    date[0..1].to_i < 31 ||\n    date[3..4]\
    \ == \"02\" &&\n    date[0..1].to_i < 30\nend", "  raise \"TODO\"\nend", "  #\
    \ write your code here\nend", "  arr = date.split(\"-\")\n  return false if arr.length\
    \ != 3 || date == \"\"\n  return false if (arr[0].to_i > 12 || arr[0].to_i < 1)\n\
    \  return false if (arr[1].to_i > 31 || arr[1].to_i < 1)\n  return false if (arr[2].to_i\
    \ > 2020 || arr[2].to_i < 1900)\n  true\nend", "  invalid_dates = [13, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  invalid_months\
    \ = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\
    \  date_arr = date.split('-')\n  if date_arr.length != 3\n    return false\n \
    \ end\n  if date_arr[0].to_i < 1 || date_arr[0].to_i > 12\n    return false\n\
    \  end\n  if date_arr[0].to_i == 1 || date_arr[0].to_i == 3 || date_arr[0].to_i\
    \ == 5 || date_arr[0].to_i == 7 || date_arr[0].to_i == 8 || date_arr[0].to_i ==\
    \ 10 || date_arr[0].to_i == 12\n    if invalid_dates.include?(date_arr[1].to_i)\n\
    \      return false\n    end\n  elsif date_arr[0].to_i == 4 || date_arr[0].to_i\
    \ == 6 || date_arr[0].to_i == 9 || date_arr[0].to_i == 11\n    if invalid_dates.include?(date_arr[1].to_i)\n\
    \      return false\n    end\n  elsif date_arr[0].to_i == 2\n    if invalid_dates.take(28).include?(date_arr[1].to_i)\n\
    \      return false\n    end\n  end\n  if date_arr[2].to_i < 0\n    return false\n\
    \  end\n  true\nend", "  regex = /\\d{2}-\\d{2}-\\d{4}/\n  date_regex = date.match(regex)\n\
    \  return false if date_regex.nil?\n  date_array = date_regex[0].split('-')\n\
    \  days = date_array[1].to_i\n  months = date_array[0].to_i\n  return false if\
    \ months > 12 || months < 1\n  return false if days > 31 || days < 1\n  return\
    \ false if (months == 4 || months == 6 || months == 9 || months == 11) && days\
    \ > 30\n  return false if months == 2 && days > 29\n  true\nend", "  is_valid\
    \ = true\n  begin\n    Date.parse(date)\n  rescue ArgumentError\n    is_valid\
    \ = false\n  end\n  is_valid\nend", "  date = date.split('-')\n  date.length ==\
    \ 3 && (1..12).include?(date[0].to_i) && (1..31).include?(date[1].to_i) && (1..9999).include?(date[2].to_i)\n\
    end", "  date_array = date.split(\"-\")\n  if date.empty?\n    puts \"false\"\n\
    \  elsif date_array[0].to_i < 1 || date_array[0].to_i > 12\n    puts \"false\"\
    \n  elsif date_array[1].to_i < 1 || date_array[1].to_i > 31\n    puts \"false\"\
    \n  elsif date_array[2].to_i < 1990 || date_array[2].to_i > 2020\n    puts \"\
    false\"\n  else\n    puts \"true\"\n  end\nend", "  date_arr = date.split(\"-\"\
    )\n  if date_arr.length != 3\n    return false\n  end\n  days = date_arr[1].to_i\n\
    \  months = date_arr[0].to_i\n  year = date_arr[2].to_i\n  if months > 12 || months\
    \ < 1\n    return false\n  end\n  if months == 2\n    if days < 1 || days > 29\n\
    \      return false\n    end\n  elsif months == 1 || months == 3 || months ==\
    \ 5 || months == 7 || months == 8 || months == 10 || months == 12\n    if days\
    \ < 1 || days > 31\n      return false\n    end\n  else\n    if days < 1 || days\
    \ > 30\n      return false\n    end\n  end\n  return true\nend", "  date = date.split('-')\n\
    \  date.count == 3 && date[0].length == 2 && date[1].length == 2 && date[2].length\
    \ == 4\nend", "  # write your code here\nend", "  valid_day = (1..31).include?(date[0..1].to_i)\n\
    \  valid_months = (1..12).include?(date[3..4].to_i)\n  valid_year = (1900..2100).include?(date[6..9].to_i)\n\
    \  valid_separator = date[2] == '-' && date[5] == '-'\n  valid_day && valid_months\
    \ && valid_year && valid_separator\nend", "  # puts \"date is #{date}\"\n  if\
    \ date.length > 0\n    # puts \"Date is not empty, length is #{date.length}\"\n\
    \    mon, day, year = date.split(\"-\")\n    # puts \"day is #{day}\"\n    if\
    \ mon.to_i < 1 || mon.to_i > 12\n      # puts \"mon is less than 1 or greater\
    \ than 12\"\n      return false\n    elsif mon.to_i.even? && day.to_i > 30\n \
    \     # puts \"day is greater than 30\"\n      return false\n    elsif mon.to_i.odd?\
    \ && day.to_i > 31\n      # puts \"day is greater than 31\"\n      return false\n\
    \    elsif mon.to_i == 2 && day.to_i > 29\n      # puts \"day is greater than\
    \ 29\"\n      return false\n    else\n      # puts \"Date valid\"\n      return\
    \ true\n    end\n  else\n    # puts \"Date is empty\"\n    return false\n  end\n\
    end", "\tif date.nil? || date.empty?\n\t\tfalse\n\telsif date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) == nil\n\t\tfalse\n\telse\n\t\tdate_split = date.split(\"-\"\
    )\n\t\tmonth = date_split[0].to_i\n\t\tday = date_split[1].to_i\n\t\tyear = date_split[2].to_i\n\
    \t\tif (month > 12 || month < 1) || (year > 2020 || year < 2000)\n\t\t\tfalse\n\
    \t\telsif (month == 2 && day > 29) || ((month == 4 || month == 6 || month == 9\
    \ || month == 11) && day > 30) || ((month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) && day > 31)\n\t\t\t\
    false\n\t\telse\n\t\t\ttrue\n\t\tend\n\tend\nend", "  days_count = {\n    '01'\
    \ => 31,\n    '02' => 28,\n    '03' => 31,\n    '04' => 30,\n    '05' => 31,\n\
    \    '06' => 30,\n    '07' => 31,\n    '08' => 31,\n    '09' => 30,\n    '10'\
    \ => 31,\n    '11' => 30,\n    '12' => 31\n  }\n  date = date.gsub('/', '-')\n\
    \  return false if date.split('-').length != 3\n  return false if date.split('-').any?\
    \ { |e| e.to_i < 1 }\n  month, day, year = date.split('-').map(&:to_i)\n  return\
    \ false if year < 1\n  return false if month > 12 || month < 1\n  return false\
    \ if day > days_count[date.split('-')[0]] || day < 1\n  return false if year %\
    \ 400 == 0 && month == 2 && day > 29\n  return false if year % 4 == 0 && year\
    \ % 100 != 0 && month == 2 && day > 29\n  true\nend", "  mth, day, yr = date.split(/[-\\\
    /]/)\n  if(!(mth.to_i >= 1 && mth.to_i <= 12))\n    return false\n  elsif(mth.to_i\
    \ == 2)\n    if(!(day.to_i >= 1 && day.to_i <= 29))\n      return false\n    end\n\
    \  elsif(mth.to_i == 4 || mth.to_i == 6 || mth.to_i == 9 || mth.to_i == 11)\n\
    \    if(!(day.to_i >= 1 && day.to_i <= 30))\n      return false\n    end\n  elsif(!(day.to_i\
    \ >= 1 && day.to_i <= 31))\n    return false\n  end\n  return true\nend", "  #\
    \ Your code here\nend", "  return \"Invalid date format\" if date.include? \"\
    /\"\n  begin\n    date = Date.parse(date)\n    return true\n  rescue\n    return\
    \ false\n  end\nend", "  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n    array =\
    \ date.split('-')\n    months_with_31_days = [1,3,5,7,8,10,12]\n    months_with_30_days\
    \ = [4,6,9,11]\n    days = array[1].to_i\n    month = array[0].to_i\n    if month\
    \ > 12 || month < 1\n      return false\n    elsif days > 31 || days < 1\n   \
    \   return false\n    elsif months_with_31_days.include?(month) && days > 31\n\
    \      return false\n    elsif months_with_30_days.include?(month) && days > 30\n\
    \      return false\n    elsif month == 2 && days > 29\n      return false\n \
    \   else\n      return true\n    end\n  else\n    return false\n  end\nend", " \
    \ puts date.match(/^\\d{2}-\\d{2}-\\d{4}$/) ? \"Valid Date\" : \"Invalid Date\"\
    \nend", "  valid_months = (1..12).to_a\n  valid_days_for_months = {1 => (1..31).to_a,\
    \ 2 => (1..29).to_a, 3 => (1..31).to_a, 4 => (1..30).to_a, 5 => (1..31).to_a,\
    \ 6 => (1..30).to_a, 7 => (1..31).to_a, 8 => (1..31).to_a, 9 => (1..30).to_a,\
    \ 10 => (1..31).to_a, 11 => (1..30).to_a, 12 => (1..31).to_a}\n  valid_years =\
    \ (2000..2050).to_a\n  date = date.split(\"-\")\n  date[0] = date[0].to_i\n  date[1]\
    \ = date[1].to_i\n  date[2] = date[2].to_i\n  puts valid_months.include?(date[0])\
    \ && valid_days_for_months[date[0]].include?(date[1]) && valid_years.include?(date[2])\n\
    end", "  dmy = date.split('-')\n  month = dmy[0].to_i\n  day = dmy[1].to_i\n \
    \ year = dmy[2].to_i\n  if dmy.size != 3\n    return false\n  end\n  if month\
    \ > 12 || month < 1\n    return false\n  end\n  if month == 2\n    if day < 1\
    \ || day > 29\n      return false\n    end\n  end\n  if month == 4 || month ==\
    \ 6 || month == 9 || month == 11\n    if day < 1 || day > 30\n      return false\n\
    \    end\n  end\n  if month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12\n    if day < 1 || day > 31\n     \
    \ return false\n    end\n  end\n  return true\nend", "  valid_months = [\"01\"\
    , \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\"\
    , \"12\"]\n  valid_format = [2, 2, 4]\n  if date.empty?\n    false\n  elsif valid_months.include?(date[0..1])\n\
    \    if valid_months.include?(date[3..4])\n      if valid_format.include?(date[6..7].to_i)\n\
    \        if date[6..9].to_i < 2018\n          true\n        else\n          false\n\
    \        end\n      else\n        false\n      end\n    else\n      false\n  \
    \  end\n  else\n    false\n  end\nend", "  date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/)\
    \ &&\n    if date.match(/^(0[1-9]|1[0-2])-([12][0-9]|3[01])-[0-9]{4}$/)\n    \
    \  true\n    elsif date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9])-[0-9]{4}$/)\n\
    \      true\n    elsif date.match(/^(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/)\n\
    \      true\n    elsif date.match(/^(0[469]|11)-(0[1-9]|[12][0-9]|30)-[0-9]{4}$/)\n\
    \      true\n    elsif date.match(/^02-(0[1-9]|1[0-9]|2[0-8])-[0-9]{4}$/)\n  \
    \    true\n    else\n      false\n    end\nend", "  return false if date.length.zero?\n\
    \  date = date.split('-')\n  return false if date.size != 3\n  return false if\
    \ date[2].to_i < 0\n  return false if date[0].to_i < 1 || date[0].to_i > 12\n\
    \  if date[0].to_i == 2\n    return false if date[1].to_i < 1 || date[1].to_i\
    \ > 29\n  elsif date[0].to_i.odd?\n    return false if date[1].to_i < 1 || date[1].to_i\
    \ > 31\n  else\n    return false if date[1].to_i < 1 || date[1].to_i > 30\n  end\n\
    \  true\nend", "  /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/.match(date)\
    \ ? true : false\nend", "  month, day, year = date.split(\"-\")\n  return false\
    \ if date.split(\"-\").length != 3\n  return false if !month.to_i.between?(1,\
    \ 12)\n  return false if !day.to_i.between?(1, days_in_month(month.to_i))\n  return\
    \ false if !year.to_i.between?(1, 9999)\n  true\nend", "  date.match?(/(^(0[1-9]|1[0-2])-(0[1-9]|[12]\\\
    d|3[01])-(19|20)\\d{2}$)|(^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(19|20)\\d{2}$)/)\n\
    end", "  return false if date.empty?\n  /\\A(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(201[3-9]|20[2-9][0-9])\\\
    z/ === date\nend", "  is_valid = true\n  begin\n    m, d, y = date.split('-')\n\
    \    # Date.strptime(date, '%m-%d-%Y')\n    # is_valid = (date.include? '/') ?\
    \ false : true\n    raise \"Invalid date format\" if date.include? '/'\n    raise\
    \ \"Invalid year\" if y.to_i < 1\n    raise \"Invalid month\" if m.to_i < 1 ||\
    \ m.to_i > 12\n    raise \"Invalid days\" if d.to_i < 1 || d.to_i > 31\n    raise\
    \ \"Invalid days for feb\" if m.to_i == 2 && d.to_i > 29\n    raise \"Invalid\
    \ days for months 1,3,5,7,8,10,12\" if m.to_i.odd? && d.to_i > 31\n    raise \"\
    Invalid days for months 4,6,9,11\" if m.to_i.even? && d.to_i > 30 && m.to_i !=\
    \ 2\n  rescue Exception => e\n    is_valid = false\n  end\n  is_valid\nend\nputs\
    \ valid_date(\"02-29-2000\")\nputs valid_date(\"02-28-2000\")\nputs valid_date(\"\
    06-06-2020\")\nputs valid_date(\"06-30-2020\")\nputs valid_date(\"06-31-2020\"\
    )\nputs valid_date(\"04-31-2020\")\nputs valid_date(\"04-30-2020\")\nputs valid_date(\"\
    06-04-2020\")\nputs valid_date(\"06/04/2020\")\nputs valid_date(\"06-0-2020\"\
    )\nputs valid_date(\"06-04-0\")\nputs valid_date(\"00-04-2020\")\nputs valid_date(\"\
    14-04-2020\")\nputs valid_date(\"06-04-2020\")\nputs valid_date(\"10-04-2020\"\
    )", "  (date =~ /\\d{2}-\\d{2}-\\d{4}/) && \n  (0...31).include?(date[3..4].to_i)\
    \ && \n  (0...12).include?(date[0..1].to_i) && \n  (0...2000).include?(date[6..9].to_i)\n\
    end", "\tbegin\n\t\tDate.parse(date)\n\t\ttrue\n\trescue\n\t\tfalse\n\tend\nend",
  "  date = date.split(\"-\")\n  if date.length != 3\n    return false\n  end\n  month\
    \ = date[0].to_i\n  day = date[1].to_i\n  year = date[2].to_i\n  if month < 1\
    \ || month > 12\n    return false\n  end\n  if month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12\n    if day <\
    \ 1 || day > 31\n      return false\n    end\n  elsif month == 4 || month == 6\
    \ || month == 9 || month == 11\n    if day < 1 || day > 30\n      return false\n\
    \    end\n  elsif month == 2\n    if day < 1 || day > 29\n      return false\n\
    \    end\n  end\n  if year < 0\n    return false\n  end\n  return true\nend",
  "  require 'date'\n  if date.length > 0\n    if Date.valid_date?(date[-4..-1].to_i,\
    \ date[-7..-5].to_i, date[-10..-8].to_i)\n      true\n    else\n      false\n\
    \    end\n  else\n    false\n  end\nend", "  date_parts = date.split('-')\n  date_parts.map!(&:to_i)\n\
    \  date_parts[0] = date_parts[0].to_s\n  date_parts[1] = date_parts[1].to_s\n\
    \  return false if date_parts.size != 3\n  return false if date_parts[0].size\
    \ != 2 || date_parts[1].size != 2 || date_parts[2].to_s.size != 4\n  return false\
    \ if date_parts[0].to_i < 1 || date_parts[0].to_i > 12\n  return false if (date_parts[0].to_i\
    \ == 1 || date_parts[0].to_i == 3 || date_parts[0].to_i == 5 || date_parts[0].to_i\
    \ == 7 || date_parts[0].to_i == 8 || date_parts[0].to_i == 10 || date_parts[0].to_i\
    \ == 12) && (date_parts[1].to_i < 1 || date_parts[1].to_i > 31)\n  return false\
    \ if (date_parts[0].to_i == 4 || date_parts[0].to_i == 6 || date_parts[0].to_i\
    \ == 9 || date_parts[0].to_i == 11) && (date_parts[1].to_i < 1 || date_parts[1].to_i\
    \ > 30)\n  return false if date_parts[0].to_i == 2 && (date_parts[1].to_i < 1\
    \ || date_parts[1].to_i > 29)\n  true\nend", "  date_pattern = /^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-\\\
    d{4}$/\n  if date.match(date_pattern)\n    month, day, year = date.split('-')\n\
    \    year = year.to_i\n    day = day.to_i\n    month = month.to_i\n    return\
    \ false if (month == 0 || month > 12)\n    return false if (day == 0 || day >\
    \ 31)\n    return false if (year == 0)\n    return false if (month == 2 && day\
    \ > 29)\n    return false if ((month == 4 || month == 6 || month == 9 || month\
    \ == 11) && day > 30)\n    return true\n  else\n    return false\n  end\nend",
  "  # TODO: Return true or false\n  if date.empty?\n    false\n  elsif date == \"\
    00-00-0000\"\n    false\n  elsif date.include? \"/\"\n    false\n  elsif date[0..1].to_i\
    \ == 0 || date[3..4].to_i == 0 || date[6..9].to_i == 0\n    false\n  elsif date[6..9].to_i\
    \ < 100 || date[6..9].to_i > 3000\n    false\n  elsif date[3..4].to_i < 1 || date[3..4].to_i\
    \ > 12\n    false\n  elsif date[0..1].to_i > 31\n    false\n  elsif date[3..4].to_i\
    \ == 2 && date[0..1].to_i > 29\n    false\n  elsif date[3..4].to_i == 4 && date[0..1].to_i\
    \ > 30\n    false\n  elsif date[3..4].to_i == 6 && date[0..1].to_i > 30\n    false\n\
    \  elsif date[3..4].to_i == 9 && date[0..1].to_i > 30\n    false\n  elsif date[3..4].to_i\
    \ == 11 && date[0..1].to_i > 30\n    false\n  else\n    true\n  end\nend", " \
    \ return false if date.size.zero?\n  return false if !date.match(/^(0?[1-9]|[12][0-9]|3[01])[\\\
    /\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/)\n  date = date.split('-')\n  date[1] =\
    \ date[1].to_i\n  date[0] = date[0].to_i\n  if date[1] == 2 && Date.gregorian_leap?(date[2].to_i)\n\
    \    return false if date[0] > 29\n  elsif [1, 3, 5, 7, 8, 10, 12].include?(date[1])\n\
    \    return false if date[0] > 31\n  elsif [4, 6, 9, 11].include?(date[1])\n \
    \   return false if date[0] > 30\n  else\n    return false\n  end\n  true\nend",
  "  if date.empty?\n    false\n  elsif date =~ /^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])-([0-9]{4})$/\n\
    \    case date.split('-')[0].to_i\n    when 2\n      date.split('-')[1].to_i <=\
    \ 29 ? true : false\n    when 1, 3, 5, 7, 8, 10, 12\n      date.split('-')[1].to_i\
    \ <= 31 ? true : false\n    when 4, 6, 9, 11\n      date.split('-')[1].to_i <=\
    \ 30 ? true : false\n    end\n  else\n    false\n  end\nend", "  days_in_month\
    \ = {\n    1 => 31,\n    2 => 29,\n    3 => 31,\n    4 => 30,\n    5 => 31,\n\
    \    6 => 30,\n    7 => 31,\n    8 => 31,\n    9 => 30,\n    10 => 31,\n    11\
    \ => 30,\n    12 => 31\n  }\n  return false if date.empty?\n  month, day, year\
    \ = date.split('-')\n  return false if date.count('-') != 2\n  return false if\
    \ month.length != 2 || day.length != 2 || year.length != 4\n  return false if\
    \ month.to_i < 1 || month.to_i > 12\n  return false if day.to_i < 1 || day.to_i\
    \ > days_in_month[month.to_i]\n  true\nend", "  if date.split('-').size != 3\n\
    \    return false\n  end\n  day = date.split('-')[0].to_i\n  month = date.split('-')[1].to_i\n\
    \  year = date.split('-')[2].to_i\n  if month > 12 || month < 1\n    return false\n\
    \  end\n  if (month == 2 && day > 29) || (month == 2 && day < 1)\n    return false\n\
    \  end\n  if (month == 4 || month == 6 || month == 9 || month == 11) && (day >\
    \ 30 || day < 1)\n    return false\n  end\n  if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day > 31\
    \ || day < 1)\n    return false\n  end\n  if year > 9999 || year < 1\n    return\
    \ false\n  end\n  return true\nend", "  if date.empty?\n    return false\n  end\n\
    \  m = date.split('-')[0].to_i\n  d = date.split('-')[1].to_i\n  y = date.split('-')[2].to_i\n\
    \  if m < 1 || m > 12\n    return false\n  end\n  if m == 2\n    if (y % 4 ==\
    \ 0 && y % 100 != 0) || y % 400 == 0\n      if d < 1 || d > 29\n        return\
    \ false\n      end\n    else\n      if d < 1 || d > 28\n        return false\n\
    \      end\n    end\n  elsif m == 1 || m == 3 || m == 5 || m == 7 || m == 8 ||\
    \ m == 10 || m == 12\n    if d < 1 || d > 31\n      return false\n    end\n  else\n\
    \    if d < 1 || d > 30\n      return false\n    end\n  end\n  return true\nend",
  "  regex = /^\\d{2}-\\d{2}-\\d{4}$/\n  if regex.match(date)\n    true\n  else\n\
    \    false\n  end\nend", "  # write your code here\nend", "  date = date.split(\"\
    -\")\n  case date[1].to_i\n  when 1..12\n    case date[1].to_i\n    when 1,3,5,7,8,10,12\n\
    \      if date[0].to_i >= 1 && date[0].to_i <= 31\n        return true\n     \
    \ else\n        return false\n      end\n    when 4,6,9,11\n      if date[0].to_i\
    \ >= 1 && date[0].to_i <= 30\n        return true\n      else\n        return\
    \ false\n      end\n    when 2\n      if date[0].to_i >= 1 && date[0].to_i <=\
    \ 29\n        return true\n      else\n        return false\n      end\n    end\n\
    \  else\n    return false\n  end\nend\np valid_date(\"03-11-2000\")\np valid_date(\"\
    15-01-2012\")\np valid_date(\"04-0-2040\")\np valid_date(\"06-04-2020\")\np valid_date(\"\
    06/04/2020\")", "\tdate.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{2}-[\\\
    d]{2}-[\\d]{4}/) && date.scan(/[0-9]/).length == 8 && date.match(/[\\d]{", " \
    \ rules = [\n    ->(d) { d.size > 0 },\n    ->(d) {\n      m, d, y = d.split(\"\
    -\").map(&:to_i)\n      m.between?(1, 12) &&\n      d.between?(1, [31, 30, 29,\
    \ 28][m % 2].to_i) &&\n      y.between?(1900, 2999)\n    },\n    ->(d) { d =~\
    \ /\\A\\d{2}-\\d{2}-\\d{4}\\z/ }\n  ]\n  rules.all? { |rule| rule.call(date) }\n\
    end", "  date = date.gsub(/\\D/, '-')\n  date = date.split('-')\n  if date.length\
    \ != 3\n    return false\n  end\n  if !(date[0].to_i > 0 && date[0].to_i < 13)\n\
    \    return false\n  end\n  if !(date[1].to_i > 0 && date[1].to_i < 31)\n    return\
    \ false\n  end\n  if date[2].length != 4\n    return false\n  end\n  return true\n\
    end", "  if date.length == 0\n    return false\n  end\n  months = [\"01\", \"\
    02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\",\
    \ \"12\"]\n  days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"\
    08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\",\
    \ \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"]\n  date = date.split(\"-\")\n  date[0], date[1],\
    \ date[2] = date[0].to_i, date[1].to_i, date[2].to_i\n  if (date[0] < 1 || date[0]\
    \ > 12) || (date[1] < 1 || date[1] > 31) || (date[2] < 0)\n    return false\n\
    \  end\n  if date[0] == 2 && date[1] > 29\n    return false\n  end\n  if (date[0]\
    \ == 4 || date[0] == 6 || date[0] == 9 || date[0] == 11) && date[1] > 30\n   \
    \ return false\n  end\n  if months.include?(date[0].to_s) && days.include?(date[1].to_s)\n\
    \    return true\n  else\n    return false\n  end\nend", "  return false if date.empty?\n\
    \  return false if date =~ /[^\\d\\/-]/\n  return false if date.count('/') !=\
    \ 2\n  return false if date.count('-') != 2\n  return false if date.split('-').any?{|x|\
    \ x.to_i < 1}\n  return false if date.split('-').map(&:to_i).last > 9999\n  return\
    \ false if date.split('-').map(&:to_i).last < 1000\n  return false if date.split('-')[1].to_i\
    \ > 12\n  return false if date.split('-')[1].to_i < 1\n  return false if date.split('-')[2].to_i\
    \ > 31\n  return false if date.split('-')[2].to_i < 1\n  return false if date.split('-')[0].to_i\
    \ > 12\n  return false if date.split('-')[0].to_i < 1\n  return false if date.split('-')[1].to_i\
    \ == 2 && date.split('-')[2].to_i > 29\n  return false if date.split('-')[1].to_i.odd?\
    \ && date.split('-')[2].to_i > 31\n  return false if date.split('-')[1].to_i.even?\
    \ && date.split('-')[2].to_i > 30\n  true\nend", "  (date =~ /^\\d{2}-\\d{2}-\\\
    d{4}$/) &&\n    (1..12).cover?(date[0..1].to_i) &&\n    (1..31).cover?(date[3..4].to_i)\
    \ &&\n    (1..12).cover?(date[6..7].to_i) &&\n    (1..12).cover?(date[9..11].to_i)\n\
    end", "  d, m, y = date.split('-')\n  return false if d.to_i > 31 || d.to_i <\
    \ 1\n  return false if m.to_i > 12 || m.to_i < 1\n  return false if y.to_i > Time.now.year\n\
    \  true\nend", "  is_valid = true\n  is_valid = false if date.empty?\n  is_valid\
    \ = false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid =\
    \ false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false\
    \ if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false if\
    \ date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false if date.scan(/\\\
    A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\\
    z/).empty?\n  is_valid = false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n\
    \  is_valid = false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid\
    \ = false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid =\
    \ false if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false\
    \ if date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false if\
    \ date.scan(/\\A[0-9]+[-][0-9]+[-][0-9]+\\z/).empty?\n  is_valid = false if date.scan(/",
  "  return false if date.empty?\n  matched = date.match(/^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(\\\
    d{4})$/)\n  return false if matched.nil?\n  month, day, year = matched.captures\n\
    \  true if (1..12).include?(month.to_i) &&\n    (1..31).include?(day.to_i) &&\n\
    \    (1..12).include?(month.to_i) &&\n    (1..29).include?(day.to_i) if month.to_i\
    \ == 2\n  (1..30).include?(day.to_i) if %w[4 6 9 11].include?(month)\n  (1..31).include?(day.to_i)\
    \ if %w[1 3 5 7 8 10 12].include?(month)\nend", "  date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/ &&\n    (1..12).include?(date[0..1].to_i) &&\n    !(date[3..4].to_i < 1\
    \ || date[3..4].to_i > 31) &&\n    !((date[0..1].to_i == 4 || date[0..1].to_i\
    \ == 6 || date[0..1].to_i == 9 || date[0..1].to_i == 11) && date[3..4].to_i >\
    \ 30) &&\n    !(date[0..1].to_i == 2 && date[3..4].to_i > 29)\nend", "  months\
    \ = [1, 3, 5, 7, 8, 10, 12]\n  days = [4, 6, 9, 11]\n  date_regex = /(^((0[1-9]|1[0-2]){1}\\\
    /(0[1-9]|1\\d|2\\d|3[01]){1}\\/(19|20)\\d{2})\\b)/\n  if (date_regex.match?(date))\n\
    \    date_array = date.split(\"/\")\n    if (date_array[0].to_i > 12)\n      return\
    \ false\n    elsif (months.include?(date_array[0].to_i) && date_array[1].to_i\
    \ > 31)\n      return false\n    elsif (days.include?(date_array[0].to_i) && date_array[1].to_i\
    \ > 30)\n      return false\n    elsif (date_array[0].to_i == 2 && date_array[1].to_i\
    \ > 29)\n      return false\n    end\n    return true\n  else\n    return false\n\
    \  end\nend", "    month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \    parts = date.split(\"-\")\n    if (parts.length != 3) || (parts[0].length\
    \ != 2) || (parts[1].length != 2) || (parts[2].length != 4)\n        return false\n\
    \    end\n    month = parts[0].to_i\n    day = parts[1].to_i\n    year = parts[2].to_i\n\
    \    if (month < 1) || (month > 12)\n        return false\n    end\n    if (day\
    \ < 1) || (day > month_days[month - 1])\n        return false\n    end\n    if\
    \ (year < 0)\n        return false\n    end\n    if (month == 2) && (day == 29)\
    \ && !(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))\n        return\
    \ false\n    end\n    return true\nend", "  date_array = date.split(\"-\")\n \
    \ date_array.length == 3 ? true : false\nend", "  date.match(/(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})/)\n\
    end", "  if date.empty?\n    false\n  elsif date.match(/\\A[0-9]{2}[-][0-9]{2}[-][0-9]{4}\\\
    z/)\n    month, day, year = date.split('-')\n    if month.to_i >= 1 && month.to_i\
    \ <= 12\n      case month.to_i\n      when 1, 3, 5, 7, 8, 10, 12\n        day.to_i\
    \ >= 1 && day.to_i <= 31\n      when 4, 6, 9, 11\n        day.to_i >= 1 && day.to_i\
    \ <= 30\n      when 2\n        day.to_i >= 1 && day.to_i <= 29\n      end\n  \
    \  else\n      false\n    end\n  else\n    false\n  end\nend", "  array = date.split('-')\n\
    \  return false if array.length != 3\n  # return false if array[0].to_i > 12 ||\
    \ array[0].to_i <= 0\n  return false if array[1].to_i > 31 || array[1].to_i <=\
    \ 0\n  return false if array[2].to_i < 1000\n  return true\nend", "\tdate = date.split('-')\n\
    \tmonth, day, year = date[0].to_i, date[1].to_i, date[2].to_i\n\tif (month > 12\
    \ || month < 1) ||\n\t\t(day > 31 || day < 1) ||\n\t\t(year < 1) ||\n\t\t(year%4\
    \ != 0 && month == 2 && day > 28) ||\n\t\t(year%4 == 0 && month == 2 && day >\
    \ 29) ||\n\t\t(day > 30 && [4,6,9,11].include?(month))\n\t\tfalse\n\telse\n\t\t\
    true\n\tend\nend", "    arr = date.split('-')\n    return false if arr.length\
    \ != 3\n    return false if date.match(/\\d{2}-\\d{2}-\\d{4}/) == nil\n    return\
    \ false if arr[1].to_i < 1 || arr[1].to_i > 12\n    return false if arr[0].to_i\
    \ < 1 || arr[0].to_i > 31\n    return false if arr[1].to_i.in?([2]) && arr[0].to_i\
    \ > 29\n    return false if arr[1].to_i.in?([4,6,9,11]) && arr[0].to_i > 30\n\
    \    return true\nend", "  day, month, year = date.split('-')\n  day.to_i.between?(1,\
    \ 31) && month.to_i.between?(1, 12) && year.to_i.between?(1000, 9999)\nend", " \
    \ return false if date.empty?\n  arr = date.split(\"-\")\n  return false if arr.length\
    \ != 3\n  day = arr[0].to_i\n  month = arr[1].to_i\n  year = arr[2].to_i\n  return\
    \ false if year < 1\n  return false if month < 1 || month > 12\n  if month ==\
    \ 2\n    return false if day < 1 || day > 29\n  elsif month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n  \
    \  return false if day < 1 || day > 31\n  else\n    return false if day < 1 ||\
    \ day > 30\n  end\n  true\nend", "  valid = true\n  date_arr = date.split(\"-\"\
    )\n  if date_arr.length != 3\n    valid = false\n  elsif date_arr[0].to_i == 0\
    \ || date_arr[1].to_i == 0 || date_arr[2].to_i == 0\n    valid = false\n  else\n\
    \    case date_arr[0].to_i\n    when 1,3,5,7,8,10,12\n      valid = false if date_arr[1].to_i\
    \ > 31\n    when 4,6,9,11\n      valid = false if date_arr[1].to_i > 30\n    when\
    \ 2\n      if (date_arr[2].to_i % 4) == 0\n        valid = false if date_arr[1].to_i\
    \ > 29\n      else\n        valid = false if date_arr[1].to_i > 28\n      end\n\
    \    else\n      valid = false\n    end\n  end\n  valid\nend", "  date = date.gsub(/-/,\
    \ \"/\")\n  date_array = date.split(\"/\")\n  if date_array.count == 3 && date.length\
    \ == 10\n    if (date_array[0].to_i > 0 && date_array[0].to_i < 13) && (date_array[1].to_i\
    \ > 0 && date_array[1].to_i < 32) && (date_array[2].to_i > 0)\n      return true\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend",
  '    regex = /([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-\d{4}/', "  date\
    \ = date.split('-')\n  date[0].to_i < 13 && date[1].to_i < 32 && date[2].to_i\
    \ > 0\nend\np valid_date('03-11-2000')\np valid_date('15-01-2012')\np valid_date('04-0-2040')\n\
    p valid_date('06-04-2020')\np valid_date('06/04/2020')", "  if date.empty?\n \
    \   return false\n  end\n  month, day, year = date.split(\"-\")\n  if (1..12).include?(month.to_i)\n\
    \    if (1..12).include?(month.to_i) && ((1..31).include?(day.to_i) || (1..30).include?(day.to_i)\
    \ || (1..29).include?(day.to_i))\n      return true\n    end\n  end\n  return\
    \ false\nend", "  # Your code here\nend", "  date = date.split('-')\n  date[1].to_i.between?(1,12)\
    \ &&\n  date[2].to_i.between?(2000, 3000) &&\n  date[0].to_i.between?(1, 31)\n\
    end", "  date_reg = date.match(/(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}/)\n  return false if date.empty? || date_reg.nil?", "  if date.empty?\n \
    \   false\n  elsif date.match(/^(\\d{2})(\\/|-)(\\d{2})(\\/|-)(\\d{4})$/)\n  \
    \  month = date.scan(/^(\\d{2})(\\/|-)(\\d{2})(\\/|-)(\\d{4})$/)[0][0].to_i\n\
    \    day = date.scan(/^(\\d{2})(\\/|-)(\\d{2})(\\/|-)(\\d{4})$/)[0][2].to_i\n\
    \    year = date.scan(/^(\\d{2})(\\/|-)(\\d{2})(\\/|-)(\\d{4})$/)[0][4].to_i\n\
    \    if month >= 1 && month <= 12\n      if (day >= 1 && day <= 31) && (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n        true\n      elsif (day >= 1 && day <= 30) && (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n        true\n      elsif\
    \ (day >= 1 && day <= 29) && month == 2\n        true\n      else\n        false\n\
    \      end\n    else\n      false\n    end\n  else\n    false\n  end\nend", " \
    \ date = date.split(\"-\")\n  if date.size != 3\n    return false\n  end\n  if\
    \ date[0].size != 2 || date[1].size != 2 || date[2].size != 4\n    return false\n\
    \  end\n  if date[0].to_i > 12 || date[0].to_i < 1\n    return false\n  end\n\
    \  if (date[0].to_i == 1 || date[0].to_i == 3 || date[0].to_i == 5 || date[0].to_i\
    \ == 7 || date[0].to_i == 8 || date[0].to_i == 10 || date[0].to_i == 12) && (date[1].to_i\
    \ > 31 || date[1].to_i < 1)\n    return false\n  end\n  if (date[0].to_i == 4\
    \ || date[0].to_i == 6 || date[0].to_i == 9 || date[0].to_i == 11) && (date[1].to_i\
    \ > 30 || date[1].to_i < 1)\n    return false\n  end\n  if date[0].to_i == 2 &&\
    \ (date[1].to_i > 29 || date[1].to_i < 1)\n    return false\n  end\n  return true\n\
    end", "  date_exp = date.split('-')\n  date_exp.each { |date| date.to_i.to_s !=\
    \ date } ? false : date_exp\nend", "  days, months, years = date.split('-')\n\
    \  return false if days.to_i < 1 || days.to_i > 31 || months.to_i < 1 || months.to_i\
    \ > 12\n  return false if months.to_i == 2 && days.to_i > 29\n  return false if\
    \ [4, 6, 9, 11].include?(months.to_i) && days.to_i > 30\n  return false if [1,\
    \ 3, 5, 7, 8, 10, 12].include?(months.to_i) && days.to_i > 31\n  true\nend", " \
    \ md_1 = /^(((0[1-9]|[12]\\d|3[01])-(0[13578]|1[02])-((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\\
    d|30)-(0[13456789]|1[012])-((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])-02-((19|[2-9]\\\
    d)\\d{2}))|(29-02-((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/\n\
    \  md_2 = /^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\\
    d|30)\\/(0[13456789]|1[012])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\\
    /02\\/((19|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/\n\
    \  md_1.match(date) || md_2.match(date)\nend\np valid_date(\"06-04-2020\")\np\
    \ valid_date(\"06/04/2020\")\np valid_date(\"03-11-2000\")\np valid_date(\"15-01-2012\"\
    )\np valid_date(\"04-0-2040\")", "  # check if it's empty\n  return false if date.empty?",
  "  # write your code here\nend", "  date =~ /\\A([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12][0-9]|3[01])-\\\
    d{4}\\z/\nend", '  return false if date.empty?', "  return false if date.empty?\n\
    \  date_array = date.split(\"-\")\n  return false if date_array.size != 3\n  return\
    \ false if date_array[0].to_i > 12\n  return false if date_array[1].to_i > 31\n\
    \  return false if date_array[0].to_i == 2 && date_array[1].to_i > 29\n  true\n\
    end", "  date_array = date.split('-')\n  dd = date_array[0].to_i\n  mm = date_array[1].to_i\n\
    \  yyyy = date_array[2].to_i\n  if (dd < 1) || (dd > 31)\n    return false\n \
    \ end\n  if (mm < 1) || (mm > 12)\n    return false\n  end\n  if (yyyy < 0)\n\
    \    return false\n  end\n  return true\nend", "  # your code here\nend", "  date_reg\
    \ = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/\n  return true if\
    \ date_reg.match(date)", "    date.empty? ? false : date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/ ? true : false\nend\nvalid_date.call(\"06-04-2020\")", "  # Write your\
    \ code here.\n  begin\n    Date.parse(date)\n    true\n  rescue ArgumentError\n\
    \    false\n  end\nend", "  date_regex = /^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-\\\
    d{4}$/\n  if date =~ date_regex\n    months = [1,3,5,7,8,10,12]\n    days = [4,6,9,11]\n\
    \    month = date.split('-')[0].to_i\n    day = date.split('-')[1].to_i\n    if\
    \ months.include?(month)\n      return false if day > 31\n    elsif days.include?(month)\n\
    \      return false if day > 30\n    elsif month == 2\n      return false if day\
    \ > 29\n    end\n    return true\n  else\n    return false\n  end\nend", "  splitted_date\
    \ = date.split(\"-\")\n  # Check the length of the splitted date\n  if splitted_date.length\
    \ != 3\n    return false\n  end\n  # Check the format of the date is valid\n \
    \ if splitted_date[0].length != 2 || splitted_date[1].length != 2 || splitted_date[2].length\
    \ != 4\n    return false\n  end\n  # Check the Month length is less than 1 and\
    \ greater than 12\n  if splitted_date[0].to_i < 1 || splitted_date[0].to_i > 12\n\
    \    return false\n  end\n  # Check the Month 1,3,5,7,8,10,12 have number of days\
    \ from 1 to 31\n  if (splitted_date[0].to_i == 1 || splitted_date[0].to_i == 3\
    \ || splitted_date[0].to_i == 5 || splitted_date[0].to_i == 7 || splitted_date[0].to_i\
    \ == 8 || splitted_date[0].to_i == 10 || splitted_date[0].to_i == 12) && (splitted_date[1].to_i\
    \ < 1 || splitted_date[1].to_i > 31)\n    return false\n  end\n  # Check the Month\
    \ 4,6,9,11 have number of days from 1 to 30\n  if (splitted_date[0].to_i == 4\
    \ || splitted_date[0].to_i == 6 || splitted_date[0].to_i == 9 || splitted_date[0].to_i\
    \ == 11) && (splitted_date[1].to_i < 1 || splitted_date[1].to_i > 30)\n    return\
    \ false\n  end\n  # Check the Month 2 have number of days from 1 to 29\n  if splitted_date[0].to_i\
    \ == 2 && (splitted_date[1].to_i < 1 || splitted_date[1].to_i > 29)\n    return\
    \ false\n  end\n  return true\nend", "  date_arr = date.split('-')\n  date_arr[0]\
    \ = date_arr[0].to_i\n  date_arr[1] = date_arr[1].to_i\n  date_arr[2] = date_arr[2].to_i\n\
    \  return false if date_arr.include?(0)\n  return false if date_arr[0] > 12 ||\
    \ date_arr[0] < 1\n  if date_arr[0] == 2\n    return false if date_arr[1] > 29\
    \ || date_arr[1] < 1\n  elsif [4,6,9,11].include?(date_arr[0])\n    return false\
    \ if date_arr[1] > 30 || date_arr[1] < 1\n  else\n    return false if date_arr[1]\
    \ > 31 || date_arr[1] < 1\n  end\n  true\nend", "  # Write your code here\nend",
  "  if date.length == 0\n    return false\n  end\n  date_array = date.split('-')\n\
    \  if date_array.length != 3\n    return false\n  end\n  months = [\"01\", \"\
    02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\",\
    \ \"12\"]\n  months_with_30_days = [\"04\", \"06\", \"09\", \"11\"]\n  if date_array[0].to_i\
    \ < 1 || date_array[0].to_i > 12\n    return false\n  end\n  if date_array[0]\
    \ == \"02\"\n    if date_array[1].to_i < 1 || date_array[1].to_i > 29\n      return\
    \ false\n    end\n  elsif months_with_30_days.include?(date_array[0])\n    if\
    \ date_array[1].to_i < 1 || date_array[1].to_i > 30\n      return false\n    end\n\
    \  else\n    if date_array[1].to_i < 1 || date_array[1].to_i > 31\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if !date.empty?\n    if (1..12).include?(date[0..1].to_i)\
    \ && (1..12).include?(date[3..4].to_i) && (1..31).include?(date[6..7].to_i)\n\
    \      if (1..12).include?(date[0..1].to_i)\n        if (1..31).include?(date[3..4].to_i)\n\
    \          return true\n        else\n          return false\n        end\n  \
    \    elsif (1..12).include?(date[3..4].to_i)\n        if (1..31).include?(date[0..1].to_i)\n\
    \          return true\n        else\n          return false\n        end\n  \
    \    else\n        return false\n      end\n    else\n      return false\n   \
    \ end\n  else\n    return false\n  end\nend", "    # Your code here\nend", " \
    \ if !date.empty? && \n    (date[0..1].to_i > 0 && date[0..1].to_i < 13) &&\n\
    \    (date[3..4].to_i > 0 && date[3..4].to_i < 32) &&\n    (date[-4..-1].to_i\
    \ > 0) &&\n    (date.scan(/[^0-9-]/).empty?)\n    if date[0..1].to_i == 2 && (date[-4..-1].to_i%4\
    \ == 0)\n      if date[3..4].to_i < 30\n        return true\n      else\n    \
    \    return false\n      end\n    elsif date[0..1].to_i == 2 && (date[-4..-1].to_i%4\
    \ != 0)\n      if date[3..4].to_i < 29\n        return true\n      else\n    \
    \    return false\n      end\n    elsif (date[0..1].to_i == 1) || (date[0..1].to_i\
    \ == 3) || (date[0..1].to_i == 5) || (date[0..1].to_i == 7) || (date[0..1].to_i\
    \ == 8) || (date[0..1].to_i == 10) || (date[0..1].to_i == 12)\n      if date[3..4].to_i\
    \ < 32\n        return true\n      else\n        return false\n      end\n   \
    \ elsif (date[0..1].to_i == 4) || (date[0..1].to_i == 6) || (date[0..1].to_i ==\
    \ 9) || (date[0..1].to_i == 11)\n      if date[3..4].to_i < 31\n        return\
    \ true\n      else\n        return false\n      end\n    end\n  else\n    return\
    \ false\n  end\nend", "  return false if date.empty?\n  day, month, year = date.split(\"\
    -\").map(&:to_i)\n  return false if day > 31 || month > 12 || day == 0 || month\
    \ == 0 || year == 0\n  return false if month.in?([4, 6, 9, 11]) && day > 30\n\
    \  return false if month == 2 && day > 29\n  true\nend", "  date = date.split(\"\
    -\")\n  date[0] = date[0].to_i\n  date[1] = date[1].to_i\n  date[2] = date[2].to_i\n\
    \  if date[0] > 12 || date[0] < 1\n    return false\n  elsif date[1] > 31 || date[1]\
    \ < 1\n    return false\n  elsif date[0] == 4 || date[0] == 6 || date[0] == 9\
    \ || date[0] == 11\n    if date[1] > 30\n      return false\n    end\n  elsif\
    \ date[0] == 2\n    if date[1] > 29\n      return false\n    end\n  end\n  return\
    \ true\nend", "  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include?(date[0..1].to_i) &&\n  (1..31).include?(date[3..4].to_i)\
    \ &&\n  date[0..1].to_i != 2 &&\n  (1..12).include", "  date = date.split('-')\n\
    \  date[1] = date[1].to_i\n  date[2] = date[2].to_i\n  date[0] = date[0].to_i\n\
    \  if date[0] <= 12\n    if date[0] == 1 || date[0] == 3 || date[0] == 5 || date[0]\
    \ == 7 || date[0] == 8 || date[0] == 10 || date[0] == 12\n      if date[1] > 31\n\
    \        return false\n      end\n    elsif date[0] == 4 || date[0] == 6 || date[0]\
    \ == 9 || date[0] == 11\n      if date[1] > 30\n        return false\n      end\n\
    \    elsif date[0] == 2\n      if date[2] % 4 == 0\n        if date[1] > 29\n\
    \          return false\n        end\n      else\n        if date[1] > 28\n  \
    \        return false\n        end\n      end\n    end\n  else\n    return false\n\
    \  end\n  return true\nend", "  if date != \"\"\n    if !date.include? \"/\"\n\
    \      if date.split(\"-\").size == 3\n        if date.split(\"-\")[0].to_i >=\
    \ 1 && date.split(\"-\")[0].to_i <= 12\n          if date.split(\"-\")[1].to_i\
    \ >= 1 && date.split(\"-\")[1].to_i <= 31\n            if date.split(\"-\")[0].to_i\
    \ == 1 || date.split(\"-\")[0].to_i == 3 || date.split(\"-\")[0].to_i == 5 ||\
    \ date.split(\"-\")[0].to_i == 7 || date.split(\"-\")[0].to_i == 8 || date.split(\"\
    -\")[0].to_i == 10 || date.split(\"-\")[0].to_i == 12\n              if date.split(\"\
    -\")[1].to_i <= 31\n                return true\n              else\n        \
    \        return false\n              end\n            elsif date.split(\"-\")[0].to_i\
    \ == 4 || date.split(\"-\")[0].to_i == 6 || date.split(\"-\")[0].to_i == 9 ||\
    \ date.split(\"-\")[0].to_i == 11\n              if date.split(\"-\")[1].to_i\
    \ <= 30\n                return true\n              else\n                return\
    \ false\n              end\n            elsif date.split(\"-\")[0].to_i == 2\n\
    \              if date.split(\"-\")[1].to_i <= 29\n                return true\n\
    \              else\n                return false\n              end\n       \
    \     end\n          else\n            return false\n          end\n        else\n\
    \          return false\n        end\n      else\n        return false\n     \
    \ end\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end", "  return false if date.empty?\n  array = date.split('-')\n  return false\
    \ if array.size != 3\n  return false if array[0].to_i > 12\n  return false if\
    \ array[1].to_i > 31 && (array[0].to_i == 1 || array[0].to_i == 3 || array[0].to_i\
    \ == 5 || array[0].to_i == 7 || array[0].to_i == 8 || array[0].to_i == 10 || array[0].to_i\
    \ == 12)\n  return false if array[1].to_i > 30 && (array[0].to_i == 4 || array[0].to_i\
    \ == 6 || array[0].to_i == 9 || array[0].to_i == 11)\n  return false if array[1].to_i\
    \ > 29 && array[0].to_i == 2\n  true\nend", '  return false if date.nil? || date.strip.empty?',
  "  date_array = date.split('-')\n  date_array.map!{|element| element.to_i}\n  if\
    \ date_array.length != 3\n    return false\n  elsif date_array[0] > 12 || date_array[0]\
    \ < 1\n    return false\n  elsif date_array[0] == 2 && date_array[1] > 29\n  \
    \  return false\n  elsif date_array[0] % 2 == 0 && date_array[0] != 2 && date_array[1]\
    \ > 30\n    return false\n  elsif date_array[0] % 2 != 0 && date_array[1] > 31\n\
    \    return false\n  else\n    return true\n  end\nend", "  match = /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/.match(date)\n  return false if match.nil?", "\tdate_rules = {\n\t\t\"01\"\
    \ => { min: 1, max: 31 },\n\t\t\"02\" => { min: 1, max: 29 },\n\t\t\"03\" => {\
    \ min: 1, max: 31 },\n\t\t\"04\" => { min: 1, max: 30 },\n\t\t\"05\" => { min:\
    \ 1, max: 31 },\n\t\t\"06\" => { min: 1, max: 30 },\n\t\t\"07\" => { min: 1, max:\
    \ 31 },\n\t\t\"08\" => { min: 1, max: 31 },\n\t\t\"09\" => { min: 1, max: 30 },\n\
    \t\t\"10\" => { min: 1, max: 31 },\n\t\t\"11\" => { min: 1, max: 30 },\n\t\t\"\
    12\" => { min: 1, max: 31 }\n\t}\n\tparts = date.split(\"-\")\n\tif parts.length\
    \ == 3 &&\n\t   parts[0].length == 2 &&\n\t   parts[1].length == 2 &&\n\t   parts[2].length\
    \ == 4 &&\n\t   date_rules[parts[0]][:min] <= parts[1].to_i &&\n\t   date_rules[parts[0]][:max]\
    \ >= parts[1].to_i &&\n\t   date_rules.keys.include?(parts[0]) &&\n\t   \"2020\"\
    \ <= parts[2]\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    #code\
    \ goes here\nend", "    # Create an array to be used later by splitting the date\
    \ string\n    date_array = date.split('-')\n    # Handle the first rule, if the\
    \ date_array length is not equal to 3\n    # return false\n    if date_array.length\
    \ != 3\n        return false\n    end\n    # Handle the second rule\n    # If\
    \ the month in the array is either 1,3,5,7,8,10,12, make sure the date\n    #\
    \ is not less than 1 or greater than 31\n    if date_array[0] == '1' || date_array[0]\
    \ == '3' || date_array[0] == '5' || date_array[0] == '7' || date_array[0] == '8'\
    \ || date_array[0] == '10' || date_array[0] == '12'\n        if date_array[1].to_i\
    \ < 1 || date_array[1].to_i > 31\n            return false\n        end\n    #\
    \ If the month in the array is either 4,6,9,11, make sure the date\n    # is not\
    \ less than 1 or greater than 30\n    elsif date_array[0] == '4' || date_array[0]\
    \ == '6' || date_array[0] == '9' || date_array[0] == '11'\n        if date_array[1].to_i\
    \ < 1 || date_array[1].to_i > 30\n            return false\n        end\n    #\
    \ If the month in the array is 2, make sure the date\n    # is not less than 1\
    \ or greater than 29\n    elsif date_array[0] == '2'\n        if date_array[1].to_i\
    \ < 1 || date_array[1].to_i > 29\n            return false\n        end\n    end\n\
    \    # Handle the third rule, if the month is less than 1 or greater than 12\n\
    \    # return false\n    if date_array[0].to_i < 1 || date_array[0].to_i > 12\n\
    \        return false\n    end\n    # If all else passes, return true\n    return\
    \ true\nend", "  date_regex = /^\\d{2}-\\d{2}-\\d{4}$/\n  date =~ date_regex &&\
    \ date.match(date_regex)[0] == date\nend", "  split_date = date.split('-')\n \
    \ if split_date.size == 3\n    day = split_date[0].to_i\n    month = split_date[1].to_i\n\
    \    year = split_date[2].to_i\n    if day > 0 && day < 32 && month > 0 && month\
    \ < 13 && year > 0\n      if month == 2\n        if year % 4 == 0\n          if\
    \ day > 29\n            return false\n          end\n        else\n          if\
    \ day > 28\n            return false\n          end\n        end\n      else\n\
    \        if day > 30\n          return false\n        end\n      end\n      return\
    \ true\n    end\n  end\n  return false\nend", "  if date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n\
    \    if date =~ /^(01|03|05|07|08|10|12)-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n\
    \      return true\n    elsif date =~ /^(04|06|09|11)-(0[1-9]|[1-2][0-9]|30)-[0-9]{4}$/\n\
    \      return true\n    elsif date =~ /^02-(0[1-9]|1[0-9]|2[0-8])-[0-9]{4}$/\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\np valid_date(\"03-11-2000\") #true\np valid_date(\"15-01-2012\"\
    ) #false\np valid_date(\"04-0-2040\") #false\np valid_date(\"06-04-2020\") #true\n\
    p valid_date(\"06/04/2020\") #false", "  begin\n    Date.parse(date)\n    true\n\
    \  rescue\n    false\n  end\nend", "  # code goes here\nend", "  date = date.split('-')\n\
    \  date_valid = false\n  month_valid = false\n  day_valid = false\n  day = date[1].to_i\n\
    \  month = date[0].to_i\n  if date.length == 3\n    if date[2].length == 4\n \
    \     date_valid = true\n    end\n  end\n  if month > 0 && month < 13\n    month_valid\
    \ = true\n  end\n  if day > 0 && day < 32\n    day_valid = true\n  end\n  if month\
    \ == 2 && day == 29\n    day_valid = true\n  end\n  if day > 29 && month == 2\n\
    \    day_valid = false\n  end\n  if month == 4 || month == 6 || month == 9 ||\
    \ month == 11\n    if day > 30\n      day_valid = false\n    end\n  end\n  if\
    \ date_valid && month_valid && day_valid\n    return true\n  else\n    return\
    \ false\n  end\nend", "  days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \  date = date.gsub(\"-\", \"/\")\n  if date.match?(/^\\d{2}\\/\\d{2}\\/\\d{4}$/)\
    \ && date.match?(/^(0[1-9]|1[0-2])\\/(0[1-9]|[1-2][0-9]|3[0-1])\\/[0-9]{4}$/)\n\
    \    days[date[0, 2].to_i - 1] >= date[3, 2].to_i\n  else\n    false\n  end\n\
    end", "  # your code goes here!\nend", "  date_regex = /\\A(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(19[0-9]{2}|20[0-9]{2})\\\
    z/\n  (date =~ date_regex) == 0\nend", "  return false if date.nil? || date.empty?\n\
    \  date_pattern = /\\A(\\d{2})-(\\d{2})-(\\d{4})\\z/\n  return false unless date_pattern.match(date)\n\
    \  month, day, year = date.split('-').map(&:to_i)\n  return false if [month, day,\
    \ year].include?(0)\n  return false if month > 12 || month < 1\n  return false\
    \ if (month % 2 == 0 && month < 8) && day > 30\n  return false if (month % 2 ==\
    \ 0 && month > 7) && day > 30\n  return false if (month % 2 != 0 && month < 8)\
    \ && day > 31\n  return false if (month % 2 != 0 && month > 7) && day > 31\n \
    \ return false if month == 2 && day > 29\n  true\nend", "  day, month, year =\
    \ date.split(\"-\")\n  if day.length == 2 && month.length == 2 && year.length\
    \ == 4\n    # Set days in months\n    days_in_feb = (year.to_i % 4 == 0) ? 29\
    \ : 28\n    days_in_months = [0, 31, days_in_feb, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31]\n    days_in_months[month.to_i] >= day.to_i && days_in_months[month.to_i]\
    \ != 0\n  else\n    false\n  end\nend", "  array = date.split('-')\n  if array.count\
    \ < 3\n    false\n  elsif array[0].to_i > 12\n    false\n  elsif array[1].to_i\
    \ < 1 || array[1].to_i > 31\n    false\n  elsif array[0].to_i == 2 && array[1].to_i\
    \ > 29\n    false\n  elsif array[0].to_i == 4 && array[1].to_i > 30\n    false\n\
    \  elsif array[0].to_i == 6 && array[1].to_i > 30\n    false\n  elsif array[0].to_i\
    \ == 9 && array[1].to_i > 30\n    false\n  elsif array[0].to_i == 11 && array[1].to_i\
    \ > 30\n    false\n  else\n    true\n  end\nend", "  date_r = date.split(\"-\"\
    )\n  days = date_r[1].to_i\n  month = date_r[0].to_i\n  # p \"days: #{days}\"\n\
    \  # p \"month: #{month}\"\n  if month < 1 || month > 12\n    # p \"month not\
    \ valid\"\n    return false\n  elsif month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12\n    # p \"if\"\n   \
    \ days <= 31 && days >= 1\n  elsif month == 4 || month == 6 || month == 9 || month\
    \ == 11\n    # p \"elif\"\n    days <= 30 && days >= 1\n  elsif month == 2\n \
    \   # p \"else\"\n    days <= 29 && days >= 1\n  end\nend", "  date = date.gsub(/\\\
    //, '-')\n  dates = date.split('-')\n  months = [1, 3, 5, 7, 8, 10, 12]\n  months_30\
    \ = [4, 6, 9, 11]\n  (dates[0].to_i > 0 and dates[0].to_i < 13) and ((months.include?\
    \ dates[0].to_i and dates[1].to_i > 0 and dates[1].to_i < 32) or (months_30.include?\
    \ dates[0].to_i and dates[1].to_i > 0 and dates[1].to_i < 31) or (dates[0].to_i\
    \ == 2 and dates[1].to_i > 0 and dates[1].to_i < 30)) and (dates[2].to_i > 0)\
    \ and (date =~ /\\d{2}-\\d{2}-\\d{4}/)\nend", "  date = date.split('-')\n  date.last.to_i\
    \ < 2020 && date.last.to_i > 1900 && date.last.to_i.is_a?(Integer) &&\n  date.first.to_i\
    \ > 0 && date.first.to_i < 13 && date.first.to_i.is_a?(Integer) &&\n  date[1].to_i\
    \ > 0 && date[1].to_i < 32 && date[1].to_i.is_a?(Integer) &&\n  date.size == 3\
    \ && date.all? { |x| x =~ /\\d{2}/ }\nend\np valid_date(\"03-11-2000\") # true\n\
    p valid_date(\"15-01-2012\") # false\np valid_date(\"04-0-2040\") # false\np valid_date(\"\
    06-04-2020\") # true\np valid_date(\"06/04/2020\") # false", "  date = date.split('-')\n\
    \  return false if date.size != 3\n  return false if date[0].size != 2 || date[1].size\
    \ != 2 || date[2].size != 4\n  return false if date[0].to_i < 1 || date[0].to_i\
    \ > 12\n  return false if date[1].to_i < 1 || date[1].to_i > 31\n  if date[0].to_i\
    \ == 2\n    return false if date[1].to_i > 29\n  elsif date[0].to_i == 1 || date[0].to_i\
    \ == 3 || date[0].to_i == 5 || date[0].to_i == 7 || date[0].to_i == 8 || date[0].to_i\
    \ == 10 || date[0].to_i == 12\n    return false if date[1].to_i > 31\n  else\n\
    \    return false if date[1].to_i > 30\n  end\n  true\nend", "\tif (date =~ /^(\\\
    d{2})-(\\d{2})-(\\d{4})$/) == nil\n\t\treturn false\n\tend\n\tmonth = $1.to_i\n\
    \tday = $2.to_i\n\tyear = $3.to_i\n\tif month < 1 || month > 12\n\t\treturn false\n\
    \tend\n\tif month == 2\n\t\tif day < 1 || day > 29\n\t\t\treturn false\n\t\tend\n\
    \telsif month == 4 || month == 6 || month == 9 || month == 11\n\t\tif day < 1\
    \ || day > 30\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif day < 1 || day > 31\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  date_array = date.split(\"\
    -\")\n  if date_array.length == 3\n    month = date_array[0].to_i\n    day = date_array[1].to_i\n\
    \    year = date_array[2].to_i\n    if month < 1 || month > 12\n      return false\n\
    \    end\n    if month == 2\n      if day < 1 || day > 29\n        return false\n\
    \      end\n    elsif month == 4 || month == 6 || month == 9 || month == 11\n\
    \      if day < 1 || day > 30\n        return false\n      end\n    else\n   \
    \   if day < 1 || day > 31\n        return false\n      end\n    end\n    if year\
    \ < 1000 || year > 9999\n      return false\n    end\n    return true\n  else\n\
    \    return false\n  end\nend", "  # write your code here\nend", "    date_month\
    \ = date.match(/\\d{2}/).to_s.to_i\n    date_day = date.match(/\\-(\\d{2})\\-/).to_s.gsub(\"\
    -\", \"\").to_i\n    date_year = date.match(/\\d{4}$/).to_s.to_i\n    if date_year\
    \ % 400 == 0 || (date_year % 4 == 0 && date_year % 100 != 0)\n        feb_days\
    \ = 29\n    else\n        feb_days = 28\n    end\n    if date_month == 2 && date_day\
    \ > feb_days\n        puts false\n    elsif date_month < 1 || date_month > 12\n\
    \        puts false\n    elsif date_day < 1 || date_day > 31\n        puts false\n\
    \    elsif date_month == 4 || date_month == 6 || date_month == 9 || date_month\
    \ == 11\n        if date_day > 30\n            puts false\n        else\n    \
    \        puts true\n        end\n    else\n        puts true\n    end\nend\nvalid_date(\"\
    03-11-2000\")\nvalid_date(\"15-01-2012\")\nvalid_date(\"04-0-2040\")\nvalid_date(\"\
    06-04-2020\")\nvalid_date(\"06/04/2020\")", "  if date.empty?\n    return false\n\
    \  end\n  date_regex = %r{\\A(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\d{4}\\\
    z}\n  match = date_regex.match(date)\n  if match.nil?\n    return false\n  end\n\
    \  month, day, year = match.captures\n  days_in_month = [31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31]\n  if year.to_i % 4 == 0 && year.to_i % 100 != 0\n \
    \   days_in_month[1] = 29\n  end\n  return days_in_month[month.to_i - 1] >= day.to_i\n\
    end", "  date_array = date.split('-')\n  # check empty string\n  if date_array[0].nil?\
    \ || date_array[1].nil? || date_array[2].nil?\n    return false\n  end\n  # check\
    \ month: greater than 0, less than 13\n  if date_array[0].to_i > 12 || date_array[0].to_i\
    \ < 1\n    return false\n  end\n  # check day: greater than 0, less than 32\n\
    \  if date_array[1].to_i > 31 || date_array[1].to_i < 1\n    return false\n  end\n\
    \  # check 29, 30, 31\n  if date_array[0].to_i == 2\n    if date_array[1].to_i\
    \ > 29 || date_array[1].to_i < 1\n      return false\n    end\n  elsif date_array[0].to_i\
    \ == 4 || date_array[0].to_i == 6 || date_array[0].to_i == 9 || date_array[0].to_i\
    \ == 11\n    if date_array[1].to_i > 30 || date_array[1].to_i < 1\n      return\
    \ false\n    end\n  end\n  # check length of year\n  if date_array[2].length !=\
    \ 4\n    return false\n  end\n  return true\nend", "  if date == \"\"\n    return\
    \ false\n  elsif date.split(\"-\").size != 3\n    return false\n  end\n  new_date\
    \ = date.split(\"-\")\n  month = new_date[0].to_i\n  day = new_date[1].to_i\n\
    \  year = new_date[2].to_i\n  if month < 1 || month > 12\n    return false\n \
    \ elsif month == 2 && day > 29\n    return false\n  elsif month == 2 && day <\
    \ 1\n    return false\n  elsif month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12\n    if day > 31 || day < 1\n\
    \      return false\n    end\n  elsif month == 4 || month == 6 || month == 9 ||\
    \ month == 11\n    if day > 30 || day < 1\n      return false\n    end\n  end\n\
    \  return true\nend", "  months = [\"31\", \"29\", \"31\", \"30\", \"31\", \"\
    30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\"]\n  a, b, c = date.split('-')\n\
    \  (a.to_i.between?(1, 12) && b.to_i.between?(1, months[a.to_i - 1].to_i) && c.length\
    \ == 4) ? true : false\nend", "  day, month, year = date.split(\"-\")\n  if day\
    \ =~ /\\A\\d{2}\\z/ and month =~ /\\A\\d{2}\\z/ and year =~ /\\A\\d{4}\\z/\n \
    \   days = []\n    days << 31 if month.to_i.in? [1,3,5,7,8,10,12]\n    days <<\
    \ 30 if month.to_i.in? [4,6,9,11]\n    days << 29 if month.to_i == 2\n    !days.empty?\
    \ and day.to_i.in? (1..days.first)\n  else\n    false\n  end\nend", "  return\
    \ false if date.size == 0\n  d, m, y = date.split('-')\n  return false if !/\\\
    d\\d-\\d\\d-\\d\\d\\d\\d/.match(date)\n  return false if m.to_i < 1 || m.to_i\
    \ > 12\n  return false if y.to_i < 0\n  case m.to_i\n  when 1, 3, 5, 7, 8, 10,\
    \ 12\n    return false if d.to_i < 1 || d.to_i > 31\n  when 4, 6, 9, 11\n    return\
    \ false if d.to_i < 1 || d.to_i > 30\n  when 2\n    if y.to_i % 4 == 0\n     \
    \ return false if d.to_i < 1 || d.to_i > 29\n    else\n      return false if d.to_i\
    \ < 1 || d.to_i > 28\n    end\n  end\n  true\nend\nputs valid_date(\"03-11-2000\"\
    )\nputs valid_date(\"15-01-2012\")\nputs valid_date(\"04-0-2040\")\nputs valid_date(\"\
    06-04-2020\")\nputs valid_date(\"06/04/2020\")", "  days_in_month = [0, 31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  return false if date.size < 8\n \
    \ return false if date.size > 10\n  return false if date[2] != '-' && date[5]\
    \ != '-'\n  date = date.split(\"-\")\n  return false if date[0].to_i > 12 || date[0].to_i\
    \ < 1\n  return false if date[1].to_i > days_in_month[date[0].to_i] || date[1].to_i\
    \ < 1\n  return false if date[2].to_i < 1\n  true\nend", "  date = date.split(\"\
    -\")\n  months = {\n    1 => 31,\n    2 => 29,\n    3 => 31,\n    4 => 30,\n \
    \   5 => 31,\n    6 => 30,\n    7 => 31,\n    8 => 31,\n    9 => 30,\n    10 =>\
    \ 31,\n    11 => 30,\n    12 => 31\n  }\n  months.each do |month, days|\n    if\
    \ date[0].to_i == month && date[1].to_i > days\n      return false\n    end\n\
    \  end\n  if date[0].to_i == 0 || date[1].to_i == 0 || date[2].to_i == 0\n   \
    \ return false\n  elsif date[0].to_i > 12\n    return false\n  end\n  return true\n\
    end", "  if date == \"\"\n    return false\n  end\n  date = date.split(\"-\")\n\
    \  if date.size != 3\n    return false\n  end\n  date[1] = date[1].to_i\n  date[2]\
    \ = date[2].to_i\n  if date[2] <= 0\n    return false\n  end\n  if date[1] ==\
    \ 2\n    if date[2] % 4 == 0\n      if date[0].to_i < 1 || date[0].to_i > 29\n\
    \        return false\n      end\n    else\n      if date[0].to_i < 1 || date[0].to_i\
    \ > 28\n        return false\n      end\n    end\n  end\n  if date[1] == 1 ||\
    \ date[1] == 3 || date[1] == 5 || date[1] == 7 || date[1] == 8 || date[1] == 10\
    \ || date[1] == 12\n    if date[0].to_i < 1 || date[0].to_i > 31\n      return\
    \ false\n    end\n  end\n  if date[1] == 4 || date[1] == 6 || date[1] == 9 ||\
    \ date[1] == 11\n    if date[0].to_i < 1 || date[0].to_i > 30\n      return false\n\
    \    end\n  end\n  if date[1] < 1 || date[1] > 12\n    return false\n  end\n \
    \ return true\nend", "  date = date.split('-')\n  return false if date.size !=\
    \ 3\n  day = date[0].to_i\n  month = date[1].to_i\n  year = date[2].to_i\n  return\
    \ false if year <= 999 || year >= 10000\n  return false if month > 12 || month\
    \ < 1\n  return false if day < 1 || day > 31\n  return false if [1, 3, 5, 7, 8,\
    \ 10, 12].include?(month) && day > 31\n  return false if [4, 6, 9, 11].include?(month)\
    \ && day > 30\n  return false if month == 2 && day > 29\n  true\nend", "  date_array\
    \ = date.split(\"-\")\n  if date_array.length != 3\n    return false\n  end\n\
    \  if date_array[0].to_i <= 0 || date_array[0].to_i > 12\n    return false\n \
    \ end\n  if date_array[0].to_i == 2\n    if date_array[1].to_i < 1 || date_array[1].to_i\
    \ > 29\n      return false\n    end\n  elsif date_array[0].to_i.even?\n    if\
    \ date_array[1].to_i < 1 || date_array[1].to_i > 30\n      return false\n    end\n\
    \  else\n    if date_array[1].to_i < 1 || date_array[1].to_i > 31\n      return\
    \ false\n    end\n  end\n  if date_array[2].to_i < 0\n    return false\n  end\n\
    \  return true\nend", "  date =~ /^\\d{2}-\\d{2}-\\d{4}$/\nend", "  return false\
    \ if date.empty?\n  date = date.split(\"-\")\n  months = date[0].to_i\n  days\
    \ = date[1].to_i\n  year = date[2].to_i\n  return false if months < 1 || months\
    \ > 12\n  return false if days < 1 || days > 31\n  return false if months == 2\
    \ && days > 29\n  true\nend", "  date = date.split(\"-\")\n  if date.length ==\
    \ 3 && !date.include?(\"\")\n    if date[1].to_i.between?(1,31) && date[0].to_i.between?(1,12)\
    \ && !date[0].include?(\"0\") && !date[1].include?(\"0\")\n      true\n    else\n\
    \      false\n    end\n  else\n    false\n  end\nend", "  date = date.split(\"\
    -\")\n  date[1].to_i > 31 ? (return false) : date[1].to_i\n  date[2].to_i > 12\
    \ ? (return false) : date[2].to_i\n  date[0].to_i > 30 ? (return false) : date[0].to_i\n\
    \  date[1].to_i == 2 ? date[0].to_i > 29 ? (return false) : date[0].to_i : date[0].to_i\n\
    \  return true\nend\np valid_date(\"03-11-2000\")\np valid_date(\"15-01-2012\"\
    )\np valid_date(\"04-0-2040\")\np valid_date(\"06-04-2020\")\np valid_date(\"\
    06/04/2020\")", "  date_arr = date.split(\"-\")\n  return false if date_arr.size\
    \ != 3\n  days_in_months = [31,28,31,30,31,30,31,31,30,31,30,31]\n  return false\
    \ if date_arr[0].to_i < 1 || date_arr[0].to_i > 12\n  return false if date_arr[1].to_i\
    \ < 1 || date_arr[1].to_i > days_in_months[date_arr[0].to_i-1]\n  return false\
    \ if date_arr[2].to_i < 1 || date_arr[2].to_i > 9999\n  true\nend", "  if date.match(/^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$/)\n\
    \    month = date.split('-')[0].to_i\n    day = date.split('-')[1].to_i\n    year\
    \ = date.split('-')[2].to_i\n    if (month > 0 && month < 13) && (day > 0 && day\
    \ < 32) && (year > 0)\n      if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) && (day < 32)\n        true\n\
    \      elsif (month == 4 || month == 6 || month == 9 || month == 11) && (day <\
    \ 31)\n        true\n      elsif (month == 2) && (day < 30)\n        true\n  \
    \    end\n    end\n  end\nend\np valid_date(\"03-11-2000\")\np valid_date(\"15-01-2012\"\
    )\np valid_date(\"04-0-2040\")\np valid_date(\"06-04-2020\")\np valid_date(\"\
    06/04/2020\")", "  regexp = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n\
    \  return false if date == \"\"\n  return false if date.scan(regexp).length ==\
    \ 0\n  return false if date.split('-')[1].to_i > 31\n  return false if date.split('-')[0].to_i\
    \ > 12\n  true\nend", "  !!date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19[0-9]{2}|20[0-9]{2})$/)\n\
    end", "  true\nend", "  # Add your code here\nend", "  return true if date =~\
    \ /\\A((([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([2][0-9]{3}))|([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0])-([2][0-9]{3}))\\\
    z/\n  false\nend", "  #TODO\nend", "  date_array = date.split(\"-\")\n  return\
    \ false if date_array.size != 3\n  month = date_array[0].to_i\n  day = date_array[1].to_i\n\
    \  return false if month > 12 || month < 1\n  if month == 2\n    return false\
    \ if day > 29 || day < 1\n  elsif month == 4 || month == 6 || month == 9 || month\
    \ == 11\n    return false if day > 30 || day < 1\n  else\n    return false if\
    \ day > 31 || day < 1\n  end\n  true\nend", "  Date.parse(date) ? true : false\n\
    end", "  if date.empty?\n    return false\n  elsif !/\\d{2}-\\d{2}-\\d{4}/.match(date)\n\
    \    return false\n  else\n    months, days, years = date.split(\"-\").map(&:to_i)\n\
    \    case months\n    when 1, 3, 5, 7, 8, 10, 12\n      return days.between?(1,\
    \ 31)\n    when 4, 6, 9, 11\n      return days.between?(1, 30)\n    when 2\n \
    \     return days.between?(1, 29)\n    else\n      return false\n    end\n  end\n\
    end", "  return false if date.empty?\n  return false if date.match(/\\d{2}\\/\\\
    d{2}\\/\\d{4}/) || date.match(/\\d{2}-\\d{2}-\\d{2}/)\n  year, month, day = date.split('-').map(&:to_i)\n\
    \  return false if month > 12 || month < 1\n  if month == 2\n    return false\
    \ if day > 29 || day < 1\n  elsif [1, 3, 5, 7, 8, 10, 12].include?(month)\n  \
    \  return false if day > 31 || day < 1\n  else\n    return false if day > 30 ||\
    \ day < 1\n  end\n  true\nend", "  # get the date from the method\n  # split the\
    \ date into 3 parts\n  # first part will be month\n  # second part will be day\n\
    \  # third part will be year\n  # split them by -\n  # convert the first part\
    \ to_i\n  # convert the second part to_i\n  # convert the third part to_i\n  #\
    \ check if they are valid\n  # check if they are in range\n  # check if the format\
    \ is mm-dd-yyyy\n  # return boolean", "  return false if date.empty?\n  return\
    \ false if date.scan(/\\d+/).size < 3\n  md = date.scan(/\\d+/)\n  return false\
    \ if md[0].to_i > 12 || md[0].to_i < 1\n  return false if ![31, 30, 29].include?(md[1].to_i)\
    \ if [1, 3, 5, 7, 8, 10, 12].include?(md[0].to_i)\n  return false if ![31, 30].include?(md[1].to_i)\
    \ if [4, 6, 9, 11].include?(md[0].to_i)\n  return false if ![31, 30, 29].include?(md[1].to_i)\
    \ if md[0].to_i == 2\n  return false if md[2].to_i.to_s.size != 4\n  true\nend",
  "  date = date.split(\"-\")\n  return false if date.size != 3\n  months = %w(01\
    \ 03 05 07 08 10 12)\n  date[0] = date[0].to_i\n  date[1] = date[1].to_i\n  date[2]\
    \ = date[2].to_i\n  return false if date[0] < 1 || date[0] > 12\n  if date[0]\
    \ == 2\n    return false if date[1] < 1 || date[1] > 29\n  elsif months.include?(date[0].to_s)\n\
    \    return false if date[1] < 1 || date[1] > 31\n  else\n    return false if\
    \ date[1] < 1 || date[1] > 30\n  end\n  date[2] = date[2].to_s\n  date[2].size\
    \ == 4 ? true : false\nend", "  date_array = date.split(\"-\")\n  months = date_array[0].to_i\n\
    \  days = date_array[1].to_i\n  # leap year is divisible by 4, but not by 100,\
    \ unless it is divisible by 400\n  leap_year = date_array[2].to_i % 4 == 0 &&\
    \ (date_array[2].to_i % 100 != 0 || date_array[2].to_i % 400 == 0)\n  return false\
    \ if date_array.length != 3 || months > 12 || months < 1\n  case months\n  when\
    \ 1, 3, 5, 7, 8, 10, 12\n    return days >= 1 && days <= 31\n  when 4, 6, 9, 11\n\
    \    return days >= 1 && days <= 30\n  when 2\n    return days >= 1 && days <=\
    \ 29 && leap_year\n  end\nend", "  arr = date.split(\"-\")\n  return false if\
    \ arr.length != 3\n  if arr[0].to_i > 0 && arr[0].to_i < 13\n    if arr[0].to_i\
    \ == 1 || arr[0].to_i == 3 || arr[0].to_i == 5 || arr[0].to_i == 7 || arr[0].to_i\
    \ == 8 || arr[0].to_i == 10 || arr[0].to_i == 12\n      if arr[1].to_i > 0 &&\
    \ arr[1].to_i < 32\n        return true\n      end\n    elsif arr[0].to_i == 4\
    \ || arr[0].to_i == 6 || arr[0].to_i == 9 || arr[0].to_i == 11\n      if arr[1].to_i\
    \ > 0 && arr[1].to_i < 31\n        return true\n      end\n    elsif arr[0].to_i\
    \ == 2\n      if arr[1].to_i > 0 && arr[1].to_i < 30\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  date = date.split('-')\n  date_part\
    \ = date[0].to_i\n  month_part = date[1].to_i\n  year_part = date[2].to_i\n  months\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  if date_part > 0 && date_part\
    \ <= months[month_part - 1] && month_part > 0 && month_part <= 12 && year_part\
    \ > 0\n    return true\n  else\n    return false\n  end\nend", "  # your code\
    \ goes here!\nend", "  date != nil && date != \"\" &&\n  date.split(\"-\").count\
    \ == 3 &&\n  date[2] == \"-\" && date[5] == \"-\" &&\n  date.split(\"-\")[0].to_i.between?(1,12)\
    \ &&\n  date.split(\"-\")[1].to_i.between?(1,31) &&\n  date.split(\"-\")[2].to_i.between?(1,9999)\n\
    end", "  return true if date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$/)\n  false\nend", "  !!(date =~ %r{^((0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\\
    d{4}))$})\nend", "  date.match(/\\A(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(20\\\
    d{2})\\z/) && Date.parse(date)\nrescue => _\n  false\nend", "  begin\n    regex\
    \ = /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(\\d{4})$/\n    regex.match(date)\
    \ ? true : false\n  rescue => e\n    false\n  end\nend", "  return false if date.empty?\n\
    \  _, month, day, year = date.split(\"-\")\n  return false if month.to_i > 12\
    \ || month.to_i < 1\n  return false if day.to_i > 31 || day.to_i < 1\n  return\
    \ false if year.to_i > 9999 || year.to_i < 1\n  true\nend", "  return true if\
    \ date.empty?\n  date_array = date.split(\"-\")\n  month = date_array[0].to_i\n\
    \  days = date_array[1].to_i\n  year = date_array[2].to_i\n  if date_array.length\
    \ != 3\n    return false\n  elsif month < 1 || month > 12\n    return false\n\
    \  elsif days < 1 || days > 31\n    return false\n  elsif year < 1000 || year\
    \ > 9999\n    return false\n  else\n    return true\n  end\nend", "  if date.match(/^([0][1-9]|[1][0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/)\n\
    \    month = date.split(\"-\")[0].to_i\n    day = date.split(\"-\")[1].to_i\n\
    \    year = date.split(\"-\")[2].to_i\n    if year % 400 == 0\n      is_leap_year\
    \ = true\n    elsif year % 100 == 0\n      is_leap_year = false\n    elsif year\
    \ % 4 == 0\n      is_leap_year = true\n    else\n      is_leap_year = false\n\
    \    end\n    if month == 2\n      if day <= 29 && day >= 1 && is_leap_year\n\
    \        return true\n      elsif day <= 28 && day >= 1 && !is_leap_year\n   \
    \     return true\n      else\n        return false\n      end\n    elsif month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12\n      if day <= 31 && day >= 1\n        return true\n      else\n\
    \        return false\n      end\n    elsif month == 4 || month == 6 || month\
    \ == 9 || month == 11\n      if day <= 30 && day >= 1\n        return true\n \
    \     else\n        return false\n      end\n    else\n      return false\n  \
    \  end\n  else\n    return false\n  end\nend", "  days = [31,29,31,30,31,30,31,31,30,31,30,31]\n\
    \  r = /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\d{4}$/\n  m = date.match(r)\n\
    \  if m.nil?\n    return false\n  end\n  month = m[1].to_i\n  day = m[2].to_i\n\
    \  return false if day == 0\n  return true if day <= days[month-1]\n  return false\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
