name: HumanEval_124_valid_date
language: rb
prompt: "# You have to write a function which validates a given date string and\n\
  # returns true if the date is valid otherwise false.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date.call(\"03-11-2000\")\n# true\n\
  # >>> valid_date.call(\"15-01-2012\")\n# false\n# >>> valid_date.call(\"04-0-2040\"\
  )\n# false\n# >>> valid_date.call(\"06-04-2020\")\n# true\n# >>> valid_date.call(\"\
  06/04/2020\")\n# false\ndef valid_date(date)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n\
  \    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"\
  ))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false,\
  \ candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"\
  ))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false,\
  \ candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n\
  \    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true,\
  \ candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"\
  ))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false,\
  \ candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"\
  ))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false,\
  \ candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"\
  ))\n  end\nend\n"
completions: ["  if date.empty?\n    return false\n  end\n  if (1..12).cover?(date[0..1].to_i)\
    \ && (1..12).cover?(date[3..4].to_i) && (1..12).cover?(date[6..7].to_i) && (1..12).cover?(date[9..10].to_i)\n\
    \    if (1..31).cover?(date[0..1].to_i) && (1..31).cover?(date[3..4].to_i) &&\
    \ (1..31).cover?(date[6..7].to_i) && (1..31).cover?(date[9..10].to_i)\n      if\
    \ (1..12).cover?(date[0..1].to_i) && (1..12).cover?(date[3..4].to_i) && (1..12).cover?(date[6..7].to_i)\
    \ && (1..12).cover?(date[9..10].to_i)\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  date_regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n\
    \  return false if !date_regex.match(date)\n  parts = date.split(\"-\")\n  return\
    \ false if parts[1].to_i > 31 || parts[1].to_i < 1\n  return false if parts[0].to_i\
    \ > 12 || parts[0].to_i < 1\n  if parts[0].to_i == 2\n    return false if parts[1].to_i\
    \ > 29\n  elsif parts[0].to_i == 1 || parts[0].to_i == 3 || parts[0].to_i == 5\
    \ || parts[0].to_i == 7 || parts[0].to_i == 8 || parts[0].to_i == 10 || parts[0].to_i\
    \ == 12\n    return false if parts[1].to_i > 31\n  else\n    return false if parts[1].to_i\
    \ > 30\n  end\n  true\nend", "  date = date.split('-')\n  return false if date.length\
    \ != 3\n  month = date[0].to_i\n  day = date[1].to_i\n  year = date[2].to_i\n\
    \  return false if month < 1 || month > 12\n  return false if day < 1 || day >\
    \ 31\n  return false if day > 30 && [4, 6, 9, 11].include?(month)\n  return false\
    \ if day > 29 && month == 2\n  return false if year < 0\n  true\nend", "  date_arr\
    \ = date.split(\"-\")\n  month = date_arr[0].to_i\n  day = date_arr[1].to_i\n\
    \  year = date_arr[2].to_i\n  feb_days = year % 4 == 0 ? 29 : 28\n  if [1,3,5,7,8,10,12].include?(month)\n\
    \    if (1..31).include?(day)\n      return true\n    end\n  elsif [4,6,9,11].include?(month)\n\
    \    if (1..30).include?(day)\n      return true\n    end\n  elsif month == 2\n\
    \    if (1..feb_days).include?(day)\n      return true\n    end\n  end\n  false\n\
    end", "    date_arr = date.split(\"-\")\n    check_validity(date_arr)\nend", " \
    \ return false if date.empty?\n  return false if date =~ /\\//", "  # To make\
    \ this simpler, split the date into a month, a day, and a year\n  # and put them\
    \ into variables\n  month, day, year = date.split('-')\n  # Also get rid of any\
    \ leading zeros that might be in the month or day\n  month = month.to_i\n  day\
    \ = day.to_i\n  # Check that the date is a real date\n  # First make sure we have\
    \ three parts, separated by hyphens\n  # Then make sure the year is 4 digits long\n\
    \  # Then make sure the month is between 1 and 12\n  # Finally make sure the day\
    \ is in the right range\n  return false unless date.count('-') == 2 &&\n     \
    \                 year.length == 4 &&\n                      month.between?(1,\
    \ 12) &&\n                      day.between?(1, case month\n                 \
    \                     when 1, 3, 5, 7, 8, 10, 12\n                           \
    \             31\n                                      when 4, 6, 9, 11\n   \
    \                                     30\n                                   \
    \   when 2\n                                        if year.to_i % 4 == 0\n  \
    \                                        29\n                                \
    \        else\n                                          28\n                \
    \                        end\n                                      end)\n  #\
    \ If we make it to here, the date must be okay\n  true\nend", "  date_arr = date.split(\"\
    -\")\n  date_arr[0].to_i.between?(1,12) && date_arr[1].to_i.between?(1,31) &&\
    \ date_arr[2].to_i.between?(2000,2040) &&  !date.include?(\"/\")\nend", "    date\
    \ = date.split(\"-\")\n    if date[0].to_i > 0 && date[0].to_i < 13 && date[1].to_i\
    \ > 0 && date[1].to_i < 32 && date[2].to_i > 0\n        return true\n    else\n\
    \        return false\n    end\nend", "  date_formated = date.split(\"-\")\n \
    \ month = date_formated[0].to_i\n  day = date_formated[1].to_i\n  year = date_formated[2].to_i\n\
    \  months = [1, 3, 5, 7, 8, 10, 12]\n  months_30 = [4, 6, 9, 11]\n  if month >\
    \ 12 || month < 1\n    return false\n  end\n  if months.include?(month)\n    if\
    \ day > 31 || day < 1\n      return false\n    end\n  elsif months_30.include?(month)\n\
    \    if day > 30 || day < 1\n      return false\n    end\n  elsif month == 2\n\
    \    if day > 29 || day < 1\n      return false\n    end\n  end\n  if year % 400\
    \ == 0\n    return true\n  elsif year % 100 == 0\n    return false\n  elsif year\
    \ % 4 == 0\n    return true\n  else\n    return false\n  end\nend", "  dates =\
    \ date.split('-')\n  return false if dates.count != 3\n  return false if dates[0].to_i\
    \ > 12 || dates[0].to_i < 1\n  return false if dates[2].to_i < 0\n  case dates[0].to_i\n\
    \  when 1, 3, 5, 7, 8, 10, 12\n    return false if dates[1].to_i > 31 || dates[1].to_i\
    \ < 1\n  when 4, 6, 9, 11\n    return false if dates[1].to_i > 30 || dates[1].to_i\
    \ < 1\n  when 2\n    return false if dates[1].to_i > 29 || dates[1].to_i < 1\n\
    \  end\n  true\nend", "  return false if date.empty?\n  date_arr = date.split('-')\n\
    \  return false if date_arr.length != 3\n  date_arr.each { |val| return false\
    \ if val.length != 2 }\n  begin\n    date_arr[0] = date_arr[0].to_i\n    date_arr[1]\
    \ = date_arr[1].to_i\n    date_arr[2] = date_arr[2].to_i\n  rescue StandardError\n\
    \    return false\n  end\n  return false if date_arr[0] < 1 || date_arr[0] > 12\n\
    \  return false if (date_arr[0] == 2 && date_arr[1] > 29) || (date_arr[0] == 2\
    \ && date_arr[1] < 1)\n  return false if (date_arr[0] == 4 || date_arr[0] == 6\
    \ || date_arr[0] == 9 || date_arr[0] == 11) && (date_arr[1] > 30 || date_arr[1]\
    \ < 1)\n  return false if (date_arr[0] == 1 || date_arr[0] == 3 || date_arr[0]\
    \ == 5 || date_arr[0] == 7 || date_arr[0] == 8 || date_arr[0] == 10 || date_arr[0]\
    \ == 12) && (date_arr[1] > 31 || date_arr[1] < 1)\n  return false if date_arr[2]\
    \ < 1000 || date_arr[2] > 9999\n  true\nend", "  return false if date.empty?\n\
    \  return false if date !~ /\\d{2}-\\d{2}-\\d{4}/\n  d, m, y = date.split('-').map(&:to_i)\n\
    \  return false if [1, 3, 5, 7, 8, 10, 12].include?(m) && d > 31\n  return false\
    \ if [4, 6, 9, 11].include?(m) && d > 30\n  return false if m == 2 && d > 29\n\
    \  return false if m > 12\n  true\nend", "  begin\n    new_date = Date.parse(date)\n\
    \    return new_date == date\n  rescue\n    return false\n  end\nend", "  #TODO\
    \ implement your code here\nend", "  if date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/\n\
    \    month = date.split(\"-\")[0].to_i\n    day = date.split(\"-\")[1].to_i\n\
    \    year = date.split(\"-\")[2].to_i\n    if year % 4 == 0\n      if month ==\
    \ 2 && day <= 29\n        return true\n      elsif month == 2 && day > 29\n  \
    \      return false\n      elsif [1,3,5,7,8,10,12].include?(month) && day <= 31\n\
    \        return true\n      elsif [1,3,5,7,8,10,12].include?(month) && day > 31\n\
    \        return false\n      elsif [4,6,9,11].include?(month) && day <= 30\n \
    \       return true\n      elsif [4,6,9,11].include?(month) && day > 30\n    \
    \    return false\n      end\n    else\n      if month == 2 && day <= 28\n   \
    \     return true\n      elsif month == 2 && day > 28\n        return false\n\
    \      elsif [1,3,5,7,8,10,12].include?(month) && day <= 31\n        return true\n\
    \      elsif [1,3,5,7,8,10,12].include?(month) && day > 31\n        return false\n\
    \      elsif [4,6,9,11].include?(month) && day <= 30\n        return true\n  \
    \    elsif [4,6,9,11].include?(month) && day > 30\n        return false\n    \
    \  end\n    end\n  else\n    return false\n  end\nend", "\tregex = /^\\d{2}-\\\
    d{2}-\\d{4}$/\n\t#one liner\n\t#regex = /^((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])-\\\
    d{4})$/\n\t#date.match(regex) != nil\n\tif date.match(regex) != nil\n\t\tmonth,\
    \ day, year = date.split(\"-\")\n\t\tif month.to_i < 1 || month.to_i > 12\n\t\t\
    \treturn false\n\t\tend\n\t\t\n\t\tif month.to_i == 2\n\t\t\tif day.to_i < 1 ||\
    \ day.to_i > 29\n\t\t\t\treturn false\n\t\t\tend\n\t\telsif [1,3,5,7,8,10,12].include?(month.to_i)\n\
    \t\t\tif day.to_i < 1 || day.to_i > 31\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    elsif [4,6,9,11].include?(month.to_i)\n\t\t\tif day.to_i < 1 || day.to_i > 30\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn true\n\telse\n\t\t\
    return false\n\tend\nend", "  date_array = date.split('-')\n  month = date_array[0].to_i\n\
    \  day = date_array[1].to_i\n  year = date_array[2].to_i\n  return false if month\
    \ > 12 || month < 1\n  if month == 2\n    return day >= 1 && day <= 29\n  elsif\
    \ [4,6,9,11].include?(month)\n    return day >= 1 && day <= 30\n  else\n    return\
    \ day >= 1 && day <= 31\n  end\nend", "  date_arr = date.split('-')\n  date_arr.map!\
    \ { |val| val.to_i }\n  if date_arr.length != 3 || date_arr.any?(&:zero?)\n  \
    \  return false\n  end\n  case date_arr[0]\n  when 1, 3, 5, 7, 8, 10, 12\n   \
    \ return false if date_arr[1] > 31\n  when 4, 6, 9, 11\n    return false if date_arr[1]\
    \ > 30\n  when 2\n    return false if date_arr[1] > 29\n  else\n    return false\n\
    \  end\n  true\nend", "  # Write your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
