name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["    return 0 if nums.empty?\n    n = nums.length\n    min_sum = nums[0]\n\
    \    current_sum = nums[0]\n    (1...n).each do |i|\n        current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n        min_sum = [min_sum, current_sum].min\n \
    \   end\n    min_sum\nend", "  min = nums[0]\n  sum = nums[0]\n  i = 1\n  while\
    \ i < nums.length\n    sum += nums[i]\n    min = sum if sum < min\n    sum = 0\
    \ if sum < 0\n    i += 1\n  end\n  min\nend", "    return 0 if nums.empty?\n \
    \   min_sum = Float::INFINITY\n    sum = 0\n    nums.each do |el|\n        sum\
    \ += el\n        min_sum = sum if sum < min_sum\n        sum = 0 if sum < 0\n\
    \    end\n    min_sum\nend", "  min_sum = nil\n  current_sum = 0\n  last_idx =\
    \ nums.length - 1\n  (0..last_idx).each do |idx|\n    current_sum += nums[idx]\n\
    \    min_sum = current_sum if min_sum.nil? || current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  curr_sum\
    \ = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum if curr_sum\
    \ < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\nend", "  min_sum\
    \ = Float::INFINITY\n  curr_sum = 0", "  min_sum = Float::INFINITY\n  sum = 0\n\
    \  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n  \
    \  sum = 0 if sum < 0\n  end\n  min_sum\nend", "  return nil if nums.nil? || nums.empty?\n\
    \  min_sum = nums[0]\n  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum\
    \ = sum if sum < min_sum\n    sum = 0 if sum < 0\n  end\n  min_sum\nend", "  l\
    \ = 0\n  r = 0\n  curr_sum = 0\n  min_sum = nil", "  arr = []\n  (0...nums.length).each\
    \ do |i|\n    (i...nums.length).each do |j|\n      arr << nums[i..j].reduce(:+)\n\
    \    end\n  end\n  arr.min\nend", "  size = nums.size\n  i = 0\n  min_sum = 0\n\
    \  while i < size do\n    min_sum += nums[i]\n    i += 1\n  end\n  min_sum\nend",
  "  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |n|\n    curr_sum += n\n  \
    \  min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n\
    \  end\n  min_sum\nend", "  min_sum = Float::INFINITY\n  sum = 0\n  curr_min =\
    \ 0", "  current_sum = nums[0]\n  min_sum = nums[0]", "  i = 0\n  j = 0\n  current_sum\
    \ = 0\n  min_sum = nums[0]\n  min_sum = nums[1] if nums[1] < min_sum\n  for i\
    \ in 0..nums.length-1\n    current_sum = nums[i]\n    for j in i+1..nums.length-1\n\
    \      current_sum += nums[j]\n      if current_sum < min_sum\n        min_sum\
    \ = current_sum\n      end\n    end\n  end\n  min_sum\nend", "  min_sum = Float::INFINITY\n\
    \  current_sum = 0", "  min_sum = nums[0]\n  sum = 0\n  nums.each do |num|\n \
    \   sum += num\n    if sum < min_sum\n      min_sum = sum\n    end\n    if sum\
    \ > 0\n      sum = 0\n    end\n  end\n  min_sum\nend", "  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  max_so_far = nums[0]\n  (1...nums.length).each\
    \ do |i|\n    max_so_far = [nums[i], max_so_far + nums[i]].max\n    min_sum =\
    \ [min_sum, max_so_far].min\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = 0\n  for num in nums\n    current_sum += num\n    min_sum = current_sum if\
    \ current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
