language: rb
name: HumanEval_120_maximum
results:
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n    # sort is O(n log n)\n    #\
    \ so total is O(n log n)\n    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmhl5gm4j

    Started

    .

    Finished in 0.000442402 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2260.39 tests/s, 24864.26 assertions/s

    '
  stdout: ''
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  sorted = arr.sort\n  len = arr.length\
    \ - 1\n  answer = []\n  k.times do |x|\n    answer << sorted[len - x]\n  end\n\
    \  return answer\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjyp7oqv5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpjyp7oqv5.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.010399038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.16 tests/s, 96.16 assertions/s\n"
  timestamp: 1659824156
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\tarr.sort[(arr.length - k)..(arr.length\
    \ - 1)]\nend\np maximum([-3, -4, 5], 3)\np maximum([4, -4, 4], 2)\np maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: '[-4, -3, 5]

    [4, 4]

    [2]

    Loaded suite /tmp/tmpkauepg0k

    Started

    .

    Finished in 0.000470355 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.05 tests/s, 23386.59 assertions/s

    '
  stdout: ''
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  return [] if arr.length == 0 ||\
    \ k == 0\n  return arr.sort[-k..-1] if k >= arr.length\n  def heapify(arr, i,\
    \ k)\n    while i < k do\n      left = i * 2 + 1\n      right = i * 2 + 2\n  \
    \    l = left < k && arr[left] > arr[i] ? left : i\n      r = right < k && arr[right]\
    \ > arr[l] ? right : l\n      break if l == i\n      arr[i], arr[l] = arr[l],\
    \ arr[i]\n      i = l\n    end\n  end\n  idx = k / 2 - 1\n  while idx >= 0 do\n\
    \    heapify(arr, idx, k)\n    idx -= 1\n  end\n  idx = k\n  while idx < arr.length\
    \ do\n    if arr[idx] > arr[0]\n      arr[0] = arr[idx]\n      heapify(arr, 0,\
    \ k)\n    end\n    idx += 1\n  end\n  arr[0...k]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74yexbs0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp74yexbs0.rb:50:in `test_maximum'\n\
    \     47:   def test_maximum\n     48:     candidate = method(:maximum)\n    \
    \ 49:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 50:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     51:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     52:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     53:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[4, -4]>\n\ndiff:\n? [4, -4]\n===============================================================================\n\
    \nFinished in 0.0153307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.23 tests/s, 130.46 assertions/s\n"
  timestamp: 1659824156
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr.sort.last(k)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4ty3yqm9

    Started

    .

    Finished in 0.000454678 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2199.36 tests/s, 24192.95 assertions/s

    '
  stdout: ''
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr.sort[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7rzo7hb8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7rzo7hb8.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007959684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.63 tests/s, 1381.96 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  #\n  # your code here\n  #\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1rlq6pwg\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1rlq6pwg.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006979569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.28 tests/s, 143.28 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  return unless arr.is_a?(Array)\n\
    \  return unless k.is_a?(Integer)\n  return unless arr.size >= k\n  return unless\
    \ k >= 0\n  return unless arr.all? { |e| e.is_a?(Integer) }\n  return unless arr.all?\
    \ { |e| e >= -1000 }\n  return unless arr.all? { |e| e <= 1000 }\n  arr.sort.reverse.take(k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1y5n0i1n\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1y5n0i1n.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.014675171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.14 tests/s, 68.14 assertions/s\n"
  timestamp: 1659824156
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr.sort!\n  arr[(arr.length -\
    \ k)...arr.length]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp01luc54q

    Started

    .

    Finished in 0.000461382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2167.40 tests/s, 23841.42 assertions/s

    '
  stdout: ''
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\tarr.sort!.reverse[0...k]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp567jwhhu\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp567jwhhu.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.008178284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.28 tests/s, 122.28 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr.sort[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7rzo7hb8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7rzo7hb8.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007959684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.63 tests/s, 1381.96 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n    arr.sort[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgijjcfo8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpgijjcfo8.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007845423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.46 tests/s, 1402.09 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n    max = arr.max\n    arr.delete(max)\n\
    \    max_arr = [max]\n    if k != 1\n        loop do\n            max = arr.max\n\
    \            arr.delete(max)\n            max_arr << max\n            if max_arr.size\
    \ == k\n                break\n            end\n        end\n    end\n    return\
    \ max_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_edhdnda\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp_edhdnda.rb:36:in `test_maximum'\n\
    \     33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_maximum\n\
    \     35:     candidate = method(:maximum)\n  => 36:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     37:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     38:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     39:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007679009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.23 tests/s, 130.23 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  k.times do |i|\n    (i + 1).upto(arr.length\
    \ - 1) do |j|\n      if arr[i] < arr[j]\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \      end\n    end\n  end\n  arr[0..k - 1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpin3i5fbt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpin3i5fbt.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007719313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.55 tests/s, 129.55 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  list = []\n  while k > 0\n   \
    \ if list.empty?\n      list.push(arr.shift)\n    else\n      arr.each do |el|\n\
    \        if el > list.first\n          list.shift\n          list.push(el)\n \
    \       end\n      end\n    end\n    k -= 1\n  end\n  list\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpud0626xe\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpud0626xe.rb:37:in `test_maximum'\n\
    \     34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_maximum\n\
    \     36:     candidate = method(:maximum)\n  => 37:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     38:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     39:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     40:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5]>\n\ndiff:\n? [-4,\
    \ -3, 5]\n===============================================================================\n\
    \nFinished in 0.009156679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.21 tests/s, 109.21 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr = arr.sort.reverse\n  arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8dsdo0mn\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8dsdo0mn.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.015992593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.53 tests/s, 62.53 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  return arr.take(k) if arr.size\
    \ == k\n  arr = arr.each_with_index.to_a\n  maximum(arr.select{|x| x[0] > arr[0][0]\
    \ }.map{|x| x[0]}, k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr890gmqq\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpr890gmqq.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.015643137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.93 tests/s, 63.93 assertions/s\n"
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr.sort.reverse.take(k)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7amokapw\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7amokapw.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.00796756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.51 tests/s, 125.51 assertions/s\n"
  timestamp: 1659824156
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  arr = arr.sort\n  arr[(arr.length\
    \ - k)...arr.length]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbnqa14n0

    Started

    .

    Finished in 0.00099644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1003.57 tests/s, 11039.30 assertions/s

    '
  stdout: ''
  timestamp: 1659824156
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
    \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of\
    \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
    # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n    arr.sort[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgijjcfo8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpgijjcfo8.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007845423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.46 tests/s, 1402.09 assertions/s\n"
  timestamp: 1659824156
