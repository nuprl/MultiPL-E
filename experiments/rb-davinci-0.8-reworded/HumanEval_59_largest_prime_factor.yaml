name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n\
  # 2\ndef largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  return -1 if n <= 1\n  return 2 if n == 2\n  return n if n.prime?",
  "  # This can be solved more efficiently\n  (2..n/2).each do |x|\n    return largest_prime_factor(n/x)\
    \ if n % x == 0\n  end\n  n\nend", "  highest_prime = 0\n  (2..n).each do |i|\n\
    \    if n % i == 0\n      prime = true\n      for j in 2..i-1\n        if i %\
    \ j == 0\n          prime = false\n          break\n        end\n      end\n \
    \     if prime\n        highest_prime = i\n      end\n    end\n  end\n  highest_prime\n\
    end", "  prime_divisors = []\n  if n < 1 || is_prime?(n)\n    puts \"Error. This\
    \ number is too small or is prime.\"\n  else\n    i = 2\n    while i <= Math.sqrt(n)\n\
    \      if is_prime?(i) && n % i == 0\n        prime_divisors << i\n      end\n\
    \      i += 1\n    end\n  end\n  if prime_divisors.length > 0\n    prime_divisors.max\n\
    \  else\n    0\n  end\nend", '  return 2 if n == 2', "  # Prime factors of n are\
    \ less than or equal to sqrt(n)\n  (2..Math.sqrt(n)).each do |factor|\n    return\
    \ largest_prime_factor(n / factor) if n % factor == 0\n  end\n  return n\nend",
  "  factors = prime_factors(n)\n  factors.max\nend", "  (1..n).select { |i| n % i\
    \ == 0 && prime?(i) }.max\nend", "  i = 1\n  while i <= Math.sqrt(n)\n    if n\
    \ % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ n.prime_division.last[0]\nend", "  # TODO: Write solution for largest_prime_factor\n\
    end", "\tif n <= 1\n\t\traise \"Invalid input. n must be > 1 and not a prime.\"\
    \n\tend", "  # Your code here\nend", "  # http://www.calculatorsoup.com/calculators/math/prime-factors.php\n\
    \  # http://www.robertfoster.info/2012/01/factoring-2048-into-primes.html\n  n\
    \ = n.abs\n  prime_factors = []\n  i = 2\n  while i < n\n    if n % i == 0\n \
    \     prime_factors << i\n      n = n / i\n    else\n      i += 1\n    end\n \
    \ end\n  prime_factors << n\n  prime_factors.max\nend", "  largest_factor = 1\n\
    \  factor = 2\n  while n > 1\n    while n % factor == 0\n      largest_factor\
    \ = factor\n      n /= factor\n    end\n    factor += 1\n  end\n  largest_factor\n\
    end", "  sqrt_n = Math.sqrt(n).to_i\n  (2..sqrt_n).each do |i|\n    if n % i ==\
    \ 0\n      return largest_prime_factor(n / i)\n    end\n  end\n  n\nend", "  get_factors(n).select\
    \ { |i| is_prime?(i) }.max\nend", "  i = 2\n  factors = []\n  while i <= n do\n\
    \    if n % i == 0\n      factors << i\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  factors.last\nend", "  res = [nil, nil]\n  p = 2\n  while p\
    \ * p <= n\n    while n % p == 0\n      res = [p, res.first].max\n      n /= p\n\
    \    end\n    p += 1\n  end\n  res[1] = n if n > 1\n  res.max\nend", "  divisor\
    \ = 2\n  largest_prime = 2\n  quotient = n / divisor\n  while quotient > 1\n \
    \   if n % divisor == 0\n      quotient = n / divisor\n      largest_prime = divisor\
    \ if is_prime(divisor)\n    end\n    divisor += 1\n  end\n  return largest_prime\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
