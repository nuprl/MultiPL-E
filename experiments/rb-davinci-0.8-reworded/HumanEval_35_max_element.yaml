name: HumanEval_35_max_element
language: rb
prompt: "# Return maximum element in the array.\n# >>> max_element.call([1, 2, 3])\n\
  # 3\n# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef\
  \ max_element(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n\
  \    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2,\
  \ 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
  \ -10]))\n  end\nend\n"
completions: ["  l.max\nend", "  l.max\nend", "  max = l[0]\n  for i in 1..l.length-1\n\
    \    if l[i] > max\n      max = l[i]\n    end\n  end\n  return max\nend", "  max\
    \ = l[0]\n  for i in 1..l.length-1\n    if l[i] > max\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "  return l.max\nend", "    max = l[0]\n    l.each\
    \ do |x|\n        if x > max\n            max = x\n        end\n    end\n    return\
    \ max\nend\nputs \"max_element test:\"\nputs max_element([1, 2, 3])\nputs max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "\t\nend", "  max = l[0]\n  l.each do\
    \ |e|\n    max = e if e > max\n  end\n  max\nend", "  l.max\nend", "  _, max =\
    \ l.reduce([l.first, l.first]) do |(max, min), e|\n    if e > max\n      [e, min]\n\
    \    elsif e < min\n      [max, e]\n    else\n      [max, min]\n    end\n  end\n\
    \  max\nend", "  l.max\nend", "  max = l[0]\n  for i in 0..l.length-1\n    if(l[i]\
    \ > max)\n      max = l[i]\n    end\n  end\n  return max\nend", "  l.max\nend",
  "  return l.max\nend\nputs max_element.call([1, 2, 3])\nputs max_element.call([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  max = l[0]\n  l.each { |i| max = i\
    \ if i > max }\n  max\nend", "\tmax = l[0]\n\tl.each do |x|\n\t\tif x > max\n\t\
    \t\tmax = x\n\t\tend\n\tend\n\treturn max\nend", "  # Your code goes here\nend",
  "  # TODO\nend", "  max = l[0]\n  for i in l\n    if max < i\n      max = i\n  \
    \  end\n  end\n  max\nend", "  l.max\nend", "  l.max\nend", "  if l.size == 1\n\
    \    return l[0]\n  else\n    max_rest = max_element(l[1..-1])\n    if l[0] >\
    \ max_rest\n      return l[0]\n    else\n      return max_rest\n    end\n  end\n\
    end", "  l.each do |x|\n    if l.max == x\n      puts x\n    end\n  end\nend",
  "  l.inject { |m, i| i > m ? i : m }\nend", "  l.max\nend", "\tmax = 0\n\tl.each\
    \ { |x| max = x if x > max }\n\tmax\nend", "  max = l[0]\n  l.each do |element|\n\
    \    max = element if element > max\n  end\n  max\nend", "  max = l[0]\n  l.each\
    \ { |x| max = x if x > max }\n  max\nend", "  l.max\nend", "  l.max\nend", " \
    \ l.max\nend", "  l.max\nend", "  l.reduce(l[0]) { |max, x| [max, x].max }\nend",
  "  # ...\nend", "  #puts l\n  m = l[0]\n  l.each { |i|\n    if i > m\n      m =\
    \ i\n    end\n  }\n  return m\nend", "  l.max\nend", "\tl.max\nend", "  l.sort!.last\n\
    end", "  l.sort.last\nend", "  l.max\nend", "  (0...l.length).reduce(0) { |max,\
    \ i| l[i] > l[max] ? i : max }\nend", "\tl.inject(0) { |a,b| a = a > b ? a : b\
    \ }\nend", "  return l.max\nend", "  l.max\nend", "  l.max\nend", "  return l.max\n\
    end", "  max = l[0]\n  i = 1\n  while i < l.length\n    if l[i] > max\n      max\
    \ = l[i]\n    end\n    i += 1\n  end\n  max\nend", "  # write your code here\n\
    end", "  l.max\nend", "  l.max\nend", "  max = l[0]\n  i = 1\n  while i < l.length\n\
    \    if l[i] > max\n      max = l[i]\n    end\n    i = i + 1\n  end\n  return\
    \ max\nend", "  l.max\nend", "  l.max\nend", "  if l.length == 1\n    return l[0]\n\
    \  else\n    m = max_element(l[1, l.length - 1])\n    if l[0] > m\n      l[0]\n\
    \    else\n      m\n    end\n  end\nend", "  # TODO: Your code here\nend", " \
    \ # puts \"l in max_element: #{l}\"\n  # puts \"l.inject in max_element: #{l.inject(0)\
    \ { |memo, n| n > memo ? n : memo }}\"\n  l.inject(0) { |memo, n| n > memo ? n\
    \ : memo }\nend", "  # [1, 2, 3] => 3\n  max = l[0]\n  (1...l.length).each do\
    \ |i|\n    if l[i] > max\n      max = l[i]\n    end\n  end\n  max\nend", "  return\
    \ 0 if l.empty?\n  return l[0] if l.size == 1\n  m = max_element(l[1..-1])\n \
    \ if l[0] >= m\n    l[0]\n  else\n    m\n  end\nend", "  return l.max\nend", " \
    \ if l.length > 0\n    max = l[0]\n    for i in l\n      if i > max\n        max\
    \ = i\n      end\n    end\n    return max\n  else\n    return 0\n  end\nend",
  "    return l.max\nend", "  max = l[0]\n  l.each do |item|\n    max = item if item\
    \ > max\n  end\n  max\nend", "  l.max\nend", "  l.max\nend", "  max = l[0]\n \
    \ l.each do |x|\n    if x > max\n      max = x\n    end\n  end\n  max\nend", " \
    \ l.max\nend", "  l.max\nend", "  if l.length == 1\n    return l[0]\n  else\n\
    \    max_of_rest = max_element(l[1..-1])\n    return l[0] > max_of_rest ? l[0]\
    \ : max_of_rest\n  end\nend", "  return l.max\nend", "  l.max\nend", "  return\
    \ l.max\nend", "\treturn l.max\nend", "  l.max\nend", "\tl.max\nend", "  return\
    \ max(l)\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend",
  "  l.max\nend", "  return l.max\nend", "  l.max\nend", "    l.max\nend", "\tmax\
    \ = l[0]\n\ti = 1\n\twhile i < l.length\n\t\tif l[i] > max\n\t\t\tmax = l[i]\n\
    \t\tend\n\t\ti += 1\n\tend\n\treturn max\nend", "  l.max\nend", "  # your code\
    \ goes here\nend", "  l.reduce(l[0]) do |max, i|\n    i > max ? i : max\n  end\n\
    end", "  l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\n\
    end", "  return l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", " \
    \ max = l[0]\n  for i in 0..l.length-1\n    if max < l[i]\n      max = l[i]\n\
    \    end\n  end\n  return max\nend", "  l.max\nend", "  # WRITE YOUR CODE HERE\n\
    end", "  # your code here\nend", "  l.max\nend", "  l.max\nend", "  # ---=== SOLUTION\
    \ ===---\n  # ---- BEGIN ----\n  index_max = 0\n  l.each_with_index do |e, i|\n\
    \    index_max = i if e > l[index_max]\n  end\n  l[index_max]\n  # ---- END ----\n\
    end", "  max = l[0]\n  l.each do |i|\n    max = i if i > max\n  end\n  max\nend",
  "  len = l.length\n  return l[0] if len == 1\n  return l[0] if len == 2 && l[0]\
    \ > l[1]\n  return l[1] if len == 2 && l[0] < l[1]\n  m = max_element(l[0...len/2])\n\
    \  n = max_element(l[len/2..-1])\n  return m if m > n\n  return n\nend", "  max\
    \ = 0\n  l.each do |e|\n    max = e if e > max\n  end\n  max\nend", "  l.max\n\
    end", "  l.max\nend", "    max = 0\n    l.each { |x| max = x if max < x }\n  \
    \  max\nend", "  l.max\nend", "  max = l[0]\n  i = 1\n  while i < l.length\n \
    \   if l[i] > max\n      max = l[i]\n    end\n    i += 1\n  end\n  max\nend",
  "  l.max\nend", "  max_elem = 0\n  l.each do |x|\n    if x > max_elem\n      max_elem\
    \ = x\n    end\n  end\n  max_elem\nend", "  l.inject { |max, cur| cur > max ?\
    \ cur : max }\nend", "  l.max\nend", "    l.sort[-1]\nend", "  l.max\nend", " \
    \ l.max\nend", "  l.max\nend", "  res = l[0]\n  l.each do |e|\n    res = e if\
    \ e > res\n  end\n  res\nend", "  if l.empty?\n    raise 'Array is empty'\n  else\n\
    \    l.max\n  end\nend", "  l.max\nend", "\tputs \"The list of elements: #{l.join(',\
    \ ')}\"\n\tputs \"The maximum element is: #{l.max}\"\nend", "  max_element = nil\n\
    \  l.each do |e|\n    max_element = e if max_element.nil? || e > max_element\n\
    \  end\n  max_element\nend", "  max = l[0]\n  for i in l\n    if i > max\n   \
    \   max = i\n    end\n  end\n  max\nend", "  l.max\nend", "  max = l[0]\n  l.each\
    \ do |n|\n    max = n if n > max\n  end\n  max\nend", "  l.max\nend", "  l.max\n\
    end", "  l.max\nend", "  l.max\nend", "  l.max\nend", "  max = l[0]\n  for i in\
    \ 1..l.length-1\n    if max < l[i]\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "  max = l[0]\n  for i in 1..l.length-1\n    if l[i] > max\n    \
    \  max = l[i]\n    end\n  end\n  return max\nend", "\tlist = l\n\ti = 0\n\tj =\
    \ 1\n\twhile j < list.length\n\t\tif list[i] < list[j]\n\t\t\ti = j\n\t\tend\n\
    \t\tj = j + 1\n\tend\n\treturn list[i]\nend", "  l.max\nend", "  l.max\nend",
  "  max = l[0]\n  for i in l do\n    if max < i\n      max = i\n    end\n  end\n\
    \  return max\nend\nputs max_element([1, 2, 3])\nputs max_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])", "  l.max\nend", "  l.max\nend", "  l.max\nend",
  "  l.reduce(l[0]) { |max, el| el > max ? el : max }\nend", "  l.max\nend", "\tbiggest_num\
    \ = l[0]\n\tfor num in l do\n\t\tif num > biggest_num\n\t\t\tbiggest_num = num\n\
    \t\tend\n\tend\n\treturn biggest_num\nend\nputs max_element.call([1, 2, 3])\n\
    puts max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  l.max\nend",
  "  puts l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\n\
    end", "\treturn l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", " \
    \ max = l[0]\n  l.each do |i|\n    max = i if i > max\n  end\n  max\nend", " \
    \ max = l[0]\n  l.each do |e|\n    max = e if e > max\n  end\n  max\nend", " \
    \ l.max\nend", "    l.max\nend", "  l.max\nend", "\t#return l.max\n\tmax = l[0]\n\
    \tl.each do |i|\n\t\tif i > max\n\t\t\tmax = i\n\t\tend\n\tend\n\treturn max\n\
    end", "  if l.empty?\n    return nil\n  end\n  return l.max\nend", "  r = l[0]\n\
    \  i = 1\n  while i < l.length\n    r = l[i] if l[i] > r\n    i += 1\n  end\n\
    \  r\nend", "  # Write your code here.\nend", "  l.max\nend", end, "  l.max\n\
    end", "  l.max\nend", "  if l.empty?\n    raise ArgumentError, \"Empty List\"\n\
    \  end\n  (l.max)\nend", "  l.max\nend", "  l.max\nend", "  return l.max\nend",
  "  (l[0] <= l[1]) ? (l[1] <= l[2]) ? l[2] : l[1] : (l[0] <= l[2]) ? l[2] : l[0]\n\
    end", "  l.max\nend", "  return nil if l.empty?\n  max = l[0]\n  i = 1\n  while\
    \ i < l.length\n    max = l[i] if l[i] > max\n    i += 1\n  end\n  max\nend",
  "\tmax = l[0]\n\tl.each do |i|\n\t\tif i > max\n\t\t\tmax = i\n\t\tend\n\tend\n\t\
    return max\nend", "  l.max\nend", "  l.max\nend\nputs max_element([1, 2, 3])\n\
    puts max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  l.max\nend", " \
    \ l.max\nend", "\tl.max\nend", "  l.max\nend", "  l.max\nend", "  return l.max\n\
    end", "  return l.max\nend", "  a = l.max\n  return a\nend", "  l.max\nend", "\t\
    l.max\nend", "\ti = 0\n\twhile i < l.length\n\t\tif i == 0\n\t\t\tmax = l[i]\n\
    \t\telsif l[i] > max\n\t\t\tmax = l[i]\n\t\tend\n\t\ti += 1\n\tend\n\treturn max\n\
    end", "  # n = l.length\n  # for i in 0..n-1\n  #   for j in 0..n-i-1\n  #   \
    \  if l[j] > l[j+1]\n  #       temp = l[j]\n  #       l[j] = l[j+1]\n  #     \
    \  l[j+1] = temp\n  #     end\n  #   end\n  # end\n  # return l[n-1]\n  l.max\n\
    end", "  raise NotImplementedError\nend", "    return l.max\nend", "  puts \"\
    max #{l.max}\"\nend", "  l.max\nend", "  l.sort[-1]\nend", "  max = l[0]\n  for\
    \ element in l\n    if element > max\n      max = element\n    end\n  end\n  return\
    \ max\nend", "  l.max\nend", "  # l.max_by { |x| x }\n  l.max\nend", "  i = 1\n\
    \  max = l[0]\n  while i < l.length\n    if l[i] > max\n      max = l[i]\n   \
    \ end\n    i += 1\n  end\n  max\nend", "  return l.max\nend", "  l.max\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
