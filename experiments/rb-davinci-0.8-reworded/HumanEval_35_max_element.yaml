name: HumanEval_35_max_element
language: rb
prompt: "# Return maximum element in the array.\n# >>> max_element.call([1, 2, 3])\n\
  # 3\n# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef\
  \ max_element(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n\
  \    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2,\
  \ 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
  \ -10]))\n  end\nend\n"
completions: ["  l.max\nend", "  l.max\nend", "  max = l[0]\n  for i in 1..l.length-1\n\
    \    if l[i] > max\n      max = l[i]\n    end\n  end\n  return max\nend", "  max\
    \ = l[0]\n  for i in 1..l.length-1\n    if l[i] > max\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "  return l.max\nend", "    max = l[0]\n    l.each\
    \ do |x|\n        if x > max\n            max = x\n        end\n    end\n    return\
    \ max\nend\nputs \"max_element test:\"\nputs max_element([1, 2, 3])\nputs max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "\t\nend", "  max = l[0]\n  l.each do\
    \ |e|\n    max = e if e > max\n  end\n  max\nend", "  l.max\nend", "  _, max =\
    \ l.reduce([l.first, l.first]) do |(max, min), e|\n    if e > max\n      [e, min]\n\
    \    elsif e < min\n      [max, e]\n    else\n      [max, min]\n    end\n  end\n\
    \  max\nend", "  l.max\nend", "  max = l[0]\n  for i in 0..l.length-1\n    if(l[i]\
    \ > max)\n      max = l[i]\n    end\n  end\n  return max\nend", "  l.max\nend",
  "  return l.max\nend\nputs max_element.call([1, 2, 3])\nputs max_element.call([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  max = l[0]\n  l.each { |i| max = i\
    \ if i > max }\n  max\nend", "\tmax = l[0]\n\tl.each do |x|\n\t\tif x > max\n\t\
    \t\tmax = x\n\t\tend\n\tend\n\treturn max\nend", "  # Your code goes here\nend",
  "  # TODO\nend", "  max = l[0]\n  for i in l\n    if max < i\n      max = i\n  \
    \  end\n  end\n  max\nend", "  l.max\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
