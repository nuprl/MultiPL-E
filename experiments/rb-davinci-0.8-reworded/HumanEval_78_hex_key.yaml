name: HumanEval_78_hex_key
language: rb
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n\
  # >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n\
  # 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n\
  \    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n\
  \    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"\
  ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6,\
  \ candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"\
  112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n"
completions: ["  return 0 if num.empty?\n \n  primes = %w(2 3 5 7 B D)\n \n  num.chars.reduce(0)\
    \ do |sum, char|\n    sum += 1 if primes.include?(char)\n    sum\n  end\nend\n\
    \ \np hex_key(\"AB\")\np hex_key(\"1077E\")\np hex_key(\"ABED1A33\")\np hex_key(\"\
    123456789ABCDEF0\")\np hex_key(\"2020\")", "  num.split('').inject(0) { |sum,\
    \ n| sum + (n.to_i.to_s == n || n.to_i(16) < 8 ? 0 : 1) }\nend", "  hex = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.count(hex.join)\nend", "  hex =\
    \ {'0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '7' =>\
    \ 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14,\
    \ 'F' => 15}\n  count = 0\n  num.each_char do |char|\n    if (hex[char] % 2 !=\
    \ 0) && (hex[char] % 3 != 0) && (hex[char] % 5 != 0) && (hex[char] % 7 != 0) &&\
    \ (hex[char] % 11 != 0) && (hex[char] % 13 != 0) && (hex[char] != 1)\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  num = num.to_i(16)\n  count =\
    \ 0\n  primes = [2, 3, 5, 7, 11, 13]\n  for i in 0..(num.to_s.length - 1)\n  \
    \  if primes.include?(num.to_s[i].to_i)\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  h_digits = (0..9).to_a.map(&:to_s) + ['A', 'B', 'C', 'D', 'E',\
    \ 'F']\n  prime_digits = [2, 3, 5, 7, 11, 13]\n  num.split('').map(&:to_i).select{|digit|\
    \ prime_digits.include?(digit)}.size\nend", "\tarray = []\n\tprimes = [2, 3, 5,\
    \ 7, 11, 13]\n\tnum.chars.each do |i|\n\t\tarray << i\n\tend\n\tnew_array = array.collect\
    \ do |x|\n\t\tx.hex\n\tend\n\tprime_array = new_array.select do |i|\n\t\tprimes.include?(i)\n\
    \tend\n\treturn prime_array.length\nend\nputs hex_key(\"2020\")\nputs hex_key(\"\
    1077E\")", "  primes = [2, 3, 5, 7, 11, 13]\n  digits = num.to_i(16).to_s.split('').map(&:to_i)\n\
    \  digits.select { |x| primes.include?(x) }.count\nend", "  chars = num.chars\n\
    \  count = 0\n  chars.each do |char|\n    case char\n    when \"2\"\n      count\
    \ += 1\n    when \"3\"\n      count += 1\n    when \"5\"\n      count += 1\n \
    \   when \"7\"\n      count += 1\n    when \"B\"\n      count += 1\n    when \"\
    D\"\n      count += 1\n    end\n  end\n  count\nend", "  if num.empty?\n    return\
    \ 0\n  end\n  hex = \"0123456789ABCDEF\"\n  primes = 0\n  # convert hex to decimal\n\
    \  dec = num.to_i(16)\n  digits = dec.to_s.split('').map(&:to_i)\n  length = digits.length\n\
    \  # check if each digit is a prime\n  digits.each do |digit|\n    is_prime =\
    \ true\n    (2..digit - 1).each do |i|\n      if digit % i == 0\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime == true\n      primes\
    \ += 1\n    end\n  end\n  return primes\nend", "  #your code here\nend", "  if\
    \ num.empty?\n    return 0\n  end\n  count = 0\n  primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.each_char do |char|\n    if char == \"A\"\n      count += 1 if primes.include?(11)\n\
    \    elsif char == \"B\"\n      count += 1 if primes.include?(11)\n    elsif char\
    \ == \"C\"\n      count += 1 if primes.include?(11)\n    elsif char == \"D\"\n\
    \      count += 1 if primes.include?(13)\n    elsif char == \"E\"\n      count\
    \ += 1 if primes.include?(13)\n    elsif char == \"F\"\n      count += 1 if primes.include?(13)\n\
    \    else\n      num = char.to_i\n      count += 1 if primes.include?(num)\n \
    \   end\n  end\n  count\nend", "  # your code here\nend", "  hex_primes = [2,\
    \ 3, 5, 7, 11, 13]\n  # hex_primes = [2, 3, 5, 7, 'B', 'D']\n  count = 0\n  hex\
    \ = num.chars.map do |hex_digit|\n    if hex_digit.match(/\\d/)\n      hex_digit.to_i\n\
    \    else\n      hex_digit.ord - 55\n    end\n  end\n  hex.each do |digit|\n \
    \   if hex_primes.include?(digit)\n      count += 1\n    end\n  end\n  count\n\
    end", "  # select numbers over 1 that are not a product of 2 smaller natural numbers\n\
    \  # then count the number of hexadecimal digits that are primes\n  num.gsub(/[^0-9ABD]/,\
    \ '').chars.map { |char| char.to_i(16) }.select { |num| num.prime? }.count\nend",
  "  chars = num.upcase.chars.reject { |x| x =~ /[^0-9A-F]/ }.map { |x| x.to_i(16)\
    \ }\n  chars.reject { |x| x =~ /[13579]/ }.size\nend", "  counter = 0\n  [2, 3,\
    \ 5, 7, 11, 13].each do |x|\n    counter += num.count(x.to_s(16).upcase)\n  end\n\
    \  counter\nend", "  s = num.upcase.chars.select{|c| (?0..?9).include?(c) || %w(2\
    \ 3 5 7 B D).include?(c)}.size\nend", "  # your code here\nend", "  primes = {\
    \ '2' => 2, '3' => 3, '5' => 5, '7' => 7, 'B' => 11, 'D' => 13 }\n  num.split('').select\
    \ { |x| primes.has_key?(x) }.size\nend", "  # TODO\nend", "  num.gsub(/[^0-9]/,\
    \ '').split('').count { |x| x.to_i.prime? }\nend", "  arr = \"2357BD\".split(\"\
    \")\n  num.upcase.count(arr.join(\"\"))\nend", "  num = num.gsub(\"A\", \"11\"\
    ).gsub(\"B\", \"11\").gsub(\"C\", \"11\").gsub(\"D\", \"11\").gsub(\"E\", \"11\"\
    ).gsub(\"F\", \"11\")\n  num = num.split(\"\")\n  num = num.map(&:to_i)\n  prime\
    \ = 0\n  num.each do |i|\n    if i == 2 || i == 3 || i == 5 || i == 7 || i ==\
    \ 11\n      prime += 1\n    end\n  end\n  prime\nend", "  m2d = { \"A\" => 10,\
    \ \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15 }\n  m2d.default\
    \ = 0\n  ret = 0\n  num.each_char do |digit|\n    n = digit.to_i(16)\n    ret\
    \ +=1 if n.to_s == digit && [2,3,5,7,11,13].include?(n)\n  end\n  ret\nend", " \
    \ # your code goes here\nend", "  arr = (\"2\"..\"7\").to_a + [\"B\", \"D\"]\n\
    \  num.chars.map(&:upcase).count { |i| arr.include?(i) }\nend", "\tprime_hex_numbers\
    \ = [2, 3, 5, 7, 11, 13]\n\thex_hash = {\"A\" => 10, \"B\" => 11, \"C\" => 12,\
    \ \"D\" => 13, \"E\" => 14, \"F\" => 15}\n\tsum = 0\n\tnum.chars.each do |hex|\n\
    \t\tif hex_hash.has_key?(hex)\n\t\t\tsum += 1 if prime_hex_numbers.include?(hex_hash[hex])\n\
    \t\telse\n\t\t\tsum += 1 if prime_hex_numbers.include?(hex.to_i)\n\t\tend\n\t\
    end\n\tsum\nend", "  res = 0\n  hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"]\n  num.each_char do |c|\n    res += 1 if hex_primes.include?(c)\n  end\n\
    \  res\nend", "    arr = []\n    primes = [2, 3, 5, 7, 11, 13]\n    new = num.scan(/\\\
    w/)\n    new.each do |i|\n        if i.to_i.to_s == i\n            arr << i.to_i\n\
    \        else\n            arr << i.hex\n        end\n    end\n    arr.count {|i|\
    \ primes.include?(i)}\nend", "  # your code goes here\nend", "  prime_numbers\
    \ = [2, 3, 5, 7, 11, 13]\n  digits = num.scan(/[0-9A-F]/)\n  primes = 0\n  digits.each\
    \ do |digit|\n    if prime_numbers.include?(digit.to_i(16))\n      primes += 1\n\
    \    end\n  end\n  primes\nend", "  digits = num.chars.map { |x| x.to_i(16) }\n\
    \  digits.select { |x| [2, 3, 5, 7, 11, 13].include?(x) }.count\nend", "  arr\
    \ = []\n  prime_numbers = [2, 3, 5, 7, 11, 13]\n  count = 0\n  num.split('').each\
    \ do |str|\n    arr << str.to_i(16)\n  end\n  arr.each do |n|\n    prime_numbers.each\
    \ do |p|\n      if n == p\n        count += 1\n      end\n    end\n  end\n  count\n\
    end", "  # your code here\nend", "  return 0 if num.nil? || num.empty?\n  # Your\
    \ code here\nend", "  num.chars.select { |e| e.to_i(16).to_s == e }.size\nend",
  "  # your code here\nend", "  primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n  num.chars.count { |hex| primes.include?(hex) }\nend", "  primes = [\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.upcase.split(\"\").select{|char| primes.include?(char)}.length\n\
    end", "  num.scan(/[2357BD]/).count\nend", "\tprime_numbers = [2, 3, 5, 7, 11,\
    \ 13]\n\thex_numbers = {\"2\" => 2, \"3\" => 3, \"5\" => 5, \"7\" => 7, \"B\"\
    \ => 11, \"D\" => 13}\n\tcounter = 0\n\tnum.split(\"\").each do |x|\n\t\tif prime_numbers.include?(hex_numbers[x])\n\
    \t\t\tcounter += 1\n\t\tend\n\tend\n\tcounter\nend", "  if num == \"\"\n    return\
    \ 0\n  end\n  h = {\"2\" => true, \"3\" => true, \"5\" => true, \"7\" => true,\
    \ \"B\" => true, \"D\" => true}\n  count = 0\n  i = 0\n  while i < num.length\n\
    \    if h[num[i]]\n      count += 1\n    end\n    i += 1\n  end\n  return count\n\
    end", "  @primes = [2, 3, 5, 7, 11, 13]\n  @result = 0\n  num.upcase.chars.each\
    \ do |char|\n    @result += 1 if @primes.include?(char.to_i(16))\n  end\n  return\
    \ @result\nend", "  hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \  primes = [2,3,5,7,11,13]\n  count = 0\n  arr = num.chars\n  arr.each do |i|\n\
    \    if primes.include?(hex.index(i))\n      count += 1\n    end\n  end\n  count\n\
    end", "    prime = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    arr = num.split(\"\
    \")\n    count = 0\n    arr.each do |n|\n        count += 1 if prime.include?(n)\n\
    \    end\n    count\nend", "    return 0 if num.length == 0\n    return 0 if num\
    \ == nil\n    return num.to_i(16).prime? ? 1 : 0\nend", "  hex = ['2', '3', '5',\
    \ '7', 'B', 'D']\n  num.chars.select { |x| hex.include?(x) }.size\nend", "\thex_digit\
    \ = ['2','3','5','7','B','D']\n\tprime_num = 0\n\tarr = num.chars.to_a\n\tarr.each\
    \ do |a|\n\t\tprime_num += 1 if hex_digit.include?(a)\n\tend\n\tprime_num\nend",
  "  hex = {'0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, \n       \
    \  '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, \n         'C'\
    \ => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n  digits = num.split('')\n  primes\
    \ = []\n  digits.each do |digit|\n    dec = hex[digit]\n    primes << dec if dec\
    \ > 1 && [2, 3, 5, 7, 11, 13].include?(dec)\n  end\n  primes.count\nend", "  num.gsub(/[^2357BDF]/,\
    \ '').length\nend", "  hex = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" =>\
    \ 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n   \
    \ \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" =>\
    \ 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n\
    \  }\n  count = 0\n  num.split(\"\").each do |el|\n    if hex[el] == 2 || hex[el]\
    \ == 3 || hex[el] == 5 || hex[el] == 7 || hex[el] == 11 || hex[el] == 13\n   \
    \   count += 1\n    end\n  end\n  return count\nend", "  hexa = {\"A\" => 10,\
    \ \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  counter\
    \ = 0\n  arr = num.split(\"\")\n  arr.each do |digit|\n    digit = digit.to_i\n\
    \    counter += 1 if (digit == 2 || digit == 3 || digit == 5 || digit == 7 ||\
    \ digit == 11 || digit == 13)\n  end\n  arr.each do |digit|\n    next if digit.to_i\
    \ > 9\n    counter += 1 if hexa[digit] == 2 || hexa[digit] == 3 || hexa[digit]\
    \ == 5 || hexa[digit] == 7 || hexa[digit] == 11 || hexa[digit] == 13\n  end\n\
    \  counter\nend", "\t# your code goes here\n\thexadecimal = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']\n\tprimes = [2, 3, 5, 7, 11, 13, 17]\n\
    \t\n\tresult = 0\n\t\n\tnum.chars.each do |n|\n\t\tresult += 1 if primes.include?(hexadecimal.index(n.to_s.upcase))\n\
    \tend\n\t\n\tresult\nend", "  return 0 if num.empty?\n  # one liner:\n  # num.scan(/[2357BD]/).count\n\
    \  # just as a matter of pratice:\n  prime_count = 0\n  prime_array = [\"2\",\
    \ \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.split(\"\").each do |n|\n    prime_count\
    \ += 1 if prime_array.include?(n)\n  end\n  prime_count\nend", "  primes = [2,\
    \ 3, 5, 7, 11, 13]\n  num.upcase.chars.select { |n| primes.include?(n.to_i(16))\
    \ }.size\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  arr = num.split('')\n  total\
    \ = 0\n  arr.each do |n|\n    if primes.include?(n.to_i(16))\n      total += 1\n\
    \    end\n  end\n  total\nend", "  num = num.upcase.split('')\n  prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.map { |i| num.count(i) if\
    \ prime_digits.include?(i) }.compact.reduce(:+)\nend", "  letters = {\n    'a'\
    \ => 10,\n    'b' => 11,\n    'c' => 12,\n    'd' => 13,\n    'e' => 14,\n   \
    \ 'f' => 15\n  }\n  count = 0\n  num.chars.each do |n|\n    if n.downcase == n\n\
    \      n = letters[n]\n    end\n    if n.to_i > 1\n      if n.to_i < 9\n     \
    \   count += 1\n      elsif n.to_i == 11 || n.to_i == 13\n        count += 1\n\
    \      end\n    end\n  end\n  count\nend", "  # your code here\nend", "  arr =\
    \ num.scan(/[2-7ABD]/)\n  arr.size\nend", "  arr = []\n  num.each_char do |i|\n\
    \    arr << i.to_i(16)\n  end\n  count = 0\n  arr.each do |num|\n    if num ==\
    \ 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "\t# your code here\nend", "  p\
    \ num.delete(\"^2,3,5,7,B,D\").length\nend", "  return 0 if num.empty?\n  prime_numbers\
    \ = {\n    '2' => 2,\n    '3' => 3,\n    '5' => 5,\n    '7' => 7,\n    'B' =>\
    \ 11,\n    'D' => 13\n  }\n  num.upcase.chars.map { |char| prime_numbers[char]\
    \ }.compact.size\nend", "    p = [2, 3, 5, 7, 11, 13]\n    q = num.chars.map(&:ord)\n\
    \    z = []\n    q.each do |x|\n      if (48..57).include?(x)\n        z << x\
    \ - 48\n      elsif (65..70).include?(x)\n        z << x - 55\n      end\n   \
    \ end\n    z.count { |x| p.include?(x) }\nend", "  prime = [2, 3, 5, 7, 11, 13]\n\
    \  new_str = num.chars.map { |x| x.ord - 48 }\n  count = 0\n  new_str.each do\
    \ |x|\n    count += 1 if prime.include?(x)\n  end\n  count\nend", "  primes =\
    \ [2, 3, 5, 7, 11, 13]\n  num.split('').count { |hex| primes.include?(hex.to_i(16))\
    \ }\nend", "\tprimes_arr = [2, 3, 5, 7, 11, 13]\n\thex_arr = [0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\thex_map = Hash[hex_arr.zip(('0'..'9').to_a\
    \ + ('A'..'F').to_a)]\n\tprimes_map = Hash[primes_arr.zip(%w[2 3 5 7 B D])]\n\t\
    primes_map_reversed = Hash[%w[2 3 5 7 B D].zip(primes_arr)]\n\thex_digits = num.split('').map\
    \ { |x| hex_map.key(x) }\n\tprimes_digits = primes_map.values\n\tprimes_keys =\
    \ primes_map.keys\n\tcount = 0\n\thex_digits.each do |x|\n\t\tif primes_keys.include?(x)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend", "  count = 0\n  num.each_char\
    \ do |i|\n    count += 1 if (2..13).include?(i.to_i(16))\n  end\n  count\nend",
  "  return 0 if num.empty?\n  num.gsub(/[^2357BD]/, '').size\nend", "  #your code\
    \ here\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.split('').map(&:to_i).reduce(0)\
    \ do |sum, digit|\n    digit = digit + 9 if digit > 10\n    primes.include?(digit)\
    \ ? sum + 1 : sum\n  end\nend", "  primes = %w(2 3 5 7 B D)\n  num.upcase.gsub(/[^A-F0-9]/,\
    \ '').chars.select { |c| primes.include?(c) }.size\nend", "  # create array with\
    \ hexadecimal digits\n  digits = %w(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  # create\
    \ array with prime digits\n  primes = %w(2 3 5 7 B D)\n  # convert string argument\
    \ to array of characters\n  num_chars = num.chars\n  # loop through array of hexadecimal\
    \ numbers and compare with \n  # array of primes\n  num_chars.count do |num|\n\
    \    primes.include?(num)\n  end\nend", "  primes = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n  total = 0\n  num.each_char do |hex|\n    if primes.include?(hex)\n\
    \      total += 1\n    end\n  end\n  total\nend", "  h = {\"A\" => 10, \"B\" =>\
    \ 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  c = 0\n  k = num.split(\"\
    \")\n  k.each do |i|\n    h.has_key?(i) ? k[k.index(i)] = h[i] : k[k.index(i)]\
    \ = i.to_i\n  end\n  primes = [2, 3, 5, 7, 11, 13]\n  k.each do |x|\n    c +=\
    \ 1 if primes.include?(x)\n  end\n  c\nend", "    prime = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"]\n    sum = 0\n    for i in 0..num.length-1\n        if\
    \ prime.include?(num[i])\n            sum += 1\n        end\n    end\n    return\
    \ sum\nend", "  prime_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  count\
    \ = 0\n  num.chars.each do |char|\n    count += 1 if prime_digits.include?(char)\n\
    \  end\n  count\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.upcase.chars.count\
    \ { |n| primes.include?(n.to_i(16)) }\nend", "    num = num.chars.map{|x| if x\
    \ =~ /[0-9]/ then x.to_i else x.ord - 55 end}\n    num.select{|x| x == 2 || x\
    \ == 3 || x == 5 || x == 7 || x == 11 || x == 13}.length\nend", "  num.to_i(16).to_s(2).count(\"\
    1\")\nend", "  hex = {\"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" =>\
    \ 4, \"5\" => 5, \n         \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"\
    A\" => 10, \"B\" => 11, \n         \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\"\
    \ => 15}\n  count = 0\n  num.split(\"\").each do |digit|\n    count += 1 if is_prime?(hex[digit])\n\
    \  end\n  count\nend", "  num = num.to_i(16)\n  count = 0\n  (2..num).each do\
    \ |n|\n    count += 1 if num % n == 0\n  end\n  count\nend", "  num.scan(/[2357BD]/).count\n\
    end\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\")\nputs hex_key(\"ABED1A33\"\
    )\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"2020\")", "  num = num.downcase\n\
    \  prime_num = {\n    '0' => false,\n    '1' => false,\n    '2' => true,\n   \
    \ '3' => true,\n    '4' => false,\n    '5' => true,\n    '6' => false,\n    '7'\
    \ => true,\n    '8' => false,\n    '9' => false,\n    'a' => false,\n    'b' =>\
    \ true,\n    'c' => false,\n    'd' => true,\n    'e' => false,\n    'f' => false\n\
    \  }\n  counter = 0\n  num.each_char do |char|\n    counter += 1 if prime_num[char]\n\
    \  end\n  counter\nend", "  # define your method here\nend", "  array_num = num.split('')\n\
    \  count = 0\n  primes = [2, 3, 5, 7, 11, 13]\n  array_num.each do |num|\n   \
    \ if num.match(/[ABCDEF]/)\n      case num\n      when 'A'\n        num = '10'\n\
    \      when 'B'\n        num = '11'\n      when 'C'\n        num = '12'\n    \
    \  when 'D'\n        num = '13'\n      when 'E'\n        num = '14'\n      when\
    \ 'F'\n        num = '15'\n      end\n    end\n    if primes.include?(num.to_i)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  # Do not edit this line.\n\
    \  puts \"Call your function with #{num}\"\n  # Do not edit this line.\nend",
  "  # your code here\nend", "  digits = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n  prime_digits = ['2', '3', '5', '7',\
    \ 'B', 'D']\n  count = 0\n  num.each_char do |char|\n    if prime_digits.include?(char)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  if num == ''\n    0\n  else\n\
    \    num_arr = num.split('')\n    num_arr.select { |num| ('2'..'7').include?(num)\
    \ || num == 'B' || num == 'D' }.length\n  end\nend", "  primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n  count = 0\n  num.each_char do |ch|\n    count += 1 if primes.include?(ch)\n\
    \  end\n  count\nend", "  res = num.scan(/[2-7|B|D]/).count\nend", "  hex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.split(\"\").select { |i|\
    \ hex_primes.include?(i) }.length\nend", "  # convert num to string\n  num_string\
    \ = num.to_s\n  # count the length of num\n  num_length = num_string.length\n\
    \  # array to hold primes\n  primes = []\n  # count the number of primes\n  prime_count\
    \ = 0\n  # case for length of num\n  case num_length\n  when 0\n    puts prime_count\n\
    \  when 1\n    if num_string == '2' || num_string == '3' || num_string == '5'\
    \ || num_string == '7' || num_string == 'B' || num_string == 'D'\n      puts 1\n\
    \    else\n      puts 0\n    end\n  else\n    # array to hold digits in num\n\
    \    digits = num_string.split('')\n    # array to hold decimal values of digits\n\
    \    decimal_values = []\n    # array to hold possible primes\n    possible_primes\
    \ = []\n    # loop through digits and convert hex to decimal\n    digits.each\
    \ do |digit|\n      case digit\n      when '0'\n        decimal_values << 0\n\
    \      when '1'\n        decimal_values << 1\n      when '2'\n        decimal_values\
    \ << 2\n      when '3'\n        decimal_values << 3\n      when '4'\n        decimal_values\
    \ << 4\n      when '5'\n        decimal_values << 5\n      when '6'\n        decimal_values\
    \ << 6\n      when '7'\n        decimal_values << 7\n      when '8'\n        decimal_values\
    \ << 8\n      when '9'\n        decimal_values << 9\n      when 'A'\n        decimal_values\
    \ << 10\n      when 'B'\n        decimal_values << 11\n      when 'C'\n      \
    \  decimal_values << 12\n      when 'D'\n        decimal_values << 13\n      when\
    \ 'E'\n        decimal_values << 14\n      when 'F'\n        decimal_values <<\
    \ 15\n      end\n    end\n    # find primes in decimal_values and save to primes\
    \ array\n    decimal_values.each do |num|\n      if num == 2 || num == 3 || num\
    \ == 5 || num == 7 || num == 11 || num == 13\n        primes", "  #your code here\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  num.to_i(16).to_s(2).chars.map(&:to_i).inject(:+).to_i\n\
    end", "  num = num.to_i(16)\n  primes = [2, 3, 5, 7, 11, 13]\n  total = 0\n  while\
    \ num > 0\n    last_num = num % 10\n    total += 1 if primes.include?(last_num)\n\
    \    num /= 10\n  end\n  total\nend", "\tarr = num.split('')\n\tarr.delete('0')\n\
    \tarr.delete('1')\n\tarr.delete('4')\n\tarr.delete('6')\n\tarr.delete('8')\n\t\
    arr.delete('9')\n\tarr.delete('E')\n\tarr.delete('F')\n\tarr.count\nend", "\t\
    if num == \"\"\n\t\treturn 0\n\tend\n\thex_primes = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n\tprime_count = 0\n\tnum.each_char do |char|\n\t\tif hex_primes.include?(char)\n\
    \t\t\tprime_count += 1\n\t\tend\n\tend\n\treturn prime_count\nend", "  num = num.upcase\n\
    \  p = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.count(\"2,3,5,7,B,D\"\
    )\nend", "  prime_hex_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  prime_hex_digits.count\
    \ { |item| num.include?(item) }\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.upcase.chars.select\
    \ { |el| primes.include?(el.to_i(16)) }.size\nend", "  sum = 0\n  num.split('').each\
    \ do |x|\n    sum += 1 if [2, 3, 5, 7, 11, 13].include?(x.to_i(16))\n  end\n \
    \ sum\nend", "  num.scan(/[2357BD]/).count\nend", "  # convert input to an array\n\
    \  nums = num.split('')\n  # determine if the value of each element is prime\n\
    \  nums.select { |x| [2, 3, 5, 7, 11, 13].include?(x.to_i(16)) }.count\nend",
  "  num.chars.map(&:to_i).select { |e| %w(2 3 5 7 11 13).include?(e) }.size\nend",
  "  r = Regexp.new(\"[2357BDF]\")\n  num.scan(r).count\nend", "  num.chars.map(&:hex).select\
    \ { |x| [2, 3, 5, 7, 11, 13].include?(x) }.size\nend", "  num_of_primes = 0\n\
    \  num.split('').each do |i|\n    num_of_primes += 1 if \"2357BDF\".include?(i)\n\
    \  end\n  num_of_primes\nend", "  return 0 if num.length == 0\n  primes = [2,\
    \ 3, 5, 7, 11, 13]\n  str_primes = primes.map(&:to_s)\n  num.split('').select\
    \ { |e| str_primes.include?(e) }.length\nend", "  if num == \"\"\n    return 0\n\
    \  end\n  hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  counter =\
    \ 0\n  split_num = num.split(\"\")\n  split_num.each do |num|\n    if hex_primes.include?(num)\n\
    \      counter += 1\n    end\n  end\n  return counter\nend", "  return 0 if num.empty?\n\
    \  primes = [2, 3, 5, 7, 11, 13]\n  hex_num = num.upcase.split('')\n  hex_num.count\
    \ { |n| primes.include?(n.to_i(16)) }\nend", "  return 0 if num.empty?\n  letters\
    \ = {\"A\" => 11, \"B\" => 12, \"C\" => 13, \"D\" => 14, \"E\" => 15, \"F\" =>\
    \ 16}\n  num.upcase!\n  result = num.chars.map { |char| letters[char] ? letters[char]\
    \ : char.to_i }\n  primes = [2, 3, 5, 7, 11, 13]\n  result.select { |digit| primes.include?(digit)\
    \ }.count\nend", "  #your code here\nend", "  # ...\nend", "\thex_primes = [2,\
    \ 3, 5, 7, 11, 13]\n\tsum = 0\n\t0.upto(num.length - 1) do |i|\n\t\tsum += 1 if\
    \ hex_primes.include?(num[i].to_i(16))\n\tend\n\treturn sum\nend", "    # Create\
    \ a hash\n    x = {\n        0=>0, 1=>0, 2=>1, 3=>0, 4=>0, 5=>1, 6=>0, 7=>1,\n\
    \        8=>0, 9=>0, \"A\"=>0, \"B\"=>1, \"C\"=>0, \"D\"=>1, \"E\"=>0, \"F\"=>0\n\
    \    }\n    # Convert the number string to an array of strings\n    arr = num.split(\"\
    \")\n    # Pull the value for each element of the array from the hash\n    arr.map!\
    \ {|char| x[char.to_sym]}\n    # Sum the number of primes and return it\n    arr.sum\n\
    end", "  num.split('').map{|x| x.to_i}.select{|x| x==2 || x==3 || x==5 || x==7\
    \ || x==11 || x==13}.length\nend\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\"\
    )\nputs hex_key(\"ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"\
    2020\")", "  primes = ['2', '3', '5', '7', 'B', 'D']\n  num.to_s.split('').reduce(0)\
    \ { |sum, n| primes.include?(n) ? sum + 1 : sum }\nend", "  num.split('').count\
    \ do |n|\n    n = n.to_i(16)\n    n if n > 1 && n % 2 != 0 && n % 3 != 0 && n\
    \ % 5 != 0 && n % 7 != 0 && n % 11 != 0 && n % 13 != 0\n  end\nend", "  num_prime\
    \ = 0\n  num.chars.each do |ch|\n    ch_int = ch.hex\n    num_prime += 1 if ch_int.odd?\
    \ && (2..Math.sqrt(ch_int)).none? { |n| ch_int % n == 0 }\n  end\n  num_prime\n\
    end", "  hexs = num.chars.map(&:to_i)\n  arr = []\n  hexs.each do |x|\n    if\
    \ (x == 2) || (x == 3) || (x == 5) || (x == 7) || (x == 11) || (x == 13)\n   \
    \   arr << x\n    end\n  end\n  arr.count\nend", "  primes = [1, 2, 3, 5, 7, 11,\
    \ 13]\n  num.chars.count { |x| primes.include?(x.to_i(16)) }\nend", "  primes\
    \ = {'2' => 2, '3' => 3, '5' => 5, '7' => 7, 'B' => 11, 'D' => 13}\n  primes.select\
    \ { |k,v| num.include?(k) }.length\nend", "  return 0 if num.size == 0\n  number\
    \ = num.scan(/[0-9A-F]/).size\n  primes = [2, 3, 5, 7, 11, 13]\n  number & primes.size\n\
    end", "  num = num.gsub(\"A\", \"11\").gsub(\"B\", \"11\").gsub(\"C\", \"11\"\
    ).gsub(\"D\", \"11\").gsub(\"E\", \"11\").gsub(\"F\", \"11\")\n  num = num.split(\"\
    \")\n  sum = 0\n  num.each do |i|\n    sum += 1 if i.to_i.prime?\n  end\n  sum\n\
    end", "  num.split('').count{|n| %w(2 3 5 7 B D).include?(n)}\nend", "  count\
    \ = 0\n  num.each_char do |i|\n    count += 1 if i == \"2\" || i == \"3\" || i\
    \ == \"5\" || i == \"7\" || i == \"B\" || i == \"D\"\n  end\n  count\nend", " \
    \ results = []\n  arr = num.split('')\n  arr.each do |i|\n    if ['2', '3', '5',\
    \ '7', 'B', 'D'].include?(i)\n      results << i\n    end\n  end\n  return results.length\n\
    end", "  counter = 0\n  prime_numbers = \"2357BD\"\n  if num.length == 0\n   \
    \ return 0\n  end\n  num.each_char do |x|\n    if prime_numbers.include?(x)\n\
    \      counter += 1\n    end\n  end\n  return counter\nend", "  return 0 if num.empty?\n\
    \  array = num.upcase.split('')\n  hex_array = ['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n  prime_array = [2, 3, 5,\
    \ 7, 11, 13]\n  count = 0\n  array.each do |x|\n    count += 1 if prime_array.include?(hex_array.index(x))\n\
    \  end\n  count\nend", "  num.chars.count { |n| '2357BD'.include?(n) }\nend",
  "  num = num.chars.map { |i| i.hex }\n  primes = [2, 3, 5, 7, 11, 13]\n  num.map\
    \ { |i| primes.include?(i) ? 1 : 0 }.sum\nend", "    val = num.split('')\n   \
    \ prime_val = []\n    val.each do |v|\n        if v == '2'\n            prime_val\
    \ << v\n        elsif v == '3'\n            prime_val << v\n        elsif v ==\
    \ '5'\n            prime_val << v\n        elsif v == '7'\n            prime_val\
    \ << v\n        elsif v == 'B'\n            prime_val << v\n        elsif v ==\
    \ 'D'\n            prime_val << v\n        end\n    end\n    prime_val.length\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  (num.chars.map(&:hex) & primes).size\n\
    end", "  prime_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.count{|n|\
    \ prime_digits.include?(n.upcase)}\nend", "  hex_key = num.chars.map { |char|\
    \ char.upcase }\n  hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n \
    \ hex_prime_count = 0\n  hex_key.each do |hex|\n    if hex_primes.include?(hex)\n\
    \      hex_prime_count += 1\n    end\n  end\n  hex_prime_count\nend", "  num.scan(/[2357BD]/).size\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  hex_nums = {\n    \"0\" => 0,\n    \"\
    1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n\
    \    \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\"\
    \ => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n\
    \    \"F\" => 15\n  }\n  count = 0\n  num.each_char do |char|\n    count += 1\
    \ if primes.include?(hex_nums[char])\n  end\n  count\nend", "  primes = [\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.upcase.split(\"\").reject{|x| !primes.include?(x)}.size\n\
    end", "  num.split('').map{|x| x.hex}.select{|x| x == 2 || x == 3 || x == 5 ||\
    \ x == 7 || x == 11 || x == 13}.count\nend", "  primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.upcase.chars.select { |n| primes.include?(n.to_i(16)) }.size\nend", " \
    \ primes = %w(2 3 5 7 B D)\n  (num.split('') & primes).count\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13]\n  hex_nums = []\n  num.each_char do |char|\n    hex_nums\
    \ << char.to_i(16)\n  end\n  counter = 0\n  hex_nums.each do |num|\n    if primes.include?(num)\n\
    \      counter += 1\n    end\n  end\n  counter\nend", "  return 0 if num.empty?\n\
    \  digits = num.chars.map(&:upcase)\n  primes = [2, 3, 5, 7, 11, 13]\n  (digits\
    \ & primes).count\nend", "  arr = num.split('')\n  num_of_primes = 0\n  arr.each\
    \ do |e|\n    if (e == '2' || e == '3' || e == '5' || e == '7' || e == 'B' ||\
    \ e == 'D')\n      num_of_primes += 1\n    end\n  end\n  return num_of_primes\n\
    end", "  hex = %w(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  primes = [2, 3, 5, 7, 11,\
    \ 13]\n  result = 0\n  num.split('').each do |n|\n    result += 1 if primes.include?(hex.index(n))\n\
    \  end\n  result\nend", "  hex = {\"A\" => 11, \"B\" => 12, \"C\" => 13, \"D\"\
    \ => 14, \"E\" => 15, \"F\" => 16}\n  num.chars.map do |x|\n    if x.to_i.to_s\
    \ == x || hex.has_key?(x)\n      if is_prime?(x.to_i)\n        1\n      else\n\
    \        0\n      end\n    else\n      if is_prime?(hex[x])\n        1\n     \
    \ else\n        0\n      end\n    end\n  end.sum\nend", "  cnt = 0\n  num.chars.each\
    \ do |ch|\n    n = ch.to_i(16)\n    cnt += 1 if n > 1 && (2..n/2).all? { |x| n\
    \ % x != 0 }\n  end\n  cnt\nend", "\tprimes = [2, 3, 5, 7, 11, 13]\n\tnum.each_char.count\
    \ { |x| primes.include?(x.to_i(16)) }\nend", "  # your code here\nend", "  num.to_i(16).to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  return 0 if num.empty?\n  primes = [2, 3, 5, 7, 11, 13]\n  digits = ('0'..'9').to_a\
    \ + ('A'..'F').to_a\n  digits_to_decimal = digits.map.with_index{|x, i| [x, i]}.to_h\n\
    \  digits_to_hex = primes.map.with_index{|x, i| [x, digits[i]]}.to_h\n  n = 0\n\
    \  num.each_char do |c|\n    n += 1 if digits_to_hex.include?(digits_to_decimal[c])\n\
    \  end\n  n\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.split('').count { |x|\
    \ primes.include?(x.to_i(16)) }\nend", "  num = num.chars.map { |x| x = x.to_i(16)\
    \ }\n  prime_array = [2, 3, 5, 7, 11, 13]\n  prime_array.each do |x|\n    num.delete(x)\n\
    \  end\n  p num.length\nend", "  hex_digits = {\n    \"0\" => 0,\n    \"1\" =>\
    \ 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n   \
    \ \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" =>\
    \ 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n\
    \    \"F\" => 15\n  }\n  prime_numbers = [2, 3, 5, 7, 11, 13]\n  num.split(\"\"\
    ).map { |x| hex_digits[x] }.select { |x| prime_numbers.include?(x) }.count\nend",
  "\tpossible = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n\tprime_count = 0\n\thex_to_num = num.hex\n\thex_to_num.to_s.each_char\
    \ do |char|\n\t\tif possible.include?(char.to_i)\n\t\t\tprime_count += 1\n\t\t\
    end\n\tend\n\tprime_count\nend", "  p num\n  num = num.downcase.split('')\n  p\
    \ num\n  prime_hex = [2, 3, 5, 7, 11, 13]\n  p num.map! { |n| n.hex }\n  p num\n\
    \  p num.map! { |n| n if prime_hex.include?(n) }\n  p num\n  num.count { |n| n\
    \ != nil }\nend", "\thex = %w(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\thex_primes =\
    \ %w(2 3 5 7 B D)\n\tprime_count = 0\n\t\n\tnum.each_char do |char|\n\t\tif hex_primes.include?(char)\n\
    \t\t\tprime_count += 1\n\t\tend\n\tend\n\t\n\tprime_count\nend", "  # begin\n\
    \  hash = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"\
    F\" => 15}\n  primes = [2, 3, 5, 7, 11, 13]\n  count = 0\n  num.chars.each do\
    \ |x|\n    if hash.has_key?(x)\n      if primes.include?(hash[x])\n        count\
    \ += 1\n      end\n    elsif x.to_i.odd? && (x.to_i != 1)\n      count += 1\n\
    \    end\n  end\n  count\n  # end\nend", "  key = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n  if num == \"\"\n    0\n  else\n    num.chars.select{|n| key.include?(n)}.count\n\
    \  end\nend", "  sum = 0\n  return sum if num.empty?\n  hex = '0123456789ABCDEF'\n\
    \  digits = num.chars.map{|num| hex.index(num)}\n  digits.each do |digit|\n  \
    \  sum += 1 if [2, 3, 5, 7, 11, 13].include?(digit)\n  end\n  sum\nend", "  prime\
    \ = \"2357BDF\"\n  num.chars.count { |c| prime.include?(c) }\nend", "  # primes_arr\
    \ = [2, 3, 5, 7, 11, 13]\n  primes_arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  # primes_arr = [103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263", "  hex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.chars.select { |i| hex_primes.include?(i)\
    \ }.count\nend", "  prime_hex_numbers = [2, 3, 5, 7, 11, 13]\n  num.upcase.each_char.inject(0)\
    \ do |result, num|\n    result += prime_hex_numbers.include?(num.to_i(16)) ? 1\
    \ : 0\n  end\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.count(\"2 3 5 7 B\
    \ D\".split(\" \"))\nend\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\")\nputs\
    \ hex_key(\"ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"2020\"\
    )", "  arr = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.chars.count { |digit|\
    \ arr.include?(digit) }\nend", "  prime_hex_digits = [2, 3, 5, 7, 11, 13]\n  num.split('').map{|n|\
    \ n.to_i(16)}.reduce(0) do |result, n|\n    result += prime_hex_digits.include?(n)\
    \ ? 1 : 0\n  end\nend", "  num.scan(/[2357BD]/).size\nend", "  arr = num.scan(/[2357BDF]/)\n\
    \  arr.count\nend", "  num.scan(/[2357BD]/).size\nend", "  primes = [2, 3, 5,\
    \ 7, 11, 13]\n  num.chars.map { |x| x.to_i(16) }.select { |x| primes.include?(x)\
    \ }.count\nend", "  #num = \"2AA2FD1F24D2\"\n  hex_nums = [2, 3, 5, 7, 11, 13]\n\
    \  dig_array = Array.new\n  dig_array = num.split(//)\n  (0..dig_array.length-1).each\
    \ do |i|\n    dig_array[i] = dig_array[i].hex\n  end\n  count = 0\n  dig_array.each\
    \ do |num|\n    if hex_nums.include?(num)\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  matches = num.chars.select { |char| %w(2 3 5\
    \ 7 B D).include?(char) }\n  matches.count\nend", "  return 0 if num.size == 0\n\
    \  primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.split(\"\").select\
    \ { |x| primes.include?(x) }.size\nend", "  h = ('A'..'F').to_a\n  a = num.split('')\n\
    \  b = []\n  a.each do |x|\n    if (2..7).to_a.include?(x.to_i)\n      b << x\n\
    \    elsif h.include?(x)\n      b << x\n    end\n  end\n  if b.length == 0\n \
    \   0\n  else\n    b.length\n  end\nend", "  # Your code goes here.\nend", " \
    \ num.chars.reduce(0) do |acc,char|\n    acc += 1 if prime?(hex_to_dec(char))\n\
    \    acc\n  end\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |x|\
    \ x.to_i(16) }.select { |x| primes.include?(x) }.size\nend", "    num.to_i(16).digits.select{|n|\
    \ n.prime?}.size\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count {\
    \ |el| primes.include?(el.to_i(16)) }\nend", "  return 0 if num.nil? || num.empty?\n\
    \  hash = {}\n  ('2'..'7').each { |val| hash[val] = true }\n  hash['b'] = true\n\
    \  hash['d'] = true\n  counter = 0\n  num.downcase.chars.each do |char|\n    if\
    \ hash[char]\n      counter += 1\n    end\n  end\n  counter\nend", "  num.count(\"\
    2357BD\")\nend", "  @hex_key_primes_count = 0\n  num.scan(/[0-9A-F]/).each { |c|\
    \ @hex_key_primes_count += 1 if HEX_KEY_PRIMES.include?(c) }\n  @hex_key_primes_count\n\
    end", "\ta = num.split('')\n\ta.keep_if {|i| '2357BD'.include?(i)}\n\ta.length\n\
    end", "\t\nend", "  hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.chars.inject(0)\
    \ { |sum, x| hex.include?(x) ? sum + 1 : sum }\nend", "  num.chars.count { |char|\
    \ '2357BD'.include?(char) }\nend", "  num.upcase!\n  a = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"]\n  count = 0\n  num.each_char do |char|\n    count += 1\
    \ if a.include?(char)\n  end\n  count\nend", "    sum = 0\n    num.upcase.chars.each\
    \ do |c|\n        if \"2357BD\".include?(c)\n            sum += 1\n        end\n\
    \    end\n    sum\nend", "  num = num.upcase\n  [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"].reduce(0) { |sum, digit|\n    sum + num.count(digit)\n  }\nend", " \
    \ list_of_primes = ['2', '3', '5', '7', 'B', 'D']\n  primes = num.chars.count\
    \ { |c| list_of_primes.include?(c) }\n  primes\nend", "  return 0 if num.empty?\n\
    \  hash = { \"2\" => 2, \"3\" => 3, \"5\" => 5, \"7\" => 7, \"B\" => 11, \"D\"\
    \ => 13 }\n  num.split(\"\").inject(0) { |sum, n| hash.has_key?(n) ? sum + 1 :\
    \ sum }\nend", "    return 0 if num.empty?\n    key_num = num.upcase.split('')\n\
    \    key_num.delete_if {|i| i == 'A' || i == 'B' || i == 'D' || i == 'E'}\n  \
    \  p key_num.delete_if {|i| i == 'C' || i == 'F'}\n    key_num.length\nend", " \
    \ if num.empty?\n    0\n  else\n    hex_number = num.split('')\n    prime_numbers\
    \ = %w[2 3 5 7 11 13]\n    counter = 0\n    hex_number.each do |i|\n      if prime_numbers.include?(i)\n\
    \        counter += 1\n      end\n    end\n    counter\n  end\nend", "  hex_values\
    \ = {'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n  count\
    \ = 0\n  num.each_char do |n|\n    n = n.to_i if n.to_i != 0\n    count += 1 if\
    \ (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13)\n  end\n  count\n\
    end", "  prime_keys = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  prime_count\
    \ = 0\n  num.each_char do |c|\n    prime_count += 1 if prime_keys.include?(c)\n\
    \  end\n  prime_count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
