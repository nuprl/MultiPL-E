name: HumanEval_88_sort_array
language: rb
prompt: "# Given an array of non-negative integers, return a corb of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n\
  # [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5],\
  \ candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2,\
  \ 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0,\
  \ 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23,\
  \ 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"
completions: ["  even_odd_sort(array, array.length - 1, array[0] + array[-1])\nend",
  "  if array[0].to_i + array[-1].to_i % 2 == 0\n    array.sort { |x, y| y <=> x }\n\
    \  else\n    array.sort\n  end\nend", "  if (array.first + array.last) % 2 ==\
    \ 0\n    array.sort.reverse\n  else\n    array.sort\n  end\nend", "  return array\
    \ if array.size < 2\n  if array.first + array.last % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.empty?\n    []\n  elsif array.size\
    \ == 1\n    array\n  elsif (array.first + array.last) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.empty?\n    []\n  elsif array.size\
    \ == 1\n    array\n  elsif array.sum % 2 == 0\n    array.sort { |a, b| b <=> a\
    \ }\n  else\n    array.sort\n  end\nend", "  array_class = array.class\n  array_size\
    \ = array.size\n  # odd number of elements\n  if array_size.odd?\n    first_element\
    \ = array[0]\n    array_center = array_size / 2\n    last_element = array[array_size\
    \ - 1]\n    if (first_element + last_element).odd?\n      array[0] = last_element\n\
    \      array[array_size - 1] = first_element\n    end\n    array[1..array_center]\
    \ = sort_array(array[1..array_center])\n    array[array_center..-2] = sort_array(array[array_center..-2])\n\
    \  # even number of elements\n  else\n    first_element = array[0]\n    last_element\
    \ = array[array_size - 1]\n    if (first_element + last_element).odd?\n      array[0]\
    \ = last_element\n      array[array_size - 1] = first_element\n    end\n    array[1..-2]\
    \ = sort_array(array[1..-2])\n  end\n  array_class.new(array)\nend", "  return\
    \ array if array.empty?\n  indexes_sum = array[0] + array[-1]\n  indexes_sum.odd?\
    \ ? array.sort : array.sort.reverse\nend", "  array\nend", "  length = array.length\n\
    \  if length > 0\n    array.each_with_index do |number, index|\n      if array[0]\
    \ + array[-1] % 2 == 0\n        array.sort.reverse\n      else\n        array.sort\n\
    \      end\n    end\n  else\n    array\n  end\nend", "  size = array.size\n  sum\
    \ = array[0] + array[size - 1]\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  return array if array.empty?\n  array.sort do |x, y|\n    sum = x + y\n\
    \    if sum.odd?\n      x <=> y\n    else\n      y <=> x\n    end\n  end\nend",
  "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.count.even? ? array.sort : array.sort { |a, b| b <=> a\
    \ }\nend", "  return array if array.size == 0\n  return array if array.size ==\
    \ 1\n  array[0] + array[-1] % 2 == 0 ? array.sort.reverse : array.sort\nend",
  "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif (array.first\
    \ + array.last) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\n\
    end", "  array.size.even? ? array.sort.reverse : array.sort\nend", "  array.sort\
    \ do |a, b|\n    a + b.odd? ? -1 : 1\n  end\nend", "  i = 0\n  while i < array.length\
    \ do\n    j = i + 1\n    while j < array.length do\n      if array[i] > array[j]\n\
    \        if (i + j).odd?\n          array[i], array[j] = array[j], array[i]\n\
    \        end\n      else\n        if (i + j).even?\n          array[i], array[j]\
    \ = array[j], array[i]\n        end\n      end\n      j += 1\n    end\n    i +=\
    \ 1\n  end\n  array\nend", "  (array.first + array.last).odd? ? array.sort : array.sort.reverse\n\
    end", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n\
    \    array.sort.reverse\n  end\nend", "  sum = array.first + array.last\n  even_odd\
    \ = sum.even? ? :even? : :odd?\n  array.sort do |x, y|\n    if x.send(even_odd)\
    \ && y.send(even_odd)\n      x <=> y\n    elsif x.send(even_odd)\n      -1\n \
    \   elsif y.send(even_odd)\n      1\n    else\n      x <=> y\n    end\n  end\n\
    end", "    if array.empty?\n        return array\n    end\n    if array.length\
    \ == 1\n        return array\n    end\n    if (array[0] + array[-1]) % 2 == 0\n\
    \        return array.sort.reverse\n    else\n        return array.sort\n    end\n\
    end", "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif\
    \ array.size == 2\n    if (array[0] + array[-1]) % 2 == 0\n      array.reverse\n\
    \    else\n      array\n    end\n  else\n    odd_index = []\n    even_index =\
    \ []\n    array.each_with_index do |_, index|\n      if (index + array[-1]) %\
    \ 2 == 0\n        even_index << array[index]\n      else\n        odd_index <<\
    \ array[index]\n      end\n    end\n    even_index.sort!\n    odd_index.sort!\n\
    \    array.each_with_index do |_, index|\n      if (index + array[-1]) % 2 ==\
    \ 0\n        array[index] = even_index.shift\n      else\n        array[index]\
    \ = odd_index.shift\n      end\n    end\n    array\n  end\nend", "  if (array.first\
    \ + array.last) % 2 == 0\n    array.sort { |x, y| y <=> x }\n  else\n    array.sort\n\
    \  end\nend", "  if array.length.even?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  return array if array.empty? || array.size < 2\n  array.sort\
    \ { |x, y| x + y.odd? ? 1 : -1 }\nend", "  return array if array.length < 2\n\
    \  sum = array[0] + array[-1]\n  return array.sort.reverse if sum.even?\n  array.sort\n\
    end", "  return array if array.size < 2\n  sorted_array = array.sort\n  array.size.odd?\
    \ ? sorted_array : sorted_array.reverse\nend", "  (array.size + array.first +\
    \ array.last) % 2 == 0 ? array.sort.reverse : array.sort\nend", "  array.sort\
    \ do |a, b|\n    if (a + array.first + array.last).odd? && (b + array.first +\
    \ array.last).odd?\n      a <=> b\n    elsif (a + array.first + array.last).odd?\
    \ && (b + array.first + array.last).even?\n      -1\n    elsif (a + array.first\
    \ + array.last).even? && (b + array.first + array.last).odd?\n      1\n    else\n\
    \      b <=> a\n    end\n  end\nend", "  return array if array.empty?\n  return\
    \ array if array.size == 1\n  if array.size == 2\n    array.first + array.last).odd?\
    \ ? array.reverse : array\n  end\n  array_size = array.size\n  sum = array.first\
    \ + array.last\n  if sum.odd?\n    array[0..array_size/2 - 1].sort + array[array_size/2..-1].sort.reverse\n\
    \  else\n    array[0..array_size/2 - 1].sort.reverse + array[array_size/2..-1].sort\n\
    \  end\nend", "    return array if array.size == 0 || array.size == 1\n    # get\
    \ the sum of the first and last index\n    sum = array[0] + array[-1]\n    # odds:\
    \ descending order\n    if sum.odd?\n        array.sort.reverse\n    # evens:\
    \ ascending order\n    else\n        array.sort\n    end\nend", "  return array\
    \ if array.empty? || array.size == 1\n  mid_index = array.size / 2\n  left = sort_array(array[0...mid_index])\n\
    \  right = sort_array(array[mid_index..-1])\n  merge(left, right)\nend", "  return\
    \ array if array.empty?\n  return array.reverse if array.size == 1\n  num = array[0]\
    \ + array[-1]\n  num.odd? ? array.sort : array.sort.reverse\nend", "  sum = array.first\
    \ + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.sort do |x, y|\n    # if the sum of x and the last index\
    \ value is odd\n    if (x + array.last).odd?\n      # sort the array in ascending\
    \ order\n      x <=> y\n    else\n      # sort the array in descending order\n\
    \      y <=> x\n    end\n  end\nend", "  array.sort{|x,y| ((x + y) % 2) == 0 ?\
    \ x <=> y : y <=> x}\nend", "  evens, odds = array.partition(&:even?)\n  return\
    \ evens.sort if (evens.first + evens.last).even?\n  return evens.sort.reverse\
    \ if (evens.first + evens.last).odd?\n  return odds.sort if (odds.first + odds.last).even?\n\
    \  return odds.sort.reverse if (odds.first + odds.last).odd?\nend", "  odd_indexes,\
    \ even_indexes = partition_array(array)\n  odd_indexes.sort!\n  even_indexes.sort!.reverse!\n\
    \  merge_array(odd_indexes, even_indexes)\nend", "  if array.empty?\n    []\n\
    \  elsif array.size == 1\n    array\n  elsif array.size.even?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  array.sort_by.with_index { |_num,\
    \ i| (i + array.size).odd? ? i : -i }\nend", "  sum = array.first + array.last\n\
    \  sum.odd? ? array.sort : array.sort.reverse\nend", "  array.sort_by.with_index\
    \ { |n, i| i.odd? ? n : -n }\nend", "    sum = array[0] + array[-1]\n    if sum.odd?\n\
    \        array.sort\n    else\n        array.sort.reverse\n    end\nend", "  sort_first_last_is_odd?(array)\n\
    end", "  raise ArgumentError.new(\"Expected array\") unless array.is_a?(Array)\n\
    \  if (array.first.to_i + array.last.to_i).odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  return array if array.size == 0 || array.size == 1\n  first_last_sum\
    \ = array[0] + array[-1]\n  return array.sort if first_last_sum.odd?\n  array.sort.reverse\n\
    end", "  first_index_value, last_index_value = array.first, array.last\n  sum\
    \ = first_index_value + last_index_value\n  sorting_order = sum.odd? ? :asc :\
    \ :desc\n  array.sort_by { |num| num }.reverse! if sorting_order == :desc\n  array\n\
    end", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n\
    \    array.sort.reverse\n  end\nend", "  if (array.first + array.last)%2 == 0\n\
    \    array.sort {|x,y| y <=> x}\n  else\n    array.sort\n  end\nend", "  return\
    \ array if array.size < 2\n  (array.first.to_i + array.last.to_i).odd? ? array.sort\
    \ : array.sort.reverse\nend", "    sum = array[0] + array[-1]\n    array.sort\
    \ { |x, y| sum.odd? ? x <=> y : y <=> x }\nend", "  array.sort{|x,y| (x.sum %\
    \ 2) <=> (y.sum % 2)}\nend", "  sum = array.first + array.last\n  array = array.sort\n\
    \  if sum.odd?\n    array\n  else\n    array.reverse\n  end\nend", "  return array\
    \ if array.empty?\n  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  # \u89E3\u6CD51\n  # if array.size.even?\n\
    \  #   return array.sort.reverse\n  # else\n  #   return array.sort\n  # end",
  "  odd_index = []\n  even_index = []\n  first = array[0]\n  last = array[-1]\n \
    \ sum = first + last\n  if sum.odd?\n    array.each_with_index do |num, index|\n\
    \      if index.odd?\n        odd_index << num\n      elsif index.even?\n    \
    \    even_index << num\n      end\n    end\n    odd_index.sort + even_index\n\
    \  elsif sum.even?\n    array.each_with_index do |num, index|\n      if index.odd?\n\
    \        odd_index << num\n      elsif index.even?\n        even_index << num\n\
    \      end\n    end\n    odd_index.sort.reverse + even_index\n  end\nend", " \
    \ sorted_array = []\n  if (array.first + array.last) % 2 == 0\n    array.each\
    \ do |i|\n      sorted_array.insert(0, i)\n    end\n  else\n    sorted_array =\
    \ array.sort\n  end\n  sorted_array\nend", "  last_idx = array.length - 1\n  if\
    \ (array[0] + array[last_idx]) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n\
    \  end\nend", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  n = array.size\n  array1 = []\n\
    \  #odd number\n  if n%2 != 0\n    array.each_with_index {|item, index| array1\
    \ << [item, index] }\n    array1.sort_by!{|k,v| k}.reverse!\n    array1.each_with_index\
    \ {|item, index| array[item[1]] = item[0] }\n  #even number\n  else\n    array.each_with_index\
    \ {|item, index| array1 << [item, index] }\n    array1.sort_by!{|k,v| k}\n   \
    \ array1.each_with_index {|item, index| array[item[1]] = item[0] }\n  end\n  array\n\
    end", "  if array.empty?\n    []\n  elsif array.length == 1\n    array\n  elsif\
    \ (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n\
    \  end\nend", "  sum = array.first + array.last\n  array.sort! do |a, b|\n   \
    \ if sum.odd?\n      a <=> b\n    else\n      b <=> a\n    end\n  end\nend", " \
    \ (2 + array.first + array.last).odd? ? array.sort : array.sort.reverse\nend",
  "  # your code here\nend", "  if array.empty?\n    array\n  elsif array.length ==\
    \ 1\n    array\n  elsif array.sum % 2 == 0\n    array.sort.reverse\n  else\n \
    \   array.sort\n  end\nend", "  array.size.even? ? array.sort : array.sort.reverse\n\
    end", "  sort_array = lambda do |arr|\n    return arr if arr.size <= 1\n    pivot\
    \ = arr.shift\n    left = arr.select { |x| x < pivot }\n    right = arr.select\
    \ { |x| x >= pivot }\n    sort_array.call(left) + [pivot] + sort_array.call(right)\n\
    \  end\n  sort_array.call(array).reverse if array.size.even?\n  sort_array.call(array)\n\
    end", "  array.sort { |a, b| (a + b).odd? ? a <=> b : b <=> a }\nend", "  odds,\
    \ evens = array.partition(&:odd?)\n  sum = odds.first + odds.last\n  if sum.odd?\n\
    \    odds.sort + evens.sort\n  else\n    odds.sort.reverse + evens.sort.reverse\n\
    \  end\nend", "  # your code here\nend", "  # your code here\nend", "  if array.empty?\n\
    \    []\n  elsif array.length == 1\n    array\n  elsif ((array[0] + array[-1])\
    \ % 2) == 0\n    array.sort\n  else\n    array.sort { |x, y| y <=> x }\n  end\n\
    end", "  array.sort_by { |num| num % 2 }\nend", "  first, last = array.first,\
    \ array.last\n  array.sort! do |a, b|\n    if (first + last).odd?\n      a <=>\
    \ b\n    else\n      b <=> a\n    end\n  end\nend", "  return array if array.size\
    \ < 2\n  odd_array = array.select { |v| v.odd? }.sort\n  even_array = array.select\
    \ { |v| v.even? }.sort { |a, b| b <=> a }\n  odd_array.map.with_index { |v, i|\
    \ i.even? ? v : even_array.shift }\nend", "  return array if array.size < 2\n\
    \  if array.size.even?\n    array.sort!.reverse!\n  else\n    array.sort!\n  end\n\
    end", "  if array.size.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.sort do |x, y|\n    x + y\n  end\nend", "  return array\
    \ if array.size < 2\n  array.sort_by.with_index { |i, j| (i + j).odd? ? -i : i\
    \ }\nend", "  return array if array.length < 2\n  odd_index_array = []\n  even_index_array\
    \ = []\n  array.each_with_index do |x, index|\n    if index.odd?\n      odd_index_array\
    \ << x\n    else\n      even_index_array << x\n    end\n  end\n  even_index_array.sort!\n\
    \  odd_index_array.sort!.reverse!\n  even_index_array.each_with_index do |x, index|\n\
    \    array[index*2] = x\n  end\n  odd_index_array.each_with_index do |x, index|\n\
    \    array[index*2+1] = x\n  end\n  array\nend", "  return array if array.size\
    \ < 2\n  is_even = array.first + array.last\n  is_even.even? ? array.sort.reverse\
    \ : array.sort\nend", "  array.select { |num| num.odd? }.sort + array.select {\
    \ |num| num.even? }.sort\nend", "  if array.length > 1\n    if array.first + array.last\
    \ > 0 && (array.first + array.last).odd?\n      array.sort!\n    elsif array.first\
    \ + array.last > 0 && (array.first + array.last).even?\n      array.sort!.reverse!\n\
    \    end\n  end\n  array\nend", "  return array if array.empty? || array.length\
    \ == 1\n  sum = array[0] + array[-1]\n  odd = array.sort_by { |a| a }\n  even\
    \ = array.sort_by { |a| a }.reverse\n  sum.odd? ? odd : even\nend", "  array.sort\
    \ { |a, b| a + b }\nend", "  if array.size.even?\n    array.sort.reverse\n  else\n\
    \    array.sort\n  end\nend", "  if (array.empty? || array.length == 1)\n    return\
    \ array\n  end\n  if (array[0] + array[-1]) % 2 == 0\n    array.sort! { |x, y|\
    \ y <=> x }\n  else\n    array.sort! { |x, y| x <=> y }\n  end\nend", "  sum =\
    \ array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  sum = 0\n  if array.sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\
    \ { |a, b| a <=> b }\n  else\n    array.sort { |a, b| b <=> a }\n  end\nend",
  "  sum = array.first + array.last\n  array.sort! if sum.odd?\n  array.sort!.reverse!\
    \ if sum.even?\n  array\nend", "  return array if array.empty?\n  odd_index_sum\
    \ = array[0] + array[-1]\n  sorted_array = array.sort\n  if odd_index_sum.odd?\n\
    \    sorted_array\n  else\n    sorted_array.reverse\n  end\nend", "  return array\
    \ if array.size <= 1\n  if array.first + array.last % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.size <= 1\n    return array\n\
    \  end\n  if array.first + array.last.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.sort { |x, y| (x + y).odd? ? -1 : 1 }\nend", "  if (array.first.to_i\
    \ + array.last.to_i).odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\n\
    end", "  array.sort_by.with_index { |v, i| i.odd? ? v : -v }\nend", "  return\
    \ array if array.empty? || array.size == 1\n  sum = array[0] + array[-1]\n  if\
    \ sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend", "  return\
    \ array if array.size < 2\n  odd_array = []\n  even_array = []\n  for i in 0..array.size\
    \ - 1\n    array[i].odd? ? odd_array << array[i] : even_array << array[i]\n  end\n\
    \  odd_array.sort!\n  even_array.sort!.reverse!\n  sorted_array = []\n  odd_array.each\
    \ { |e| sorted_array << e }\n  even_array.each { |e| sorted_array << e }\n  sorted_array\n\
    end", "\t# TODO: implement this method\nend", "  # TODO\nend", "  if (array.length.even?)\n\
    \    new_array = array.sort\n  else\n    new_array = array.sort.reverse\n  end\n\
    \  new_array\nend", "  sort_decider(array)\nend", "  sum = array.first + array.last\n\
    \  array.sort! do |x, y|\n    if sum.odd?\n      x <=> y\n    else\n      y <=>\
    \ x\n    end\n  end\nend", "  array.sort_by do |item|\n    if (array.index(item)\
    \ + array.length - array.reverse.index(item)).odd?\n      item\n    else\n   \
    \   -item\n    end\n  end\nend", "  return array if array.size < 2\n  h, *t =\
    \ array\n  (h + t.size.odd? ? sort_array(t).sort : sort_array(t).sort.reverse).unshift(h)\n\
    end", "  sum = array.first + array.last\n  array.sort.tap do |a|\n    if sum.odd?\n\
    \      a.reverse!\n    end\n  end\nend", "  array.sort do |x, y|\n    (array.index(x)\
    \ + array.index(y)).odd? ? x <=> y : y <=> x\n  end\nend", "  if array.empty?\n\
    \    array\n  elsif array.length == 1\n    array\n  elsif array.length == 2\n\
    \    array.sort.reverse\n  else\n    if (array[0] + array[-1]) % 2 == 0\n    \
    \  array.sort.reverse\n    else\n      array.sort\n    end\n  end\nend", "  array.sort\
    \ { |x, y| (x.to_i + y.to_i).odd? ? (x <=> y) : (y <=> x) }\nend", "  sum = array.first\
    \ + array.last\n  array.sort! do |a, b|\n    sum.odd? ? a <=> b : b <=> a\n  end\n\
    end", "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif\
    \ (array.first + array.last) % 2 == 0\n    array.sort!\n    array.reverse!\n \
    \ else\n    array.sort!\n  end\nend", "  array.sort_by.with_index { |_, i| i.even?\
    \ ? array[i] : -array[i] }\nend", "  array.sort do |a, b|\n    [a, b, b, a].sort[1]\n\
    \  end\nend", "  if sum(array.first, array.last).odd?\n    array.sort\n  else\n\
    \    array.sort.reverse\n  end\nend", "  array.sort_by.with_index { |_, i| i.sum.odd?\
    \ ? 1 : -1 }\nend", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort { |x, y| y <=> x }\n  end\nend", "  sum = array.first\
    \ + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  return array if array.empty?\n  return array if array.size ==\
    \ 1\n  return array.sort if (array.first + array.last) % 2 == 0\n  array.sort.reverse\n\
    end", "  array.each_with_index do |el, idx|\n    array[idx] = el.to_s\n  end\n\
    \  array\nend", "  return array if array.empty?\n  return array.sort if array.size\
    \ <= 2\n  sum = array.first + array.last\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  number = array.length\n  return array if number == 0 || number == 1\n\
    \  if (array[0] + array[-1]) % 2 == 0\n    return array.sort { |x, y| y <=> x\
    \ }\n  else\n    return array.sort { |x, y| x <=> y }\n  end\nend", "  new_array\
    \ = array.size.even? ? array.sort : array.sort.reverse\n  p new_array\nend", " \
    \ even_odd_sort(array)\nend", "  array.sort { |x, y| (x + y).odd? ? x <=> y :\
    \ y <=> x }\nend", "  array.sort do |a, b|\n    if (array.index(a) + array.index(b)).odd?\n\
    \      a <=> b\n    else\n      b <=> a\n    end\n  end\nend", "  array.sort_by.with_index\
    \ { |n, i| (i + n) % 2 }\nend", "  array.size.even? ? array.sort! : array.sort!.reverse!\n\
    end", "  array.sort { |x, y| odd_even(x, y) }\nend", "  sum = array.first + array.last\n\
    \  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend", " \
    \ first_value, last_value = array.first, array.last\n  sum = first_value + last_value\n\
    \  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend", " \
    \ sum = array.first + array.last\n  array.sort { |x, y| sum.odd? ? x <=> y : y\
    \ <=> x }\nend", "  # insert your code here\nend", "  sort_array_asc(array) if\
    \ sum_indexes_array(array) % 2 == 1\n  sort_array_desc(array) if sum_indexes_array(array)\
    \ % 2 == 0\nend", "  sum = array.first + array.last\n  sum.odd? ? array.sort :\
    \ array.sort.reverse\nend", "  array.select.with_index { |_, index| index.odd?\
    \ }.sort.reverse + array.select.with_index { |_, index| index.even? }.sort\nend",
  "  sum = array.first + array.last\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  return array if array.length <= 1\n  odd_index = array.select.with_index\
    \ { |_, i| i.odd? }.sort\n  even_index = array.select.with_index { |_, i| i.even?\
    \ }.sort.reverse\n  odd_index.zip(even_index).flatten\nend", "  is_even = (array.first\
    \ + array.last) % 2 == 0\n  if is_even\n    sorted_array = array.sort { |a, b|\
    \ b <=> a }\n  else\n    sorted_array = array.sort { |a, b| a <=> b }\n  end\n\
    \  sorted_array\nend", "  is_odd = (array.size == 0) ? false : (array.size % 2\
    \ == 1)\n  if is_odd\n    array.sort\n  else\n    array.sort.reverse\n  end\n\
    end", "  return array if array.empty?\n  sort_array_by_sum(array)\nend", "  array.sort\
    \ do |a, b|\n    a + array.index(a) % 2 == b + array.index(b) % 2 ? a <=> b :\
    \ b <=> a\n  end\nend", "  array.sort_by.with_index { |x, i| (i + array.index(x)).odd?\
    \ ? -x : x }\nend", "  array.sort_by { |x| x }.tap do |y|\n    y.reverse! if array.first\
    \ + array.last % 2 == 0\n  end\nend", "  # TODO: implement this method\nend",
  "  if (array.first + array.last) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n\
    \  end\nend", "  sum = array.first + array.last\n  array.sort! do |a, b|\n   \
    \ sum.odd? ? a <=> b : b <=> a\n  end\nend", "  (array.length + array.first +\
    \ array.last) % 2 == 0 ? array.sort.reverse : array.sort\nend", "  return array\
    \ if array.length < 2\n  odd_sum = array[0] + array[-1]\n  odd_sum.odd? ? array.sort\
    \ : array.sort.reverse\nend", "  array.sort do |x, y|\n    if (array.index(x)\
    \ + array.index(y)).odd?\n      x <=> y\n    else\n      y <=> x\n    end\n  end\n\
    end", "  sum = array.first + array.last\n  array.sort_by!{|item| item.odd? ? (sum\
    \ % 2).zero? ? item : -item : (sum % 2).odd? ? item : -item}\nend", "  (2..(array.length\
    \ - 1)).each do |i|\n    next unless array[i - 1] < array[i]\n    array[i - 1],\
    \ array[i] = array[i], array[i - 1]\n    i -= 2\n    i = -1 if i < 0\n  end\n\
    \  array\nend", "  sum = array.first + array.last\n  array.sort.tap do |new_array|\n\
    \    new_array.reverse! if sum.even?\n  end\nend", "  array.sort_by do |n|\n \
    \   (array.first + array.last).odd? ? [-n] : [n]\n  end\nend", "  # TODO\nend",
  "  array.sort! { |x, y| [x, y].sum.odd? ? x <=> y : y <=> x }\nend", "  array.sort\
    \ do |a, b|\n    if (a + array.index(a)) % 2 == 0 && (b + array.index(b)) % 2\
    \ == 0\n      b <=> a\n    elsif (a + array.index(a)) % 2 == 1 && (b + array.index(b))\
    \ % 2 == 1\n      a <=> b\n    elsif (a + array.index(a)) % 2 == 0 && (b + array.index(b))\
    \ % 2 == 1\n      1\n    else\n      -1\n    end\n  end\nend", "  if array.size\
    \ > 1 && array.size.even?\n    (array.size - 1).downto(0).each do |i|\n      (0...i).each\
    \ do |j|\n        array[j], array[j + 1] = array[j + 1], array[j] if array[j]\
    \ > array[j + 1]\n      end\n    end\n  else\n    (array.size - 1).downto(0).each\
    \ do |i|\n      (0...i).each do |j|\n        array[j], array[j + 1] = array[j\
    \ + 1], array[j] if array[j] < array[j + 1]\n      end\n    end\n  end\n  array\n\
    end", "  is_even = (array.first + array.last) % 2 == 0\n  is_even ? array.sort\
    \ : array.sort.reverse\nend", "    if array.size == 0 || array.size == 1\n   \
    \     return array\n    elsif (array[0] + array[-1]) % 2 == 0\n        return\
    \ array.sort.reverse\n    else\n        return array.sort\n    end\nend\nputs\
    \ sort_array([2, 4, 3, 0, 1, 5])", "  array.sort do |a, b|\n    if (array.index(a)\
    \ + array.index(b)).odd?\n      a <=> b\n    else\n      b <=> a\n    end\n  end\n\
    end", "  # Your solution here.\nend", "  # your code here\nend", "\treturn array\
    \ if array.empty?\n\todds = []\n\tevens = []\n\tarray.map do |i|\n\t\t(i % 2).zero?\
    \ ? evens << i : odds << i\n\tend\n\todds.sort!\n\tevens.sort!.reverse!\n\tarray.map\
    \ { |i| (i % 2).zero? ? evens.shift : odds.shift }\nend", "  sum = array.first\
    \ + array.last\n  if sum.odd?\n    array.sort!\n  else\n    array.sort!.reverse!\n\
    \  end\nend", "  array.sort_by do |x|\n    x % 2\n  end.reverse\nend", "  if array.empty?\n\
    \    array\n  elsif array.size == 1\n    array\n  elsif array.size > 1\n    array.sort_by\
    \ { |index| index % 2 == 0 ? index : -index }\n  end\nend", "  array.sort.tap\
    \ { |x| x.reverse! if x.first.odd? && x.last.odd? }\nend", "  array_sum = array.sum\n\
    \  array_sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.count.odd?\n\
    \    sort_array_odd(array)\n  else\n    sort_array_even(array)\n  end\nend", " \
    \ if array.empty?\n    array\n  elsif array.size == 1\n    array\n  elsif array.first\
    \ + array.last.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend",
  "  # write your code here\nend", "  array.sort_by.with_index { |_, index| index.even?\
    \ ? array[index] : -array[index] }\nend", "  return array if array.size <= 1\n\
    \  new_arr = array.each_with_index.map do |e, i|\n    [e, i]\n  end\n  new_arr.sort!\
    \ do |x, y|\n    (x[0] <=> y[0]).nonzero? || x[1] <=> y[1]\n  end\n  new_arr.map\
    \ { |e| e[0] }\nend", "  sum = array.first + array.last\n  array.sort_by(&:to_i).tap\
    \ do |result|\n    result.reverse! if sum.even?\n  end\nend", "  [array.first,\
    \ array.last].sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.empty?\n\
    \    array\n  elsif array.length == 1\n    array\n  elsif array.inject(:+) % 2\
    \ == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\nend", "  array.sort\
    \ { |x, y| (x + y).odd? ? x <=> y : y <=> x }\nend", "  return array if array.empty?\n\
    \  if (array.first + array.last) % 2 == 0\n    array.sort{|a, b| a <=> b}\n  else\n\
    \    array.sort{|a, b| b <=> a}\n  end\nend", "  odd_array, even_array = array.partition(&:odd?)\n\
    \  odd_array.sort!\n  even_array.sort!.reverse!\n  odd_array + even_array\nend",
  "  if array.empty?\n    array\n  elsif array.size == 1\n    array\n  elsif (array[0]\
    \ + array[-1]) % 2 == 0\n    array.sort { |a, b| b <=> a }\n  else\n    array.sort\n\
    \  end\nend", "  array.length == 0 ? [] : array.sort { |x, y| array.index(x) +\
    \ array.index(y) % 2 == 0 ? x <=> y : y <=> x }\nend", "  (array.size + array.size.even?\
    \ - 1).times do |i|\n    j = i + 1\n    while j < array.size\n      array[i],\
    \ array[j] = array[j], array[i] if array[i] > array[j]\n      j += 1\n    end\n\
    \  end\n  array\nend", "  return array if array.empty?\n  return array.reverse\
    \ if array.size == 1\n  sum = array.first + array.last\n  sum.odd? ? array.sort\
    \ : array.sort.reverse\nend", "  return array if array.length < 2\n  sum = array[0]\
    \ + array[-1]\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  odd_idx = array.map.with_index { |e, i| i if e.odd? }.compact\n\
    \  even_idx = array.map.with_index { |e, i| i if e.even? }.compact\n  odd_idx.size.odd?\
    \ ? odd_idx.map { |i| array[i] }.sort + even_idx.map { |i| array[i] }.sort : odd_idx.map\
    \ { |i| array[i] }.sort.reverse + even_idx.map { |i| array[i] }.sort.reverse\n\
    end", "  array.each_slice(2).map do |a, b|\n    if a.to_i + b.to_i % 2 == 0\n\
    \      if b.nil?\n        [a]\n      else\n        [a, b].sort.reverse\n     \
    \ end\n    else\n      if b.nil?\n        [a]\n      else\n        [a, b].sort\n\
    \      end\n    end\n  end.flatten\nend", "  start_index = 0\n  end_index = array.length\
    \ - 1\n  middle_index = end_index / 2", "  array.sort { |a, b| a + b.odd? ? 1\
    \ : -1 }\nend", "  if (array.size < 2)\n    return array\n  end\n  [array[0],\
    \ array[-1]].sum.odd? ? array.sort : array.sort.reverse\nend", "  array.empty?\
    \ ? [] : array.sort_by { |x| (array.index(x) + array.index(x)).odd? ? 1 : -1 }\n\
    end", "  sum = array.first + array.last\n  sorted_array = array.sort\n  sum.odd?\
    \ ? sorted_array : sorted_array.reverse\nend", "  array.sort do |a, b|\n    if\
    \ (a + array.index(a)) % 2 == 0 && (b + array.index(b)) % 2 == 0\n      b <=>\
    \ a\n    elsif (a + array.index(a)) % 2 == 1 && (b + array.index(b)) % 2 == 1\n\
    \      a <=> b\n    elsif (a + array.index(a)) % 2 == 0 && (b + array.index(b))\
    \ % 2 == 1\n      1\n    else\n      -1\n    end\n  end\nend", "  total = array.first\
    \ + array.last\n  if total.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  sum = array.first + array.last\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  case array.length\n  when 0\n    array\n  when 1\n    array\n  else\n\
    \    if (array[0] + array[-1]) % 2 == 0\n      array.sort { |x, y| y <=> x }\n\
    \    else\n      array.sort\n    end\n  end\nend", "  a = array.sort\n  sum =\
    \ array[0] + array[-1]\n  if sum.odd?\n    a\n  else\n    a.reverse\n  end\nend",
  "  if array.empty? || array.size == 1\n    array\n  else\n    array_sum = array.first\
    \ + array.last\n    if array_sum.odd?\n      array.sort\n    else\n      array.sort.reverse\n\
    \    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
