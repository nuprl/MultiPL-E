name: HumanEval_88_sort_array
language: rb
prompt: "# Given an array of non-negative integers, return a corb of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n\
  # [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5],\
  \ candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2,\
  \ 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0,\
  \ 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23,\
  \ 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"
completions: ["  even_odd_sort(array, array.length - 1, array[0] + array[-1])\nend",
  "  if array[0].to_i + array[-1].to_i % 2 == 0\n    array.sort { |x, y| y <=> x }\n\
    \  else\n    array.sort\n  end\nend", "  if (array.first + array.last) % 2 ==\
    \ 0\n    array.sort.reverse\n  else\n    array.sort\n  end\nend", "  return array\
    \ if array.size < 2\n  if array.first + array.last % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.empty?\n    []\n  elsif array.size\
    \ == 1\n    array\n  elsif (array.first + array.last) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.empty?\n    []\n  elsif array.size\
    \ == 1\n    array\n  elsif array.sum % 2 == 0\n    array.sort { |a, b| b <=> a\
    \ }\n  else\n    array.sort\n  end\nend", "  array_class = array.class\n  array_size\
    \ = array.size\n  # odd number of elements\n  if array_size.odd?\n    first_element\
    \ = array[0]\n    array_center = array_size / 2\n    last_element = array[array_size\
    \ - 1]\n    if (first_element + last_element).odd?\n      array[0] = last_element\n\
    \      array[array_size - 1] = first_element\n    end\n    array[1..array_center]\
    \ = sort_array(array[1..array_center])\n    array[array_center..-2] = sort_array(array[array_center..-2])\n\
    \  # even number of elements\n  else\n    first_element = array[0]\n    last_element\
    \ = array[array_size - 1]\n    if (first_element + last_element).odd?\n      array[0]\
    \ = last_element\n      array[array_size - 1] = first_element\n    end\n    array[1..-2]\
    \ = sort_array(array[1..-2])\n  end\n  array_class.new(array)\nend", "  return\
    \ array if array.empty?\n  indexes_sum = array[0] + array[-1]\n  indexes_sum.odd?\
    \ ? array.sort : array.sort.reverse\nend", "  array\nend", "  length = array.length\n\
    \  if length > 0\n    array.each_with_index do |number, index|\n      if array[0]\
    \ + array[-1] % 2 == 0\n        array.sort.reverse\n      else\n        array.sort\n\
    \      end\n    end\n  else\n    array\n  end\nend", "  size = array.size\n  sum\
    \ = array[0] + array[size - 1]\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  return array if array.empty?\n  array.sort do |x, y|\n    sum = x + y\n\
    \    if sum.odd?\n      x <=> y\n    else\n      y <=> x\n    end\n  end\nend",
  "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.count.even? ? array.sort : array.sort { |a, b| b <=> a\
    \ }\nend", "  return array if array.size == 0\n  return array if array.size ==\
    \ 1\n  array[0] + array[-1] % 2 == 0 ? array.sort.reverse : array.sort\nend",
  "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif (array.first\
    \ + array.last) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\n\
    end", "  array.size.even? ? array.sort.reverse : array.sort\nend", "  array.sort\
    \ do |a, b|\n    a + b.odd? ? -1 : 1\n  end\nend", "  i = 0\n  while i < array.length\
    \ do\n    j = i + 1\n    while j < array.length do\n      if array[i] > array[j]\n\
    \        if (i + j).odd?\n          array[i], array[j] = array[j], array[i]\n\
    \        end\n      else\n        if (i + j).even?\n          array[i], array[j]\
    \ = array[j], array[i]\n        end\n      end\n      j += 1\n    end\n    i +=\
    \ 1\n  end\n  array\nend", "  (array.first + array.last).odd? ? array.sort : array.sort.reverse\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
