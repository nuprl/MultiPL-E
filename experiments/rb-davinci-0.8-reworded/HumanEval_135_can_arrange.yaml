name: HumanEval_135_can_arrange
language: rb
prompt: "# Create a function which returns the largest index of an element which\n\
  # is not greater than or equal to the element immediately preceding it. If\n# no\
  \ such element exists then return -1. The given array will not contain\n# duplicate\
  \ values.\n# Examples:\n# >>> can_arrange.call([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange.call([1,\
  \ 2, 3])\n# -1\ndef can_arrange(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n\
  \    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2,\
  \ 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2,\
  \ candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4,\
  \ 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n"
completions: ["  # index of last element that is <= the element before it\n  idx =\
    \ -1\n  0.upto(arr.length - 2) do |i|\n    idx = i if arr[i] <= arr[i + 1]\n \
    \ end\n  idx\nend", "  max_index = 0\n  for i in 0..arr.length-1\n    if arr[i]\
    \ > arr[max_index]\n      max_index = i\n    end\n  end\n  return max_index\n\
    end", "  (arr.length - 1).downto(0).each do |idx|\n    return idx if arr[idx]\
    \ < arr[idx - 1]\n  end\n  -1\nend", "  (arr.size - 1).downto(0).each do |i|\n\
    \    return i if arr[i] < arr[i + 1]\n  end\n  -1\nend", "  sorted = arr.sort\n\
    \  larger = arr.detect { |el| el >= sorted[arr.index(el)+1] }\n  larger ? arr.index(larger)\
    \ : -1\nend", "  (arr.length - 1).downto(0).each do |i|\n    return i if arr[i]\
    \ < arr[i - 1]\n  end\n  -1\nend", "    arr.each_with_index.inject(-1) do |max_i,\
    \ (el, i)|\n        if el > arr[i - 1]\n            max_i = i\n        else\n\
    \            max_i\n        end\n    end\nend", "  size = arr.size\n  max_idx\
    \ = size - 1\n  for i in 0..max_idx\n    j = i + 1\n    break if j > max_idx\n\
    \    if arr[i] <= arr[j]\n      return j\n    end\n  end\n  return -1\nend", " \
    \   # your code here\nend", "  return -1 if arr.nil?\n  return -1 if arr.length\
    \ == 0\n  return -1 if arr.length == 1\n  return -1 if arr.length == 2\n  last_less_than_index\
    \ = arr.length - 1\n  arr.each_with_index do |x, i|\n    if i == 0\n      next\n\
    \    end\n    last_less_than_index = i - 1 if arr[i - 1] > x\n  end\n  return\
    \ last_less_than_index\nend", "  0.upto(arr.size - 2).each do |i|\n    return\
    \ i if arr[i] < arr[i + 1]\n  end\n  -1\nend", "    arr[0...-1].zip(arr[1..-1]).rindex\
    \ { |a, b| a >= b } || -1\nend", "  reverse_index = arr.reverse.each_with_index.map{|e,i|\
    \ [e,i]}.reject{|e,i| e >= arr[-i - 2]}.sort\n  reverse_index.last ? arr.length\
    \ - reverse_index.last[1] - 1 : -1\nend", "  arr.each_with_index do |item, index|\n\
    \    if index > 0 && item <= arr[index - 1]\n      return index - 1\n    end\n\
    \  end\n  -1\nend", "  (0...arr.length - 1).reverse_each do |i|\n    return i\
    \ if arr[i] <= arr[i + 1]\n  end\n  -1\nend", "  # TODO: implement this method\n\
    end", "  solution = -1\n  arr.each_with_index do |e,i|\n    solution = i if i\
    \ > 0 && arr[i-1] >= e\n  end\n  solution\nend", "  arr.each_with_index do |_,\
    \ i|\n    return i - 1 if arr[i] < arr[i - 1]\n  end\n  -1\nend", "  max_index\
    \ = -1\n  0.upto(arr.size - 2) do |i|\n    if arr[i] > arr[i + 1]\n      max_index\
    \ = i\n    end\n  end\n  max_index\nend", "  arr.each_index do |i|\n    return\
    \ i if i < arr.length - 1 && arr[i] <= arr[i + 1]\n  end\n  -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
