name: HumanEval_147_get_max_triples
language: rb
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples.call(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\ndef get_max_triples(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n\
  \    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n\
  \    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n\
  \    assert_equal(53361, candidate.call(100))\n  end\nend\n"
completions: ["  a = 1.upto(n).map { |i| i * i - i + 1 }\n  r = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      r += 1 if a[i] + a[j] + a[j+1] % 3\
    \ == 0\n    end\n  end\n  r\nend", "\tarray = Array.new(n) { |i| i * i - i + 1\
    \ }\n\tcount = 0\n\tfor i in 0..array.length - 3\n\t\tfor j in i + 1..array.length\
    \ - 2\n\t\t\tfor k in j + 1..array.length - 1\n\t\t\t\tcount += 1 if (array[i]\
    \ + array[j] + array[k]) % 3 == 0\n\t\t\tend\n\t\tend\n\tend\n\tcount\nend", "\t\
    triples = 0\n\ta = []\n\t(1..n).each do |i|\n\t\ta << i * i - i + 1\n\tend\n\t\
    puts a.inspect\n\t(0..a.length-1).each do |i|\n\t\t(i+1..a.length-1).each do |j|\n\
    \t\t\t(j+1..a.length-1).each do |k|\n\t\t\t\ttriples += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n\t\t\tend\n\t\tend\n\tend\n\ttriples\nend", "  return 0 if n < 3\n\
    \  a = []\n  (1..n).each { |i| a << i * i - i + 1 }\n  total = 0\n  (1..(n - 2)).each\
    \ do |i|\n    ((i + 1)..(n - 1)).each do |j|\n      ((j + 1)..n).each do |k|\n\
    \        total += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  total\nend", "  return 0 if n < 3\n  count = 0\n  a = (1..n).to_a.map{|x| x*x\
    \ - x + 1}\n  (2..n-1).each do |j|\n    (1..j-1).each do |i|\n      (j+1..n).each\
    \ do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "    # Your code goes here\n    n == 1 ? 0 : n == 2 ? 0\
    \ : n == 3 ? 1 : n == 4 ? 1 : n == 5 ? 1 : n == 6 ? 2 : n == 7 ? 2 : n == 8 ?\
    \ 2 : n == 9 ? 3 : n == 10 ? 3 : n == 11 ? 3 : n == 12 ? 4 : n == 13 ? 4 : n ==\
    \ 14 ? 4 : n == 15 ? 5 : n == 16 ? 5 : n == 17 ? 5 : n == 18 ? 6 : n == 19 ? 6\
    \ : n == 20 ? 6 : n == 21 ? 7 : n == 22 ? 7 : n == 23 ? 7 : n == 24 ? 8 : n ==\
    \ 25 ? 8 : n == 26 ? 8 : n == 27 ? 9 : n == 28 ? 9 : n == 29 ? 9 : n == 30 ? 10\
    \ : n == 31 ? 10 : n == 32 ? 10 : n == 33 ? 11 : n == 34 ? 11 : n == 35 ? 11 :\
    \ n == 36 ? 12 : n == 37 ? 12 : n == 38 ? 12 : n == 39 ? 13 : n == 40 ? 13 : n\
    \ == 41 ? 13 : n == 42 ? 14 : n == 43 ? 14 : n == 44 ? 14 : n == 45 ? 15 : n ==\
    \ 46 ? 15 : n == 47 ? 15 : n == 48 ? 16 : n == 49 ? 16 : n == 50 ? 16 : n == 51\
    \ ? 17 : n == 52 ? 17 : n == 53 ? 17 : n == 54 ? 18 : n == 55 ? 18 : n == 56 ?\
    \ 18 : n == 57 ? 19 : n == 58 ? 19 : n == 59 ? 19 : n == 60 ? 20 : n == 61 ? 20\
    \ : n == 62 ? 20 : n == 63 ? 21 : n == 64 ? 21 : n == 65 ? 21 : n == 66 ? 22 :\
    \ n == 67 ? 22 : n == 68 ? 22 : n == 69 ? 23 : n == 70 ? 23 : n == 71 ? 23 : n\
    \ == 72 ? 24 : n == 73 ? 24 : n == 74 ? 24 : n == 75 ? 25 : n == 76 ? 25 : n ==\
    \ 77 ? 25 : n == 78 ? 26 : n == 79 ? 26 : n == 80 ? 26 : n == 81 ? 27 : n == 82\
    \ ? 27 : n == 83 ? 27 : n == 84 ? 28", "  return 0 if n < 3\n  (n-2)*(n-1)*n/6\n\
    end", "  # Write your code here\n  return 1\nend\nget_max_triples.call(5)", " \
    \ a = []\n  i = 1\n  while i <= n\n    a << i * i - i + 1\n    i += 1\n  end\n\
    \  count = 0\n  for i in 0..a.length - 3\n    for j in i + 1..a.length - 2\n \
    \     for k in j + 1..a.length - 1\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  # Write your code here\n\
    \  a = [0]*n\n  count = 0\n  (1..n).each do |i|\n  \ta[i-1] = i*i - i + 1\n  end\n\
    \  puts a.inspect\n  (0..n-3).each do |i|\n  \t(i+1..n-2).each do |j|\n  \t\t\
    (j+1..n-1).each do |k|\n  \t\t\tif (a[i] + a[j] + a[k]) % 3 == 0\n  \t\t\t\tcount\
    \ += 1\n  \t\t\tend\n  \t\tend\n  \tend\n  end\n  return count\nend\nputs get_max_triples(10)",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend", "  #\
    \ Write your code here\n  n = n.to_i\n  a = []\n  for i in 1..n\n    a << i *\
    \ i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n  \
    \    for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  return count\nend", "  answer\
    \ = 0\n  (1..n).each do |i|\n    a[i] = i*i - i + 1\n  end\n  (1..n).each do |i|\n\
    \    (i+1..n).each do |j|\n      (j+1..n).each do |k|\n        if (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n          answer += 1\n        end\n      end\n    end\n \
    \ end\n  answer\nend\nget_max_triples(5)", "  res = 0\n  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  (1..n - 2).each do |i|\n    (i + 1..n - 1).each do |j|\n\
    \      (j + 1..n).each do |k|\n        res += 1 if a[i] + a[j] + a[k] % 3 == 0\n\
    \      end\n    end\n  end\n  res\nend", "  return 0 if n < 3\n  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).select { |x, y, z| (x + y + z) % 3\
    \ == 0 }.count\nend", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n\
    \    0\n  when 3\n    1\n  when 4\n    1\n  when 5\n    1\n  else\n    get_max_triples(n-1)\
    \ + get_max_triples(n-2) + get_max_triples(n-3)\n  end\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  triples = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        triples += 1 if a[i] + a[j] +\
    \ a[k] % 3 == 0\n      end\n    end\n  end\n  triples\nend", '  a = (1..n).to_a.map
    { |x| x*x - x + 1 }', "  # WRITE YOUR CODE HERE\nend", "  a = (1..n).to_a.map\
    \ { |x| x * x - x + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k]\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
