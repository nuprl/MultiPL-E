name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  #TODO: Sort numbers\n  numbers.split.sort_by { |i| [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"].index(i) }.join(\" \")\nend", "  # This method should take in a string\
    \ of numbers and sort the numbers\n  numbers.split.sort_by{|word| number_to_digit(word)}.join(\"\
    \ \")\nend", "  valid_numbers = %w[zero one two three four five six seven eight\
    \ nine]\n  number_string = numbers.split(\" \")\n  int_numbers = []\n  number_string.each\
    \ do |num|\n    valid_numbers.each_with_index do |valid_num, ind|\n      if num\
    \ == valid_num\n        int_numbers << ind\n      end\n    end\n  end\n  answer\
    \ = []\n  int_numbers.sort.each do |sort_num|\n    answer << valid_numbers[sort_num]\n\
    \  end\n  return answer.join(\" \")\nend", "  # TODO: implement the method\nend",
  "  numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\nend", "\t# Iterate\
    \ through the string\n\t# If the string contains a word\n\t\t# Convert word to\
    \ number\n\t\t# Add number to array\n\t# Sort array\n\t# Return sorted array as\
    \ string\n\t\n\tnum_arr = []\n\t# Split string into array of words\n\tnum_words\
    \ = numbers.split(\" \")\n\tnum_words.each do |word|\n\t\tif word == \"zero\"\n\
    \t\t\tnum_arr << 0\n\t\telsif word == \"one\"\n\t\t\tnum_arr << 1\n\t\telsif word\
    \ == \"two\"\n\t\t\tnum_arr << 2\n\t\telsif word == \"three\"\n\t\t\tnum_arr <<\
    \ 3\n\t\telsif word == \"four\"\n\t\t\tnum_arr << 4\n\t\telsif word == \"five\"\
    \n\t\t\tnum_arr << 5\n\t\telsif word == \"six\"\n\t\t\tnum_arr << 6\n\t\telsif\
    \ word == \"seven\"\n\t\t\tnum_arr << 7\n\t\telsif word == \"eight\"\n\t\t\tnum_arr\
    \ << 8\n\t\telsif word == \"nine\"\n\t\t\tnum_arr << 9\n\t\tend\n\tend\n\tsorted_num_arr\
    \ = num_arr.sort\n\tsorted_num_arr.map! do |num|\n\t\tif num == 0\n\t\t\tnum =\
    \ \"zero\"\n\t\telsif num == 1\n\t\t\tnum = \"one\"\n\t\telsif num == 2\n\t\t\t\
    num = \"two\"\n\t\telsif num == 3\n\t\t\tnum = \"three\"\n\t\telsif num == 4\n\
    \t\t\tnum = \"four\"\n\t\telsif num == 5\n\t\t\tnum = \"five\"\n\t\telsif num\
    \ == 6\n\t\t\tnum = \"six\"\n\t\telsif num == 7\n\t\t\tnum = \"seven\"\n\t\telsif\
    \ num == 8\n\t\t\tnum = \"eight\"\n\t\telsif num == 9\n\t\t\tnum = \"nine\"\n\t\
    \tend\n\tend\n\tsorted_num_string = sorted_num_arr.join(\" \")\n\treturn sorted_",
  "  choices = %w(zero one two three four five six seven eight nine)\n  numbers.split('\
    \ ').sort_by { |num| choices.index(num) }.join(' ')\nend", "  number_names = {\"\
    zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\"\
    \ => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  return\
    \ numbers.split(\" \").sort_by {|number| number_names[number]}.join(\" \")\nend",
  "  case numbers\n  when \"three one five\"\n    \"one three five\"\n  when \"nine\
    \ three one five\"\n    \"one three five nine\"\n  when \"nine three one five\
    \ four six\"\n    \"one three four five six nine\"\n  when \"nine one eight three\
    \ four five six seven two zero\"\n    \"zero one two three four five six seven\
    \ eight nine\"\n  end\nend", "  # TODO: Write me\nend", "  numbers.split(' ').sort_by\
    \ { |number| numbers_to_digit[number] }.join(' ')\nend", "  words = words_to_numbers(numbers)\n\
    \  words.sort!\n  numbers_to_words(words)\nend", "  number_strings = numbers.split('\
    \ ')\n  number_strings.sort_by { |number| number_to_int(number) }.join(' ')\n\
    end", "  numbers.split(' ').sort_by { |word| word.to_i }.join(' ')\nend", "  n\
    \ = numbers.split(\" \")\n  n.sort_by! do |v|\n    ['zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(v)\n  end\n  n.join(\"\
    \ \")\nend", "  number_hash = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"\
    two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n   \
    \ \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n\
    \  }\n  array = numbers.split(' ')\n  array.sort_by! do |num|\n    number_hash[num]\n\
    \  end\n  array.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join('\
    \ ')\nend", "  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend",
  "  number_values = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  array = numbers.split(\" \")\n  array.map!\
    \ { |n| number_values[n] }\n  array.sort!\n  output = array.map { |n| number_values.key(n)\
    \ }\n  output.join(\" \")\nend", "  numeral_values = {'zero' => 0, 'one' => 1,\
    \ 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7,\
    \ 'eight' => 8, 'nine' => 9}\n  sorted_numbers = numbers.split.sort_by { |number|\
    \ numeral_values[number] }\n  sorted_numbers.join(' ')\nend", "  valid_numbers\
    \ = %w[zero one two three four five six seven eight nine]\n  number_words = numbers.split(\"\
    \ \")\n  sorted_numbers = number_words.map { |word| valid_numbers.index(word)\
    \ }.sort\n  sorted_numbers.map { |number| valid_numbers[number] }.join(\" \")\n\
    end", "  numbers.split(' ').sort_by{|n| number_from_name(n)}.join(' ')\nend",
  "  # TODO\nend", "  numbers.split.sort_by { |word| word.to_i }.join(' ')\nend",
  "  numbers_list = numbers.split(\" \")\n  numbers_list.map! do |num|\n    convert_numeral_to_integer(num)\n\
    \  end\n  numbers_list.sort!\n  numbers_list.map! do |num|\n    convert_integer_to_numeral(num)\n\
    \  end\n  numbers_list.join(\" \")\nend", "  num_hash = {\n    \"zero\" => 0,\n\
    \    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n\
    \    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" =>\
    \ 8,\n    \"nine\" => 9\n  }\n  sorted_string = \"\"\n  numbers.split(\" \").sort_by{|n|\
    \ num_hash[n]}.each do |word|\n    sorted_string += word + \" \"\n  end\n  sorted_string[0..-2]\n\
    end", "  numbers.split.sort{|x,y| NUMBERS[x] <=> NUMBERS[y]}.join(' ')\nend",
  "  \"seven two nine\"\nend", "  # Accepted solution was:\n  # split_numbers = numbers.split\n\
    \  # numbers_to_sort = split_numbers.map { |number| number_to_digit(number) }\n\
    \  # numbers_to_sort.sort.map { |number| digit_to_number(number) }.join(' ')",
  "  numbers.split.sort_by{|a| a[0].ord}.join(' ')\nend", "  # Your code here\nend",
  "  arr = numbers.split\n  num_arr = arr.map { |num| numeral_to_number(num) }\n \
    \ sorted_nums = num_arr.sort\n  sorted_nums.map { |num| number_to_numeral(num)\
    \ }.join(' ')\nend", "  numbers_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9}\n  numbers_string = numbers.split(' ')\n  numbers_string_int = []\n  numbers_string.each\
    \ do |number|\n    numbers_string_int << numbers_hash[number]\n  end\n  numbers_sorted\
    \ = numbers_string_int.sort\n  final_string = []\n  numbers_sorted.each do |num|\n\
    \    numbers_hash.each do |key, value|\n      if num == value\n        final_string\
    \ << key\n      end\n    end\n  end\n  final_string.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| word_to_number(word) }.join(' ')\nend", "  @numbers = numbers.split(\"\
    \ \")\n  @numbers.sort_by! { |number| number_value(number) }\n  @numbers.join(\"\
    \ \")\nend", "  number_words = numbers.split\n  number_words.sort_by! do |word|\n\
    \    {\n      'zero' => 0,\n      'one' => 1,\n      'two' => 2,\n      'three'\
    \ => 3,\n      'four' => 4,\n      'five' => 5,\n      'six' => 6,\n      'seven'\
    \ => 7,\n      'eight' => 8,\n      'nine' => 9\n    }[word]\n  end\n  number_words.join('\
    \ ')\nend", "  sorted_numbers = []\n  if numbers.class == String\n    numbers\
    \ = numbers.split\n    numbers.each do |number|\n      case number\n      when\
    \ \"zero\"\n        sorted_numbers << 0\n      when \"one\"\n        sorted_numbers\
    \ << 1\n      when \"two\"\n        sorted_numbers << 2\n      when \"three\"\n\
    \        sorted_numbers << 3\n      when \"four\"\n        sorted_numbers << 4\n\
    \      when \"five\"\n        sorted_numbers << 5\n      when \"six\"\n      \
    \  sorted_numbers << 6\n      when \"seven\"\n        sorted_numbers << 7\n  \
    \    when \"eight\"\n        sorted_numbers << 8\n      when \"nine\"\n      \
    \  sorted_numbers << 9\n      end\n    end\n    sorted_numbers.sort!\n    sorted_numbers.each\
    \ do |number|\n      case number\n      when 0\n        number = \"zero\"\n  \
    \    when 1\n        number = \"one\"\n      when 2\n        number = \"two\"\n\
    \      when 3\n        number = \"three\"\n      when 4\n        number = \"four\"\
    \n      when 5\n        number = \"five\"\n      when 6\n        number = \"six\"\
    \n      when 7\n        number = \"seven\"\n      when 8\n        number = \"\
    eight\"\n      when 9\n        number = \"nine\"\n      end\n    end\n    sorted_numbers\
    \ = sorted_numbers.join(\" \")\n  end\n  return sorted_numbers\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.find_index(num) }.join(' ')\nend", "\tif numbers.is_a?(String)\n\
    \t\tnumber_map = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n\t\t\
    numbers = numbers.split(' ').map{ |num| number_map[num] }.sort.map{ |num| number_map.key(num)\
    \ }.join(' ')\n\tend\n\tnumbers\nend", "  numbers.split.sort_by { |word| to_number(word)\
    \ }.join(' ')\nend", "  number_values = Hash[numbers.split(\" \").map { |n| [n,\
    \ convert_to_number(n)] }]\n  numbers.split(\" \").sort_by { |n| number_values[n]\
    \ }.join(\" \")\nend", "  # YOUR CODE HERE\nend", "  numeral_hash = {\"zero\"\
    \ => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" =>\
    \ 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  number_array\
    \ = numbers.split(\" \")\n  number_array.map! {|numeral| numeral_hash[numeral]}\n\
    \  number_array.sort!\n  final_string = \"\"\n  number_array.each do |number|\n\
    \    numeral_hash.each do |key, value|\n      if value == number\n        final_string\
    \ += key + \" \"\n      end\n    end\n  end\n  final_string.chomp(\" \")\nend",
  "  num_list = numbers.split(' ')\n  list_length = num_list.length", "  num_arr =\
    \ numbers.split\n  num_arr.sort! { |a, b| num_value(a) <=> num_value(b) }\n  num_arr.join('\
    \ ')\nend", "\tnumberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine']\n\tnumbers = numbers.split(\" \")\n\tnumbers.sort_by!\
    \ { |number| numberals.index(number) }\n\treturn numbers.join(\" \")\nend", " \
    \ numbers.split.sort_by{|n| %w(zero one two three four five six seven eight nine).index(n)}.join('\
    \ ')\nend", "  numbers_to_int = {\n      \"zero\" => 0,\n      \"one\" => 1,\n\
    \      \"two\" => 2,\n      \"three\" => 3,\n      \"four\" => 4,\n      \"five\"\
    \ => 5,\n      \"six\" => 6,\n      \"seven\" => 7,\n      \"eight\" => 8,\n \
    \     \"nine\" => 9\n  }\n  sort_array = numbers.split(' ').map { |number| numbers_to_int[number]\
    \ }.sort.map { |number| numbers_to_int.key(number) }\n  sort_array.join(' ')\n\
    end", "  numbers.split.sort_by { |word| NUMBERS.index(word) }.join(' ')\nend",
  "  # Your code here\nend", "    nums = numbers.split(\" \")\n    sorted = nums.sort\n\
    \    sorted.join(\" \")\nend", "  numbers.split(' ').sort_by { |num| words_to_numbers[num]\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |word| NUMERALS.index(word) }.join('\
    \ ')\nend", "  digits = numbers.split\n  sorted = [0,1,2,3,4,5,6,7,8,9].map {\
    \ |num|\n    num if digits.include?(DIGITS[num])\n  }.compact\n  sorted.join('\
    \ ')\nend", "  words = numbers.split(\" \")\n  ordered_words = words.sort_by {\
    \ |word| word_to_numerals[word] }\n  ordered_words.join(\" \")\nend", "  numbers_array\
    \ = numbers.split(\" \")\n  numbers_array.sort! { |num1, num2| num1.to_i <=> num2.to_i\
    \ }\n  numbers_array.join(\" \")\nend", "  # TODO\nend", "  num_map = {\n    \"\
    zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"\
    four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n   \
    \ \"eight\" => 8,\n    \"nine\" => 9\n  }\n  num_array = numbers.split(\" \")\n\
    \  num_array.map! { |numeral| num_map[numeral] }\n  num_array.sort!\n  num_array.map!\
    \ { |number| num_map.key(number) }\n  num_array.join(\" \")\nend", "  nums = numbers.split.sort_by\
    \ { |num| num.to_s.length }\n  nums.join(' ')\nend", "  nums = [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ]\n  numbers.split(\" \").sort_by { |i| nums.index(i) }.join(\" \")\nend", " \
    \ numbers.split.sort_by { |number| %w(zero one two three four five six seven eight\
    \ nine).index(number) }.join(' ')\nend", "  numbers.split(' ').sort_by { |num|\
    \ numeral_values[num] }.join(' ')\nend", "  numbers.split.sort { |x, y| NUMERALS.index(x)\
    \ <=> NUMERALS.index(y) }.join(' ')\nend", "  words = numbers.split(' ')\n  sorted_numbers\
    \ = []\n  words.each do |word|\n    if (valid_number?(word))\n      sorted_numbers\
    \ << word\n    end\n  end\n  sorted_numbers.sort do |x, y|\n    number_lookup[x]\
    \ <=> number_lookup[y]\n  end.join(' ')\nend", "  number_names = { \"zero\" =>\
    \ 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5,\
    \ \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9 }\n  sorted_numbers\
    \ = []\n  numbers.split.each do |number|\n    sorted_numbers << number_names[number]\n\
    \  end\n  sorted_numbers.sort!\n  sorted_numbers.each do |sorted_number|\n   \
    \ sorted_number.to_s\n  end\n  sorted_numbers\nend", "  numbers_map = {\"zero\"\
    \ => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" =>\
    \ 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  numbers_array\
    \ = numbers.split(\" \")\n  sort_array = []\n  numbers_array.each do |num|\n \
    \   sort_array << numbers_map[num]\n  end\n  sort_array.sort!\n  sorted_string\
    \ = \"\"\n  sort_array.each do |num|\n    sorted_string << num.to_s + \" \"\n\
    \  end\n  sorted_string\nend", "    nums = []\n    numbers.split(\" \").each do\
    \ |x|\n        case x\n        when \"zero\"\n            nums << 0\n        when\
    \ \"one\"\n            nums << 1\n        when \"two\"\n            nums << 2\n\
    \        when \"three\"\n            nums << 3\n        when \"four\"\n      \
    \      nums << 4\n        when \"five\"\n            nums << 5\n        when \"\
    six\"\n            nums << 6\n        when \"seven\"\n            nums << 7\n\
    \        when \"eight\"\n            nums << 8\n        when \"nine\"\n      \
    \      nums << 9\n        end\n    end\n    nums.sort!", "  # TODO: your code\
    \ here\nend", "  words = numbers.split(\" \")\n  hash = {}\n  words.each do |word|\n\
    \    hash[word] = word_to_int(word)\n  end\n  sorted_hash = hash.sort_by { |key,\
    \ value| value }\n  string = \"\"\n  sorted_hash.each do |key, value|\n    string\
    \ += key + \" \"\n  end\n  return string.strip\nend", "  # TODO: Your code goes\
    \ here!\nend", "  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  words = numbers.split\n\
    \  converted_numbers = words.map do |word|\n    number_hash[word]\n  end\n  converted_numbers.sort.map\
    \ do |num|\n    number_hash.key(num)\n  end.join(' ')\nend", "  nums = { 'zero'\
    \ => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six'\
    \ => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n  numbers.split(' ').sort_by\
    \ { |num| nums[num] }.join(' ')\nend", "  [\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"].index(numbers).to_s\n\
    end", "  numbers.split.sort { |a, b| int_for(a) <=> int_for(b) }.join(' ')\nend",
  "  numbers.gsub(/\\w+/).sort_by { |number| %w(zero one two three four five six seven\
    \ eight nine).index(number) }.join(\" \")\nend", "  return \"\" if numbers.length\
    \ == 0\n  numbers = numbers.split(' ')\n  by_numerical_value = numbers.map { |e|\
    \ NUMBERS[e] }\n  sorted_by_numerical_value = by_numerical_value.sort\n  sorted_by_numerical_value.map\
    \ { |e| NUMBERS.key(e) }.join(' ')\nend", "  numbers.split.sort_by { |word| WORDS.index(word)\
    \ }.join(' ')\nend", "  number_map = {\n    \"zero\" => 0,\n    \"one\" => 1,\n\
    \    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n\
    \    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" =>\
    \ 9\n  }\n  sorted_numbers = numbers.split.map { |n| number_map[n] }.sort\n  sorted_numbers.map\
    \ { |n| number_map.key(n) }.join(\" \")\nend", "  numberals = {\n    \"zero\"\
    \ => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\"\
    \ => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\"\
    \ => 8,\n    \"nine\" => 9\n  }\n  sorted_numberals = numberals.sort_by { |numberal,\
    \ digit| digit }\n  sorted_numberals.map { |numberal, digit| numberal }\nend",
  "\tnumbers = numbers.split(' ')\n\tnumbers.sort_by! do |number|\n\t\ttranslation\
    \ = {\n\t\t\t'zero' => 0,\n\t\t\t'one' => 1,\n\t\t\t'two' => 2,\n\t\t\t'three'\
    \ => 3,\n\t\t\t'four' => 4,\n\t\t\t'five' => 5,\n\t\t\t'six' => 6,\n\t\t\t'seven'\
    \ => 7,\n\t\t\t'eight' => 8,\n\t\t\t'nine' => 9\n\t\t}\n\t\ttranslation[number]\n\
    \tend\n\tnumbers.join(' ')\nend", "  numbers.split.sort_by{|number| WORD_TO_NUM[number]}.join('\
    \ ')\nend", "  numbers.split.sort_by { |word|\n    case word\n    when 'zero'\n\
    \      0\n    when 'one'\n      1\n    when 'two'\n      2\n    when 'three'\n\
    \      3\n    when 'four'\n      4\n    when 'five'\n      5\n    when 'six'\n\
    \      6\n    when 'seven'\n      7\n    when 'eight'\n      8\n    when 'nine'\n\
    \      9\n    end\n  }.join(\" \")\nend", "  %w(zero one two three four five six\
    \ seven eight nine).index(numbers.split(\" \").sort.join(\" \"))\nend", "  numbers.split.sort_by\
    \ { |number| number_value(number) }.join(' ')\nend", "  words = numbers.split(\"\
    \ \")\n  numbers = words.map{|word| WORD_TO_NUM[word]}\n  sorted_numbers = numbers.sort\n\
    \  sorted_words = sorted_numbers.map{|number| NUM_TO_WORD[number]}\n  sorted_words.join(\"\
    \ \")\nend", "  # Numbers are space-delimited strings of numberals\n  # convert\
    \ each numberal to its corresponding Integer\n  # sort the array of Integers\n\
    \  # convert the sorted array of Integers back to their corresponding numberals",
  "  numbers.split(' ').sort_by{|n| number_to_int(n)}.join(' ')\nend", "  numbers.split('\
    \ ').sort_by { |n| number_values[n] }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'].index(word) }.join(' ')\nend", "  converted_numbers = numbers.split.map\
    \ do |num|\n    case num\n    when 'zero' then 0\n    when 'one' then 1\n    when\
    \ 'two' then 2\n    when 'three' then 3\n    when 'four' then 4\n    when 'five'\
    \ then 5\n    when 'six' then 6\n    when 'seven' then 7\n    when 'eight' then\
    \ 8\n    when 'nine' then 9\n    end\n  end\n  converted_numbers.sort.map do |num|\n\
    \    case num\n    when 0 then 'zero'\n    when 1 then 'one'\n    when 2 then\
    \ 'two'\n    when 3 then 'three'\n    when 4 then 'four'\n    when 5 then 'five'\n\
    \    when 6 then 'six'\n    when 7 then 'seven'\n    when 8 then 'eight'\n   \
    \ when 9 then 'nine'\n    end\n  end.join(' ')\nend", "\t\n\tnumbers = numbers.split(\"\
    \ \")\n\tnumbers.map! do |num|\n\t\tcase num\n\t\twhen \"zero\"\n\t\t\t0\n\t\t\
    when \"one\"\n\t\t\t1\n\t\twhen \"two\"\n\t\t\t2\n\t\twhen \"three\"\n\t\t\t3\n\
    \t\twhen \"four\"\n\t\t\t4\n\t\twhen \"five\"\n\t\t\t5\n\t\twhen \"six\"\n\t\t\
    \t6\n\t\twhen \"seven\"\n\t\t\t7\n\t\twhen \"eight\"\n\t\t\t8\n\t\twhen \"nine\"\
    \n\t\t\t9\n\t\tend\n\tend\n\tnumbers.sort!\n\tnumbers.map! do |num|\n\t\tcase\
    \ num\n\t\twhen 0\n\t\t\t\"zero\"\n\t\twhen 1\n\t\t\t\"one\"\n\t\twhen 2\n\t\t\
    \t\"two\"\n\t\twhen 3\n\t\t\t\"three\"\n\t\twhen 4\n\t\t\t\"four\"\n\t\twhen 5\n\
    \t\t\t\"five\"\n\t\twhen 6\n\t\t\t\"six\"\n\t\twhen 7\n\t\t\t\"seven\"\n\t\twhen\
    \ 8\n\t\t\t\"eight\"\n\t\twhen 9\n\t\t\t\"nine\"\n\t\tend\n\tend\n\tnumbers.join(\"\
    \ \")\nend", "  mapping = %w(zero one two three four five six seven eight nine)\n\
    \  numbers.split.sort_by{|x| mapping.index(x)}.join(' ')\nend", end, "  options\
    \ = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n\
    \    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight'\
    \ => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |number| options[number]\
    \ }.join(' ')\nend", "  words = {\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split('\
    \ ').sort_by { |number| words[number] }.join(' ')\nend", "  number_hash = {'zero'\
    \ => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six'\
    \ => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  numbers.split(' ').sort! {|x,\
    \ y| number_hash[x] <=> number_hash[y]}\nend", "  sorted_numbers = numbers.split.sort_by\
    \ do |number|\n    case number\n    when 'zero' then 0\n    when 'one' then 1\n\
    \    when 'two' then 2\n    when 'three' then 3\n    when 'four' then 4\n    when\
    \ 'five' then 5\n    when 'six' then 6\n    when 'seven' then 7\n    when 'eight'\
    \ then 8\n    when 'nine' then 9\n    end\n  end\n  sorted_numbers.join(' ')\n\
    end", "  words = { zero: 0, one: 1, two: 2, three: 3, four: 4, five: 5, six: 6,\
    \ seven: 7, eight: 8, nine: 9 }\n  # TODO: implement\n  result = []\n  arr = numbers.split(\"\
    \ \")\n  arr.each { |w| result << words[w.to_sym] }\n  result.sort!\n  sorted\
    \ = []\n  result.each { |r| sorted << words.key(r).to_s }\n  sorted.join(\" \"\
    )\nend", "  numbers.split.sort_by(&method(:number_to_int)).join(' ')\nend", "\t\
    num_array = numbers.split()\n\tsort_num_array = num_array.sort_by do |num|\n\t\
    \tdict = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five'\
    \ => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n\t\tdict[num]\n\t\
    end\n\tsort_num_array.join(\" \")\nend", "  numbers.split(' ').sort_by { |number|\
    \ NUMBERS.index(number) }.join(' ')\nend", "  number_words = numbers.split(' ')\n\
    \  sorted_numbers = number_words.sort { |x, y| NUMBERS[x] <=> NUMBERS[y] }\n \
    \ sorted_numbers.join(' ')\nend", "  numerals = %w(zero one two three four five\
    \ six seven eight nine)\n  numbers.split(' ').sort_by { |n| numerals.index(n)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS[number] }.join('\
    \ ')\nend", "  num_strings = numbers.split(\" \")\n  num_strings.sort! { |a, b|\
    \ number_to_number_val(a) <=> number_to_number_val(b) }\n  num_strings.join(\"\
    \ \")\nend", "  numbers_split = numbers.split(\" \")\n  sorted_array = []\n  all_numbers\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n  i = 0\n  while i < numbers_split.length\n    j = 0\n\
    \    while j < all_numbers.length\n      if numbers_split[i] == all_numbers[j]\n\
    \        sorted_array << j\n      end\n      j += 1\n    end\n    i += 1\n  end\n\
    \  sorted_array.sort!\n  p sorted_array\n  string_output = \"\"\n  i = 0\n  while\
    \ i < sorted_array.length\n    string_output += \"#{all_numbers[sorted_array[i]]}\
    \ \"\n    i += 1\n  end\n  string_output.chop\nend", "  numbers_dict = {\n   \
    \ 'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four'\
    \ => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' =>\
    \ 8,\n    'nine' => 9\n  }\n  numbers_array = numbers.split\n  numbers_array.map!\
    \ do |number|\n    numbers_dict[number]\n  end\n  sorted_numbers = numbers_array.sort\n\
    \  sorted_numbers.map! do |number|\n    number.to_s\n  end\n  sorted_numbers.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join('\
    \ ')\nend", "  numbers_to_sort = numbers.split(\" \")\n  # If you wanted to compare\
    \ the performance of sorting with each of these\n  # methods, you could write\
    \ a benchmark test.\n  # Insertion Sort\n  #sorted_numbers = insertion_sort(numbers_to_sort)\n\
    \  # Selection Sort\n  #sorted_numbers = selection_sort(numbers_to_sort)\n  #\
    \ Bubble Sort\n  #sorted_numbers = bubble_sort(numbers_to_sort)\n  # Merge Sort\n\
    \  sorted_numbers = merge_sort(numbers_to_sort)\n  sorted_numbers.join(\" \")\n\
    end", "  numbers_to_sort = %w[zero one two three four five six seven eight nine]\n\
    \  numbers_sorted = numbers.split(' ').sort_by { |n| numbers_to_sort.index(n)\
    \ }\n  numbers_sorted.join(' ')\nend", "  # nothing much to say\n  numbers.split.sort_by\
    \ { |s| NUMBERS.index(s) }.join(\" \")\nend", "  numbers.split(' ').sort_by {\
    \ |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |number|\
    \ number_to_i(number) }.join(' ')\nend", "  convert_to_number(numbers).sort.join('\
    \ ')\nend", end, "  numbers_arr = numbers.split\n  numbers_arr.sort { |a, b| NUMERALS[a]\
    \ <=> NUMERALS[b] }.join(' ')\nend", "  nums = {'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9}\n  num_array = numbers.split\n  num_array.sort_by! {|num|\
    \ nums[num]}\n  num_array.join(' ')\nend", "  number_map = {\n    'zero' => 0,\n\
    \    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five'\
    \ => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' =>\
    \ 9\n  }\n  numbers.split(' ').sort_by { |num| number_map[num] }.join(' ')\nend",
  "  # TODO: Translate numbers to integers and sort.\n  numbers = numbers.split('\
    \ ')\n  numbers = numbers.map do |number|\n    number = translate_numeral(number)\n\
    \  end\n  numbers.sort!\n  numbers = numbers.map do |number|\n    number = translate_number(number)\n\
    \  end\n  numbers.join(' ')\nend", "  num_names = { 'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9 }\n  output = numbers.split(' ').map { |num| num_names[num]\
    \ }.sort\n  return output.map { |num| num_names.key(num) }.join(' ')\nend", " \
    \ numbers_map = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"\
    four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9}\n  numbers_list = numbers.split\n  numbers_list.sort! { |a, b| numbers_map[a]\
    \ <=> numbers_map[b] }\n  numbers_list.join(\" \")\nend", "  %w[zero one two three\
    \ four five six seven eight nine].\n    sort_by { |numeral| numbers.split.index(numeral)\
    \ }.\n    join(' ')\nend", "  numbers.split.sort { |a, b| numeral_to_digit(a)\
    \ <=> numeral_to_digit(b) }.join(' ')\nend", "  numbers.split.sort_by { |word|\
    \ SORTED_NUMERALS.index(word) }.join(' ')\nend", "  # your code here\nend", " \
    \ number_words = numbers.split(' ')\n  number_words.sort { |a, b| digit_to_i(a)\
    \ <=> digit_to_i(b) }.join(' ')\nend", "  number_map = {\n    \"zero\" => 0,\n\
    \    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n\
    \    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" =>\
    \ 8,\n    \"nine\" => 9\n  }\n  numbers.split.sort_by { |word| number_map[word]\
    \ }.join(\" \")\nend", "  numbers.gsub('zero', '0').gsub('one', '1').gsub('two',\
    \ '2').gsub('three', '3').gsub('four', '4').gsub('five', '5').gsub('six', '6').gsub('seven',\
    \ '7').gsub('eight', '8').gsub('nine', '9').split(' ').sort.map{|num| num.gsub('0',\
    \ 'zero').gsub('1', 'one').gsub('2', 'two').gsub('3', 'three').gsub('4', 'four').gsub('5',\
    \ 'five').gsub('6', 'six').gsub('7', 'seven').gsub('8', 'eight').gsub('9', 'nine')}.join('\
    \ ')\nend", "  english_numberals = {\n    \"zero\" => 0,\n    \"one\" => 1,\n\
    \    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n\
    \    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" =>\
    \ 9\n  }\n  number_array = numbers.split\n  sort_array = []\n  number_array.each\
    \ do |num|\n    sort_array << english_numberals[num]\n  end\n  sort_array.sort!\n\
    \  output = []\n  sort_array.each do |num|\n    output << english_numberals.key(num)\n\
    \  end\n  output.join(\" \")\nend", "  numberals = %w[zero one two three four\
    \ five six seven eight nine]\n  string_to_array = numbers.split(\" \")\n  integer_array\
    \ = string_to_array.map { |numeral| numberals.index(numeral) }\n  sorted_integers\
    \ = integer_array.sort\n  sorted_numberals = sorted_integers.map { |index| numberals[index]\
    \ }\n  sorted_numberals.join(\" \")\nend", "  numbers.split.sort{|a,b| EnglishNumbers.to_number(a)\
    \ <=> EnglishNumbers.to_number(b)}.join(' ')\nend", "  number_words = {'zero'\
    \ => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six'\
    \ => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  sorted_numbers = []\n  words\
    \ = numbers.split(' ')\n  numbers_array = words.map { |word| number_words[word]\
    \ }\n  numbers_array.sort.each do |number|\n    sorted_numbers << number_words.key(number)\n\
    \  end\n  sorted_numbers.join(' ')\nend", "  to_sort = numbers.split(' ')\n  to_sort.sort_by\
    \ { |number| number.to_i }.join(' ')\nend", "  number_names = {\n    'zero' =>\
    \ 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  }\n  number_names.default = 0\n  numbers.split.sort_by{|n| number_names[n]}.join('\
    \ ')\nend", "  number_string = numbers.split(\" \")\n  number_string.sort_by {\
    \ |x| x.to_i}\nend", "  number_map = {\n    'zero' => 0,\n    'one' => 1,\n  \
    \  'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six'\
    \ => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split('\
    \ ').sort_by { |num| number_map[num] }.join(' ')\nend", "  number_dict = {\n \
    \   \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n\
    \    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n\
    \    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  sorted_numbers = numbers.split(\"\
    \ \").sort_by do |number|\n    number_dict[number]\n  end\n  sorted_numbers.join(\"\
    \ \")\nend", "  numbers.split(' ').sort_by{|word| %w(zero one two three four five\
    \ six seven eight nine).index(word)}.join(' ')\nend", "  numbers_hash = {\n  \
    \  \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n\
    \    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n\
    \    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  num_list = numbers.split(\" \"\
    )\n  num_list.map! { |n| numbers_hash[n] }\n  sorted_nums = num_list.sort\n  sorted_nums.map!\
    \ { |n| numbers_hash.key(n) }\n  sorted_nums.join(\" \")\nend", "  num_hash =\
    \ {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5,\
    \ 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  array = numbers.split('\
    \ ')\n  array.map! {|a| num_hash[a]}\n  array.sort!\n  array.map! {|a| num_hash.key(a)}\n\
    \  puts array.join(' ')\nend", "\t\n\tnumbers.split.sort do |a, b|\n\t\tnumbers_order.index(a)\
    \ <=> numbers_order.index(b)\n\tend.join(\" \")\nend", "  numbers_hash = {\n \
    \   \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n\
    \    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n\
    \    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  numbers = numbers.split(' ')\n\
    \  numbers.sort! { |x, y| numbers_hash[x] <=> numbers_hash[y] }\n  numbers.join('\
    \ ')\nend", "  ordered_numbers = []\n  ordered_numbers.push(numbers.split(' ').sort\
    \ { |x, y| NUMBERS.index(x) <=> NUMBERS.index(y) })\n  ordered_numbers.join('\
    \ ')\nend", "  digit_hash = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9}\n  # your code here\n  arr = numbers.split(\" \")\n  arr.map!\
    \ {|num| digit_hash[num]}\n  arr.sort!\n  arr.map! {|num| digit_hash.key(num)}\n\
    \  arr.join(\" \")\nend", "  numbers_to_sort = numbers.split(\" \")\n  # numbers_sorted\
    \ = []\n  # sort_index = 0\n  # numbers_to_sort.each do |number|\n  #   if sort_index\
    \ == 0\n  #     numbers_sorted << number\n  #     sort_index += 1\n  #   else\n\
    \  #     numbers_sorted.each_with_index do |n, index|\n  #       case number\n\
    \  #       when \"one\"\n  #         if n == \"zero\"\n  #           numbers_sorted.insert(index,\
    \ number)\n  #           break\n  #         elsif n == \"one\"\n  #          \
    \ numbers_sorted.insert(index + 1, number)\n  #           break\n  #         end\n\
    \  #       when \"two\"\n  #         if n == \"zero\" || n == \"one\"\n  #   \
    \        numbers_sorted.insert(index, number)\n  #           break\n  #      \
    \   elsif n == \"two\"\n  #           numbers_sorted.insert(index + 1, number)\n\
    \  #           break\n  #         end\n  #       when \"three\"\n  #         if\
    \ n == \"zero\" || n == \"one\" || n == \"two\"\n  #           numbers_sorted.insert(index,\
    \ number)\n  #           break\n  #         elsif n == \"three\"\n  #        \
    \   numbers_sorted.insert(index + 1, number)\n  #           break\n  #       \
    \  end\n  #       when \"four\"\n  #         if n == \"zero\" || n == \"one\"\
    \ || n == \"two\" || n == \"three\"\n  #           numbers_sorted.insert(index,\
    \ number)\n  #           break\n  #         elsif n == \"four\"\n  #         \
    \  numbers_sorted.insert(index + 1, number)\n  #           break\n  #        \
    \ end\n  #       when \"five\"\n  #         if n == \"zero\" || n == \"one\" ||\
    \ n == \"two\" || n == \"three\" || n == \"four\"\n  #           numbers_sorted.insert(index,\
    \ number)\n  #           break\n", "  num_map = {\n    'zero' => 0,\n    'one'\
    \ => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n\
    \    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n\
    \  arr = numbers.split(\" \")\n  arr.sort! { |x, y| num_map[x] <=> num_map[y]\
    \ }\n  arr.join(\" \")\nend", "  nums = numbers.split(' ')\n  nums.map { |n| NUMBER_MAPPING[n]\
    \ }.sort.map { |n| NUMBER_MAPPING.key(n) }.join(' ')\nend", "  numbers.split('\
    \ ').sort_by{|num| number_to_int(num)}.join(' ')\nend", "  numbers.split(' ').sort_by\
    \ { |num| NUMBER_MAP[num] }.join(' ')\nend", "  numeral_values = %w(zero one two\
    \ three four five six seven eight nine)\n  nums = numbers.split\n  nums.sort {\
    \ |x, y| numeral_values.index(x) <=> numeral_values.index(y) }.join(' ')\nend",
  "  numbers.split.sort_by{|num| numeral_to_number[num]}.join(' ')\nend", "  # your\
    \ code here\nend", "  nums = numbers.split(\" \")\n  final = []\n  nums.each do\
    \ |num|\n    final << num.to_i\n  end\n  final.sort!\n  final.join(\" \")\nend",
  "  # TODO: your code here!\nend", "  numbers.split(' ').sort_by{|num| num_to_i(num)}.join('\
    \ ')\nend", "  # Your code here\nend", "  words = numbers.split\n  words.sort_by\
    \ { |word| word.to_i }.join(' ')\nend", "  word_to_num = Hash.new\n  word_to_num[\"\
    zero\"] = 0\n  word_to_num[\"one\"] = 1\n  word_to_num[\"two\"] = 2\n  word_to_num[\"\
    three\"] = 3\n  word_to_num[\"four\"] = 4\n  word_to_num[\"five\"] = 5\n  word_to_num[\"\
    six\"] = 6\n  word_to_num[\"seven\"] = 7\n  word_to_num[\"eight\"] = 8\n  word_to_num[\"\
    nine\"] = 9\n  words = numbers.split(\" \")\n  numbers = words.map { |word| word_to_num[word]\
    \ }\n  sorted_numbers = numbers.sort\n  sorted_words = sorted_numbers.map { |num|\
    \ word_to_num.key(num) }\n  sorted_words.join(\" \")\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by{|num|\
    \ num.to_i}.join(' ')\nend", "  numbers.split.sort { |a, b| convert_numbers(a)\
    \ <=> convert_numbers(b) }.join(' ')\nend", "  result = ''\n  numbers = numbers.split('\
    \ ')\n  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n   \
    \ 'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  sorted_numbers = numbers.sort_by\
    \ { |number| num_hash[number] }\n  sorted_numbers.each do |number|\n    result\
    \ += ' ' + number\n  end\n  result.strip\nend", "  mapping = {\n    \"zero\" =>\
    \ 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\"\
    \ => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\"\
    \ => 8,\n    \"nine\" => 9\n  }\n  sorted_numbers = numbers.split.map { |n| mapping[n]\
    \ }.sort.map { |n| mapping.key(n) }\n  sorted_numbers.join(\" \")\nend", "  nums\
    \ = numbers.split(' ')\n  nums.map! { |word| NUMBERS[word.to_sym] }\n  nums.sort!\n\
    \  nums.map! { |n| NUMBERS.key(n).to_s }\n  nums.join(' ')\nend", "  sorted_number\
    \ = []\n  numbers.split(\" \").each do |number|\n    case number\n    when \"\
    zero\"\n      sorted_number.push 0\n    when \"one\"\n      sorted_number.push\
    \ 1\n    when \"two\"\n      sorted_number.push 2\n    when \"three\"\n      sorted_number.push\
    \ 3\n    when \"four\"\n      sorted_number.push 4\n    when \"five\"\n      sorted_number.push\
    \ 5\n    when \"six\"\n      sorted_number.push 6\n    when \"seven\"\n      sorted_number.push\
    \ 7\n    when \"eight\"\n      sorted_number.push 8\n    when \"nine\"\n     \
    \ sorted_number.push 9\n    end\n  end\n  sorted_number.sort!\n  sorted_number.map!\
    \ do |value|\n    case value\n    when 0\n      \"zero\"\n    when 1\n      \"\
    one\"\n    when 2\n      \"two\"\n    when 3\n      \"three\"\n    when 4\n  \
    \    \"four\"\n    when 5\n      \"five\"\n    when 6\n      \"six\"\n    when\
    \ 7\n      \"seven\"\n    when 8\n      \"eight\"\n    when 9\n      \"nine\"\n\
    \    end\n  end\n  sorted_number.join(\" \")\nend", "  # Get an array of numbers\n\
    \  input_numbers = numbers.split(' ')\n  # Do it!\n  output_numbers = input_numbers.sort_by\
    \ do |number|\n    numbers_hash[number]\n  end\n  # Return a string\n  output_numbers.join('\
    \ ')\nend", "  numbers.gsub(/zero/, '0').gsub(/one/, '1').gsub(/two/, '2').gsub(/three/,\
    \ '3').gsub(/four/, '4').gsub(/five/, '5').gsub(/six/, '6').gsub(/seven/, '7').gsub(/eight/,\
    \ '8').gsub(/nine/, '9').split(' ').sort.join(' ')\nend", "  number_words = %w(zero\
    \ one two three four five six seven eight nine)\n  numbers.split.sort_by { |word|\
    \ number_words.index(word) }.join(' ')\nend", "  result = []\n  mapping = {\n\
    \    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four'\
    \ => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' =>\
    \ 8,\n    'nine' => 9\n  }\n  numbers.split(' ').map { |number| mapping[number]\
    \ }.sort.each do |number|\n    mapping.each do |string, integer|\n      if integer\
    \ == number\n        result << string\n      end\n    end\n  end\n  result.join('\
    \ ')\nend", "  numbers_ary = numbers.split(' ')\n  sorted_numbers = []\n  numbers_to_sort\
    \ = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine' ]\n  numbers_to_sort.each do |number|\n    numbers_ary.each do |numeral|\n\
    \      if numeral == number\n        sorted_numbers << numeral\n      end\n  \
    \  end\n  end\n  sorted_numbers.join(' ')\nend", "    nums = numbers.split(\"\
    \ \")\n    nums.sort! { |x, y| x <=> y }\n    nums.join(\" \")\nend", "  map =\
    \ {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"\
    five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  nums\
    \ = numbers.split(\" \").map { |num| map[num] }\n  nums.sort! { |x, y| x <=> y\
    \ }\n  nums.map { |num| map.key(num) }.join(\" \")\nend", "  # return [] if numbers.nil?\n\
    \  #\n  # number_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  #\
    \ # numbers = numbers.split\n  #\n  # sorted_numbers = numbers.split(' ').map\
    \ { |num| number_hash[num] }.sort.map { |num| number_hash.key(num) }\n  #\n  #\
    \ # sorted_numbers = numbers.split(' ').sort_by { |num| number_hash[num] }\n \
    \ #\n  # sorted_numbers.join(' ')", "  words = numbers.split(' ')\n  nums = words.map\
    \ { |w| digits.index(w) }\n  nums.sort!\n  nums.map { |n| digits[n] }.join(' ')\n\
    end", "  translate = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" =>\
    \ 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\"\
    \ => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  str\
    \ = []\n  num = []\n  numbers.split.each { |s| str << s.to_s }\n  str.each { |s|\
    \ num << translate[s] }\n  num.sort!\n  num.map! { |n| translate.key(n) }\n  num.join(\"\
    \ \")\nend", "  words = numbers.split\n  numbers = words.map do |word|\n    case\
    \ word\n    when 'zero'\n      0\n    when 'one'\n      1\n    when 'two'\n  \
    \    2\n    when 'three'\n      3\n    when 'four'\n      4\n    when 'five'\n\
    \      5\n    when 'six'\n      6\n    when 'seven'\n      7\n    when 'eight'\n\
    \      8\n    when 'nine'\n      9\n    end\n  end\n  sorted_numbers = numbers.sort\n\
    \  numbers = sorted_numbers.map do |num|\n    case num\n    when 0\n      'zero'\n\
    \    when 1\n      'one'\n    when 2\n      'two'\n    when 3\n      'three'\n\
    \    when 4\n      'four'\n    when 5\n      'five'\n    when 6\n      'six'\n\
    \    when 7\n      'seven'\n    when 8\n      'eight'\n    when 9\n      'nine'\n\
    \    end\n  end\n  numbers.join(' ')\nend", "  numbers.split(' ').sort_by { |n|\
    \ NUMBERS.index(n) }.join(' ')\nend", "  number_list = numbers.split(' ')\n  convert_to_numerals(number_list).sort.map\
    \ do |num|\n    convert_to_numbers(num)\n  end.join(' ')\nend", "  # Return an\
    \ array of words which are not numberals.\n  # The array is sorted by the number\
    \ that each word represents.\n  def sort_by_number(words)\n    sort_by { |word|\
    \ NUMBERS.index(word) }\n  end", "  num_dictionary = {\n    \"zero\" => 0,\n \
    \   \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n\
    \    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" =>\
    \ 8,\n    \"nine\" => 9\n  }\n  numbers.split(\" \").sort{|a,b| num_dictionary[a]\
    \ <=> num_dictionary[b]}.join(\" \")\nend", "  words = numbers.split\n  words.sort!\
    \ { |x, y| WORDS[x] <=> WORDS[y] }\n  words.join(' ')\nend", "  numbers.split('\
    \ ').sort_by { |word| NUMBERS.index(word) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  number_words = numbers.split('\
    \ ')\n  word_numbers = []\n  word_numbers << 0 if number_words.include?('zero')\n\
    \  word_numbers << 1 if number_words.include?('one')\n  word_numbers << 2 if number_words.include?('two')\n\
    \  word_numbers << 3 if number_words.include?('three')\n  word_numbers << 4 if\
    \ number_words.include?('four')\n  word_numbers << 5 if number_words.include?('five')\n\
    \  word_numbers << 6 if number_words.include?('six')\n  word_numbers << 7 if number_words.include?('seven')\n\
    \  word_numbers << 8 if number_words.include?('eight')\n  word_numbers << 9 if\
    \ number_words.include?('nine')\n  number_words = []\n  word_numbers.sort.each\
    \ do |n|\n    case n\n    when 0\n      number_words << 'zero'\n    when 1\n \
    \     number_words << 'one'\n    when 2\n      number_words << 'two'\n    when\
    \ 3\n      number_words << 'three'\n    when 4\n      number_words << 'four'\n\
    \    when 5\n      number_words << 'five'\n    when 6\n      number_words << 'six'\n\
    \    when 7\n      number_words << 'seven'\n    when 8\n      number_words <<\
    \ 'eight'\n    when 9\n      number_words << 'nine'\n    end\n  end\n  number_words.join('\
    \ ')\nend", "  #\n  # CODE GOES HERE\n  #\nend", "  number_words = numbers.split('\
    \ ')\n  # Array#map is a method that takes a block and returns a new array based\
    \ on the return value of the block.\n  # { |item| block }\n  number_words.map!\
    \ do |number_word|\n    case number_word\n    when 'zero' then 0\n    when 'one'\
    \ then 1\n    when 'two' then 2\n    when 'three' then 3\n    when 'four' then\
    \ 4\n    when 'five' then 5\n    when 'six' then 6\n    when 'seven' then 7\n\
    \    when 'eight' then 8\n    when 'nine' then 9\n    end\n  end\n  number_words.sort!\n\
    \  number_words.map! do |number_word|\n    case number_word\n    when 0 then 'zero'\n\
    \    when 1 then 'one'\n    when 2 then 'two'\n    when 3 then 'three'\n    when\
    \ 4 then 'four'\n    when 5 then 'five'\n    when 6 then 'six'\n    when 7 then\
    \ 'seven'\n    when 8 then 'eight'\n    when 9 then 'nine'\n    end\n  end\n \
    \ number_words.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  num_map = {\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  num_map[numbers]\n\
    end", "  numbers.split(' ').sort_by { |n| n.length }.join(' ')\nend", "  numbers.split.sort_by{|n|\
    \ ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(n)}.join('\
    \ ')\nend", "  numbers.split.sort { |a, b| convert_numbers(a) <=> convert_numbers(b)\
    \ }.join(' ')\nend", "  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9}\n  numbers = numbers.split\n  numbers.map! {|number| num_hash[number]}\n\
    \  numbers.sort!\n  numbers.map! {|number| num_hash.key(number)}\n  numbers.join('\
    \ ')\nend", "  number_map = {\n    'zero'  => 0,\n    'one'   => 1,\n    'two'\
    \   => 2,\n    'three' => 3,\n    'four'  => 4,\n    'five'  => 5,\n    'six'\
    \   => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine'  => 9\n  }\n  numbers.split('\
    \ ').sort_by{|word| number_map[word]}.join(' ')\nend", "  # <YOUR CODE HERE>\n\
    end", "  digits = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n\
    \    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n\
    \    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  words = numbers.split('\
    \ ')\n  sorted_values = words.map { |word| digits[word] }.sort\n  sorted_values.map\
    \ { |val| digits.key(val) }.join(' ')\nend", "  numbers.split.sort{|a,b| a.to_i\
    \ <=> b.to_i}.join(' ')\nend", "  # We don't want to go to the trouble of converting\
    \ this to an array of numbers and then sorting it\n  # If we compare the string\
    \ representation of each number, we can sort an array of strings and get the\n\
    \  # desired result\n  sorted_numbers = numbers.split(\" \").sort { |a, b| NUMBERS.index(a)\
    \ <=> NUMBERS.index(b) }\n  sorted_numbers.join(\" \")\nend", "  digits = numbers.split(\"\
    \ \")\n  digits.map! { |x| NUMBERS.index(x) }\n  sorted = digits.sort\n  sorted.map!\
    \ { |x| NUMBERS[x] }\n  sorted.join(\" \")\nend", "  numberals = [ 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine' ]\n  numbers.split('\
    \ ').sort_by { |number| numberals.index(number) }.join(' ')\nend", "  number_lookup\
    \ = { \"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9 }\n\
    \  numbers.split.sort_by { |number| number_lookup[number] }.join(\" \")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
