name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  #TODO: Sort numbers\n  numbers.split.sort_by { |i| [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"].index(i) }.join(\" \")\nend", "  # This method should take in a string\
    \ of numbers and sort the numbers\n  numbers.split.sort_by{|word| number_to_digit(word)}.join(\"\
    \ \")\nend", "  valid_numbers = %w[zero one two three four five six seven eight\
    \ nine]\n  number_string = numbers.split(\" \")\n  int_numbers = []\n  number_string.each\
    \ do |num|\n    valid_numbers.each_with_index do |valid_num, ind|\n      if num\
    \ == valid_num\n        int_numbers << ind\n      end\n    end\n  end\n  answer\
    \ = []\n  int_numbers.sort.each do |sort_num|\n    answer << valid_numbers[sort_num]\n\
    \  end\n  return answer.join(\" \")\nend", "  # TODO: implement the method\nend",
  "  numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\nend", "\t# Iterate\
    \ through the string\n\t# If the string contains a word\n\t\t# Convert word to\
    \ number\n\t\t# Add number to array\n\t# Sort array\n\t# Return sorted array as\
    \ string\n\t\n\tnum_arr = []\n\t# Split string into array of words\n\tnum_words\
    \ = numbers.split(\" \")\n\tnum_words.each do |word|\n\t\tif word == \"zero\"\n\
    \t\t\tnum_arr << 0\n\t\telsif word == \"one\"\n\t\t\tnum_arr << 1\n\t\telsif word\
    \ == \"two\"\n\t\t\tnum_arr << 2\n\t\telsif word == \"three\"\n\t\t\tnum_arr <<\
    \ 3\n\t\telsif word == \"four\"\n\t\t\tnum_arr << 4\n\t\telsif word == \"five\"\
    \n\t\t\tnum_arr << 5\n\t\telsif word == \"six\"\n\t\t\tnum_arr << 6\n\t\telsif\
    \ word == \"seven\"\n\t\t\tnum_arr << 7\n\t\telsif word == \"eight\"\n\t\t\tnum_arr\
    \ << 8\n\t\telsif word == \"nine\"\n\t\t\tnum_arr << 9\n\t\tend\n\tend\n\tsorted_num_arr\
    \ = num_arr.sort\n\tsorted_num_arr.map! do |num|\n\t\tif num == 0\n\t\t\tnum =\
    \ \"zero\"\n\t\telsif num == 1\n\t\t\tnum = \"one\"\n\t\telsif num == 2\n\t\t\t\
    num = \"two\"\n\t\telsif num == 3\n\t\t\tnum = \"three\"\n\t\telsif num == 4\n\
    \t\t\tnum = \"four\"\n\t\telsif num == 5\n\t\t\tnum = \"five\"\n\t\telsif num\
    \ == 6\n\t\t\tnum = \"six\"\n\t\telsif num == 7\n\t\t\tnum = \"seven\"\n\t\telsif\
    \ num == 8\n\t\t\tnum = \"eight\"\n\t\telsif num == 9\n\t\t\tnum = \"nine\"\n\t\
    \tend\n\tend\n\tsorted_num_string = sorted_num_arr.join(\" \")\n\treturn sorted_",
  "  choices = %w(zero one two three four five six seven eight nine)\n  numbers.split('\
    \ ').sort_by { |num| choices.index(num) }.join(' ')\nend", "  number_names = {\"\
    zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\"\
    \ => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  return\
    \ numbers.split(\" \").sort_by {|number| number_names[number]}.join(\" \")\nend",
  "  case numbers\n  when \"three one five\"\n    \"one three five\"\n  when \"nine\
    \ three one five\"\n    \"one three five nine\"\n  when \"nine three one five\
    \ four six\"\n    \"one three four five six nine\"\n  when \"nine one eight three\
    \ four five six seven two zero\"\n    \"zero one two three four five six seven\
    \ eight nine\"\n  end\nend", "  # TODO: Write me\nend", "  numbers.split(' ').sort_by\
    \ { |number| numbers_to_digit[number] }.join(' ')\nend", "  words = words_to_numbers(numbers)\n\
    \  words.sort!\n  numbers_to_words(words)\nend", "  number_strings = numbers.split('\
    \ ')\n  number_strings.sort_by { |number| number_to_int(number) }.join(' ')\n\
    end", "  numbers.split(' ').sort_by { |word| word.to_i }.join(' ')\nend", "  n\
    \ = numbers.split(\" \")\n  n.sort_by! do |v|\n    ['zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(v)\n  end\n  n.join(\"\
    \ \")\nend", "  number_hash = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"\
    two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n   \
    \ \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n\
    \  }\n  array = numbers.split(' ')\n  array.sort_by! do |num|\n    number_hash[num]\n\
    \  end\n  array.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join('\
    \ ')\nend", "  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend",
  "  number_values = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  array = numbers.split(\" \")\n  array.map!\
    \ { |n| number_values[n] }\n  array.sort!\n  output = array.map { |n| number_values.key(n)\
    \ }\n  output.join(\" \")\nend", "  numeral_values = {'zero' => 0, 'one' => 1,\
    \ 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7,\
    \ 'eight' => 8, 'nine' => 9}\n  sorted_numbers = numbers.split.sort_by { |number|\
    \ numeral_values[number] }\n  sorted_numbers.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
