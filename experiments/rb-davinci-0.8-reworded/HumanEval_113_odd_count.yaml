name: HumanEval_113_odd_count
language: rb
prompt: "# Given an array of strings, where each string consists of only digits, return\
  \ an array.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\n# >>> odd_count.call([\"\
  1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  # >>> odd_count.call([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n\
  \ the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of\
  \ the 8nput.\"]\ndef odd_count(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n\
  \    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"\
  ]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
  , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\"\
  , \"314\"]))\n  end\nend\n"
completions: ["    count = 0\n    #split the list and check the index's odd or even\
    \ \n    #then, join it back to a list\n    lst.map do |i|\n        i.split(\"\"\
    ).each {|j| count += 1 if j.to_i.odd?}\n        \"the number of odd elements #{count}n\
    \ the str#{count}ng #{count} of the #{count}nput.\"\n    end\nend", "  odd_counter\
    \ = 0\n  lst.each do |i|\n    i.split(\"\").each do |num|\n      odd_counter +=\
    \ 1 if num.to_i.odd?\n    end\n    lst[lst.index(i)] = \"the number of odd elements\
    \ #{odd_counter}n the str#{odd_counter}ng #{odd_counter} of the #{odd_counter}nput.\"\
    \n    odd_counter = 0\n  end\n  lst\nend", "    odd_words = []\n    lst.each do\
    \ |string|\n        words = count_odd(string)\n        odd_words << words\n  \
    \  end\n    return odd_words\nend", "\tlst.map { |x| \"the number of odd elements\
    \ #{x.count('13579')}n the str#{x.count('13579')}ng #{x.count('13579')} of the\
    \ #{x.count('13579')}nput.\" }\nend", "  lst.map do |x|\n    num_odds = x.count(\"\
    13579\")\n    \"the number of odd elements #{num_odds}n the str#{num_odds}ng #{num_odds}\
    \ of the #{num_odds}nput.\"\n  end\nend", "  lst.map { |e| e.gsub /\\d/, 'n' }.each_with_index.map\
    \ do |e,i|\n    \"the number of odd elements #{lst[i].count(\"13579\")}n the str#{e.gsub\
    \ /[a-zA-Z]/, '#'}#{i+1} of the #{i+1}nput.\"\n  end\nend", "  lst.map do |item|\n\
    \    odd_counter = 0\n    item.split(\"\").each do |character|\n      if character.to_i.odd?\n\
    \        odd_counter += 1\n      end\n    end\n    \"the number of odd elements\
    \ #{odd_counter}n the str#{odd_counter}ng #{odd_counter} of the #{odd_counter}nput.\"\
    \n  end\nend", "  lst.map do |num|\n    num.to_i.to_s.count('13579')\n  end.zip(lst).map\
    \ do |num, str|\n    new_str = str.split('').map do |char|\n      if char.to_i.to_s\
    \ == char\n        char.tr('0-8', 'i-p')\n      else\n        char\n      end\n\
    \    end.join\n    \"the number of odd elements #{num}n the str#{num}ng #{num}\
    \ of the #{num}nput.\"\n  end\nend", "  new_arr = lst.map{|str| str.count(\"13579\"\
    )}.zip(lst).map do |count, str|\n    \"the number of odd elements #{count}n the\
    \ str#{count}ng #{count} of the #{count}nput.\"\n  end\n  new_arr\nend", "  lst.map\
    \ { |word| word.chars.select { |char| char.to_i.odd? }.size }\nend", "  lst.map\
    \ do |x|\n    \"the number of odd elements #{x.count('13579')}n the str#{x}ng\
    \ #{x} of the #{x}nput.\"\n  end\nend", "  lst.map do |str|\n    \"the number\
    \ of odd elements #{str.count('13579')}n the str#{str}ng #{str} of the #{str}nput.\"\
    \n  end\nend", "  lst.map { |x| \"the number of odd elements #{x.count(\"13579\"\
    )}n the str#{x.count(\"13579\")}ng #{x.count(\"13579\")} of the #{x.count(\"13579\"\
    )}nput.\" }\nend", "  lst.map do |str|\n    odd_count = str.chars.count { |ch|\
    \ ch.to_i.odd? }\n    \"the number of odd elements #{odd_count}n the str#{odd_count}ng\
    \ #{odd_count} of the #{odd_count}nput.\"\n  end\nend", "  lst.map { |x| \"the\
    \ number of odd elements #{x.split('').select{|i| i.to_i.odd?}.length}n the str#{x.length}ng\
    \ #{x.length} of the #{x.length}nput.\" }\nend", "  result = []\n  lst.each do\
    \ |n|\n    count = 0\n    n.split(\"\").each do |digit|\n      count += 1 if digit.to_i.odd?\n\
    \    end\n    result << \"the number of odd elements #{count}n the str#{count}ng\
    \ #{count} of the #{count}nput.\"\n  end\n  result\nend", "  lst.map do |s|\n\
    \    num = s.chars.map(&:to_i).select(&:odd?).size\n    \"the number of odd elements\
    \ #{num}n the str#{num}ng #{num} of the #{num}nput.\"\n  end\nend", "  lst.map\
    \ do |e|\n    str = \"the number of odd elements #{e.count(\"13579\")}n the str#{e.count(\"\
    13579\")}ng #{e.count(\"13579\")} of the #{e.count(\"13579\")}nput.\"\n  end\n\
    end", "  lst.map do |num|\n    num.chars.inject(0) { |sum, num| num.to_i.odd?\
    \ ? sum + 1 : sum }\n  end\nend", "  lst.map { |str| str.count(\"13579\") }.each_with_index.map\
    \ do |num, index|\n    \"the number of odd elements #{num}n the str#{num}ng #{num}\
    \ of the #{num}nput.\"\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
