name: HumanEval_94_skjkasdkd
language: rb
prompt: "# You are given an array of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd.call([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n\
  # >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  # 25\n# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd.call([0,\
  \ 8, 1, 2, 1, 7])\n# 7\ndef skjkasdkd(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n\
  \    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25,\
  \ candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\
  \    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
  \ 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81,\
  \ 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n   \
  \ assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191,\
  \ 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\n\
  end\n"
completions: ["  lst = lst.reject { |x| x == 0 }\n  lst.map { |x| x.prime? ? x : x.prime_division.map(&:first).max\
    \ }.max.to_s.chars.map(&:to_i).sum\nend", "  lst.select { |x| prime?(x) }.max.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  puts lst.reduce(:+)\nend", "\t# Convert array to string.\n\t# Split string\
    \ and convert each element to an integer.\n\t# Find the largest element in an\
    \ array.\n\tlargest = lst.join.split('').map { |e| e.to_i }.max", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "    primes = {}\n    1.upto(lst.max).each\
    \ do |x|\n        1.upto(x/2).each do |y|\n            primes[x] = 1 if x % y\
    \ == 0\n        end\n    end\n    primes = primes.keys\n    lst.map { |x| primes.include?(x)\
    \ ? x : 0 }.select { |x| x > 0 }.max.to_s.split('').map(&:to_i).reduce(:+)\nend",
  "    # good luck\nend", "  lst.map { |num| num.digits.sum }.max.digits.sum\nend",
  "  sum = 0\n  largest = 0\n  lst.each do |number|\n    if primes(number)\n     \
    \ if number > largest\n        largest = number\n      end\n    end\n  end\n \
    \ largest.to_s.split('').each do |digit|\n    sum += digit.to_i\n  end\n  puts\
    \ sum\nend", "  # Your code here...\nend", "    require 'prime'\n    lst.map{|p|\
    \ p.prime? ? p : nil}.compact.max.to_s.split('').map(&:to_i).inject(:+)\nend",
  "  i = lst.find_index(lst.max)\n  return 0 if i.nil?", "    lst.max.to_s.split('').map(&:to_i).sum\n\
    end", "\nend", "  max = lst.max\n  if lst.include?(2) || lst.include?(3) || lst.include?(5)\
    \ || lst.include?(7)\n    (max..1).each do |i|\n      return i.to_s.split('').map(&:to_i).inject(:+)\
    \ if (i.to_s.split('').map(&:to_i).inject(:+) > max) && prime?(i)\n    end\n \
    \ else\n    return max.to_s.split('').map(&:to_i).inject(:+)\n  end\nend", " \
    \   max = lst.max\n    (1..max).each do |i|\n        if (max % i == 0) && i.to_s.split('').map(&:to_i).inject(:+)\
    \ > max.to_s.split('').map(&:to_i).inject(:+)\n            max = i\n        end\n\
    \    end\n    max.to_s.split('').map(&:to_i).inject(:+)\nend", "    primes = []\n\
    \    for number in lst do\n        if is_prime(number)\n            primes.push(number)\n\
    \        end\n    end\n    maximum = 0\n    for prime in primes do\n        if\
    \ prime > maximum\n            maximum = prime\n        end\n    end\n    sum\
    \ = 0\n    while maximum > 0 do\n        sum += maximum % 10\n        maximum\
    \ /= 10\n    end\n    return sum\nend", "    primes = lst.select { |num| prime?(num)\
    \ }\n    largest_prime = primes.max\n    sum_digits(largest_prime)\nend", "  numbers\
    \ = lst.select { |x| x.is_a? Numeric }\n  largest_prime = numbers.sort.reverse.detect\
    \ do |n|\n    (2..Math.sqrt(n)).select { |x| n % x == 0 }.count == 0\n  end\n\
    \  digits = largest_prime.to_s.chars.map(&:to_i)\n  digits.inject(:+)\nend", " \
    \ # code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
