name: HumanEval_94_skjkasdkd
language: rb
prompt: "# You are given an array of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd.call([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n\
  # >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  # 25\n# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd.call([0,\
  \ 8, 1, 2, 1, 7])\n# 7\ndef skjkasdkd(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n\
  \    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25,\
  \ candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\
  \    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
  \ 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81,\
  \ 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n   \
  \ assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191,\
  \ 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\n\
  end\n"
completions: ["  lst = lst.reject { |x| x == 0 }\n  lst.map { |x| x.prime? ? x : x.prime_division.map(&:first).max\
    \ }.max.to_s.chars.map(&:to_i).sum\nend", "  lst.select { |x| prime?(x) }.max.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  puts lst.reduce(:+)\nend", "\t# Convert array to string.\n\t# Split string\
    \ and convert each element to an integer.\n\t# Find the largest element in an\
    \ array.\n\tlargest = lst.join.split('').map { |e| e.to_i }.max", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "    primes = {}\n    1.upto(lst.max).each\
    \ do |x|\n        1.upto(x/2).each do |y|\n            primes[x] = 1 if x % y\
    \ == 0\n        end\n    end\n    primes = primes.keys\n    lst.map { |x| primes.include?(x)\
    \ ? x : 0 }.select { |x| x > 0 }.max.to_s.split('').map(&:to_i).reduce(:+)\nend",
  "    # good luck\nend", "  lst.map { |num| num.digits.sum }.max.digits.sum\nend",
  "  sum = 0\n  largest = 0\n  lst.each do |number|\n    if primes(number)\n     \
    \ if number > largest\n        largest = number\n      end\n    end\n  end\n \
    \ largest.to_s.split('').each do |digit|\n    sum += digit.to_i\n  end\n  puts\
    \ sum\nend", "  # Your code here...\nend", "    require 'prime'\n    lst.map{|p|\
    \ p.prime? ? p : nil}.compact.max.to_s.split('').map(&:to_i).inject(:+)\nend",
  "  i = lst.find_index(lst.max)\n  return 0 if i.nil?", "    lst.max.to_s.split('').map(&:to_i).sum\n\
    end", "\nend", "  max = lst.max\n  if lst.include?(2) || lst.include?(3) || lst.include?(5)\
    \ || lst.include?(7)\n    (max..1).each do |i|\n      return i.to_s.split('').map(&:to_i).inject(:+)\
    \ if (i.to_s.split('').map(&:to_i).inject(:+) > max) && prime?(i)\n    end\n \
    \ else\n    return max.to_s.split('').map(&:to_i).inject(:+)\n  end\nend", " \
    \   max = lst.max\n    (1..max).each do |i|\n        if (max % i == 0) && i.to_s.split('').map(&:to_i).inject(:+)\
    \ > max.to_s.split('').map(&:to_i).inject(:+)\n            max = i\n        end\n\
    \    end\n    max.to_s.split('').map(&:to_i).inject(:+)\nend", "    primes = []\n\
    \    for number in lst do\n        if is_prime(number)\n            primes.push(number)\n\
    \        end\n    end\n    maximum = 0\n    for prime in primes do\n        if\
    \ prime > maximum\n            maximum = prime\n        end\n    end\n    sum\
    \ = 0\n    while maximum > 0 do\n        sum += maximum % 10\n        maximum\
    \ /= 10\n    end\n    return sum\nend", "    primes = lst.select { |num| prime?(num)\
    \ }\n    largest_prime = primes.max\n    sum_digits(largest_prime)\nend", "  numbers\
    \ = lst.select { |x| x.is_a? Numeric }\n  largest_prime = numbers.sort.reverse.detect\
    \ do |n|\n    (2..Math.sqrt(n)).select { |x| n % x == 0 }.count == 0\n  end\n\
    \  digits = largest_prime.to_s.chars.map(&:to_i)\n  digits.inject(:+)\nend", " \
    \ # code here\nend", "    res = 0\n    lst.each do |x|\n        res = x if prime?(x)\n\
    \    end\n    res.to_s.split('').map{|x| x.to_i}.reduce(:+)\nend", "  lst.max.to_s.chars.map(&:to_i).sum\n\
    end", "  result = 0\n  while !lst.empty?\n    num = lst.pop\n    temp = 0\n  \
    \  while num > 0\n      temp += num % 10\n      num /= 10\n    end\n    result\
    \ = temp if temp > result\n  end\n  result\nend", "  primes = lst.select { |num|\
    \ num.prime? }\n  biggest_prime = primes.max\n  digits = biggest_prime.to_s.split('').map(&:to_i)\n\
    \  digits.reduce(:+)\nend", "    return prime_digits_sum(largest_prime(lst))\n\
    end", "\tmax_prime = 0\n\tlst.each do |int|\n\t\tmax_prime = int if is_prime?(int)\
    \ && int > max_prime\n\tend\n\tsum_digits(max_prime)\nend", "\tprime = lst.max\n\
    \ti = 0\n\twhile i < prime do\n\t\tif prime % i == 0 && i > 1\n\t\t\tprime +=\
    \ 1\n\t\tend\n\t\ti += 1\n\tend\n\tsum = 0\n\twhile prime > 0 do\n\t\tsum += prime\
    \ % 10\n\t\tprime /= 10\n\tend\n\tputs sum\nend", "  is_prime = -> num {\n   \
    \ if num == 0\n      return false\n    end\n    (2..num/2).each do |el|\n    \
    \  if num % el == 0\n        return false\n      end\n    end\n    true\n  }\n\
    \  lst = lst.sort { |a, b| b <=> a }\n  lst.each do |el|\n    return el.to_s.split('').map\
    \ { |el| el.to_i }.reduce(:+) if is_prime.call(el)\n  end\nend", "  # your code\
    \ here\nend", "  if lst.length >= 1\n    lst = lst.uniq.sort\n    temp = 1\n \
    \   lst.each { |e| temp = 1 if e == 0 }\n    lst.each { |e| temp = temp * e if\
    \ e > 0 }\n    temp = temp.to_s.chars.map(&:to_i).inject(:+)\n    temp = temp.to_s.chars.map(&:to_i).inject(:+)\
    \ if temp > 9\n    temp\n  else\n    0\n  end\nend", "  # replace this for solution\n\
    \  0\nend", "  lst.max.digits.sum\nend", "  #import math\n  lst = lst.find_all{|x|\
    \ (x > 1) && (x == 2 || x % 2 != 0) && (x == 3 || x % 3 != 0) && (x == 5 || x\
    \ % 5 != 0) && (x == 7 || x % 7 != 0) && (x == 11 || x % 11 != 0) && (x == 13\
    \ || x % 13 != 0) && (x == 17 || x % 17 != 0) && (x == 19 || x % 19 != 0) && (x\
    \ == 23 || x % 23 != 0) && (x == 29 || x % 29 != 0) && (x == 31 || x % 31 != 0)\
    \ && (x == 37 || x % 37 != 0) && (x == 41 || x % 41 != 0) && (x == 43 || x % 43\
    \ != 0) && (x == 47 || x % 47 != 0) && (x == 53 || x % 53 != 0) && (x == 59 ||\
    \ x % 59 != 0) && (x == 61 || x % 61 != 0) && (x == 67 || x % 67 != 0) && (x ==\
    \ 71 || x % 71 != 0) && (x == 73 || x % 73 != 0) && (x == 79 || x % 79 != 0) &&\
    \ (x == 83 || x % 83 != 0) && (x == 89 || x % 89 != 0) && (x == 97 || x % 97 !=\
    \ 0) && (x == 101 || x % 101 != 0) && (x == 103 || x % 103 != 0) && (x == 107\
    \ || x % 107 != 0) && (x == 109 || x % 109 != 0) && (x == 113 || x % 113 != 0)\
    \ && (x == 127 || x % 127 != 0) && (x == 131 || x % 131 != 0) && (x == 137 ||\
    \ x % 137 != 0) && (x == 139 || x % 139 != 0) && (x == 149 || x % 149 != 0) &&\
    \ (x == 151 || x % 151 != 0) && (x == 157 || x % 157 != 0) && (x == 163 || x %\
    \ 163 != 0) && (x == 167 || x % 167 != 0) && (x == 173 || x % 173 != 0) && (x\
    \ == 179 || x", "  sum = 0\n  lst.each do |x|\n    if x.prime?\n      x.to_s.split('').each\
    \ do |num|\n        sum += num.to_i\n      end\n    end\n  end\n  sum\nend", " \
    \ (2...lst.max).each do |num|\n    lst.delete_if { |i| i % num == 0 && i != num\
    \ }\n  end\n  lst.max.to_s.split('').map(&:to_i).inject(:+)\nend", "  p = lst.select{|i|\
    \ is_prime?(i)}.max\n  p.to_s.split('').map(&:to_i).inject(:+)\nend", "    lst.select\
    \ { |x| lst.count(x) > lst.count(x+1) }.last.to_s.split('').map { |x| x.to_i }.inject(:+)\n\
    end", "    lst.select! { |x| x.prime? }\n    lst.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "    # Your code goes here\n    l = lst.max\n    b = 2\n    while b*b <=\
    \ l\n        while (l % b).zero?\n            l /= b\n        end\n        b +=\
    \ 1\n    end\n    res = l\n    while res > 0\n        res = res / 10\n       \
    \ res.to_s.sum\n    end\nend", "  return sum_digits(lst.select { |num| prime?(num)\
    \ }.max)\nend", "  lst.sort[-1].to_s.chars.map(&:to_i).inject(:+)\nend", "\nend",
  "  lst.map!{|x| (Math.sqrt(x).floor)**2 == x ? x : 1}\n  i = 0\n  while i < lst.length\n\
    \    if lst[i] == 1\n      lst.delete_at(i)\n    else\n      i += 1\n    end\n\
    \  end\n  lst.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  lst.select { |n|\
    \ (2..n).select { |d| n % d == 0 }.size == 1 }.max.to_s.split('').map(&:to_i).inject(:+)\n\
    end\nputs \"skjkasdkd\"\nputs skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\nputs skjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\nputs skjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\nputs skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\nputs skjkasdkd([0, 81, 12,\
    \ 3, 1, 21]) == 3\nputs skjkasdkd([0, 8, 1, 2, 1, 7]) == 7", "    #We need to\
    \ find the largest prime number in the list first.\n    #If a number is prime,\
    \ that means it is only divisible by 1 and itself.\n    #Code adapted from https://www.geeksforgeeks.org/prime-numbers/\n\
    \    #We loop through every number in the list and if it is divisible by 1 and\
    \ itself, it is prime.\n    #If it is prime, we store it in a list.\n    #At the\
    \ end of the loop, we take the max value of the list which is the largest prime.\n\
    \    #We then add each digit of the prime number up.\n    #We use the modulo operator\
    \ to extract each digit.", "    lst.keep_if{|x| x.prime?}\n    lst.max.digits.sum\n\
    end", "\nend", "end\n```", "  # your code here\nend", "  prime_digits(find_largest_prime(lst))\n\
    end", "  p = 2\n  f = 0\n  s = []\n  lst.max.times do\n    if (lst.max % p ==\
    \ 0)\n      f = 1\n      f.times do\n        s << p\n        (lst.max / p).times\
    \ do\n          p += 1\n        end\n      end\n    end\n    p += 1\n  end\n \
    \ s.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  num = lst.max\n  p num\n \
    \ (1..num/2).each do |d|\n    num = num / d if num % d == 0\n  end\n  p num\n\
    \  num = num.to_s.split('').map(&:to_i).reduce(:+)\n  p num\nend", "  # if all\
    \ is zero return zero\n  if lst.all?(0)\n    return 0\n  else\n    # otherwise\
    \ just loop over the array and find the highest prime number\n    lst.each do\
    \ |number|\n      # checking if the number is a prime number\n      if is_prime(number)\n\
    \        return number.to_s.split('').map(&:to_i).reduce(:+)\n      end\n    end\n\
    \  end\nend", "  lst = lst.select { |v| v.prime? }\n  lst.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "end\n```", "  lst.select { |i| is_prime?(i) }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  # your code here\nend", "  lst.map(&:to_s).map { |x| x =~ /^[0-9]+$/\
    \ ? x.to_i : x }.select { |x| is_prime?(x) }.max.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  lst.max.digits.sum\nend", "  a = lst.max\n  b = prime?(a)\n  c = a.to_s.chars.map(&:to_i)\n\
    \  d = c.inject(:+)\n  if b == true\n    d\n  else\n    a = lst.max\n    a = lst.delete(a)\n\
    \    skjkasdkd(lst)\n  end\nend", "  # your code\nend\n```", "  lst.select { |num|\
    \ num > 1 && (2..num).none? { |i| num % i == 0 } }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  def its_prime?(a)\n    return false if a <= 1\n    Math.sqrt(a).to_i.downto(2).each\
    \ {|i| return false if a % i == 0}\n    true\n  end\n  prime = lst.max\n  while\
    \ its_prime?(prime) == false\n    prime -= 1\n  end\n  return prime.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "  prime, sum = 0, 0\n  primes(lst.max).each { |i| prime = i if lst.include?(i)\
    \ }\n  prime.to_s.chars.map(&:to_i).each { |i| sum += i }\n  sum\nend", "  # your\
    \ code here\nend", "  largest_prime = 0\n  lst.each do |num|\n    if (num > largest_prime)\n\
    \      prime = true\n      2.upto(num / 2) do |i|\n        if (num % i == 0)\n\
    \          prime = false\n          break\n        end\n      end\n      if prime\n\
    \        largest_prime = num\n      end\n    end\n  end\n  sum = 0\n  while (largest_prime\
    \ != 0)\n    sum += largest_prime % 10\n    largest_prime /= 10\n  end\n  sum\n\
    end", "  sum = 0\n  lst.max.prime_division.each { |n| sum += n[0].to_s.chars.map(&:to_i).inject(:+)\
    \ }\n  sum\nend", "    p = lst.max\n    while p > 1\n        if lst.all? { |n|\
    \ n % p != 0 }\n            return p.to_s.split('').map(&:to_i).reduce(:+)\n \
    \       end\n        p -= 1\n    end\nend", "\tlst.sort! { |x, y| y <=> x }\n\t\
    for i in 0..lst.length-1\n\t\tif is_prime(lst[i]) == true\n\t\t\ta = lst[i].to_s.split('')\n\
    \t\t\tb = 0\n\t\t\tfor j in 0..a.length-1\n\t\t\t\tb += a[j].to_i\n\t\t\tend\n\
    \t\t\treturn b\n\t\tend\n\tend\nend", "  Prime.prime_division(lst.max).max[0].to_s.split('').map(&:to_i).sum\n\
    end", "  lst.select { |x| (2..x-1).to_a.all? { |y| x % y != 0 } }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "    #solution\nend", "  lst.select { |x| x.prime? }.max.digits.reduce(:+)\n\
    end", "  lst.select { |n| Prime.prime?(n) }.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  return lst.select{|x| is_prime?(x)}.max.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "  primes = []\n  lst.each do |num|\n    primes << num if is_prime?(num)\n\
    \  end\n  sum_digits(primes.max)\nend", "  lst.delete(0)\n  primes = []\n  while\
    \ primes.empty?\n    lst.each do |i|\n      primes << i if is_prime?(i)\n    end\n\
    \    lst.max.downto(1) do |i|\n      lst.delete(i)\n    end\n  end\n  sum_digits(primes.max)\n\
    end", "    # ez pz\n    # just find the largest prime and add up the digits\n\
    \    # don't even need to check all primes if we have a smarter strategy\n   \
    \ # fastest way will be to just check if the digit is prime\n    # if it is then\
    \ add it to the total and remove it from the list\n    # if not then remove it\
    \ and go to the next digit\n    # then move to the next digit and check if it\
    \ is prime\n    # rinse and repeat\n    # don't forget to multiply the digits\
    \ together\n    return 0 if lst.empty? # don't forget edge cases\n    total =\
    \ 0\n    while !lst.empty? do\n        digit = lst.max\n        while digit >\
    \ 0 do\n            return total if total > 0 and is_prime?(total)\n         \
    \   total += digit if is_prime?(digit)\n            lst.delete(digit)\n      \
    \      digit -= 1\n        end\n    end\n    total\nend", "  lst.select { |x|\
    \ prime?(x) }.max.to_s.chars.map(&:to_i).inject(:+)\nend", end, "  lst.select\
    \ { |e| (2..e - 1).select { |i| e % i == 0 }.empty? }.max.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "  (lst.max.to_s.chars.map(&:to_i).inject(:+)).to_i\nend", "    lst.delete(0)\n\
    \    primes = []\n    digits = []\n    (1..lst.max).each do |i|\n        primes\
    \ << i if is_prime?(i)\n    end\n    lst.each do |i|\n        if primes.include?(i)\n\
    \            i.to_s.split('').each do |n|\n                digits << n.to_i\n\
    \            end\n        end\n    end\n    return digits.max\nend", "  prime\
    \ = lst.map{|x| return false if x <= 1\n    Math.sqrt(x).to_i.downto(2).each {|i|\
    \ return false if x % i == 0}\n    x}.compact.max\n  p prime.to_s.split('').map{|x|\
    \ x.to_i}.inject(:+)\nend", "  i = 0\n  index = 0\n  s = 0\n  isPrime = true\n\
    \  while i < lst.length\n    if lst[i] > lst[index] && lst[i] > 1\n      index\
    \ = i\n      isPrime = true\n      j = 2\n      while j < lst[index] && isPrime\n\
    \        if lst[index] % j == 0\n          isPrime = false\n        end\n    \
    \    j += 1\n      end\n    end\n    i += 1\n  end\n  if isPrime\n    lst[index].to_s.split('').each\
    \ { |x| s += x.to_i }\n  else\n    0\n  end\nend", "  lst.delete(0)\n  loop do\n\
    \    break if lst.none? { |e| e % 2 == 0 }", "  lst.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  sum_of_digits = 0\n  lst.each do |num|\n    if is_prime?(num)\n     \
    \ digits = num.to_s.split('')\n      digits.each do |digit|\n        sum_of_digits\
    \ += digit.to_i\n      end\n    end\n  end\n  sum_of_digits\nend", "  primes(lst.max).to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # put your code\
    \ here\nend", "  prime = lst.max\n  while !is_prime?(prime)\n    prime -= 1\n\
    \  end\n  digits = prime.to_s.split('')\n  sum = 0\n  digits.each do |digit|\n\
    \    sum += digit.to_i\n  end\n  sum\nend", "  lst.map { |e| e.digits.reduce(:+)\
    \ }.max\nend", "  lst.select { |num| num.is_a? Integer and num > 1 }.uniq.sort.reverse.select\
    \ { |num| (2..num - 1).all? { |n| num % n != 0 } }.first.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  prime = lst.select\
    \ { |i| prime?(i) }.max\n  prime.to_s.chars.map(&:to_i).reduce(:+)\nend", "\t\
    lst.keep_if{|x| x.prime?}.max.digits.sum\nend", "  lst.delete(0)\n  lst.delete(1)\n\
    \  lst.delete(2)\n  lst.delete(3)\n  primes = lst.select { |num| prime?(num) }\n\
    \  lrg_prm = primes.max\n  lrg_prm.to_s.split('').map(&:to_i).reduce(:+)\nend",
  "  lst.select { |n| n.prime? }.max.to_s.split('').map(&:to_i).reduce(:+)\nend",
  "\tmax = lst.max\n\tif max%2==0 || max%3==0 || max%5==0 || max%7==0\n\t\tmax=lst.sort.reverse[1]\n\
    \tend\n\tsum=0\n\tmax.to_s.split('').each do |x|\n\t\tsum+=x.to_i\n\tend\n\treturn\
    \ sum\nend\nputs skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3])\nputs skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1,\
    \ 2, 1, 2, 4, 2, 5, 1])\nputs skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\nputs skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\nputs skjkasdkd([0, 81, 12, 3, 1, 21])\nputs skjkasdkd([0,\
    \ 8, 1, 2, 1, 7])", "  wtf = lst.max { |a, b| a <=> b }.to_s.chars.inject(0) {\
    \ |s, c| s + c.to_i }\nend", "  lst.sort.uniq.select { |x| x.prime? }.map(&:to_s).join.chars.map(&:to_i).inject(:+)\n\
    end", "\tsum = 0\n\tres = 0\n\tlst.each do |x|\n\t\tif lst.max.prime?\n\t\t\t\
    res = lst.max\n\t\t\tlst.max.to_s.split('').each do |x|\n\t\t\t\tsum += x.to_i\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn sum\nend", "\tlst.sort.select{|x| x.prime?}.last.digits.sum\n\
    end", "  # your code here\nend", "  # Write your code here.\nend", "  def primes(n)\n\
    \    s = (0..n).to_a\n    s[0] = s[1] = nil\n    s.each do |p|\n      next unless\
    \ p\n      break if p * p > n\n      (p*p).step(n, p) { |m| s[m] = nil }\n   \
    \ end\n    s.compact\n  end\n  sum = 0\n  a = lst.max\n  primes(a).select { |x|\
    \ x == a }.each { |x| sum += x.to_s.chars.map(&:to_i).reduce(:+) }\n  sum\nend",
  "\t# max_prime = 0\n\t# for i in lst\n\t# \tif i.prime? && i > max_prime\n\t# \t\
    \tmax_prime = i\n\t# \tend\n\t# end\n\tmax_prime = lst.select{|a| a.prime?}.max\n\
    \tmax_prime.to_s.split('').map{|a| a.to_i}.reduce(:+)\nend", "  # fint the largest\
    \ prime number and return the sum of its digits\nend", "  lst.max.to_s.chars.map(&:to_i).sum\n\
    end", "    max = 0\n    lst.each do |x|\n        if max < x && prime?(x)\n   \
    \         max = x\n        end\n    end\n    return sum_of_digits(max)\nend",
  "\t# your code\nend", "  lst.select { |n| prime?(n) }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "\tlarge_prime_val = lst.max\n\tlargest_prime_val_sum = 0\n\twhile large_prime_val\
    \ > 0 do\n\t\tlargest_prime_val_sum += large_prime_val % 10\n\t\tlarge_prime_val\
    \ /= 10\n\tend\n\treturn largest_prime_val_sum\nend", "\tprimes = []\n\tlst.each\
    \ { |n| primes << n if n.prime? }\n\tlargest = primes.max\n\tlargest.to_s.split('').map\
    \ { |n| n.to_i }.inject(:+)\nend", "\tprimes = [1]\n\tlst.each do |num|\n\t\t\
    primes << num if is_prime?(num) && num.digits.sum > primes.last.digits.sum\n\t\
    end\n\tprimes.last.digits.sum\nend", "    return 0 if lst.empty?\n    lst = lst.sort.reverse\n\
    \    arr = lst.map do |el|\n        el = el.to_s.split('').map(&:to_i)\n    end\n\
    \    prime = []\n    arr.each do |el|\n        el.each do |num|\n            prime\
    \ << num if prime?(num)\n        end\n    end\n    prime.sort.reverse[0] + prime.sort.reverse[1]\n\
    end", "  lst.select { |item| item.prime? }.max.digits.reduce(:+)\nend", "  # SOLUTION:\n\
    \  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "  primes =\
    \ lst.select { |x| is_prime?(x) }\n  lg_prime = primes.max\n  lg_prime.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  sum_digits(largest_prime(lst))\nend", end, "  lst.max.to_s.split('').map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  s = 0\n  lst.sort.each { |e| e.prime? &&\
    \ s += e.digits.inject(:+) }\n  s\nend\np skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\np skjkasdkd([1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\np skjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\np skjkasdkd([0, 724, 32, 71,\
    \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\np skjkasdkd([0, 81, 12, 3, 1, 21])\np skjkasdkd([0,\
    \ 8, 1, 2, 1, 7])", "  lst.sort!\n  ind = lst.length - 1\n  while true\n    if\
    \ lst[ind] == 0\n      ind -= 1\n      next\n    end\n    while true\n      break\
    \ if lst[ind] == 1\n      if lst[ind] % 2 == 0\n        lst[ind] /= 2\n      \
    \  next\n      end\n      if lst[ind] % 3 == 0\n        lst[ind] /= 3\n      \
    \  next\n      end\n      if lst[ind] % 5 == 0\n        lst[ind] /= 5\n      \
    \  next\n      end\n      if lst[ind] % 7 == 0\n        lst[ind] /= 7\n      \
    \  next\n      end\n      if lst[ind] % 11 == 0\n        lst[ind] /= 11\n    \
    \    next\n      end\n      if lst[ind] % 13 == 0\n        lst[ind] /= 13\n  \
    \      next\n      end\n      if lst[ind] % 17 == 0\n        lst[ind] /= 17\n\
    \        next\n      end\n      if lst[ind] % 19 == 0\n        lst[ind] /= 19\n\
    \        next\n      end\n      if lst[ind] % 23 == 0\n        lst[ind] /= 23\n\
    \        next\n      end\n      if lst[ind] % 29 == 0\n        lst[ind] /= 29\n\
    \        next\n      end\n      if lst[ind] % 31 == 0\n        lst[ind] /= 31\n\
    \        next\n      end\n      if lst[ind] % 37 == 0\n        lst[ind] /= 37\n\
    \        next\n      end\n      if lst[ind] % 41 == 0\n        lst[ind] /= 41\n\
    \        next\n      end\n      if lst[ind] % 43 == 0\n        lst[ind] /= 43\n\
    \        next\n      end\n      if lst[ind] % 47 == 0\n        lst[ind] /= 47\n\
    \        next\n      end\n      if lst[ind] % 53 == 0\n        lst[ind] /= 53\n\
    \        next\n      end\n      if lst[ind", "  puts lst.map{|n| n.to_s.scan(/\\\
    d/).inject(0){|s, n| s+n.to_i}}.max\nend", "  largest = 0\n  lst.each do |n|\n\
    \    next if n == 0 || n == 1\n    largest = n if n > largest && n.prime?\n  end\n\
    \  largest.digits.sum\nend", "  # Is there a list?\n  if lst.is_a?(Array)\n  \
    \  # Is the length of the list greater than 0?\n    if lst.length > 0\n      #\
    \ Get a list of primes from the input list.\n      new_lst = []\n      lst.each\
    \ do |element|\n        # Exclude non-integer elements.\n        if element.is_a?(Integer)\n\
    \          # Exclude negative numbers, 0, and 1.\n          if element > 1\n \
    \           # Get only prime numbers.\n            if is_prime(element)\n    \
    \          new_lst.push(element)\n            end\n          end\n        end\n\
    \      end\n      # Is there a list of primes?\n      if new_lst.length > 0\n\
    \        # Find the largest prime in the list.\n        biggest_prime = new_lst.max\n\
    \        # Sum the digits of the largest prime.\n        sum = 0\n        biggest_prime.to_s.each_char\
    \ do |character|\n          sum += character.to_i\n        end\n        return\
    \ sum\n      else\n        return 'no primes were found'\n      end\n    else\n\
    \      return 'there is no list'\n    end\n  else\n    return 'is that a list?'\n\
    \  end\nend", "    return 0 if lst.empty?\n    lst.uniq.map { |n| is_prime(n)\
    \ ? n : 1 }.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.select { |i|\
    \ prime?(i) }.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  n = lst.max\n  n\
    \ = n.to_s.split('').map(&:to_i).reduce(:+)\n  n += 1 if n.even?\n  n\nend", " \
    \ #your code here\nend", "  lst.map { |e| i = 2; i += 1 while (e % i).zero? ||\
    \ e == i; e = i }.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  # put your\
    \ solution here\nend", "  \nend", "  # define largest prime number and sum of\
    \ its digits\n  return lst.max.digits.sum if lst.max.prime?\n  # if the largest\
    \ number is not prime then we need to find the largest prime number\n  numbers\
    \ = []\n  # iterate over the array to find the largest prime number\n  lst.each\
    \ do |n|\n    numbers << n.digits.sum if n.prime?\n  end\n  # return the sum of\
    \ the digits of the largest prime number\n  numbers.max\nend", "  # write your\
    \ code here\nend", "\tlst.sort.reverse.each do |i|\n\t\tsum = i.to_s.split('').inject{|sum,x|\
    \ sum.to_i + x.to_i }\n\t\treturn sum if i.prime?\n\tend\nend", "\tlst.sort!\n\
    \tmax = lst.pop\n\tsum = 0\n\tif (max == 0)\n\t\treturn 0\n\tend\n\twhile(max\
    \ > 0)\n\t\tsum += max % 10\n\t\tmax /= 10\n\tend\n\treturn sum\nend", "  lst.sort!.reverse!\n\
    \  lst.delete_if { |num| num < 2 }\n  lst.delete_if { |num| num != 2 && num %\
    \ 2 == 0 }\n  lst.delete_if { |num| num != 3 && num % 3 == 0 }\n  lst.delete_if\
    \ { |num| num != 5 && num % 5 == 0 }\n  lst.delete_if { |num| num != 7 && num\
    \ % 7 == 0 }\n  lst.delete_if { |num| num != 11 && num % 11 == 0 }\n  lst.delete_if\
    \ { |num| num != 13 && num % 13 == 0 }\n  lst.delete_if { |num| num != 17 && num\
    \ % 17 == 0 }\n  lst.delete_if { |num| num != 19 && num % 19 == 0 }\n  lst.delete_if\
    \ { |num| num != 23 && num % 23 == 0 }\n  lst.delete_if { |num| num != 29 && num\
    \ % 29 == 0 }\n  lst.delete_if { |num| num != 31 && num % 31 == 0 }\n  lst.delete_if\
    \ { |num| num != 37 && num % 37 == 0 }\n  lst.delete_if { |num| num != 41 && num\
    \ % 41 == 0 }\n  lst.delete_if { |num| num != 43 && num % 43 == 0 }\n  lst.delete_if\
    \ { |num| num != 47 && num % 47 == 0 }\n  lst.delete_if { |num| num != 53 && num\
    \ % 53 == 0 }\n  lst.delete_if { |num| num != 59 && num % 59 == 0 }\n  lst.delete_if\
    \ { |num| num != 61 && num % 61 == 0 }\n  lst.delete_if { |num| num != 67 && num\
    \ % 67 == 0 }\n  lst.delete_if { |num| num != 71 && num % 71 == 0 }\n  lst.delete_if\
    \ { |num| num != 73 && num % 73 == 0 }\n  lst.delete_if { |num| num != 79 && num\
    \ % 79 == 0 }\n  l", "  primes = []\n  lst.each do |num|\n    if prime?(num)\n\
    \      primes << num\n    end\n  end\n  largest_prime = primes.max\n  sum_digits(largest_prime)\n\
    end", "\td = lst.each_with_object(Hash.new(0)) { |name,counts| counts[name] +=\
    \ 1 }\n\td = Hash[d.sort_by{|k, v| v}.reverse]\n\tcount = 0\n\td.each do |k, v|\n\
    \t\tif (k.prime?)\n\t\t\tcount = k\n\t\t\tbreak\n\t\tend\n\tend\n\tcount.to_s.split('').map{|c|\
    \ c.to_i}.inject(:+)\nend", "\tlst = lst.select { |x| x.prime? }\n\tlst.max.to_s.split('').map\
    \ { |s| s.to_i }.reduce(:+)\nend", "  lst.select { |x| x.prime? }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "    lst\n        .map{|x| find_primes(x)}\n        .reject{|x| x == []}\n\
    \        .flatten\n        .sort\n        .last\n        .to_s\n        .chars\n\
    \        .map(&:to_i)\n        .reduce(:+)\nend", "  lst.select{|x| x.prime?}.max.digits.sum\n\
    end", "    # Your code here\nend", "  n = lst.max\n  n = n.to_s.split('').map(&:to_i).inject(:+)\n\
    \  n = n.to_s.split('').map(&:to_i).inject(:+) until prime?(n)\n  n\nend", " \
    \ puts lst.to_s\n  largest_prime = 1\n  lst.each do |x|\n    largest_prime = x\
    \ if is_prime?(x) and x > largest_prime\n  end\n  lst.join(\"\").gsub(/[^#{largest_prime}]/,\
    \ \"\").split(\"\").map(&:to_i).reduce(:+)\nend", "  lst.sort.uniq.last.digits.sum\n\
    end", "  largest_prime = 0\n  lst.each do |item|\n    if is_prime?(item) && item\
    \ > largest_prime\n      largest_prime = item\n    end\n  end\n  largest_prime.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "  lst.select{|x| x if (1..x).select{|n| x % n == 0}.size == 2 }.max.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "  max = lst.max\n  sum = 0\n  if max == 1 or max == 2\n    return 2\n \
    \ elsif max == 0\n    return 2\n  else\n    while max != 0\n      sum += max %\
    \ 10\n      max /= 10\n    end\n    skjkasdkd([0, sum])\n  end\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).reduce(:+) if x == x.to_s.split('').map(&:to_i).reduce(:+)\
    \ && is_prime?(x)}.compact.max.to_i\nend", "  lst = lst.max.digits.sum\nend",
  end, "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  p [\n    lst.select\
    \ { |e| e.prime? }.max.to_s.split('').map(&:to_i).reduce(:+),\n    'skjkasdkd',\n\
    \    lst\n  ]\nend", "  lst.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "\nend",
  "  max_prime = 0\n  lst.each do |item|\n    result = true\n    if item == 1\n  \
    \    result = false\n    end\n    (2..item/2).each do |i|\n      if item % i ==\
    \ 0\n        result = false\n      end\n    end\n    if result && item > max_prime\n\
    \      max_prime = item\n    end\n  end\n  str = max_prime.to_s\n  sum = 0\n \
    \ str.split('').each do |i|\n    sum += i.to_i\n  end\n  puts sum\nend", "   \
    \ lst.sort! { |a, b| b <=> a }\n    lst.each do |num|\n        next if num < 2\n\
    \        return sum_of_digits(num) if lst.index(num) == lst.index(num - 1)\n \
    \   end\nend", "  # your code here\nend", "  lst.map!{|e|e.abs}\n  lst.sort!\n\
    \  num = lst.last\n  prim = 0\n  for i in 2..num\n    if num % i == 0\n      for\
    \ j in 2..i\n        if i % j == 0\n          prim += 1\n        end\n      end\n\
    \      if prim == 1\n        num = i\n      end\n      prim = 0\n    end\n  end\n\
    \  res = 0\n  while num > 0\n    res += num % 10\n    num /= 10\n  end\n  puts\
    \ res\nend", "    max = 0\n    lst.each do |i|\n        if prime?(i)\n       \
    \     if i > max\n                max = i\n            end\n        end\n    end\n\
    \    max_sum = 0\n    max.to_s.split(\"\").each do |i|\n        max_sum += i.to_i\n\
    \    end\n    max_sum\nend", "  primes = lst.select{|x| x.prime? }\n  (primes.max).to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select{|x| x.prime?}.max.digits.sum\nend", "  sum = 0\n  primes =\
    \ []\n  lst.each do |num|\n    if num.prime?\n      primes << num\n    end\n \
    \ end\n  primes.sort!\n  sum = primes.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  sum\nend", "\nend", "  lst.select { |i| (2..i-1).select { |k| i % k == 0 }.count\
    \ == 0 && i != 1 }.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  require 'prime'\n\
    \  lst.select(&:prime?).max.to_s.chars.map(&:to_i).sum\nend", "  # Your code here\n\
    end", "  #your code here\nend", end, "  require 'prime'\n  lst.max.prime_division.flatten.max.to_s.chars.map(&:to_i).sum\n\
    end", "    lst.select { |num| num.prime? }.max.digits.sum\nend", "  primes = []\n\
    \  lst.each do |x|\n    if prime?(x)\n      primes << x\n    end\n  end\n  primes.sort!\n\
    \  primes.last.to_s.split('').map(&:to_i).inject(:+)\nend", "  lst.select { |e|\
    \ e.prime? }.max.digits.sum\nend", "  # #lst = lst.sort.reverse\n  lst_new = []\n\
    \  lst.each do |i|\n    if i > 1\n      lst_new << i\n    end\n  end\n  p lst_new\n\
    \  lst_new = lst_new.sort.reverse\n  if lst_new.size == 0\n    return 0\n  else\n\
    \    first_pr = prime(lst_new[0])\n    return count_digits(first_pr)\n  end\n\
    end", "  primes = []\n  lst.each do |n|\n    if is_prime?(n)\n      primes <<\
    \ n\n    end\n  end\n  sum_digits(primes.max)\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "\tlst.uniq.sort { |x, y| y % x }.select { |x| lst.count(x)\
    \ > 1 }[0].to_s.chars.map(&:to_i).reduce(:+)\nend", "\tlst.delete(0)\n\tlst.delete(1)\n\
    \tlst.sort!\n\tlst.reverse!\n\tstring = lst.join('')\n\tint = string.to_i\n\t\
    array = []\n\twhile int > 0\n\t\tarray << int % 10\n\t\tint /= 10\n\tend\n\tarray.sort!\n\
    \tarray.reverse!\n\tprime_array = []\n\tarray.each do |x|\n\t\tif x % 2 != 0\n\
    \t\t\tprime_array << x\n\t\tend\n\tend\n\tprime_array.delete(1)\n\tputs prime_array.inject(:+)\n\
    end", "  lst.sort.select{|x| x.prime?}.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "\tsum = 0\n\tlst.sort.uniq.each do |x|\n\t\tif(isPrime(x))\n\t\t\tsum +=\
    \ x.to_s.split('').map(&:to_i).reduce(:+)\n\t\tend\n\tend\n\treturn sum\nend",
  "  lst.find_all { |v| v > 1 && v == 2 || v > 2 && (3..v - 1).find { |x| v % x ==\
    \ 0 }.nil? }.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  p = lst.select {\
    \ |e| e.prime? }.max\n  return 0 if p.nil?\n  p.digits.sum\nend", "  lst.sort.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  i = 0\n  lst.each do |el|\n    if prime?(el)\n      if arr_sum(el.to_s.split('').map(&:to_i))\
    \ > i\n        i = arr_sum(el.to_s.split('').map(&:to_i))\n      end\n    end\n\
    \  end\n  i\nend", "  return sum(digits(lst.select{|x| primes.include?(x)}.max()))\n\
    end", "  if lst.select{|x| x.to_s.length == 5}[0]\n    max = lst.select{|x| x.to_s.length\
    \ == 5}[0]\n  else\n    max = lst.max\n  end\n  # print max.to_s.scan(/./).map(&:to_i).inject(:+)\n\
    \  return max.to_s.scan(/./).map(&:to_i).inject(:+)\nend", "  p=0\n  for i in\
    \ 2..100 do\n    for j in 2..100 do\n      if i % j == 0\n        p = p + 1\n\
    \      end\n    end\n    if p == 1\n      lst.sort!\n      a = lst.pop\n     \
    \ j = a\n      sum = 0\n      while a > 0\n        sum = sum + a % 10\n      \
    \  a = a / 10\n      end\n      p sum\n    end\n    p = 0\n  end\nend\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])", "  primes = lst.select{|e| e.prime?}.select{|e| e > 1}.select{|e|\
    \ e < 100}.sort.uniq\n  if primes.empty?\n    return 0\n  else\n    p primes.max\n\
    \    primes.max.to_s.split('').map(&:to_i).inject(:+)\n  end\nend", "  prime_numbers\
    \ = []\n  lst.each do |i|\n    prime_numbers << i if i.prime?\n  end\n  prime_numbers.last.digits.sum\n\
    end", "\nend", "  max = lst.max\n  primes = []\n  (1..max).each do |i|\n    if\
    \ prime?(i)\n      primes << i\n    end\n  end\n  primes.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  prime_numbers = []\n  lst.each do |num|\n    if num == 0 || num == 1\n\
    \      next\n    end\n    prime = true\n    2.upto(num-1) do |i|\n      if num\
    \ % i == 0\n        prime = false\n        break\n      end\n    end\n    if prime\n\
    \      prime_numbers << num\n    end\n  end\n  largest_prime = prime_numbers.max\n\
    \  num_array = largest_prime.to_s.split('')\n  num_array.reduce(0) { |sum, num|\
    \ sum + num.to_i }\nend", "  # your code here\nend", "  lst.map { |e| prime?(e)\
    \ ? e : 0 }.select { |e| e != 0 }.max.to_s.chars.map(&:to_i).reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
