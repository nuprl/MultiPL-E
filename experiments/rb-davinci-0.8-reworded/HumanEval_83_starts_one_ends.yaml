name: HumanEval_83_starts_one_ends
language: rb
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\ndef starts_one_ends(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n\
  \    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n\
  \    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n\
  \    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n\
  \  end\nend\n"
completions: ["  return 1 if n == 1\n  return 10 if n == 2\n  return 9 * 10 ** (n\
    \ - 2) + (starts_one_ends(n - 1) - starts_one_ends(n - 2))\nend", "  if n == 1\n\
    \    return 2\n  else\n    return (10 ** (n - 1)) + starts_one_ends(n - 1)\n \
    \ end\nend", "  if n <= 1\n    return 0\n  end\n  count = 0\n  (1..n).each do\
    \ |m|\n    if m == 1\n      count += 1\n    else\n      count += 9 * (10 ** (m\
    \ - 2))\n    end\n  end\n  count\nend", "\treturn 0 if n == 0\n\treturn 1 if n\
    \ == 1\n\treturn 10 * (starts_one_ends(n-1) + starts_one_ends(n-2))\nend", " \
    \ return n if n == 1\n  10 ** (n - 1) + 9 * 10 ** (n - 2) + starts_one_ends(n\
    \ - 1)\nend", "\tn == 1 ? 2 : (10 ** (n - 1)) + (10 ** (n - 2))\nend", "  res\
    \ = 10 ** (n - 1)\n  res + 9 * (10 ** (n - 2))\nend", "\t(n <= 1) ? 1 : (10**(n-1))\
    \ + starts_one_ends(n-1)\nend", "  return 1 if n <= 1\n  return 10 if n == 2\n\
    \  return 10 + 9*(n-2)\nend", "  return 0 if n < 1\n  return 1 if n == 1\n  return\
    \ 1 if n == 2\n  return 2 if n == 3\n  return 3 if n == 4\n  return 5 if n ==\
    \ 5\n  starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  return 1 if n\
    \ == 1\n  return 10 if n == 2\n  return (10 ** (n - 1)) + 9 if n == 3\n  (10 **\
    \ (n - 1)) + 9 * (n - 1)\nend", "    return 0 if n <= 0\n    return starts_one_ends(n\
    \ - 1) + pow10(n - 1)\nend", "  # Your code here\nend", "  (1..n).sum { |digits|\
    \ 9 * 9**(digits - 2) }\nend", "  (10**(n-1)) + (10**(n-1))*9 - (10**(n-2))\n\
    end", "  return 1 if n == 1\n  return 10 if n == 2\n  return starts_one_ends(n\
    \ - 1) + (10 ** (n - 2))\nend", "  nums = []\n  (1..9).each do |i|\n    nums +=\
    \ (1..9).map { |j| i*10**(n-1) + j }\n  end\n  nums.length\nend", "  if n == 1\n\
    \    return 2\n  end\n  return 10 ** (n - 1) + starts_one_ends(n - 1)\nend", " \
    \ count = 0\n  for i in 1..n do\n    count += 10**(i-1)\n  end\n  count * 2\n\
    end", "  if n == 1\n    return 2\n  end\n  # res = 0\n  # n.times do |i|\n  #\
    \   (1..(10 ** i - 1)).each do |v|\n  #     if v.to_s.end_with?(\"1\")\n  #  \
    \     res += 1\n  #     end\n  #   end\n  # end\n  # res\n  # \u662F\u4E0D\u662F\
    \u53EF\u4EE5\u548C\u4E0A\u4E00\u9898\u7684\u7ED3\u679C\u6C42\u548C\uFF1F\n  return\
    \ starts_one_ends(n - 1) + count_one(n)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
