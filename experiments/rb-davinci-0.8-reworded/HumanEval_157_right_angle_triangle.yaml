name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  a, b, c = [a, b, c].sort\n  a**2 + b**2 == c**2\nend", "  if a ==\
    \ b && b == c\n    return false\n  elsif c*c == a*a + b*b\n    return true\n \
    \ elsif a*a == b*b + c*c\n    return true\n  elsif b*b == a*a + c*c\n    return\
    \ true\n  else\n    return false\n  end\nend", "  return false if a + b <= c ||\
    \ a + c <= b || b + c <= a\n  max = [a, b, c].max\n  max == (a**2 + b**2 + c**2\
    \ - 2 * max**2)**0.5\nend", "  # ...\nend", "  # if we square each side, then\
    \ one side will equal the sum of the squares of\n  # the other two sides\n  sides\
    \ = [a, b, c].map { |side| side ** 2 }\n  sides.include?(sides.reduce(:+))\nend",
  "  a, b, c = [a, b, c].sort\n  a ** 2 + b ** 2 == c ** 2\nend", "  a, b, c = [a,\
    \ b, c].sort\n  a ** 2 + b ** 2 == c ** 2\nend", "  # your code goes here\nend",
  "  # if a > b && a > c\n  #   a ** 2 == b ** 2 + c ** 2\n  # elsif b > a && b >\
    \ c\n  #   b ** 2 == a ** 2 + c ** 2\n  # else\n  #   c ** 2 == a ** 2 + b **\
    \ 2\n  # end\n  # a, b, c = [a, b, c].sort.reverse\n  # c ** 2 == a ** 2 + b **\
    \ 2\n  # (a, b, c) = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # (a, b,\
    \ c) = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # (a, b, c) = [a, b, c].sort\n\
    \  # a ** 2 + b ** 2 == c ** 2\n  # c, b, a = [a, b, c].sort\n  # a ** 2 + b **\
    \ 2 == c ** 2\n  # c, b, a = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n \
    \ # [a, b, c].sort\n  a, b, c = [a, b, c].sort\n  a ** 2 + b ** 2 == c ** 2\n\
    end", "  # write your code here\nend", "  sides = [a, b, c].sort\n  hypotenuse\
    \ = sides.pop\n  cathet_one = sides.pop\n  cathet_two = sides.pop\n  return hypotenuse**2\
    \ == cathet_one**2 + cathet_two**2\nend", "  #TODO: implement your code here\n\
    end", "  [a, b, c].sort!\n  a ** 2 + b ** 2 == c ** 2\nend", "  ([a, b, c].max)**2\
    \ == a**2 + b**2 + c**2 - ([a, b, c].max)**2\nend", "  # write your code here\n\
    end", "    if (Math.hypot(a, b) == c.to_f) || (Math.hypot(a, c) == b.to_f) ||\
    \ (Math.hypot(b, c) == a.to_f)\n        return true\n    else\n        return\
    \ false\n    end\nend", "  long = [a, b, c].max\n  long == Math.sqrt( (a**2 +\
    \ b**2 + c**2) - 2 * long**2 )\nend", "\tsides = [a, b, c].sort\n\thypotenuse\
    \ = sides[2]\n\tsides.delete_at(2)\n\tsides[0]**2 + sides[1]**2 == hypotenuse**2\n\
    end", "  # implement right_angle_triangle function here\nend", "\td = [a, b, c].sort\n\
    \tMath.sqrt(d[0]**2 + d[1]**2) == d[2]\nend", "  # your code here\nend", "  raise\
    \ NotImplementedError\nend", "    x, y, z = [a, b, c].sort\n    return x**2 +\
    \ y**2 == z**2\nend", "\t# TODO\nend", "  # TODO: Implement this method\nend",
  "  a**2 + b**2 == c**2 ? true : false\nend", "  raise NotImplementedError\nend",
  "  puts \"right_angle_triangle(#{a}, #{b}, #{c})\"\n  # your code goes here\nend",
  "  raise NotImplementedError\nend", "  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2\
    \ == sides[2]**2\nend", "  if a == c || b == c || a == b\n    false\n  elsif (a\
    \ + b) <= c || (a + c) <= b || (b + c) <= a\n    false\n  elsif (a**2 + b**2)\
    \ == c**2 || (a**2 + c**2) == b**2 || (b**2 + c**2) == a**2\n    true\n  else\n\
    \    false\n  end\nend", "  return (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c\
    \ ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2)\nend", "  # your code here\n\
    end", "  ((a**2 + b**2) == c**2) || ((b**2 + c**2) == a**2) || ((a**2 + c**2)\
    \ == b**2)\nend", "  if c**2 == a**2 + b**2 || a**2 == b**2 + c**2 || b**2 ==\
    \ a**2 + c**2\n    true\n  else\n    false\n  end\nend", "  m = [a, b, c].max\n\
    \  a * a + b * b == m * m\nend", "  # TODO\nend", "  if ((a**2)+(b**2) == (c**2))\n\
    \    puts 'true'\n  else\n    puts 'false'\n  end\nend", "  if (a**2) + (b**2)\
    \ == (c**2)\n    return true\n  else\n    return false\n  end\nend", "  unless\
    \ a.is_a?(Numeric) && b.is_a?(Numeric) && c.is_a?(Numeric)\n    return false\n\
    \  end\n  max_side = [a, b, c].max\n  [a, b, c].inject(0) { |acc, side| acc +\
    \ (max_side ** 2 - side ** 2) } == max_side ** 2\nend", "  # TODO: write your\
    \ code here\nend", "  if a*a == b*b + c*c\n    return true\n  elsif b*b == a*a\
    \ + c*c\n    return true\n  elsif c*c == a*a + b*b\n    return true\n  else\n\
    \    return false\n  end\nend", "  [a, b, c].max**2 == [a, b, c].min**2 + ([a,\
    \ b, c] - [a, b, c].max).first**2\nend", "  # Add your code here\nend", "  [a,\
    \ b, c].combination(2).any? { |x, y| (x**2 + y**2) == (c**2) }\nend", "  # INSERT\
    \ YOUR CODE HERE\nend", "  a2 = a ** 2\n  b2 = b ** 2\n  c2 = c ** 2\n  a2 + b2\
    \ == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend", "  # Your code here\nend", "\t\
    # where a is the hypotenuse\n\ta = a.to_f\n\tb = b.to_f\n\tc = c.to_f\n\treturn\
    \ (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend",
  "  # your code goes here\nend", end, '  # ', "  # Your code goes here\nend", " \
    \ # TODO\nend", "  a, b, c = [a, b, c].sort\n  c**2 == a**2 + b**2\nend", "  #\
    \ Write your code here\nend", "  a**2 + b**2 == c**2\nend", "  return (a**2 +\
    \ b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend", "  [a,\
    \ b, c].sort!\n  return [a, b, c].inject(:+) - (c ** 2) == (a ** 2)\nend", " \
    \ hyp = [a, b, c].max\n  [a, b, c].reject { |n| n == hyp }.reduce(:+) == hyp\n\
    end\nputs '########## Q8 ##########'\np right_angle_triangle(3, 4, 5)\np right_angle_triangle(1,\
    \ 2, 3)", "  edges = [a, b, c].sort\n  (edges[0] ** 2) + (edges[1] ** 2) == (edges[2]\
    \ ** 2)\nend", "  return ((a ** 2) + (b ** 2)) == (c ** 2)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  [*a, b, c].max**2 == [a, b, c].map\
    \ { |i| i**2 }.inject(:+)\nend", "  [a, b, c].map(&:to_f).sort!\n  a**2 + b**2\
    \ == c**2\nend", "  # Your code here\nend", "  # ...\nend", "    arr = [a, b,\
    \ c].sort\n    c = arr[2]\n    b = arr[1]\n    a = arr[0]\n    c ** 2 == b **\
    \ 2 + a ** 2\nend", "  arr = [a, b, c].sort\n  c**2 == a**2 + b**2\nend", "  [a,\
    \ b, c].sort.last**2 == [a, b, c].sort[0]**2 + [a, b, c].sort[1]**2\nend", " \
    \ a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\nend", " \
    \ # Hint: Use Pythagorean theorem, x**2 + y**2 = z**2, to check if a triangle\
    \ is right angled.\nend", "  angle = [a, b, c].max\n  sides = [a, b, c].reject\
    \ { |n| n == angle }\n  angle**2 == sides.reduce(:+)\nend", "  # Fill in your\
    \ code here\nend", "  hypo = [a, b, c].max\n  [a, b, c].each do |side|\n    return\
    \ false if side.zero?\n  end\n  return false if (a + b + c - hypo).zero?\n  return\
    \ false if hypo >= a + b", "  #YOUR CODE HERE\nend", "  r = a**2 + b**2 == c**2\n\
    \  r\nend", "  # TODO\nend", "  # TODO: implement me\nend", "  hypotenuse = [a,\
    \ b, c].max\n  [a, b, c].include?(hypotenuse) ? false : true if ([a, b, c].count(hypotenuse)\
    \ > 1)\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    end", end, "  # TODO: write your code here\nend", "  (a**2 + b**2 == c**2) ||\
    \ (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend", "  # Your code goes here\n\
    end", "  sorted = [a, b, c].sort\n  sorted[0] ** 2 + sorted[1] ** 2 == sorted[2]\
    \ ** 2\nend", "  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2\
    \ == a**2)\nend", "  [a, b, c].sort!\n  a**2 + b**2 == c**2\nend", "  # + your\
    \ code here\nend", "  a, b, c = [a, b, c].sort\n  c**2 == a**2 + b**2\nend", " \
    \ array = [a, b, c].sort\n  array[0] ** 2 + array[1] ** 2 == array[2] ** 2\nend",
  "  # a < b < c\n  # a^2 + b^2 = c^2\n  sides = [a, b, c].sort!\n  sides[0]**2 +\
    \ sides[1]**2 == sides[2]**2\nend", "  (a**2 + b**2 == c**2) || (b**2 + c**2 ==\
    \ a**2) || (c**2 + a**2 == b**2)\nend", "  if a > b && a > c\n    a**2 == b**2\
    \ + c**2\n  elsif b > a && b > c\n    b**2 == a**2 + c**2\n  else\n    c**2 ==\
    \ a**2 + b**2\n  end\nend", "  (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2)\
    \ or (b**2 + c**2 == a**2)\nend", "  raise NotImplementedError\nend", "  return\
    \ false if a <= 0 || b <= 0 || c <= 0\n  return true if a**2 + b**2 == c**2 ||\
    \ a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n  false\nend", "  a, b, c = [a,\
    \ b, c].sort.reverse\n  a**2 == b**2 + c**2\nend", "  a**2 + b**2 == c**2\nend",
  "  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a\
    \ > b\n    a, b = b, a\n  end\n  c**2 == a**2 + b**2\nend", "  # Your code here\n\
    end", end, "  return true if c ** 2 == a ** 2 + b ** 2\n  return true if a **\
    \ 2 == b ** 2 + c ** 2\n  return true if b ** 2 == a ** 2 + c ** 2\n  false\n\
    end", "  # TODO: Implement it in pure ruby\nend", "  # Put your code here\nend",
  "  max_value = [a, b, c].max\n  if max_value == a\n    if b**2 + c**2 == a**2\n\
    \      return true\n    else\n      return false\n    end\n  elsif max_value ==\
    \ b\n    if a**2 + c**2 == b**2\n      return true\n    else\n      return false\n\
    \    end\n  elsif max_value == c\n    if a**2 + b**2 == c**2\n      return true\n\
    \    else\n      return false\n    end\n  end\nend", "  # remove to satisfy the\
    \ test cases\n  [a, b, c].sort!", "  # Your code goes here\nend", "  sides = [a,\
    \ b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend", "  # YOUR CODE\
    \ HERE\nend", "\ttri_array = [a, b, c].sort\n\ttri_array[0] ** 2 + tri_array[1]\
    \ ** 2 == tri_array[2] ** 2\nend", "  # You code goes here\nend", "  (c**2 ==\
    \ a**2 + b**2) ? true : false\nend", "  list = [a, b, c].sort\n  # side_a = list[0]\n\
    \  # side_b = list[1]\n  # side_c = list[2]\n  side_a, side_b, side_c = list\n\
    \  side_c**2 == side_a**2 + side_b**2\nend", "  # TODO: Implement right_angle_triangle\n\
    end", "  # TODO: write the code of the method\nend", end, "    if ((a**2) + (b**2)\
    \ == (c**2)) || ((b**2) + (c**2) == (a**2)) || ((c**2) + (a**2) == (b**2))\n \
    \       return true\n    else\n        return false\n    end\nend", "  # your\
    \ code goes here\nend", "  a, b, c = [a, b, c].sort\n  a * a + b * b == c * c\n\
    end", "  a, b, c = [a, b, c].sort\n  # a = Hypotenuse\n  # b = Shorter side\n\
    \  # c = Shorter side\n  return c ** 2 == a ** 2 + b ** 2\nend", "  res = false\n\
    \  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    \    res = true\n  end\n  res\nend", "  sorted = [a, b, c].sort\n  sorted[0]**2\
    \ + sorted[1]**2 == sorted[2]**2\nend", "  # if a**2 + b**2 == c**2\n  #   return\
    \ true\n  # else\n  #   return false\n  # end\n  a**2 + b**2 == c**2\nend", " \
    \ x, y, z = [a, b, c].sort\n  z**2 == x**2 + y**2\nend", end, "  # TODO\nend",
  "    if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    \        return true\n    else\n        return false\n    end\nend", "  # write\
    \ your code here\nend", "  a, b, c = [a, b, c].sort\n  c ** 2 == a ** 2 + b **\
    \ 2\nend", "  # Your code here\nend", "  sides = [a, b, c].sort\n  return sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\nend", "  raise NotImplementedError\nend", "  [a,\
    \ b, c].max == Math.sqrt(a ** 2 + b ** 2 + c ** 2 - [a, b, c].max ** 2)\nend",
  "  return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    end", "  # your code goes here\nend", "  a2 = a * a\n  b2 = b * b\n  c2 = c *\
    \ c\n  return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend", "  # Write\
    \ your code here\nend", "  # your code goes here\nend", "  a**2 + b**2 == c**2\
    \ ? true : false\nend", "  # write your code here\nend", "  # TODO: implement\n\
    end", "  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n\
    end", "  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 ==\
    \ a**2)\n    return true\n  else\n    return false\n  end\nend", "  sides = [a,\
    \ b, c].sort\n  if sides[0]**2 + sides[1]**2 == sides[2]**2\n    true\n  else\n\
    \    false\n  end\nend", "  # First, sort the sides in ascending order\n  sides\
    \ = [a, b, c].sort", "  return false if [a, b, c].min <= 0\n  [a, b, c].sort.each_cons(2).any?\
    \ { |x, y| x**2 + y**2 == [a, b, c].max**2 }\nend", "  # Add code here\nend",
  "\tside = a > b ? a : b\n\tside = side > c ? side : c\n\ta, b, c = a**2, b**2, c**2\n\
    \tif side == a\n\t\ta == b + c\n\telsif side == b\n\t\tb == a + c\n\telse\n\t\t\
    c == a + b\n\tend\nend", "  # Write your solution here\nend", "  # your code here\n\
    end", "  # Return true if a, b, c is a right-angled triangle, false otherwise.\n\
    \  if a * a + b * b == c * c || b * b + c * c == a * a || a * a + c * c == b *\
    \ b\n  \treturn true\n  else\n  \treturn false\n  end\nend", "    if ((a ** 2)\
    \ + (b ** 2) == (c ** 2))\n        return true\n    else\n        return false\n\
    \    end\nend", "  array = [a, b, c].sort\n  array[0]**2 + array[1]**2 == array[2]**2\n\
    end", "  (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\
    end", "\tsides = [a, b, c].sort\n\tsides[0]**2 + sides[1]**2 == sides[2]**2\n\
    end", "  # Your code here\nend", "  ## your code goes here\nend", "  s = [a, b,\
    \ c].sort\n  s[0]**2 + s[1]**2 == s[2]**2\nend", "  # TODO: implement me\nend",
  "  if (a > b && a > c) \n    a**2 == b**2 + c**2 \n  elsif (b > a && b > c) \n \
    \   b**2 == a**2 + c**2 \n  else \n    c**2 == a**2 + b**2 \n  end\nend", "  #\
    \ TODO: write your code here\nend", "  # see if a^2 + b^2 == c^2\n  square = proc\
    \ { |x| x * x }\n  if square.call(a) + square.call(b) == square.call(c)\n    return\
    \ true\n  else\n    return false\n  end\nend", "  [a, b, c].sort!\n  return [a,\
    \ b, c][2]**2 == [a, b, c][0]**2 + [a, b, c][1]**2\nend", "  # The triangle inequality\
    \ theorem:\n  # Any side of a triangle is always shorter than the sum of the other\
    \ two sides.\n  #\n  # The Pythagorean theorem:\n  # c^2 = a^2 + b^2\n  #\n  #\
    \ To solve the problem with these two theorems:\n  # Let c be the longest side.\
    \ Then we check that:\n  # c < a + b, and a^2 + b^2 = c^2.\n  #\n  # However,\
    \ since c is possibly the longest side, we don't know its exact length.\n  # Instead\
    \ of using c^2, we use a^2 + b^2, which is definitely the square of the\n  # longest\
    \ side.\n  #\n  # In this algorithm, we first sort the sides by length, and then\
    \ check the\n  # triangle inequality theorem, and finally check that a^2 + b^2\
    \ = c^2.\n  sides = [a, b, c].sort\n  sides[0] + sides[1] > sides[2] && sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\nend", "  a2 = a**2\n  b2 = b**2\n  c2 = c**2\n\
    \  return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend\np right_angle_triangle(3,\
    \ 4, 5)\np right_angle_triangle(1, 2, 3)", "  if (a + b == c && a + c == b &&\
    \ b + c == a) || \n      (a*a + b*b == c*c && a*a + c*c == b*b && b*b + c*c ==\
    \ a*a)\n    true\n  else\n    false\n  end\nend", "  return false if [a, b, c].any?{|x|\
    \ x <= 0}\n  a**2 + b**2 == c**2 ||\n  a**2 + c**2 == b**2 ||\n  b**2 + c**2 ==\
    \ a**2\nend", "  # a**2 + b**2 == c**2\n  a**2 + b**2 == c**2 || a**2 + c**2 ==\
    \ b**2 || b**2 + c**2 == a**2\nend", '  l = [a, b, c].sort', "  # return true\
    \ if a**2 + b**2 == c**2\n  # return true if b**2 + c**2 == a**2\n  # return true\
    \ if c**2 + a**2 == b**2\n  # return false\n  [a, b, c].sort.map(&:to_f).reduce(:-).abs\
    \ < 10e-8\nend", '  l = [a, b, c].sort', "  # TODO\nend", "  # BEGIN YOUR CODE\n\
    \  # END YOUR CODE\nend", "  if c**2 == a**2 + b**2\n    return true\n  else\n\
    \    return false\n  end\nend", "  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2)\
    \ || (b**2 + c**2 == a**2)\nend", "  arr = [a, b, c].sort\n  return false if arr[0]\
    \ <= 0\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend", "  # TODO: Implement the function\
    \ here\nend", "  # TODO\nend", "  # Your code here\nend", "  angle_set = [a, b,\
    \ c].sort\n  c, b, a = angle_set\n  (c ** 2) == (a ** 2) + (b ** 2)\nend", " \
    \ a, b, c = [a, b, c].sort\n  c ** 2 == a ** 2 + b ** 2\nend", "  a = a.to_f\n\
    \  b = b.to_f\n  c = c.to_f\n  return a ** 2 + b ** 2 == c ** 2 if (a == b) and\
    \ (b == c)\n  if a > b and a > c\n    return a ** 2 == b ** 2 + c ** 2\n  elsif\
    \ b > a and b > c\n    return b ** 2 == a ** 2 + c ** 2\n  else\n    return c\
    \ ** 2 == a ** 2 + b ** 2\n  end\nend", "    # Your code here\nend", "  ary =\
    \ [a, b, c].sort\n  pow_sum = (ary[0] ** 2) + (ary[1] ** 2)\n  ary[2] ** 2 ==\
    \ pow_sum\nend", "  sides = [a, b, c].sort\n  ((sides[0] ** 2) + (sides[1] **\
    \ 2)) == (sides[2] ** 2)\nend", "  a**2 + b**2 == c**2\nend", "  a2 = a**2\n \
    \ b2 = b**2\n  c2 = c**2\n  if (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2\
    \ == a2)\n    return true\n  else\n    return false\n  end\nend", "  a, b, c =\
    \ [a, b, c].sort\n  ((a**2) + (b**2)) == (c**2)\nend", "  if a == Math.sqrt(b**2\
    \ + c**2)\n    true\n  elsif b == Math.sqrt(a**2 + c**2)\n    true\n  elsif c\
    \ == Math.sqrt(a**2 + b**2)\n    true\n  else\n    false\n  end\nend", "  if a**2\
    \ + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    true\n  else\n\
    \    false\n  end\nend", "  #TODO\nend", "  return true if a == b && a**2 + b**2\
    \ == c**2\n  return true if a == c && a**2 + c**2 == b**2\n  return true if b\
    \ == c && b**2 + c**2 == a**2\n  false\nend", "  # your solution here\nend", " \
    \ raise NotImplementedError\nend", "  # Write your code here\nend", "  # return\
    \ a ** 2 + b ** 2 == c ** 2 if (a == b || a == c || b == c)\n  return a ** 2 +\
    \ b ** 2 == c ** 2 if (a == b)\n  return b ** 2 + c ** 2 == a ** 2 if (b == c)\n\
    \  return c ** 2 + a ** 2 == b ** 2 if (c == a)\n  return a ** 2 + b ** 2 == c\
    \ ** 2 || b ** 2 + c ** 2 == a ** 2 || c ** 2 + a ** 2 == b ** 2\nend", "  # your\
    \ code here\nend", "  a, b, c = [a, b, c].sort\n  return false if a <= 0 || a\
    \ + b <= c\n  (a**2 + b**2 == c**2)\nend", "  # TODO: your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
