name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  a, b, c = [a, b, c].sort\n  a**2 + b**2 == c**2\nend", "  if a ==\
    \ b && b == c\n    return false\n  elsif c*c == a*a + b*b\n    return true\n \
    \ elsif a*a == b*b + c*c\n    return true\n  elsif b*b == a*a + c*c\n    return\
    \ true\n  else\n    return false\n  end\nend", "  return false if a + b <= c ||\
    \ a + c <= b || b + c <= a\n  max = [a, b, c].max\n  max == (a**2 + b**2 + c**2\
    \ - 2 * max**2)**0.5\nend", "  # ...\nend", "  # if we square each side, then\
    \ one side will equal the sum of the squares of\n  # the other two sides\n  sides\
    \ = [a, b, c].map { |side| side ** 2 }\n  sides.include?(sides.reduce(:+))\nend",
  "  a, b, c = [a, b, c].sort\n  a ** 2 + b ** 2 == c ** 2\nend", "  a, b, c = [a,\
    \ b, c].sort\n  a ** 2 + b ** 2 == c ** 2\nend", "  # your code goes here\nend",
  "  # if a > b && a > c\n  #   a ** 2 == b ** 2 + c ** 2\n  # elsif b > a && b >\
    \ c\n  #   b ** 2 == a ** 2 + c ** 2\n  # else\n  #   c ** 2 == a ** 2 + b **\
    \ 2\n  # end\n  # a, b, c = [a, b, c].sort.reverse\n  # c ** 2 == a ** 2 + b **\
    \ 2\n  # (a, b, c) = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # (a, b,\
    \ c) = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # (a, b, c) = [a, b, c].sort\n\
    \  # a ** 2 + b ** 2 == c ** 2\n  # c, b, a = [a, b, c].sort\n  # a ** 2 + b **\
    \ 2 == c ** 2\n  # c, b, a = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n \
    \ # [a, b, c].sort\n  a, b, c = [a, b, c].sort\n  a ** 2 + b ** 2 == c ** 2\n\
    end", "  # write your code here\nend", "  sides = [a, b, c].sort\n  hypotenuse\
    \ = sides.pop\n  cathet_one = sides.pop\n  cathet_two = sides.pop\n  return hypotenuse**2\
    \ == cathet_one**2 + cathet_two**2\nend", "  #TODO: implement your code here\n\
    end", "  [a, b, c].sort!\n  a ** 2 + b ** 2 == c ** 2\nend", "  ([a, b, c].max)**2\
    \ == a**2 + b**2 + c**2 - ([a, b, c].max)**2\nend", "  # write your code here\n\
    end", "    if (Math.hypot(a, b) == c.to_f) || (Math.hypot(a, c) == b.to_f) ||\
    \ (Math.hypot(b, c) == a.to_f)\n        return true\n    else\n        return\
    \ false\n    end\nend", "  long = [a, b, c].max\n  long == Math.sqrt( (a**2 +\
    \ b**2 + c**2) - 2 * long**2 )\nend", "\tsides = [a, b, c].sort\n\thypotenuse\
    \ = sides[2]\n\tsides.delete_at(2)\n\tsides[0]**2 + sides[1]**2 == hypotenuse**2\n\
    end", "  # implement right_angle_triangle function here\nend", "\td = [a, b, c].sort\n\
    \tMath.sqrt(d[0]**2 + d[1]**2) == d[2]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
