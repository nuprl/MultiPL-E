name: HumanEval_28_concatenate
language: rb
prompt: "# Concatenate array of strings into a single string\n# >>> concatenate.call([])\n\
  # \"\"\n# >>> concatenate.call([\"a\", \"b\", \"c\"])\n# \"abc\"\ndef concatenate(strings)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate\n\
  \    candidate = method(:concatenate)\n    assert_equal(\"\", candidate.call([]))\n\
  \    assert_equal(\"xyz\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"\
  xyzwk\", candidate.call([\"x\", \"y\", \"z\", \"w\", \"k\"]))\n  end\nend\n"
completions: ["  string = \"\"\n  strings.each do |i|\n    string += i\n  end\n  string\n\
    end", "  strings.join\nend", "  strings.join\nend", "  strings.join\nend", " \
    \   strings.reduce(\"\") { |string, element| string + element }\nend", "  return\
    \ strings.join\nend", "    if strings.length == 0\n        return \"\"\n    else\n\
    \        return strings[0] + concatenate(strings[1..-1])\n    end\nend", "  strings.join\n\
    end", "  strings.reduce(:+)\nend", "  strings.inject('') { |result, string| result\
    \ + string }\nend", "  strings.join\nend", "  strings.inject { |a, b| a + b }\n\
    end", "  strings.join\nend", "  strings.join\nend", "  strings.join\nend", " \
    \ strings.join\nend", "  strings.join\nend", "  strings.join\nend", "  strings.join\n\
    end", "  strings.reduce do |acc, current|\n    \"#{acc}#{current}\"\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
