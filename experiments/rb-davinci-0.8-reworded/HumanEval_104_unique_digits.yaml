name: HumanEval_104_unique_digits
language: rb
prompt: "# Given an array of positive integers x. return a sorted array of all \n\
  # elements that hasn't any even digit.\n# Note: Returned array should be sorted\
  \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
  \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
  \ unique_digits(x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
  \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
  \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n \
  \   assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
  \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
completions: ["  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend",
  "  x.select{|v| v.to_s.split('').all?{|v2| v2.to_i.odd?}}.sort\nend", "  # Solution\
    \ 1\n  # x.sort.delete_if { |n| n.to_s.length != n.to_s.chars.uniq.length }\n\
    \  # Solution 2\n  # x.sort.select { |n| n.to_s.length == n.to_s.chars.uniq.length\
    \ }\n  # Solution 3\n  x.sort.select { |n| n.to_s.chars.uniq.length == n.to_s.length\
    \ }\nend", "  # Your code goes here\nend", "    a = []\n    b = []\n    x.each\
    \ do |i|\n        if i.to_s.match(/2|4|6|8|0/)\n            a << i\n        else\n\
    \            b << i\n        end\n    end\n    return b.sort\nend", "  x.select\
    \ { |el| el.to_s.each_char.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |e| e.to_s.scan(/\\d/).all? { |d| d.to_i.odd? } }.sort\nend", "  all_numbers\
    \ = x.sort\n  all_numbers.map { |number| number unless number.to_s.include?(\"\
    2\") || number.to_s.include?(\"4\") || number.to_s.include?(\"6\") || number.to_s.include?(\"\
    8\") }.compact\nend", "  x.select{|i| i.to_s.each_char.map(&:to_i).none?(&:even?)}.sort\n\
    end", "    # x.each { |i| puts i.to_s.length == 1 ? i : \"\" }\n    x.each { |i|\
    \ puts i.to_s.chars.map(&:to_i).count.even? ? \"\" : i }\nend\nunique_digits([15,\
    \ 33, 1422, 1])\nunique_digits([152, 323, 1422, 10])", "  elements = []\n  x.each\
    \ do |i|\n    is_even = false\n    i.to_s.split('').each do |element|\n      if\
    \ element.to_i % 2 == 0\n        is_even = true\n      end\n    end\n    elements\
    \ << i if is_even == false\n  end\n  elements.sort\nend", "\teven_digits = []\n\
    \tx.each do |i|\n\t\ti = i.to_s.split('')\n\t\ti.each do |j|\n\t\t\tif j.to_i\
    \ % 2 == 0\n\t\t\t\teven_digits << i.join\n\t\t\tend\n\t\tend\n\tend\n\tunique_numbers\
    \ = x - even_digits.map(&:to_i)\n\tunique_numbers.sort\nend", "  x.select { |num|\
    \ (num.to_s.chars.map(&:to_i).map(&:even?)).all?(false) }.sort\nend", "  # TODO:\
    \ implement\nend", "  x.sort!\n  x.select do |n|\n    n.to_s.chars.map(&:to_i).all?\
    \ { |digit| digit.odd? }\n  end\nend", "\tx.select { |i| i.to_s.chars.all? { |j|\
    \ j.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.map(&:to_i).select\
    \ { |y| y.even? }.count == 0 }.sort\nend", "\tx.select { |i| i.to_s.length ==\
    \ i.to_s.split('').uniq.length}\nend", "  x.select { |x| x.to_s.chars.all? { |y|\
    \ y.to_i.odd? } }.sort\nend", "  result = []\n  x.each do |num|\n    if num.to_s.split('').map(&:to_i).select\
    \ { |n| n.even? }.length == 0\n      result << num\n    end\n  end\n  result.sort\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
