name: HumanEval_116_sort_array
language: rb
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2,\
  \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n\
  # [0, 1, 2, 3, 4]\ndef sort_array(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
  \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
  \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
  \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5,\
  \ 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
  \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
  \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
  \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
completions: ["  arr.sort_by{|i| [i.to_s(2).count('1'), i]}\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  return []\
    \ if arr.empty?\n  return arr if arr.size == 1\n  arr.sort do |a, b|\n    if a\
    \ < 0 || b < 0\n      if a < 0 && b < 0\n        a <=> b\n      elsif a < 0\n\
    \        -1\n      else\n        1\n      end\n    else\n      a_ones = a.to_s(2).count('1')\n\
    \      b_ones = b.to_s(2).count('1')\n      if a_ones < b_ones\n        -1\n \
    \     elsif a_ones > b_ones\n        1\n      else\n        a <=> b\n      end\n\
    \    end\n  end\nend", "  arr.sort do |a, b|\n    [a.to_s(2).count('1'), a] <=>\
    \ [b.to_s(2).count('1'), b]\n  end\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |num| [num.to_s(2).count('1'), num] }\nend", "  # return an array of numbers\n\
    \  # given an array of numbers\n  # sort the array by the number of ones\n  #\
    \ in their binary representation\n  # then sort by decimal value\n  # return the\
    \ sorted array\n  sorted_by_ones = arr.sort_by do |num|\n    # return the number\
    \ of ones in a binary form of a number\n    # as an integer\n    # as an array\n\
    \    # because I'm a weirdo\n    num.to_s(2).chars.select do |char|\n      char\
    \ == \"1\"\n    end.length\n  end", "  arr.sort_by { |item| [item.to_s(2).count('1'),\
    \ item] }\nend", "  arr.sort_by { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort\
    \ { |a, b| [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b] }\nend", " \
    \ arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |el| [el.to_s(2).count('1'),\
    \ el] }\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'), n]}\nend", "  arr.sort_by{|n|\
    \ [n.to_s(2).count('1'), n]}\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
