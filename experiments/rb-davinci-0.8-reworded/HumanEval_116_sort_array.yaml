name: HumanEval_116_sort_array
language: rb
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2,\
  \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n\
  # [0, 1, 2, 3, 4]\ndef sort_array(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
  \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
  \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n\
  \    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5,\
  \ 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32,\
  \ 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2,\
  \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8,\
  \ 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
completions: ["  arr.sort_by{|i| [i.to_s(2).count('1'), i]}\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  return []\
    \ if arr.empty?\n  return arr if arr.size == 1\n  arr.sort do |a, b|\n    if a\
    \ < 0 || b < 0\n      if a < 0 && b < 0\n        a <=> b\n      elsif a < 0\n\
    \        -1\n      else\n        1\n      end\n    else\n      a_ones = a.to_s(2).count('1')\n\
    \      b_ones = b.to_s(2).count('1')\n      if a_ones < b_ones\n        -1\n \
    \     elsif a_ones > b_ones\n        1\n      else\n        a <=> b\n      end\n\
    \    end\n  end\nend", "  arr.sort do |a, b|\n    [a.to_s(2).count('1'), a] <=>\
    \ [b.to_s(2).count('1'), b]\n  end\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |num| [num.to_s(2).count('1'), num] }\nend", "  # return an array of numbers\n\
    \  # given an array of numbers\n  # sort the array by the number of ones\n  #\
    \ in their binary representation\n  # then sort by decimal value\n  # return the\
    \ sorted array\n  sorted_by_ones = arr.sort_by do |num|\n    # return the number\
    \ of ones in a binary form of a number\n    # as an integer\n    # as an array\n\
    \    # because I'm a weirdo\n    num.to_s(2).chars.select do |char|\n      char\
    \ == \"1\"\n    end.length\n  end", "  arr.sort_by { |item| [item.to_s(2).count('1'),\
    \ item] }\nend", "  arr.sort_by { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort\
    \ { |a, b| [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b] }\nend", " \
    \ arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |el| [el.to_s(2).count('1'),\
    \ el] }\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'), n]}\nend", "  arr.sort_by{|n|\
    \ [n.to_s(2).count('1'), n]}\nend", "  # your code here\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by{|n|\
    \ [n.to_s(2).count('1'), n]}\nend", "  sorted = arr.sort_by{|i| [i.to_s(2).count('1'),\
    \ i] }\n  return sorted\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'), n]\
    \ }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |a| [a.to_s(2).count('1'), a] }\nend", "  ans = []\n  arr.each do |i|\n  \
    \  x = i.to_s(2).count('1')\n    ans << [x, i]\n  end\n  ans.sort!\n  ans.map\
    \ { |x| x[1] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", " \
    \ arr.sort_by { |i| [i.to_s(2).count('1'), i] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "    @arr = arr\n    sort_by_ones_and_decimal\nend", "  arr.sort\
    \ do |a, b|\n    count_ones(a) == count_ones(b) ? a <=> b : count_ones(a) <=>\
    \ count_ones(b)\n  end\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\n\
    end", "  sorted = arr.sort_by { |n| [n.to_s(2).count('1'), n] }\nend", "  arr.sort_by\
    \ { |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  # your\
    \ code here\nend", "  arr.sort_by { |el| [el.to_s(2).count('1'), el] }\nend",
  "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  return [] if arr.empty?\n\
    \  return arr if arr.size == 1\n  arr.sort_by do |n|\n    bit_sum = n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    \    [bit_sum, n]\n  end\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x]\
    \ }\nend", "  new_arr = arr.map do |n|\n    ones = n.to_s(2).count('1')\n    [ones,\
    \ n]\n  end\n  new_arr.sort.map { |n| n[1] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort_by\
    \ { |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort_by{|i| [i.to_s(2).count('1'),\
    \ i]}\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend", " \
    \ arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  a = arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |num| num.to_s(2).count('1')\
    \ }\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'), n]}\nend", "  arr.sort_by\
    \ { |n| n.to_s(2).count('1') }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'), n]}\nend", "  arr.sort_by\
    \ { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'), i] }\nend", "  arr.sort_by\
    \ { |i| [i.to_s(2).count('1'), i] }\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend", "  sort_by = {}\n  arr.each do |el|\n    sort_by[el] = [el.to_s(2).count('1'),\
    \ el]\n  end\n  sort_by.sort_by { |k, v| v }.map { |arr| arr[0] }\nend", "  arr.sort_by\
    \ { |n| [n.to_s(2).count('1'), n] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  nums = []\n  arr.each do |num|\n    bin = num.to_s(2)\n    ones\
    \ = bin.count(\"1\")\n    nums << [ones, num]\n  end\n  nums.sort.map { |n| n[1]\
    \ }\nend", "  # TODO: Implement me!\nend", "  nums = arr.map { |num| [num, num.to_s(2).count('1')]\
    \ }\n  nums.sort_by { |num| [num[1], num[0]] }.map { |num| num[0] }\nend", " \
    \ arr.sort_by { |el| [el.to_s(2).count('1'), el] }\nend", "  sorted = arr.sort_by\
    \ do |x|\n    [x.to_s(2).count('1'), x]\n  end\n  p sorted\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'), i] }\nend", "    arr.sort_by\
    \ { |a| [a.to_s(2).count('1'), a] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by\
    \ { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort_by { |e| [e.to_s(2).count('1'),\
    \ e] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |n| [n.to_s(2).count('1'), n] }\nend", "  ones = []\n  rest = []\n  arr.each\
    \ do |n|\n    if n < 0\n      rest << n\n    else\n      ones << [n, n.to_s(2).scan(/1/).size]\n\
    \    end\n  end\n  sorted = ones.sort_by(&:last).map(&:first)\n  sorted + rest\n\
    end", "  arr.sort_by { |num| \"%064b\" % num }\nend", "    arr.sort_by{|i| [i.to_s(2).count(\"\
    1\"), i]}\nend", "  arr.sort_by{|x|[x.to_s(2).count('1'),x]}\nend", "  arr.sort\
    \ { |x, y| [x.to_s(2).count('1'), x] <=> [y.to_s(2).count('1'), y] }\nend", " \
    \ arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  # your code here\nend",
  "  arr.sort do |a, b|\n    res = a.to_s(2).count('1') <=> b.to_s(2).count('1')\n\
    \    res == 0 ? a <=> b : res\n  end\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend", " \
    \ #your code here\n  arr.sort_by { |x| [ x.to_s(2).count('1'), x ] }\nend", " \
    \ arr.sort_by { |i| [-i.to_s(2).count('1'), i] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by{|i| [i.to_s(2).count('1'), i]}\nend", "  arr.sort\
    \ { |a, b| a.to_s(2).count('1') == b.to_s(2).count('1') ? a <=> b : a.to_s(2).count('1')\
    \ <=> b.to_s(2).count('1') }\nend", "  a = arr.select{|n| n>=0}.group_by{|n| n.to_s(2).count('1')}.sort.map{|k,v|\
    \ v.sort_by(&:to_s)}.flatten\n  a.each_with_index{|x,i| a[i] = x * -1 if arr[i]\
    \ < 0}\n  a\nend", "  arr.sort_by{|x|[x.to_s(2).count('1'),x]}\nend", "  arr.sort\
    \ { |a, b| [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b] }\nend", " \
    \ arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'),\
    \ n]}\nend", "  # @param {Array} arr\n  # @return {Array}\n  arr.sort_by do |element|\n\
    \    [element.to_s(2).count('1'), element]\n  end\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |n| n.to_s(2).count('1') }\nend", "  arr.sort do\
    \ |a, b|\n    a1 = a.to_s(2).count(\"1\")\n    b1 = b.to_s(2).count(\"1\")\n \
    \   if a1 == b1\n      a <=> b\n    else\n      a1 <=> b1\n    end\n  end\nend",
  "  arr.sort_by { |n| n.to_s(2).count('1') }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort_by{|num| [num.to_s(2).count('1'), num]}\nend", " \
    \ result = []\n  arr.each do |num|\n    num_ones = num.to_s(2).count('1')\n  \
    \  result << [num_ones, num]\n  end\n  result.sort_by! { |a| [a[0], a[1]] }\n\
    \  result.map! { |a| a[1] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by { |x| [x.to_s(2).chars.count('1'), x] }\nend", " \
    \ arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort { |a, b| [a.to_s(2).chars.count(\"1\"), a] <=> [b.to_s(2).chars.count(\"\
    1\"), b] }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend",
  "  if arr.length < 1\n    return []\n  end\n  if arr.length < 2\n    return arr\n\
    \  end\n  arr.sort_by { |x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by {\
    \ |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend",
  "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort do |a,\
    \ b|\n    a_ones = a.to_s(2).count('1')\n    b_ones = b.to_s(2).count('1')\n \
    \   if a_ones == b_ones\n      a <=> b\n    else\n      a_ones <=> b_ones\n  \
    \  end\n  end\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'), n] }\nend", " \
    \ arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  sorted = []\n  ones = {}\n\
    \  arr.each do |n|\n    binary = n.to_s(2)\n    ones[n] = binary.count('1')\n\
    \  end\n  sorted = ones.sort_by { |k, v| [v, k] }\n  sorted.map { |e| e[0] }\n\
    end", "  arr.sort_by{|x| [x.to_s(2).chars.count('1'), x]}\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |item| [item.to_s(2).count('1'),\
    \ item] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", '  return
    arr if arr.empty?', "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", " \
    \ arr.sort_by { |x| x.to_s(2).count('1') }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by{|n| [n.to_s(2).count('1'), n]}\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |i| [(i.to_s(2).count('1'),\
    \ i)] }\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'), i] }\nend", "  arr.sort\
    \ do |a, b|\n    a_ones = a.to_s(2).chars.count('1')\n    b_ones = b.to_s(2).chars.count('1')\n\
    \    a_ones == b_ones ? a <=> b : a_ones <=> b_ones\n  end\nend", "  arr.sort_by\
    \ { |v| [v.to_s(2).count('1'), v] }\nend", "  arr.sort do |x, y|\n    if x.to_s(2).count('1')\
    \ == y.to_s(2).count('1')\n      x <=> y\n    else\n      x.to_s(2).count('1')\
    \ <=> y.to_s(2).count('1')\n    end\n  end\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by { |e| [e.to_s(2).count('1'), e] }\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  raise\
    \ ArgumentError, 'only positive numbers' if arr.any? { |n| n < 0 }\n  arr.sort_by\
    \ { |n| [n.to_s(2).count('1'), n] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort_by { |e| e.to_s(2).count('1') }\nend", "  arr.sort_by\
    \ { |item| [ones_count(item), item] }\nend", "  arr.sort_by { |a| [a.to_s(2).count('1'),\
    \ a] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by\
    \ { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  arr.sort do |a, b|\n    a_ones = a.to_s(2).count('1')\n   \
    \ b_ones = b.to_s(2).count('1')\n    if a_ones == b_ones\n      a <=> b\n    else\n\
    \      a_ones <=> b_ones\n    end\n  end\nend", "  arr.sort do |x, y|\n    x.to_s(2).count('1')\
    \ <=> y.to_s(2).count('1')\n  end\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort\
    \ { |a, b| a.to_s(2).count('1') == b.to_s(2).count('1') ? a <=> b : a.to_s(2).count('1')\
    \ <=> b.to_s(2).count('1') }\nend", "  arr.sort_by { |a| [a.to_s(2).count('1'),\
    \ a] }\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'), n] }\nend", "  arr.sort\
    \ do |a, b|\n    if ones(a) == ones(b)\n      a <=> b\n    else\n      ones(a)\
    \ <=> ones(b)\n    end\n  end\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  hash\
    \ = Hash.new\n  arr.each { |i| hash[i] = i.to_s(2).count(\"1\") }\n  hash.sort_by\
    \ { |k, v| [v, k] }.to_h.keys\nend", "  #your code here\n  arr.sort do |a, b|\n\
    \    compare = a.to_s(2).count(\"1\") <=> b.to_s(2).count(\"1\")\n    compare\
    \ == 0 ? a <=> b : compare\n  end\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend", "  # your code here\nend", "  arr.sort_by{|i| [i.to_s(2).count('1'),\
    \ i]}\nend", "  arr.sort_by { |a| [a.to_s(2).count('1'), a] }\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  if arr.all?{|x| x > 0}\n    arr.sort{|a,b|\
    \ [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b]}\n  else\n    arr.sort{|a,b|\
    \ [a.abs.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'), b]}\n  end\nend", " \
    \ hash = {}\n  arr.each { |n| hash[n] = n.to_s(2).count('1') }\n  arr.sort_by\
    \ { |n| [hash[n], n] }\nend", "  arr.sort do |a, b|\n    [ones_count(a), a] <=>\
    \ [ones_count(b), b]\n  end\nend", "  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend", "  numbers = []\n  result = []\n  count = 0\n  arr.each do |number|\n\
    \    binary = number.to_s(2)\n    numbers << [number, binary.count(\"1\")]\n \
    \ end\n  sorted = numbers.sort_by { |number| number[1] }\n  sorted.each do |number|\n\
    \    result << number[0]\n  end\n  p result\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend", "  arr.sort do |a, b|\n    a_ones = a.to_s(2).chars.count('1')\n\
    \    b_ones = b.to_s(2).chars.count('1')\n    if a_ones == b_ones\n      a <=>\
    \ b\n    else\n      a_ones <=> b_ones\n    end\n  end\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "    arr.sort_by{|x| [x.to_s(2).count(\"1\"\
    ), x]}\nend", "  arr.sort do |a, b|\n    [a.to_s(2).count('1'), a] <=> [b.to_s(2).count('1'),\
    \ b]\n  end\nend", "  sorted = []\n  ones = {}\n  arr.each { |n| ones[n] = n.to_s(2).count('1')\
    \ }\n  sorted = arr.sort { |a, b| ones[a] <=> ones[b] }\n  sorted = sorted.sort\
    \ { |a, b| a <=> b } if sorted.each_cons(2).all? { |x, y| ones[x] == ones[y] }\n\
    \  sorted\nend", "  arr.sort_by { |n| [n.to_s(2).count('1'), n] }\nend", "  arr.sort_by{|i|\
    \ [i.to_s(2).count('1'), i]}\nend", "  max = 0\n  arr.each do |n|\n    if n >\
    \ max\n      max = n\n    end\n  end\n  k = Math.log2(max).floor + 1\n  # Counting\
    \ sort which usually takes O(n+k) time where n is the number of elements in input\
    \ array and k is the range of input.\n  counts = Array.new(k, 0)\n  arr.each do\
    \ |n|\n    counts[getOnesCount(n)] += 1\n  end\n  # Adjust the count array\n \
    \ i = 1\n  while i < k\n    counts[i] += counts[i - 1]\n    i += 1\n  end\n  output\
    \ = Array.new(arr.length)\n  arr.each do |n|\n    ones = getOnesCount(n)\n   \
    \ output[counts[ones] - 1] = n\n    counts[ones] -= 1\n  end\n  output\nend",
  "  arr.sort_by { |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort_by{|x|\
    \ [x.to_s(2).count('1'), x]}\nend", "  arr.sort_by { |a| [a.to_s(2).count('1'),\
    \ a] }\nend", "  arr.sort_by{|a| [(a.to_s(2).chars.map(&:to_i).reduce(:+),a)]}\n\
    end", "  arr.sort_by { |x| [x.to_s(2).count('1'), x] }\nend", "  arr.sort_by {\
    \ |num| [num.to_s(2).count('1'), num] }\nend", "  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend", "  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\nend\np sort_array([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
