language: rb
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 0 if n == 0\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgf4g9kxb

    Started

    .

    Finished in 0.0006166 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1621.80 tests/s, 8108.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 0 if n == 0\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgf4g9kxb

    Started

    .

    Finished in 0.0006166 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1621.80 tests/s, 8108.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppt3a2icd

    Started

    .

    Finished in 0.000870522 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1148.74 tests/s, 5743.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n    sum = 0\n    1.upto(n)\
    \ do |i|\n        sum += i\n    end\n    sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9qb256yu

    Started

    .

    Finished in 0.000552321 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1810.54 tests/s, 9052.71 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  # This function returns\
    \ the sum of 1 to n\n  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp2eyaql4

    Started

    .

    Finished in 0.000565437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1768.54 tests/s, 8842.72 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  total = 0\n  n.times do\
    \ |i|\n    total += i + 1\n  end\n  total\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxma9epv2

    Started

    .

    Finished in 0.000585451 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.08 tests/s, 8540.42 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do\
    \ |i|\n    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6osg1cs4

    Started

    .

    Finished in 0.000601591 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.26 tests/s, 8311.29 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n.zero? ? 0 : n +\
    \ sum_to_n(n - 1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvn1xxnur

    Started

    .

    Finished in 0.000532141 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1879.20 tests/s, 9396.01 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4ow1ckjx

    Started

    .

    Finished in 0.000488486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2047.14 tests/s, 10235.71 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  x = 1\n  total = 0\n  while\
    \ x <= n\n    total += x\n    x += 1\n  end\n  return total\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgk2w42p1

    Started

    .

    Finished in 0.000631201 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1584.28 tests/s, 7921.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n    return n if n == 1\n \
    \   n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpeqkdvy25

    Started

    .

    Finished in 0.000560225 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1785.00 tests/s, 8924.99 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzrkcawzu

    Started

    .

    Finished in 0.000476368 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2099.22 tests/s, 10496.09 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppt3a2icd

    Started

    .

    Finished in 0.000870522 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1148.74 tests/s, 5743.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppt3a2icd

    Started

    .

    Finished in 0.000870522 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1148.74 tests/s, 5743.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzrkcawzu

    Started

    .

    Finished in 0.000476368 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2099.22 tests/s, 10496.09 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n\tsum = 0\n\t(n+1).times {|i|\
    \ sum += i}\n\treturn sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprnoj36ry

    Started

    .

    Finished in 0.000855584 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1168.79 tests/s, 5843.96 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n*(n+1)/2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp17a9o836

    Started

    .

    Finished in 0.000590679 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1692.97 tests/s, 8464.83 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n\tsum = 0\n\twhile n > 0\n\
    \t\tsum += n\n\t\tn -= 1\n\tend\n\tsum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb68xf7cu

    Started

    .

    Finished in 0.0005177 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1931.62 tests/s, 9658.10 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1amecj52

    Started

    .

    Finished in 0.000963564 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1037.81 tests/s, 5189.07 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  while n > 0\n\
    \    sum += n\n    n -= 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpw1fzwlv8

    Started

    .

    Finished in 0.000590194 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1694.36 tests/s, 8471.79 assertions/s

    '
  stdout: ''
  timestamp: 1659823774
