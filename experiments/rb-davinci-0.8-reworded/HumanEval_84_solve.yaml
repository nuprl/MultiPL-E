name: HumanEval_84_solve
language: rb
prompt: "# Given a positive integer N, return the total sum of its digits in binary.\n\
  # Example\n# >>> solve.call(1000)\n# \"1\"\n# >>> solve.call(150)\n# \"110\"\n#\
  \ >>> solve.call(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0\
  \ \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\ndef solve(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n\
  \    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n\
  \    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n\
  \  end\nend\n"
completions: ["  return \"0\" if n == 0\n  #\n  # the way to solve this problem is\
    \ to do the base 10 computation\n  # on the binary number\n  #\n  a = []\n  while\
    \ n > 0\n    a << n % 2\n    n /= 2\n  end\n  a.reverse.join\nend", "  '%b' %\
    \ n\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  #..\n  digits\
    \ = []\n  until n == 0\n    r = n % 2\n    digits.push(r)\n    n = n / 2\n  end\n\
    \  digits.reverse.join\nend", "  n.to_s(2).split('').map { |n| n.to_i }.inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').inject(0)\
    \ { |sum, s| sum + s.to_i }.to_s\nend", "  # your code here\nend\n```", "  n.to_s(2).sum.to_s\n\
    end", "  binary = n.to_s(2)\n  binary_arr = binary.split('')\n  total = 0\n  binary_arr.each\
    \ do |str|\n    str = str.to_i\n    total += str\n  end\n  total.to_s\nend", " \
    \ n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # result = n.to_s(2)\n  # result.split('').reduce(0) { |acc, elem| acc\
    \ + elem.to_i }.to_s\n  result = ''\n  n.times do |i|\n    result += (n%2).to_s\n\
    \    n /= 2\n  end\n  result.reverse.split('').reduce(0) { |acc, elem| acc + elem.to_i\
    \ }.to_s\nend", "    n.to_s(2)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  binary = n.to_s(2)\n  result = 0\n  binary.split('').each do |number|\n\
    \    result += number.to_i\n  end\n  result.to_s\nend", "  result = ''\n  if n\
    \ >= 0 && n <= 10000\n    n.to_s(2).chars.each do |i|\n      result += i\n   \
    \ end\n  end\n  result\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  (\"%b\" % n).count(\"1\")\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
