name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns true if the string\n#\
  \ length is a prime number or false otherwise\n# Examples\n# >>> prime_length.call(\"\
  Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"\
  kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["  string.length.prime?\nend", "  is_prime = true\n  i = 2\n  if string.length\
    \ < 2\n    is_prime = false\n  else\n    while i < string.length\n      if string.length\
    \ % i == 0\n        is_prime = false\n      end\n      i += 1\n    end\n  end\n\
    \  is_prime\nend", "  string.length.prime?\nend", "  return false if string.length\
    \ < 2\n  (2..string.length-1).each do |int|\n    return false if string.length\
    \ % int == 0\n  end\n  true\nend", "  length = string.length\n  if length == 2\
    \ || length == 3 || length == 5 || length == 7\n    return true\n  elsif length\
    \ == 1 || length == 4 || length == 6 || length == 8 || length == 9\n    return\
    \ false\n  elsif length % 2 == 0 || length % 3 == 0 || length % 5 == 0 || length\
    \ % 7 == 0\n    return false\n  else\n    return true\n  end\nend", "  string.length.prime?\n\
    end", "  num = string.length\n  # return false if num == 1\n  (2..(num/2)).each\
    \ do |num2|\n    return false if num % num2 == 0\n  end\n  true\nend", "  if string.length.prime?\n\
    \    return true\n  else\n    return false\n  end\nend", "  length = string.length\n\
    \  array = (2..(length - 1)).to_a\n  prime = true\n  array.each do |i|\n    if\
    \ length % i == 0\n      prime = false\n    end\n  end\n  prime\nend", "  if string.length\
    \ == 0 || string.length == 1\n    return false\n  elsif string.length == 2\n \
    \   return true\n  else\n    (2..string.length-1).each do |i|\n      if string.length\
    \ % i == 0\n        return false\n      end\n    end\n    return true\n  end\n\
    end", "\tif is_prime?(string.length)\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "  # <<- Your code goes here >>\nend", "\tnot_prime_arr = [0, 1,\
    \ 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32,\
    \ 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56,\
    \ 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81,\
    \ 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105,\
    \ 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162,\
    \ 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201,\
    \ 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,\
    \ 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237,\
    \ 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,\
    \ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,\
    \ 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,\
    \ 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299", "  return\
    \ false if string.length < 2\n  return true if [2, 3, 5, 7].include?(string.length)\n\
    \  !!(string.length % 2 != 0 && string.length % 3 != 0 && string.length % 5 !=\
    \ 0 && string.length % 7 != 0)\nend", "  puts string.length.prime?\nend", "  string.length.to_i.prime?\n\
    end", "  primes = []\n  (1..string.length).each do |prime|\n    primes << prime\
    \ if string.length % prime == 0\n  end\n  p primes.length == 2\nend", "  if string.length\
    \ == 1 || string.length == 2\n    return true\n  end\n  (2..string.length-1).each\
    \ do |i|\n    if string.length % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  string.length.prime?\nend", "  !(2..(string.length -\
    \ 1)).any? { |n| string.length % n == 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
