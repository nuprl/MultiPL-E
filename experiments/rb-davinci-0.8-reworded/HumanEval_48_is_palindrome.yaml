name: HumanEval_48_is_palindrome
language: rb
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome.call(\"\")\n\
  # true\n# >>> is_palindrome.call(\"aba\")\n# true\n# >>> is_palindrome.call(\"aaaaa\"\
  )\n# true\n# >>> is_palindrome.call(\"zbcd\")\n# false\ndef is_palindrome(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n\
  \    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\
  \"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"\
  aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true,\
  \ candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n\
  \    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n"
completions: ["  text == text.reverse\nend", "  text == text.reverse\nend", "  text.is_a?(String)\
    \ ? text == text.reverse : false\nend", "  text.size <= 1 || (text[0] == text[-1]\
    \ && is_palindrome(text[1..-2]))\nend", "  text == text.reverse\nend", "  text\
    \ == text.reverse\nend", "  return text == text.reverse\nend", "  chars = text.chars\n\
    \  len = chars.length", "  text = text.downcase.split('')\n  text == text.reverse\n\
    end", "  return true if text.empty?\n  return text[0] == text[-1] && is_palindrome(text[1..-2])\n\
    end", "  if text.length < 2\n    return true\n  end\n  text[0] == text[-1] &&\
    \ is_palindrome(text[1..-2])\nend", "  # TODO: implement this method\nend", " \
    \ text == text.reverse\nend", "  text.reverse == text\nend", "  return text ==\
    \ text.reverse\nend", "  i = 0\n  j = text.length-1\n  while i < j\n    return\
    \ false if text[i] != text[j]\n    i += 1\n    j -= 1\n  end\n  true\nend", " \
    \ length = text.length\n  0.upto(length/2) do |i|\n    return false if text[i]\
    \ != text[length-i-1]\n  end\n  true\nend", "  is_palindrome_index(text, 0, text.length-1)\n\
    end", "  (0...text.length/2).each do |i|\n    return false if text[i] != text[text.length\
    \ - i - 1]\n  end\n  true\nend", "  return false if text.length < 2\n  if text[0]\
    \ == text[-1]\n    is_palindrome(text[1..-2])\n  else\n    false\n  end\nend\n\
    is_palindrome = lambda { |text| text == text.reverse }"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
