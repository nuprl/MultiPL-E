name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
  # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nfib = lambda { |n|\
    \ fib(n) }", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return 1 if\
    \ n <= 2\n  return fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end", "  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  if n < 2\n    return n\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  i = 0\n  a = 0\n  b = 1\n  while i < n\n\
    \    i += 1\n    c = a + b\n    a = b\n    b = c\n  end\n  a\nend", "  return\
    \ n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    1\n  elsif n == 2\n \
    \   1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 1\n    return n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if\
    \ n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "\tcall(n)\nend",
  "    return 0 if n == 0\n    return 1 if n == 1\n    return fib(n-1) + fib(n-2)\n\
    end", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end", "  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "   \
    \ if n == 0 || n == 1\n        n\n    else\n        fib(n-1) + fib(n-2)\n    end\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "\tif n <= 2\n\t\t1\n\
    \telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend", "  if n == 1 || n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 0 if n == 0\n  return\
    \ 1 if n == 1\n  fib(n-1) + fib(n-2)\nend", "  x, y = 0, 1\n  n.times do\n   \
    \ x, y = y, x + y\n  end\n  x\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end", "  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend",
  "\treturn n if n <= 1\n\treturn fib(n-1) + fib(n-2)\nend", "  if n <= 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    1\n  elsif n\
    \ == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  fib = Proc.new\
    \ do |t|\n    if t == 0 or t == 1\n      t\n    else\n      fib.call(t-1) + fib.call(t-2)\n\
    \    end\n  end\n  fib.call(n)\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend",
  "  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  return 0 if n.zero?\n  return 1 if n == 1\n  fib(n - 1) + fib(n - 2)\n\
    end", "  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end", "  return 1 if n < 3\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  n <= 1 ? n : fib(n-1)\
    \ + fib(n-2)\nend", "  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend",
  "  return 1 if n < 3\n  fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1)\
    \ + fib(n-2)\nend", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "    if n <=\
    \ 1\n        n\n    else\n        fib(n-1) + fib(n-2)\n    end\nend", "  return\
    \ n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if n <=\
    \ 2\n  fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  return n if n < 2\n  (fib(n-1) + fib(n-2))\nend", "  n == 0 ? 0 : n == 1 ? 1\
    \ : fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end", "  n < 2 ? n : fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1 || n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    return 1\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if n <= 2\n  @fib ||=\
    \ {}\n  @fib[n] ||= fib(n - 1) + fib(n - 2)\nend", "  n <= 1 ? n : fib(n-1) +\
    \ fib(n-2)\nend", "  if n == 1 || n == 2\n    return 1\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend", "  if n <= 1\n    return n\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  return n if n <= 1\n  return fib(n-1) + fib(n-2)\n\
    end", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  a, b = 0, 1\n  n.times do\n    a, b = b, a + b\n  end\n  a\nend", " \
    \ if n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n\
    \    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ n < 2 ? n : fib(n-1) + fib(n-2)\nend", "  # this is where I need to create a\
    \ hash that will save the values of the method call\n  fib = Hash.new()\n  # this\
    \ is where I will set the base case\n  if n == 0\n    return 0\n  elsif n == 1\n\
    \    return 1\n  else\n    # this is where I need to check if the value of the\
    \ call is in the hash, if it is I will return the value and save the calculation\n\
    \    if fib.has_key?(n)\n      return fib[n]\n    else\n      # if the call is\
    \ not in the hash then I will use recursion to save the value in the hash and\
    \ return it\n      fib[n] = fib(n-1) + fib(n-2)\n      return fib[n]\n    end\n\
    \  end\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  n < 2 ? n : fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return\
    \ 1 if n == 1 || n == 2\n  first = 1\n  second = 1\n  (n - 2).times do\n    first,\
    \ second = second, first + second\n  end\n  second\nend", "  if n <= 2\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n ==\
    \ 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n if n <=\
    \ 1\n  fib(n-1) + fib(n-2)\nend", "  return nil if n <= 0\n  return 1 if n ==\
    \ 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend", "  if n <= 1\n\
    \    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return\
    \ 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nputs \"Fibonacci number:\"\
    \nputs fib(9)", "  return 1 if n <= 2\n  return fib(n-1) + fib(n-2)\nend", " \
    \ return n if n < 2\n  @fib ||= []\n  @fib[n] ||= fib(n-1) + fib(n-2)\nend", " \
    \ if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n\
    \ if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end", "  (1..n).reduce([0, 1]) { |(a, b), _| [b, a + b] }.first\nend", "    if\
    \ n < 2\n        n\n    else\n        fib(n-1) + fib(n-2)\n    end\nend", "  return\
    \ n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) +\
    \ fib(n-2)\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  if n < 2\n   \
    \ return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "    if n ==\
    \ 0\n        return 0\n    elsif n == 1\n        return 1\n    end\n    fib(n-1)\
    \ + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if n == 1", "\tif n < 1\n\
    \t\treturn 0\n\telsif n == 1\n\t\treturn 1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\t\
    end\nend", "  if n <= 1\n    return n\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    n\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  i, a, b = 1, 0, 1\n  while i\
    \ < n\n    i += 1\n    a, b = b, a + b\n  end\n  a\nend", "  return 1 if n <=\
    \ 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end", "  (n < 2) ? n : fib(n-1) + fib(n-2)\nend", "  puts \"n = #{n}\"\n  if n\
    \ == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return\
    \ 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  puts \"n = #{n}\"\n  return 1\
    \ if n == 1\n  return 1 if n == 2\n  puts \"fib(n-1) = #{fib(n-1)}\"\n  puts \"\
    fib(n-2) = #{fib(n-2)}\"\n  fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n\
    \  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend", "  return 1 if n <=\
    \ 2\n  fib(n-1) + fib(n-2)\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\nend", " \
    \ if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n \
    \ end\nend\nputs fib(10)\nputs fib(8)\nputs fib(1)", "  return 1 if n <= 2\n \
    \ fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend",
  "  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n <=\
    \ 2\n  return fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  return n if\
    \ n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1\n\
    \  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  if n < 2\n    return n\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n <= 1\n\
    \  fib(n-1) + fib(n-2)\nend", "  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "    if n ==\
    \ 0\n        return 0\n    elsif n == 1\n        return 1\n    else\n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend", "  if n < 3\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    1\n  elsif n\
    \ == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "    if n == 0\n\
    \        0\n    elsif n == 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    \    end\nend", "\tn <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend",
  "  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend",
  "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if\
    \ n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return\
    \ 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\np fib(1)\np fib(3)\np fib(8)\n\
    p fib(15)", "  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  n <= 1 ? n :  fib( n - 1 ) + fib(\
    \ n - 2 )\nend", "  x, y = 0, 1\n  n.times do\n    x, y = y, x + y\n  end\n  x\n\
    end", "  @calls = 1\n  fib2(n)\nend", "  if n == 1\n    return 1\n  elsif n ==\
    \ 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  puts \"Fib:\
    \ #{n}\"\n  if n <= 2\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend",
  "    @fib ||= Hash.new do |hash, n|\n        if n == 0\n            hash[n] = 0\n\
    \        elsif n == 1\n            hash[n] = 1\n        else\n            hash[n]\
    \ = hash[n-1] + hash[n-2]\n        end\n    end\n    @fib[n]\nend", "  fib_rec(n,\
    \ 1, 0)\nend", "  n == 0 ? 0 : n == 1 ? 1 : fib(n-1) + fib(n-2)\nend", "  return\
    \ 1 if n < 3\n  fib(n-1) + fib(n-2)\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n\
    \  fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "\tcase n\n\t\
    when 0\n\t\t0\n\twhen 1\n\t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend",
  "  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\nend", "  (n <=\
    \ 1) ? n : fib(n-1) + fib(n-2)\nend", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend",
  "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if n\
    \ == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1)\
    \ + fib(n-2)\nend", "  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1) +\
    \ fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  n <= 1\
    \ ? n : fib(n-1) + fib(n-2)\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\nend", " \
    \ if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend",
  "  return 1 if n == 1\n  return 1 if n == 2\n  i = 3\n  f1 = 1\n  f2 = 1\n  while\
    \ i <= n\n    fn = f1 + f2\n    f1 = f2\n    f2 = fn\n    i += 1\n  end\n  fn\n\
    end", "  case n\n  when 0, 1\n    n\n  else\n    fib(n - 1) + fib(n - 2)\n  end\n\
    end", "  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n <= 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    1\n  elsif\
    \ n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n if\
    \ n < 2\n  fib(n-1) + fib(n-2)\nend", "  fib = -> (x) {\n    if x < 2\n      1\n\
    \    else\n      fib.call(x - 1) + fib.call(x - 2)\n    end\n  }\n  fib.call(n)\n\
    end", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n ==\
    \ 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  case n\n  when 0,\
    \ 1\n    n\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend", "  if n < 2\n  \
    \  n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "\tif n == 0\n\t\t0\n\telsif\
    \ n == 1\n\t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend", "  return 1 if\
    \ n < 3\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return 1\n  elsif n ==\
    \ 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend", "  case n\n  when\
    \ 0\n    return 0\n  when 1\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n \
    \ end\nend", "  if n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if\
    \ n <= 2\n  fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
