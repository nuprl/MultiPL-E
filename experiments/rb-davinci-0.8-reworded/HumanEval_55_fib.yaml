name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
  # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nfib = lambda { |n|\
    \ fib(n) }", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return 1 if\
    \ n <= 2\n  return fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end", "  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend", "  if n < 2\n    return n\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  i = 0\n  a = 0\n  b = 1\n  while i < n\n\
    \    i += 1\n    c = a + b\n    a = b\n    b = c\n  end\n  a\nend", "  return\
    \ n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    1\n  elsif n == 2\n \
    \   1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n <= 1\n    return n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if\
    \ n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "\tcall(n)\nend",
  "    return 0 if n == 0\n    return 1 if n == 1\n    return fib(n-1) + fib(n-2)\n\
    end", "  n <= 1 ? n : fib(n-1) + fib(n-2)\nend", "  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
