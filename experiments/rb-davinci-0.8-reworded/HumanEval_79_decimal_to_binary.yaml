name: HumanEval_79_decimal_to_binary
language: rb
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  # >>> decimal_to_binary.call(15)\n# \"db1111db\"\n# >>> decimal_to_binary.call(32)\n\
  # \"db100000db\"\ndef decimal_to_binary(decimal)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
  \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
  \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
  , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\n\
  end\n"
completions: ["  # hint: you might need modulo and division operators\n  # modulo\
    \ (%) operator will give you the remainder\n  # division (/) operator will give\
    \ you the quotient\n  # division (/) and modulo (%) will be useful to get the\
    \ digits of the number\n  # you can use to_s to convert numbers to string\nend",
  "  binary = ''\n  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n\
    \    decimal /= 2\n  end\n  binary = '0' if binary == ''\n  'db' + binary + 'db'\n\
    end", "  binary = \"db\"\n  num = decimal\n  base = 2\n  while (num > 0)\n   \
    \ bit = num % base\n    num = num / base\n    binary += bit.to_s\n  end\n  binary\
    \ += \"db\"\n  binary.reverse\nend", "  if decimal >= 0\n    binary = []\n   \
    \ until decimal == 0\n      binary.unshift(decimal % 2)\n      decimal /= 2\n\
    \    end\n    \"db#{binary.join}db\"\n  else\n    \"db#{(~decimal).to_s(2).rjust(7,\
    \ '0')}db\"\n  end\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  binary = \"\"\
    \n  x = 0\n  while x <= 8\n    x += 1\n    remainder = decimal % 2\n    binary.insert(0,\
    \ remainder.to_s)\n    decimal = decimal / 2\n  end\n  binary.insert(0, \"db\"\
    )\n  binary.insert(-1, \"db\")\n  binary\nend", "  \nend", "  # First, we need\
    \ to convert the decimal number to a binary.\n  # To do that, we will divide the\
    \ number by 2 until the division result is 0.\n  # The remainder of each division\
    \ will give us the binary number.\n  # The division of the number by 2, gives\
    \ us the same number but with\n  # a remainder of 0 or 1.\n  # The division of\
    \ the number by 2, gives us the same number but with\n  # a remainder of 0 or\
    \ 1.\n  # We will keep the remainder of each division until the division result\
    \ is 0.\n  # This can be achieved with the \"%.2d\" operator.\n  # \".2d\" means\
    \ that the division result should be formatted as 2 digits.\n  # We take the division\
    \ remainder and the division result,\n  # and we combine them together with a\
    \ comma.\n  # The division remainder is the first item in the array and the division\
    \ result is the second.\n  # The division remainder is the binary number (the\
    \ one we're looking for).\n  # The division result is the decimal number, but\
    \ we need to divide it again by 2.\n  # We iterate until the division result is\
    \ 0.\n  # After that, we need to reverse the array of the division remainder,\n\
    \  # to get the correct binary number.\n  # We convert the array to a string and\
    \ we add the \"db\" characters to the beginning and the end.\n  # And that's it!\n\
    \  binary = []\n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  'db' + binary.reverse.join + 'db'\nend", "  num = decimal.to_s(2)\n\
    \  \"db#{num}db\"\nend", "  decimal = decimal.to_s(2)\n  decimal = \"db\" + decimal\
    \ + \"db\"\nend", "  \"db#{'%b' % decimal}db\"\nend", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary = (decimal % 2).to_s + binary\n    decimal = decimal\
    \ / 2\n  end\n  binary = \"0\" + binary if binary.length % 8 != 0\n  # add necessary\
    \ extra 0s to front so string's length is a multiple of 8\n  \"db\" + binary +\
    \ \"db\"\nend", "  \nend", "  binary = \"db\"\n  while decimal > 0\n    binary\
    \ << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary.reverse!\n  binary\
    \ << \"db\"\nend\nputs \"decimal_to_binary\"\nputs decimal_to_binary(15) == \"\
    db1111db\"\nputs decimal_to_binary(32) == \"db100000db\"", "  binary = \"\"\n\
    \  until decimal == 0\n    decimal, remainder = decimal.divmod(2)\n    binary.prepend(remainder.to_s)\n\
    \  end\n  \"db#{binary}db\"\nend", "  'db' + decimal.to_s(2) + 'db'\nend", " \
    \ binary = \"db\"\n  while decimal > 0\n    binary << ((decimal % 2).to_s)\n \
    \   decimal /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "  # binary_array = []\n  # if decimal == 0\n  #   return binary_array.join('db')\n\
    \  # end\n  #\n  # while decimal > 0\n  #   binary_array.unshift(decimal % 2)\n\
    \  #   decimal = decimal / 2\n  # end\n  #\n  # \"db#{binary_array.join}db\"\n\
    \  \"db#{decimal.to_s(2)}db\"\nend", "  binary = \"\"\n  while decimal > 0\n \
    \   binary.prepend(\"1\")\n    decimal -= 1\n  end\n  binary = binary.ljust(decimal_to_binary.get_parameter_count,\
    \ \"0\")\n  return \"db\" + binary + \"db\"\nend", "  %{db#{decimal.to_s(2)}db}\n\
    end", "  binary = []\n  while decimal > 0\n    binary.unshift(decimal % 2)\n \
    \   decimal /= 2\n  end\n  \"db#{binary.join}db\"\nend", "  'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  decimal.to_s(2)\nend", "  binary = 'db'\n  while decimal >\
    \ 0\n    binary = binary + decimal.to_s(2)\n    decimal = decimal - decimal\n\
    \  end\n  binary = binary + 'db'\n  binary\nend", "  binary = \"\"\n  while decimal\
    \ > 0\n    binary = (decimal % 2).to_s + binary\n    decimal = decimal / 2\n \
    \ end\n  \"db\" + binary + \"db\"\nend", "  binary = \"\"\n  index = 0\n  until\
    \ decimal < 1\n    digit = decimal % 2\n    decimal = decimal / 2\n    binary[index]\
    \ = digit.to_s\n    index += 1\n  end\n  binary.reverse\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "    return \"db#{decimal.to_s(2)}db\"\nend", "  binary = []\n  loop do\n\
    \    break if decimal == 0\n    remainder = decimal % 2\n    binary.unshift(remainder)\n\
    \    decimal /= 2\n  end\n  \"db#{binary.join}db\"\nend", "  binary = \"\"\n \
    \ if decimal > 0\n    binary << \"1\"\n  else\n    binary << \"0\"\n  end\n  until\
    \ decimal == 0\n    if decimal % 2 == 0\n      binary << \"0\"\n    else\n   \
    \   binary << \"1\"\n    end\n    decimal = decimal / 2\n  end\n  binary = binary.reverse\n\
    \  binary = \"db\" + binary + \"db\"\nend", "  bin_str = ''\n  loop do\n    bin_str\
    \ << (decimal % 2).to_s\n    decimal /= 2\n    break if decimal == 0\n  end\n\
    \  \"db#{bin_str.reverse}db\"\nend", "  'db' + decimal.to_s(2) + 'db'\nend", " \
    \ binary = \"db\"\n  until decimal == 0\n    binary << (decimal % 2).to_s\n  \
    \  decimal /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend", "  \n  # First,\
    \ convert the decimal to binary.\n  binary = decimal.to_s(2)\n  \n  # Then return\
    \ the wrapped string.\n  return \"db#{binary}db\"\nend", "  array = []\n  num\
    \ = decimal\n  while num > 0\n    array << num % 2\n    num = num / 2\n  end\n\
    \  array.reverse.join(\"\")\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  # this\
    \ is where the method code will go\nend", "  binary = ''\n  if decimal == 0\n\
    \    binary = 'db0db'\n  else\n    binary = binary_helper(decimal, binary)\n \
    \ end\n  return \"db#{binary}db\"\nend", "  binary = []\n  until decimal == 0\n\
    \    if decimal % 2 == 0\n      binary.unshift(0)\n    else\n      binary.unshift(1)\n\
    \    end\n    decimal = decimal / 2\n  end\n  binary.unshift(\"db\").push(\"db\"\
    ).join\nend", "    binary = []\n    until decimal == 0\n        decimal, remainder\
    \ = decimal.divmod(2)\n        binary.unshift(remainder)\n    end\n    \"db#{binary.join}db\"\
    \nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  if decimal.is_a?(Integer)\n  \
    \  \"db#{decimal.to_s(2)}db\"\n  else\n    \"Please provide an integer as input\"\
    \n  end\nend", "  # Your code here\nend", "  binary = \"\"\n  while decimal >\
    \ 0\n    binary = (decimal % 2).to_s + binary\n    decimal = decimal / 2\n  end\n\
    \  \"db\" + binary + \"db\"\nend", "  decimal.to_s(2)\nend", "  'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  'db' + decimal.to_s(2) + 'db'\nend", "  if decimal == 0\n \
    \   return \"db0db\"\n  end\n  result = \"db\"\n  while decimal != 0\n    result\
    \ << (decimal % 2).to_s\n    decimal /= 2\n  end\n  result << \"db\"\n  result.reverse\n\
    end", "  if (decimal == 0)\n    \"db0db\"\n  else\n    binary = \"\"\n    while\
    \ (decimal > 0)\n      binary = (decimal % 2).to_s + binary\n      decimal = decimal\
    \ / 2\n    end\n    \"db\" + binary + \"db\"\n  end\nend", "    binary = 'db'\n\
    \    while decimal > 0\n        if decimal % 2 == 0\n            binary += '0'\n\
    \        else\n            binary += '1'\n        end\n        decimal /= 2\n\
    \    end\n    binary += 'db'\n    binary.reverse\nend", end, "  decimal.to_s(2)\n\
    end", "  binary = 'db'\n  while decimal > 0\n    binary = binary + (decimal %\
    \ 2).to_s\n    decimal = decimal / 2\n  end\n  binary + 'db'\nend", "  'db' +\
    \ decimal.to_s(2) + 'db'\nend", "  'db' + decimal.to_s(2) + 'db'\nend", "  bin\
    \ = []\n  while decimal > 0\n    bin.unshift(decimal % 2)\n    decimal /= 2\n\
    \  end\n  bin.unshift(\"db\").push(\"db\").join\nend", "  bin = ''\n  while decimal\
    \ > 0\n    bin += (decimal % 2).to_s\n    decimal /= 2\n  end\n  \"db#{bin.reverse}db\"\
    \nend", "  # Your code here\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "    binary\
    \ = \"db\"\n    while decimal > 0\n        binary << (decimal % 2).to_s\n    \
    \    decimal /= 2\n    end\n    binary << \"db\"\n    binary.reverse\nend", " \
    \ decimal.to_s(2)\nend", "    decimal.to_s(2)\nend", "    puts \"db#{decimal.to_s(2)}db\"\
    \nend", "  # TODO: return the correct string\n  # Add your code here\n  #convert\
    \ decimal to binary\n  #return binary\nend", "\tbinary = \"\"\n\tuntil decimal\
    \ == 0\n\t\tif decimal % 2 == 0\n\t\t\tbinary.insert(0, \"0\")\n\t\telse\n\t\t\
    \tbinary.insert(0, \"1\")\n\t\tend\n\t\tdecimal = decimal / 2\n\tend\n\t\"db\"\
    \ + binary + \"db\"\nend", "  puts \"db#{decimal.to_s(2)}db\"\nend", "  @decimal\
    \ = decimal\n  @binary = ''\n  while @decimal != 0\n    @binary.prepend((@decimal\
    \ % 2).to_s)\n    @decimal = @decimal / 2\n  end\n  @binary = 'db' + @binary +\
    \ 'db'\nend", "  d_to_b = decimal.to_s(2)\n  return d_to_b.to_s\nend", "\tbin=decimal.to_s(2)\n\
    \tbin=\"db\"+bin+\"db\"\nend", "  binary = ''\n  while decimal > 0\n    binary.prepend(decimal\
    \ % 2 == 0 ? '0' : '1')\n    decimal /= 2\n  end\n  'db' + binary + 'db'\nend",
  "  'db' + decimal.to_s(2) + 'db'\nend", "  'db' + decimal.to_s(2) + 'db'\nend",
  "end\nputs decimal_to_binary(15) == \"db1111db\"\nputs decimal_to_binary(32) ==\
    \ \"db100000db\"", "  decimal.to_s(2)\nend", "  decimal.to_s(2)\nend", "  decimal.to_s(2)\n\
    end", "  \"db#{decimal.to_s(2)}db\"\nend", "  if (decimal < 0)\n    return nil\n\
    \  end\n  if (decimal == 0)\n    return \"db0db\"\n  end\n  result = \"db\"\n\
    \  while decimal > 0\n    result << \"#{decimal % 2}\"\n    decimal /= 2\n  end\n\
    \  result << \"db\"\n  result.reverse\nend", "  decimal.to_s(2)\nend", "  binary\
    \ = 'db'\n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /=\
    \ 2\n  end\n  binary << 'db'\n  binary.reverse\nend", "  binary = ''\n  while\
    \ decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n  \"\
    db#{binary.reverse}db\"\nend", "  (\"db\" + decimal.to_s(2) + \"db\")\nend", " \
    \ result = ''\n  result << 'db'\n  if decimal == 0\n    result << '0'\n  else\n\
    \    while decimal > 0\n      result << (decimal % 2).to_s\n      decimal /= 2\n\
    \    end\n  end\n  result << 'db'\n  result.reverse\nend", "  db_array = [\"db\"\
    ]\n  while decimal > 0\n    if decimal%2 == 0\n      db_array.unshift(\"0\")\n\
    \    else\n      db_array.unshift(\"1\")\n    end\n    decimal = decimal/2\n \
    \ end\n  db_array.push(\"db\")\n  db_array.join\nend", "  \nend", "  binary =\
    \ []\n  while decimal != 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n\
    \  end\n  if binary.length == 0\n    binary << 0\n  end\n  binary.unshift(\"db\"\
    )\n  binary << \"db\"\n  binary.join\nend", "  binary = decimal.to_s(2)\n  \"\
    db#{binary}db\"\nend", "  binary = \"\"\n  while decimal > 0\n    binary = (decimal\
    \ % 2).to_s + binary\n    decimal = decimal / 2\n  end\n  return \"db\" + binary\
    \ + \"db\"\nend", "  binary = []\n  while decimal > 0\n    binary.unshift(decimal\
    \ % 2)\n    decimal /= 2\n  end\n  \"db#{binary.join}db\"\nend", "  x = decimal\n\
    \  answer = \"db\"\n  while x > 0\n    remainder = x % 2\n    answer << remainder.to_s\n\
    \    x = x / 2\n  end\n  answer << \"db\"\n  answer.reverse\nend", "  decimal\
    \ = decimal.to_s(2)\n  decimal = \"db\" + decimal + \"db\"\nend", "  binary =\
    \ \"\"\n  while decimal != 0\n    binary.insert(0, (decimal % 2).to_s)\n    decimal\
    \ /= 2\n  end\n  binary = binary.insert(0, \"0\") if binary.length == 0\n  binary\
    \ = binary.insert(0, \"db\").insert(-1, \"db\")\nend", "  binary = []\n  while\
    \ decimal > 0\n    if decimal % 2 == 0\n      binary.unshift(0)\n    else\n  \
    \    binary.unshift(1)\n    end\n    decimal = decimal / 2\n  end\n  binary.unshift(\"\
    db\")\n  binary.push(\"db\")\n  binary.join\nend", '  binary = "db"', "  binary\
    \ = []\n  until decimal == 0\n    binary.unshift(decimal % 2)\n    decimal /=\
    \ 2\n  end\n  \"db#{binary.join}db\"\nend", "  output = []\n  until decimal ==\
    \ 0\n    remainder = decimal % 2\n    output.unshift(remainder)\n    decimal =\
    \ decimal / 2\n  end\n  output.unshift(\"db\")\n  output.push(\"db\")\n  output.join\n\
    end", "  \"db#{decimal.to_s(2)}db\"\nend", "  return 'db' + decimal.to_s(2) +\
    \ 'db'\nend", "  binary = decimal.to_s(2)\n  binary = \"0\" * (8 - binary.length)\
    \ + binary if binary.length < 8\n  \"db#{binary}db\"\nend", "  return '' if decimal\
    \ == 0\n  binary = ''\n  while decimal > 0\n    binary.prepend((decimal % 2).to_s)\n\
    \    decimal /= 2\n  end\n  binary = '0' + binary\n  binary.prepend('db')\n  binary.concat('db')\n\
    end", '  binary = "db"', "  if decimal == 0\n    return \"db0db\"\n  end\n  result\
    \ = \"db\"\n  if decimal > 0\n    while decimal > 0\n      remainder = decimal\
    \ % 2\n      result += remainder.to_s\n      decimal = decimal / 2\n    end\n\
    \  else\n    while decimal < 0\n      remainder = (decimal % 2)\n      result\
    \ += remainder.to_s\n      decimal = decimal / 2\n    end\n  end\n  result +=\
    \ \"db\"\n  result = result.reverse\nend", "  binary = []\n  if decimal < 2\n\
    \    binary << decimal\n  else\n    while decimal >= 2\n      binary << decimal\
    \ % 2\n      decimal = decimal / 2\n    end\n    binary << decimal\n  end\n  return\
    \ binary.reverse.join\nend", "  decimal.to_s(2)\nend", "  puts \"db\" + decimal.to_s(2)\
    \ + \"db\"\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  binary = []\n  powers\
    \ = (0..decimal).to_a.reverse.map { |x| 2**x }\n  powers.each do |power|\n   \
    \ binary << 1 if decimal >= power\n    decimal -= power if decimal >= power\n\
    \  end\n  binary.unshift(\"db\").push(\"db\").join\nend", "  s = \"\"\n  while\
    \ decimal > 0\n    if decimal % 2 == 0\n      s = \"0\" + s\n    else\n      s\
    \ = \"1\" + s\n    end\n    decimal = decimal / 2\n  end\n  \"db\" + s + \"db\"\
    \nend", "  return \"db\"+decimal.to_s(2)+\"db\"\nend", "  db_string = \"db\"\n\
    \  while decimal > 0\n    remainder = decimal % 2\n    db_string.prepend(remainder.to_s)\n\
    \    decimal = decimal / 2\n  end\n  db_string.prepend(\"0\") if db_string.length\
    \ % 8 != 0\n  db_string.prepend(\"db\")\n  db_string.concat(\"db\")\nend", " \
    \ bin_array = []\n  binary = 'db'\n  until decimal <= 0\n    if decimal % 2 ==\
    \ 0\n      bin_array.unshift('0')\n    else\n      bin_array.unshift('1')\n  \
    \  end\n    decimal = decimal / 2\n  end\n  bin_array.each do |value|\n    binary\
    \ << value\n  end\n  binary << 'db'\n  binary\nend", "  str = \"\"\n  str << \"\
    db\"\n  bits = 0\n  while decimal >= 2**bits\n    if decimal - 2**bits >= 0\n\
    \      str << \"1\"\n      decimal -= 2**bits\n    else\n      str << \"0\"\n\
    \    end\n    bits += 1\n  end\n  str << \"db\"\n  str\nend", "  puts \"db\" +\
    \ decimal.to_s(2) + \"db\"\nend", "  bin = []\n  while decimal > 0\n    bin.unshift(decimal\
    \ % 2)\n    decimal /= 2\n  end\n  \"db#{bin.join}db\"\nend", "  binary = []\n\
    \  while decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary.join}db\"\nend", "  array = []\n  until decimal == 0\n    array\
    \ << (decimal % 2)\n    decimal = decimal / 2\n  end\n  \"db\" + array.reverse.join\
    \ + \"db\"\nend", "  #TODO: Implement this method.\nend", "  return 'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  # Your code here!\nend", "  bin = decimal.to_s(2)\n  \"db#{bin}db\"\
    \nend", "  binary = []\n  quotient = decimal\n  while quotient != 0\n    remainder\
    \ = quotient % 2\n    quotient = quotient / 2\n    binary.unshift(remainder)\n\
    \  end\n  binary = binary.join('')\n  binary = \"db#{binary}db\"\nend", "  binary\
    \ = [0]\n  while decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /=\
    \ 2\n  end\n  binary.join(\"\")\nend", "  binary = \"db\"\n  while decimal > 0\n\
    \    if decimal % 2 == 0\n      binary += \"0\"\n    else\n      binary += \"\
    1\"\n    end\n    decimal /= 2\n  end\n  binary += \"db\"\n  return binary.reverse\n\
    end", "\tbinary = decimal.to_s(2)\n\treturn \"db\" + binary + \"db\"\nend", " \
    \ binary = []\n  output = \"db\"\n  until decimal == 0\n    if decimal % 2 ==\
    \ 0\n      binary << \"0\"\n    else\n      binary << \"1\"\n    end\n    decimal\
    \ = decimal / 2\n  end\n  binary.reverse.each do |bit|\n    output << bit\n  end\n\
    \  output << \"db\"\n  return output\nend", "  decimal = decimal.to_s(2)\n  decimal\
    \ = \"db\" + decimal + \"db\"\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  array\
    \ = []\n  while decimal > 0\n    remainder = decimal % 2\n    array.unshift(remainder)\n\
    \    decimal = decimal / 2\n  end\n  return \"db\" + array.join(\"\") + \"db\"\
    \nend", "    # your code here\n    return \"db#{decimal.to_s(2)}db\"\nend", " \
    \ decimal.to_s(2)\nend", "  decimal.to_s(2)\nend", "  # wite code here\nend",
  "  binary = 'db'\n  while decimal > 0\n    if decimal.even?\n      binary << '0'\n\
    \    else\n      binary << '1'\n    end\n    decimal /= 2\n  end\n  binary.reverse\
    \ << 'db'\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "    \"db#{decimal.to_s(2)}db\"\
    \nend", "  answer = \"\"\n  while decimal > 0\n    if decimal % 2 == 0\n     \
    \ answer.prepend(\"0\")\n    else\n      answer.prepend(\"1\")\n    end\n    decimal\
    \ = decimal / 2\n  end\n  \"db\" + answer + \"db\"\nend", "  binary = 'db'\n \
    \ while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  while binary.length <= 8\n    binary = '0' + binary\n  end\n  binary\
    \ + 'db'\nend", "  binary = \"db\"\n  until decimal == 0\n    if decimal % 2 ==\
    \ 0\n      binary << \"0\"\n    else\n      binary << \"1\"\n    end\n    decimal\
    \ /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend", "   binary = \"\"\n\
    \   until decimal == 0\n      remainder = decimal % 2\n      binary = remainder.to_s\
    \ + binary\n      decimal = decimal / 2\n   end\n   return \"db\" + binary + \"\
    db\"\nend", "  if decimal == 0\n    return 'db0db'\n  end\n  binary = ''\n  until\
    \ decimal == 0\n    binary = (decimal % 2).to_s + binary\n    decimal = decimal\
    \ / 2\n  end\n  binary = 'db' + binary + 'db'\nend", "  array = []\n  until decimal\
    \ == 0\n    if decimal % 2 == 0\n      array.unshift('0')\n    else\n      array.unshift('1')\n\
    \    end\n    decimal = decimal / 2\n  end\n  \"db#{array.join}db\"\nend", " \
    \ binary = \"\"\n  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n\
    \    decimal = decimal / 2\n  end\n  \"db\" + binary + \"db\"\nend", "  number\
    \ = \"db\"\n  length = decimal.to_s(2).length\n  (1..length).each do |i|\n   \
    \ if decimal > 0\n      number << \"1\"\n      decimal -= 2**(length-i)\n    else\n\
    \      number << \"0\"\n    end\n  end\n  number << \"db\"\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "  decimal.to_s(2)\nend", "    # start with a string with the\n    # db\
    \ characters\n    binary = \"db\"\n    # We then want to convert the decimal to\
    \ binary,\n    # adding characters to our string.\n    # To do this, we keep dividing\
    \ the decimal by 2 and using the remainder\n    # to work out the binary\n   \
    \ while decimal > 0\n        remainder = decimal % 2\n        # then we add the\
    \ remainder to the binary string\n        binary += remainder.to_s\n        #\
    \ and divide the decimal by 2 to get the next part of the binary\n        decimal\
    \ = decimal / 2\n    end\n    # then we reverse the string so it reads the right\
    \ way\n    binary.reverse + \"db\"\nend", "  binary = 'db'\n  num = decimal\n\
    \  while num > 0\n    binary << (num % 2).to_s\n    num /= 2\n  end\n  binary\
    \ << 'db'\n  binary.reverse\nend", "\tfirst = \"db\"\n\tlast = \"db\"\n\tbinary\
    \ = first + decimal.to_s(2) + last\nend", "\t#create an empty array\n\tarray =\
    \ []\n\t#break it down into binary parts\n\tbinary = decimal.to_s(2)\n\t#index\
    \ each character of the binary parts, add it to the array\n\tbinary.each_char\
    \ {|char| array << char}\n\t#add the extra bits\n\tarray.unshift('d')\n\tarray.push('b')\n\
    \t#join the array together, separate by a space\n\tnewarray = array.join\nend",
  "  binary = 'db'\n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  binary + 'db'\nend", "  # TODO: Implement me\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  \"db#{decimal.to_s(2)}db\"\nend",
  "  output = 'db'\n  while decimal != 0\n    output += (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  output += 'db'\n  output.reverse\nend", "  #TODO: implement\n\
    end", "  ret_string = \"\"\n  current_value = decimal\n  # puts \"current_value:\
    \ #{current_value}\"\n  until current_value <= 0\n    if current_value % 2 ==\
    \ 0\n      ret_string.prepend(\"0\")\n    else\n      ret_string.prepend(\"1\"\
    )\n    end\n    current_value = current_value / 2\n    # puts \"current_value:\
    \ #{current_value}\"\n  end\n  return \"db#{ret_string}db\"\nend", "  binary =\
    \ \"\"\n  if decimal == 0\n    binary = \"db0db\"\n  else\n    binary = \"db\"\
    \n    while decimal > 0\n      if decimal % 2 == 0\n        binary << \"0\"\n\
    \      else\n        binary << \"1\"\n      end\n      decimal /= 2\n    end\n\
    \    binary << \"db\"\n  end\n  binary.reverse\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "  if decimal == 0\n    return \"db0db\"\n  end\n  i = 0\n  binary = \"\
    \"\n  while decimal > 0\n    if decimal % 2 == 0\n      binary = \"0\" + binary\n\
    \    else\n      binary = \"1\" + binary\n    end\n    decimal = decimal / 2\n\
    \  end\n  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  'db' +\
    \ decimal.to_s(2) + 'db'\nend", "  binary = ''\n  binary << 'db'\n  binary <<\
    \ decimal.to_s(2)\n  binary << 'db'\n  binary\nend", "  binary = \"db\"\n  while\
    \ decimal > 0\n    if decimal % 2 == 0\n      binary = \"0\" + binary\n    else\n\
    \      binary = \"1\" + binary\n    end\n    decimal = decimal / 2\n  end\n  binary\
    \ = binary + \"db\"\n  binary\nend", "  if decimal == 0\n    return \"db0db\"\n\
    \  end\n  n = 0\n  while 2**n <= decimal\n    n += 1\n  end\n  n -= 1\n  result\
    \ = []\n  while n >= 0\n    if 2**n <= decimal\n      result << 1\n      decimal\
    \ -= 2**n\n    else\n      result << 0\n    end\n    n -= 1\n  end\n  result.unshift(\"\
    db\").push(\"db\").join(\"\")\nend", "  decimal.to_s(2)\nend", "  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend", "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\n\
    end", "  binary = \"\"\n  while decimal > 0\n    binary.prepend(decimal % 2)\n\
    \    decimal /= 2\n  end\n  binary = \"0\" * 8 if binary.length < 8\n  \"db#{binary}db\"\
    \nend", "  binary = \"db\"\n  while decimal > 0\n    binary = binary << (decimal\
    \ % 2).to_s\n    decimal = decimal / 2\n  end\n  binary << \"db\"\n  binary.reverse\n\
    end", "  # start writing your code here\n  a=decimal.to_s(2)\n  \"db\"+a+\"db\"\
    \nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  binary = \"\"\n  binary = decimal.to_s(2)\n\
    \  binary.insert(0, \"db\")\n  binary.insert(-1, \"db\")\n  binary\nend", "  decimal.to_s(2)\n\
    end", "  \"db#{decimal.to_s(2)}db\"\nend", "  return \"db#{decimal.to_s(2)}db\"\
    \nend", "  decimal.to_s(2)\nend", "  binary = []\n  while decimal != 0\n    binary.push(decimal\
    \ % 2)\n    decimal = decimal / 2\n  end\n  binary.reverse.join.to_s\nend", " \
    \ binary = []\n  pow_of_two = 1\n  if decimal == 0\n    binary.push(0)\n  else\n\
    \    while pow_of_two <= decimal\n      pow_of_two *= 2\n    end\n    pow_of_two\
    \ /= 2\n    until pow_of_two == 0\n      if pow_of_two <= decimal\n        binary.push(1)\n\
    \        decimal -= pow_of_two\n      else\n        binary.push(0)\n      end\n\
    \      pow_of_two /= 2\n    end\n  end\n  \"db\" + binary.join + \"db\"\nend",
  "  bin = ''\n  until decimal == 0\n    bin = (decimal % 2).to_s + bin\n    decimal\
    \ /= 2\n  end\n  \"db#{bin}db\"\nend", "  \"db#{decimal.to_s(2)}db\"\nend", " \
    \ \nend", "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\nend", "  binary =\
    \ []\n  while decimal != 0\n    decimal, remainder = decimal.divmod(2)\n    binary.unshift(remainder)\n\
    \  end\n  \"db#{binary.join}db\"\nend\nputs '----------------'\nputs decimal_to_binary(15)\n\
    puts decimal_to_binary(32)", "  string = \"\"\n  string += \"db\"\n  string +=\
    \ decimal.to_s(2)\n  string += \"db\"\n  string\nend", "  binary = ''\n  binary.insert(0,\
    \ '0') if decimal.odd?\n  binary.insert(0, '1') if decimal.even?\n  decimal /=\
    \ 2 until decimal <= 1\n  binary.prepend('db').concat('db')\nend", "  binary =\
    \ \"\"\n  while (decimal > 0)\n    binary << (decimal % 2).to_s\n    decimal /=\
    \ 2\n  end\n  binary = binary.reverse\n  binary = binary.insert(0, \"db\")\n \
    \ binary = binary.insert(-1, \"db\")\n  binary\nend", "  binary = []\n  while\
    \ decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n  'db'\
    \ + binary.join + 'db'\nend", "  if decimal < 0\n    \"#{'db'}-#{'1' * (decimal.abs.to_s(2).length\
    \ - 1)}#{decimal.abs.to_s(2)}#{'db'}\"\n  else\n    \"#{'db'}#{'0' * (decimal.to_s(2).length\
    \ - 1)}#{decimal.to_s(2)}#{'db'}\"\n  end\nend", "  binary = 'db'\n  while decimal\
    \ > 0\n    if decimal.odd?\n      binary = binary + '1'\n    else\n      binary\
    \ = binary + '0'\n    end\n    decimal = decimal / 2\n  end\n  binary + 'db'\n\
    end", "  binary = decimal.to_s(2)\n  binary.insert(0, \"db\")\n  binary.insert(-1,\
    \ \"db\")\nend", "  #convert the decimal to binary, then add db to the beginning\
    \ and end\n  \"db#{decimal.to_s(2)}db\"\nend", "  binary = 'db'\n  while decimal\
    \ != 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary +\
    \ 'db'\nend", "\t\"db\" + decimal.to_s(2) + \"db\"\nend", "  decimal_array = decimal.to_s.split('')\n\
    \  decimal_array.map! { |x| x.to_i }\n  binary_array = []\n  while decimal_array.length\
    \ > 0\n    binary_array.unshift((decimal_array.pop % 2).to_s)\n    decimal_array.map!\
    \ { |x| x / 2 }\n  end\n  \"db\" + binary_array.join + \"db\"\nend", "  binary\
    \ = 'db'\n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /=\
    \ 2\n  end\n  binary << 'db'\n  binary.reverse\nend", "  ('db' + decimal.to_s(2)\
    \ + 'db')\nend", "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\nend", "  #decimal\
    \ = decimal\n  binary = \"db\"\n  i = 0\n  while i <= decimal\n    if decimal/2\
    \ == 0\n      binary << \"1\"\n      i += 1\n    elsif decimal/2 > 0\n      binary\
    \ << \"1\"\n      decimal = decimal/2\n      i += 1\n    else\n      binary <<\
    \ \"0\"\n      decimal = decimal/2\n      i += 1\n    end\n  end\n  binary <<\
    \ \"db\"\n  puts binary\nend", "  binary = ''\n  while decimal > 0\n    binary\
    \ = (decimal % 2).to_s + binary\n    decimal /= 2\n  end\n  'db' + binary + 'db'\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
