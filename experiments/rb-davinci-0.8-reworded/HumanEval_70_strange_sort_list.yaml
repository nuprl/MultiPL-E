name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  result = []\n  lst = lst.sort\n  while lst.size > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  if lst.length.even?\n\
    \    lst.sort!\n    half_length = lst.length / 2\n    left_list = lst[0..half_length\
    \ - 1]\n    right_list = lst[half_length..-1]\n    left_list.zip(right_list.reverse)\n\
    \  else\n    lst.sort!\n    half_length = lst.length / 2\n    left_list = lst[0..half_length\
    \ - 1]\n    right_list = lst[half_length..-1]\n    left_list.zip(right_list.reverse).flatten.drop(1)\n\
    \  end\nend", "  new_lst = []\n  while lst.length > 0\n    new_lst << lst.min\n\
    \    lst.delete(lst.min)\n    if lst.length > 0\n      new_lst << lst.max\n  \
    \    lst.delete(lst.max)\n    end\n  end\n  new_lst\nend", "  return lst if lst.length\
    \ <= 1\n  min_value = lst.min\n  lst.delete(min_value)\n  max_value = lst.max\n\
    \  lst.delete(max_value)\n  return [min_value, max_value] + strange_sort_list(lst)\n\
    end", "  sorted = lst.sort\n  max_i = sorted.length - 1\n  result = []\n  (0..max_i).each\
    \ do |i|\n    i.even? ? (result << sorted[i / 2]) : (result << sorted[max_i -\
    \ i / 2])\n  end\n  result\nend\nputs 'Strange sort'\nputs strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\nputs strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\nputs strange_sort_list([]) == []", "  lst.sort.partition.with_index{|_,i|\
    \ i.even?}.flatten\nend", "  lst.sort_by.with_index { |v, i| i.even? ? v : -v\
    \ }\nend", "  r = []\n  (0..lst.size - 1).step(2) do |i|\n    r << lst.slice!(lst.index(lst.min))\n\
    \    r << lst.slice!(lst.index(lst.max))\n  end\n  r\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  odd = lst.select.with_index { |_, i| i.odd? }.sort\n  even = lst.select.with_index\
    \ { |_, i| i.even? }.sort.reverse\n  odd.zip(even).flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, index| [index.even? ? :first : :last] }\nend", '  return lst if lst.empty?',
  "  return lst if lst.empty?\n  sorted = []\n  lst.sort!\n  i = 0\n  j = lst.length\
    \ - 1\n  while i <= j\n    sorted << lst[i]\n    sorted << lst[j] if i != j\n\
    \    i += 1\n    j -= 1\n  end\n  sorted\nend", "  return lst if lst.empty?\n\
    \  tmp_lst = lst.sort\n  result = []\n  while tmp_lst.length > 0\n    result <<\
    \ tmp_lst.shift\n    result << tmp_lst.pop unless tmp_lst.empty?\n  end\n  result\n\
    end", "  return lst if lst.empty?\n  max = lst.max\n  min = lst.min\n  i = lst.index(min)\n\
    \  j = lst.index(max)\n  lst[i] = max\n  lst[j] = min\n  strange_sort_list(lst)\n\
    end", "  even = lst.sort[0..(lst.length / 2 - 1)]\n  odd = lst.sort[(lst.length\
    \ / 2)..-1].reverse\n  even.each_with_index.map { |e, i| i.even? ? e : odd[i /\
    \ 2] }\nend", "  lst.sort!\n  new_lst = []\n  while lst.size != 0\n    new_lst\
    \ << lst.delete_at(0)\n    new_lst << lst.delete_at(-1)\n  end\n  new_lst\nend",
  "  min = lst.min\n  max = lst.max\n  min_el = min\n  max_el = max\n  sorted_list\
    \ = []\n  loop do\n    if sorted_list.length.even?\n      sorted_list << min_el\n\
    \      min_el += 1\n    else\n      sorted_list << max_el\n      max_el -= 1\n\
    \    end\n    break if sorted_list.length == lst.length\n  end\n  sorted_list\n\
    end", "  n = lst.length\n  res = Array.new(n)", "  lst.sort.sort_by.with_index{|_,i|\
    \ i.even? ? -1 : 1}.reverse\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
