name: HumanEval_7_filter_by_substring
language: rb
prompt: "# Filter an input array of strings only for ones that contain given substring\n\
  # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\n\
  def filter_by_substring(strings, substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
  \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
  \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"\
  prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
  ))\n  end\nend\n"
completions: ["  filter(strings) { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  raise \"method\
    \ not implemented yet\"\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |str| str.include?(substring) }\nend", "  strings.select {\
    \ |str| str.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  return [] if\
    \ strings.empty?\n  return [strings[0]] if strings.length == 1", "  strings.select\
    \ { |string| string.include?(substring) }\nend\nfilter_by_substring = method(:filter_by_substring)",
  "  strings.select{|s| s.include?(substring)}\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.find_all { |string| string.include?(substring) }\nend",
  "\tstrings.select { |str| str.include?(substring) }\nend", "  strings.select { |str|\
    \ str.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ return strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "    strings.select{|s| s.include?(substring)}\n\
    end", "  strings.select { |string| string.include?(substring) }\nend", "  filter_strings\
    \ = []\n  strings.each do |string|\n    filter_strings << string if string.include?(substring)\n\
    \  end\n  filter_strings\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "    strings.select { |string| string.include?(substring) }\nend",
  "  strings.select { |string| string.include?(substring) }\nend", "  # \"abcd\",\
    \ \"abce\"\n  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |element| element.include?(substring) }\nend",
  "  strings.select { |s| s.include?(substring) }\nend", "  strings.select { |str|\
    \ str.include?(substring) }\nend", "  strings.select{|string| string.include?(substring)}\n\
    end", "  strings.keep_if { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  return strings.select { |str| str.include?(substring) }\nend", "\t\
    strings.select{|x| x.include?(substring)}\nend", "  strings.find_all { |s| s.include?(substring)\
    \ }\nend", "  strings.select{|str| str.downcase.include?(substring.downcase)}\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "\tstrings.filter\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |word| word.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |str| str.include?(substring) }\nend", "\tstrings.select{|str|\
    \ str.include?(substring)}\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |s| s.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  (strings.select { |s| s.include?(substring) })\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |el| el.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  # convert\
    \ input to array of strings if it isn't already\n  strings = strings.split(\"\
    ,\") unless strings.kind_of?(Array)\n  substrings = strings.select { |x| x.include?(substring)\
    \ }\n  substrings.sort\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "    strings.filter{|s| s.include?(substring)}\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.downcase.include?(substring.downcase) }\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select{|s|\
    \ s.include?(substring)}\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "    strings.find_all\
    \ do |string|\n        string.include?(substring)\n    end\nend", "    return\
    \ strings.filter { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  return strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "    return strings.find_all { |str| str.include?(substring) }\nend",
  "\tstrings.select { |s| s.include? substring }\nend", "  strings.select { |str|\
    \ str.include?(substring) }\nend", "  strings.find_all { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |word| word.include?(substring) }\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  # strings.select { |str| str.include?(substring) }\n  strings.select\
    \ &substring.method(:include?)\nend", "    return strings.select { |x| x.include?(substring)\
    \ }\nend", "  strings.select{|str| str.include?(substring)}\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  return strings.select { |string| string.include?(substring) }\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "    strings.select\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "    strings.select { |string| string.include?(substring) }\nend",
  "  strings.select { |e| e.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "    strings.filter { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.reject { |string| !string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "    puts strings.select { |item| item.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "\tstrings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ if strings.nil? || substring.nil?\n    []\n  else\n    strings.select { |string|\
    \ string.include?(substring) }\n  end\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  return strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  return\
    \ strings.filter{|s| s.include?(substring)}\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select{|string|\
    \ string.include?(substring)}\nend", "  # TODO\nend", "  strings.select { |str|\
    \ str.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |x| x.include?(substring) }\nend", "  p strings.filter { |string|\
    \ string.include?(substring) }\nend", "  require 'facets/array/xselect'\n  strings.xselect\
    \ { |s| s.include?(substring) }\nend", "  strings.reject { |str| !str.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.filter{|s| s.include?(substring)}\n\
    end", "    strings.select{|s| s.include?(substring)}\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.reject { |s| s.match(substring).nil?\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select{|s| s.include?(substring)}\nend", "  strings.select{|str|\
    \ str.include?(substring)}\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.reject\
    \ { |s| !s.include?(substring) }\nend", "  strings.select{|item| item.include?(substring)}\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "    # TODO: Your\
    \ implementation goes here\n    return [] if strings.length == 0\n    newarr =\
    \ []\n    strings.each do |i|\n        if i.include?(substring)\n            newarr.push(i)\n\
    \        end\n    end\n    return newarr\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "\tstrings.select { |s| s.include? substring }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  return strings.filter { |str| str.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select{|str| str.include?(substring)}\n\
    end", "  new_array = []\n  strings.each do |string|\n    if string.include?(substring)\n\
    \      new_array << string\n    end\n  end\n  new_array\nend", "  raise ArgumentError.new(\"\
    No 'strings' or 'substring' given\") if strings.nil? || substring.nil?\n  strings.filter\
    \ { |s| s.contains?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |el| el.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select{|s| s.include?(substring)}\nend", "  strings.select{|string|\
    \ string.include?(substring)}\nend", "  return [] if strings.empty?\n  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", '  return strings if strings.nil?', "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |word| word.include?(substring) }\nend", "  strings.select{|s|\
    \ s.include?(substring)}\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |s| s.include?(substring) }\nend", "  strings.select { |s|\
    \ s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  # your code goes here\n  return strings.select { |word| word.include?(substring)\
    \ }\nend", "\tstrings.select { |s| s.include? substring }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.find_all\
    \ do |str|\n    str.include?(substring)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
