name: HumanEval_75_is_multiply_prime
language: rb
prompt: "# Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100.\
  \ \n# Example:\n# >>> is_multiply_prime.call(30)\n# true\n# 30 = 2 * 3 * 5\ndef\
  \ is_multiply_prime(a)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_multiply_prime\n\
  \    candidate = method(:is_multiply_prime)\n    assert_equal(false, candidate.call(5))\n\
  \    assert_equal(true, candidate.call(30))\n    assert_equal(true, candidate.call(8))\n\
  \    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(125))\n\
  \    assert_equal(true, candidate.call(105))\n    assert_equal(false, candidate.call(126))\n\
  \    assert_equal(false, candidate.call(729))\n    assert_equal(false, candidate.call(891))\n\
  \    assert_equal(true, candidate.call(1001))\n  end\nend\n"
completions: ["\t\n\tfor i in 1..a\n\t\tif a%i == 0\n\t\t\tx = a/i\n\t\t\ty = i\n\t\
    \t\tif a%x == 0\n\t\t\t\tz = a/x\n\t\t\t\tif a%z == 0\n\t\t\t\t\tprime = [x,y,z]\n\
    \t\t\t\t\treturn prime\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\
    \telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\nend", "  return false\
    \ if a < 6\n  prime_factors = []\n  (2..a).each do |x|\n    next if a % x != 0\n\
    \    # no need to check for prime. as long as it is a factor, it is a prime factor!\n\
    \    # return false if !is_prime?(x)\n    prime_factors << x\n    a /= x\n   \
    \ break if a == 1\n  end\n  prime_factors.length == 3\nend", "  f = a.prime_division\n\
    \  f.all?{|c| c[1] == 1} ? true : false\nend", "  a.prime_division.flatten.size\
    \ == 3\nend", "  a.is_a?(Integer)\n  if a > 0\n    prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    primes = []\n    prime_numbers.each do |i|\n      if a % i == 0\n\
    \        primes << i\n      end\n    end\n    return primes.size == 3 && primes.reduce(:*)\
    \ == a\n  else\n    false\n  end\nend", "  if a%2==0\n    x=a/2\n    y=a/3\n \
    \   z=a/5\n  else\n    return false\n  end\n  return true\nend\np is_multiply_prime(30)",
  "\t(2..a/2).each do |i|\n\t\t(i+1..a/2).each do |j|\n\t\t\t(j+1..a/2).each do |k|\n\
    \t\t\t\treturn true if i*j*k == a\n\t\t\tend\n\t\tend\n\tend\n\tfalse\nend", " \
    \ x=Prime.first(a)\n  if a%x[0]==0 && a%x[1]==0 && a%x[2]==0\n    return true\n\
    \  else\n    return false\n  end\nend\nis_multiply_prime(30)", "\t# TODO\nend",
  "  for i in 2..(a/2)\n    if a % i == 0\n      b = a / i\n      if b == 1\n    \
    \    return false\n      end\n      for j in 2..(b/2)\n        if b % j == 0\n\
    \          c = b / j\n          if c == 1\n            return false\n        \
    \  end\n          for k in 2..(c/2)\n            if c % k == 0\n             \
    \ return false\n            end\n          end\n          return true\n      \
    \  end\n      end\n    end\n  end\n  return false\nend", "  is_prime = Proc.new\
    \ { |x| (2..x - 1).none? { |i| x % i == 0 } }\n  primes = []\n  (2..a).each do\
    \ |i|\n    primes << i if is_prime.call(i)\n  end\n  primes.each do |i|\n    if\
    \ a % i == 0\n      primes.each do |j|\n        if a % j == 0 && i * j != a\n\
    \          return true if i * j * (a / (i * j)) == a\n        end\n      end\n\
    \    end\n  end\n  false\nend", "\tfor i in 1..a\n\t\tif a % i == 0 && is_prime(i)\n\
    \t\t\tputs i\n\t\tend\n\tend\nend", "\tprimes = []\n\tindex = 0\n\ta.times do\
    \ |number|\n\t\tnumber += 1\n\t\tif is_prime(number)\n\t\t\tprimes[index] = number\n\
    \t\t\tindex += 1\n\t\tend\n\tend\n\tprimes.each do |prime1|\n\t\tprimes.each do\
    \ |prime2|\n\t\t\tif a % (prime1 * prime2) == 0\n\t\t\t\tputs \"#{a} = #{prime1}\
    \ * #{prime2} * #{a / (prime1 * prime2)}\"\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn false\nend", '  prime_numbers = (2..100).select { |n| n.prime?
    }', "  a = a.to_i\n  array_of_primes = []\n  2.upto(a).each do |i|\n    if is_prime?(i)\n\
    \      (a / i).to_i.times { array_of_primes << i }\n    end\n  end\n  return false\
    \ if array_of_primes.empty?\n  return true if array_of_primes.length == 3\n  false\n\
    end", "  require 'prime'\n  primes = Prime.first(a)\n  primes.select{|prime| a\
    \ % prime == 0}.length == 3\nend", "  primes = []\n  3.times { |i| primes[i] =\
    \ 0 }\n  (1..a).each do |i|\n    if a % i == 0\n      if primes[0] == 0\n    \
    \    primes[0] = i\n      elsif primes[1] == 0\n        primes[1] = i\n      elsif\
    \ primes[2] == 0\n        primes[2] = i\n      end\n    end\n  end\n  return (primes[0]\
    \ * primes[1] * primes[2]) == a\nend", "  prime_numbers = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \  if prime_numbers.include?(a)\n    return true\n  else\n    for i in 1..(a-1)\n\
    \      if (prime_numbers.include?(i) and a % i == 0)\n        for j in 1..(a-1)\n\
    \          if (prime_numbers.include?(j) and i*j == a)\n            return true\n\
    \          end\n        end\n      end\n    end\n  end\n  return false\nend",
  "  primes = []\n  number = 2\n  while number < a\n    if is_prime(number)\n    \
    \  primes << number\n    end\n    number += 1\n  end\n  primes.each do |x|\n \
    \   primes.each do |y|\n      primes.each do |z|\n        if (x * y * z) == a\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  a = a.to_i\n  for i in (2..100)\n    for j in (2..100)\n      for k in\
    \ (2..100)\n        if i != j && j != k && i != k\n          if i * j * k == a\n\
    \            return true\n          end\n        end\n      end\n    end\n  end\n\
    \  return false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
