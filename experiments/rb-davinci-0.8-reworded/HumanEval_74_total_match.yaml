name: HumanEval_74_total_match
language: rb
prompt: "# Write a function that accepts two arrays of strings and returns the array\
  \ that has \n# total number of chars in the all strings of the array less than the\
  \ other array.\n# if the two arrays have the same number of chars, return the first\
  \ array.\n# Examples\n# >>> total_match.call([], [])\n# []\n# >>> total_match.call([\"\
  hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match.call([\"\
  hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"\
  ]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"\
  hI\", \"hi\", \"hi\"]\n# >>> total_match.call([\"4\"], [\"1\", \"2\", \"3\", \"\
  4\", \"5\"])\n# [\"4\"]\ndef total_match(lst1, lst2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n\
  \    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n\
  \    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\"\
  , \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"\
  ], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"\
  4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"],\
  \ candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\"\
  , \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n\
  \    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\"\
  , \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n   \
  \ assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n"
completions: ["  total_length(lst1) < total_length(lst2) ? lst1 : lst2\nend", "  lst1.total_num_chars\
    \ = lst1.join.size\n  lst2.total_num_chars = lst2.join.size\n  lst1.total_num_chars\
    \ <= lst2.total_num_chars ? lst1 : lst2\nend", "    sum_lst1 = lst1.join(\"\"\
    ).length\n    sum_lst2 = lst2.join(\"\").length\n    if sum_lst1 < sum_lst2\n\
    \        lst1\n    elsif sum_lst1 > sum_lst2\n        lst2\n    else\n       \
    \ lst1\n    end\nend", "    if lst1.map{|str| str.length}.sum < lst2.map{|str|\
    \ str.length}.sum\n        return lst1\n    else\n        return lst2\n    end\n\
    end\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\ntotal_match([\"hi\",\
    \ \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\ntotal_match([\"hi\",\
    \ \"admin\"], [\"hI\", \"hi\", \"hi\"])\ntotal_match([\"4\"], [\"1\", \"2\", \"\
    3\", \"4\", \"5\"])", "    #length of all strings in list 1\n    sum1 = 0\n  \
    \  lst1.each do |word|\n        sum1 += word.length\n    end\n    #length of all\
    \ strings in list 2\n    sum2 = 0\n    lst2.each do |word|\n        sum2 += word.length\n\
    \    end\n    #compare lengths of both arrays\n    if sum1 < sum2\n        return\
    \ lst1\n    elsif sum2 < sum1\n        return lst2\n    else\n        return lst1\n\
    \    end\nend", "  total1 = lst1.join.size\n  total2 = lst2.join.size\n  if total1\
    \ > total2\n    return lst2\n  elsif total1 < total2\n    return lst1\n  else\n\
    \    return lst1\n  end\nend", "  count_lst1 = lst1.join.length\n  count_lst2\
    \ = lst2.join.length\n  if count_lst1 == count_lst2\n    return lst1\n  elsif\
    \ count_lst1 < count_lst2\n    return lst1\n  else\n    return lst2\n  end\nend",
  "  # your code here\nend", "  if lst1.reduce(0) { |sum, str| sum + str.length }\
    \ > lst2.reduce(0) { |sum, str| sum + str.length }\n    lst2\n  else\n    lst1\n\
    \  end\nend", "    lst_of_chars = lst1.map { |str| str.chars.count }.sum\n   \
    \ lst_of_chars2 = lst2.map { |str| str.chars.count }.sum\n    if lst_of_chars\
    \ < lst_of_chars2\n        return lst1\n    elsif lst_of_chars2 < lst_of_chars\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "    lst1_total\
    \ = lst1.inject(0) { | sum, word | sum + word.length }\n    lst2_total = lst2.inject(0)\
    \ { | sum, word | sum + word.length }\n    lst1_total < lst2_total ? lst1 : lst2\n\
    end", "  sum1 = lst1.map { |e| e.size }.sum\n  sum2 = lst2.map { |e| e.size }.sum\n\
    \  sum1 < sum2 ? lst1 : lst2\nend", end, "    if (lst1.join.length) < (lst2.join.length)\n\
    \        return lst1\n    elsif (lst1.join.length) > (lst2.join.length)\n    \
    \    return lst2\n    else\n        return lst1\n    end\nend", "  lst1_sum =\
    \ 0\n  lst2_sum = 0\n  return [] if lst1.empty? && lst2.empty?\n  lst1.each {\
    \ |ele| lst1_sum += ele.length }\n  lst2.each { |ele| lst2_sum += ele.length }\n\
    \  lst1_sum > lst2_sum ? lst2 : lst1\nend", "  c1 = lst1.reduce(0) { |sum, str|\
    \ sum + str.length }\n  c2 = lst2.reduce(0) { |sum, str| sum + str.length }\n\
    \  if c1 > c2\n    lst2\n  else\n    lst1\n  end\nend", "  count1 = 0\n  count2\
    \ = 0\n  lst1.each do |item|\n    count1 += item.length\n  end\n  lst2.each do\
    \ |item|\n    count2 += item.length\n  end\n  if count1 < count2\n    return lst1\n\
    \  elsif count2 < count1\n    return lst2\n  else\n    return lst1\n  end\nend",
  "  if lst1.map{|w| w.length}.reduce(:+) < lst2.map{|w| w.length}.reduce(:+)\n  \
    \  return lst1\n  else\n    return lst2\n  end\nend", "\t\tif lst1.size < lst2.size\n\
    \t\t\tlst1\n\t\telsif lst2.size < lst1.size\n\t\t\tlst2\n\t\telse\n\t\t\tlst1\n\
    \t\tend\nend", "  lst1.reduce(0) { |sum, str| sum + str.length } < lst2.reduce(0)\
    \ { |sum, str| sum + str.length } ? lst2 : lst1\nend", "    count_lst1 = 0\n \
    \   count_lst2 = 0\n    lst1.each {|word| count_lst1 += word.length}\n    lst2.each\
    \ {|word| count_lst2 += word.length}\n    if count_lst1 < count_lst2\n       \
    \ return lst1\n    elsif count_lst2 < count_lst1\n        return lst2\n    else\n\
    \        return lst1\n    end\nend", "  sum1 = 0\n  sum2 = 0\n  lst1.each { |word|\
    \ sum1 += word.length }\n  lst2.each { |word| sum2 += word.length }\n  if sum1\
    \ < sum2\n    return lst1\n  elsif sum2 < sum1\n    return lst2\n  elsif sum1\
    \ == sum2\n    return lst1\n  end\nend", "    lst1_chars = lst1.map { |word| word.length\
    \ }.sum\n    lst2_chars = lst2.map { |word| word.length }.sum\n    lst1_chars\
    \ < lst2_chars ? lst1 : lst2\nend", "\t\nend", "  first_sum = lst1.map { |string|\
    \ string.length }.sum\n  second_sum = lst2.map { |string| string.length }.sum\n\
    \  if first_sum > second_sum\n    lst2\n  else\n    lst1\n  end\nend", "  lst_sum\
    \ = lst1.join.length\n  lst2_sum = lst2.join.length\n  if lst_sum < lst2_sum\n\
    \    return lst1\n  elsif lst_sum > lst2_sum\n    return lst2\n  else\n    return\
    \ lst1\n  end\nend", "  sum_lst1 = lst1.join(\"\").length\n  sum_lst2 = lst2.join(\"\
    \").length\n  if sum_lst1 > sum_lst2\n    lst2\n  else\n    lst1\n  end\nend",
  "    if lst1.size < lst2.size\n        return lst1\n    else\n        return lst2\n\
    \    end\nend", "\tcount1 = 0\n\tcount2 = 0\n\tlst1.each {|word| count1 += word.length}\n\
    \tlst2.each {|word| count2 += word.length}\n\tif count1 > count2\n\t\treturn lst2\n\
    \telsif count1 < count2\n\t\treturn lst1\n\telse\n\t\treturn lst1\n\tend\nend",
  "  sum1 = 0\n  sum2 = 0\n  lst1.each { |item| sum1 += item.length }\n  lst2.each\
    \ { |item| sum2 += item.length }\n  if sum1 > sum2\n    return lst2\n  else\n\
    \    return lst1\n  end\nend", "  num1 = lst1.join.length\n  num2 = lst2.join.length\n\
    \  if num1 < num2\n    return lst1\n  elsif num2 < num1\n    return lst2\n  else\n\
    \    return lst1\n  end\nend", "  total_length(lst1) < total_length(lst2) ? lst1\
    \ : lst2\nend", "  lst1_len = lst1.map{|ele| ele.length}.reduce(:+)\n  lst2_len\
    \ = lst2.map{|ele| ele.length}.reduce(:+)\n  lst1_len > lst2_len ? lst2 : lst1\n\
    end", "  sum1 = lst1.inject(0) { |sum, word| sum + word.length }\n  sum2 = lst2.inject(0)\
    \ { |sum, word| sum + word.length }\n  if sum1 == sum2\n    lst1\n  elsif sum1\
    \ < sum2\n    lst1\n  else\n    lst2\n  end\nend", "    sum1 = 0\n    sum2 = 0\n\
    \    lst1.each {|ele| sum1 += ele.length}\n    lst2.each {|ele| sum2 += ele.length}\n\
    \    return lst1 if sum1 <= sum2\n    return lst2 if sum2 <= sum1\nend", "\t\n\
    \tif lst1.join(\"\").length < lst2.join(\"\").length\n\t\tlst1\n\telsif lst1.join(\"\
    \").length > lst2.join(\"\").length\n\t\tlst2\n\telse\n\t\tlst1\n\tend\nend",
  "  total1 = 0\n  total2 = 0\n  lst1.each { |str| total1 += str.length }\n  lst2.each\
    \ { |str| total2 += str.length }\n  if total1 < total2\n    return lst1\n  elsif\
    \ total2 < total1\n    return lst2\n  else\n    return lst1\n  end\nend", "\t\
    lst1_char_count = lst1.join.size\n\tlst2_char_count = lst2.join.size\n\tif lst1_char_count\
    \ <= lst2_char_count\n\t\tlst1\n\telse\n\t\tlst2\n\tend\nend", "\tif (lst1.join.length\
    \ < lst2.join.length)\n\t\tlst1\n\telse\n\t\tlst2\n\tend\nend", "  total_chars1\
    \ = lst1.join.length\n  total_chars2 = lst2.join.length\n  if total_chars1 < total_chars2\n\
    \    return lst1\n  elsif total_chars2 < total_chars1\n    return lst2\n  else\n\
    \    return lst1\n  end\nend", "    count1 = lst1.inject(0) {|sum, el| sum + el.length}\n\
    \    count2 = lst2.inject(0) {|sum, el| sum + el.length}\n    if count1 == count2\n\
    \        return lst1\n    elsif count1 < count2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "  lst1_len = 0\n  lst2_len = 0\n  lst1.each\
    \ do |word|\n    lst1_len += word.length\n  end\n  lst2.each do |word|\n    lst2_len\
    \ += word.length\n  end\n  return lst1 if lst1_len == lst2_len\n  lst1_len < lst2_len\
    \ ? lst1 : lst2\nend", "    if lst1.reduce(0) {|acc, el| acc + el.length} < lst2.reduce(0)\
    \ {|acc, el| acc + el.length}\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\np total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\np total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\np total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\np total_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"])", "    if lst1.length > lst2.length\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend", "  # lst1.each_index { |i|\
    \ lst1[i].downcase! }\n  # lst2.each_index { |i| lst2[i].downcase! }\n  lst1.map!\
    \ { |str| str.downcase }\n  lst2.map! { |str| str.downcase }\n  sum1 = lst1.reduce(0)\
    \ { |sum, str| sum + str.length }\n  sum2 = lst2.reduce(0) { |sum, str| sum +\
    \ str.length }\n  sum1 < sum2 ? lst1 : lst2\nend", "  sum1 = 0\n  sum2 = 0\n \
    \ lst1.each do |word|\n    sum1 += word.length\n  end\n  lst2.each do |word|\n\
    \    sum2 += word.length\n  end\n  if sum1 < sum2\n    return lst1\n  elsif sum2\
    \ < sum1\n    return lst2\n  else\n    return lst1\n  end\nend", "  lst1.sum(&:length)\
    \ < lst2.sum(&:length) ? lst1 : lst2\nend", "  sum_chars_lst1 = 0\n  sum_chars_lst2\
    \ = 0\n  lst1.each { |str| sum_chars_lst1 += str.length }\n  lst2.each { |str|\
    \ sum_chars_lst2 += str.length }\n  return lst1 if sum_chars_lst1 < sum_chars_lst2\n\
    \  return lst2 if sum_chars_lst2 < sum_chars_lst1\n  lst1 if sum_chars_lst1 ==\
    \ sum_chars_lst2\nend", "  if lst1.size > lst2.size\n    return lst2\n  elsif\
    \ lst1.size < lst2.size\n    return lst1\n  else\n    return lst1\n  end\nend",
  "  num1 = lst1.map { |str| str.length }.reduce(:+)\n  num2 = lst2.map { |str| str.length\
    \ }.reduce(:+)\n  num1 < num2 ? lst1 : lst2\nend", "  total_number_of_chars_lst1\
    \ = 0\n  total_number_of_chars_lst2 = 0\n  lst1.each { |e| total_number_of_chars_lst1\
    \ += e.length }\n  lst2.each { |e| total_number_of_chars_lst2 += e.length }\n\
    \  if total_number_of_chars_lst1 < total_number_of_chars_lst2\n    lst1\n  else\n\
    \    lst2\n  end\nend", "  return lst1 if lst1.length == lst2.length\n  if lst1.length\
    \ > lst2.length\n    b = lst1.reduce(0) { |x, y| x += y.length }\n    c = lst2.reduce(0)\
    \ { |x, y| x += y.length }\n    return lst2 if b > c\n    return lst1\n  else\n\
    \    c = lst1.reduce(0) { |x, y| x += y.length }\n    b = lst2.reduce(0) { |x,\
    \ y| x += y.length }\n    return lst1 if b > c\n    return lst2\n  end\nend",
  "\treturn lst1 if lst1.count == 0 && lst2.count == 0\n\t\n\tcount1 = 0\n\tcount2\
    \ = 0\n\t\n\tlst1.each { |i| count1 += i.length }\n\tlst2.each { |i| count2 +=\
    \ i.length }\n\t\n\tif count1 < count2\n\t\treturn lst1\n\telsif count2 < count1\n\
    \t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", "  sum1 = 0\n  sum2 = 0\n\
    \  lst1.each { |str| sum1 += str.length }\n  lst2.each { |str| sum2 += str.length\
    \ }\n  sum1 > sum2 ? lst2 : lst1\nend", "  lst1.join.length <= lst2.join.length\
    \ ? lst1 : lst2\nend", "  count1 = 0\n  count2 = 0\n  lst1.each { |str| count1\
    \ += str.length }\n  lst2.each { |str| count2 += str.length }\n  count1 < count2\
    \ ? lst1 : lst2\nend", "  lst1_total = lst1.map { |word| word.length }.reduce(:+)\n\
    \  lst2_total = lst2.map { |word| word.length }.reduce(:+)\n  lst1_total > lst2_total\
    \ ? lst2 : lst1\nend", "  list1 = lst1.join.split(\"\").length\n  list2 = lst2.join.split(\"\
    \").length\n  if list1 < list2\n    return lst1\n  elsif list1 > list2\n    return\
    \ lst2\n  else\n    return lst1\n  end\nend\np total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\np total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\np total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\
    p total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])", "  if (lst1.reduce(0)\
    \ {|sum, i| sum + i.length}) < (lst2.reduce(0) {|sum, i| sum + i.length})\n  \
    \  return lst1\n  elsif (lst1.reduce(0) {|sum, i| sum + i.length}) > (lst2.reduce(0)\
    \ {|sum, i| sum + i.length})\n    return lst2\n  else\n    return lst1\n  end\n\
    end", "  num1 = 0\n  num2 = 0\n  lst1.each do |str|\n    num1 += str.length\n\
    \  end\n  lst2.each do |str|\n    num2 += str.length\n  end\n  if num1 < num2\n\
    \    return lst1\n  elsif num2 < num1\n    return lst2\n  elsif num1 == num2\n\
    \    return lst1\n  end\nend", "  lst1_length = lst1.length\n  lst2_length = lst2.length\n\
    \  if lst1_length == 0 && lst2_length == 0\n    lst1\n  elsif lst1_length < lst2_length\n\
    \    lst1\n  elsif lst1_length > lst2_length\n    lst2\n  elsif lst1_length ==\
    \ lst2_length\n    lst1\n  end\nend", "  chars_in_lst1 = lst1.map { |word| word.length\
    \ }.reduce(:+)\n  chars_in_lst2 = lst2.map { |word| word.length }.reduce(:+)\n\
    \  return chars_in_lst1 < chars_in_lst2 ? lst1 : lst2\nend", "  lst1_total = lst1.inject(0)\
    \ { |sum, i| sum + i.length }\n  lst2_total = lst2.inject(0) { |sum, i| sum +\
    \ i.length }\n  if lst1_total == lst2_total\n    lst1\n  elsif lst1_total < lst2_total\n\
    \    lst1\n  else\n    lst2\n  end\nend", "  if lst1.length == 0\n    return lst1\n\
    \  elsif lst2.length == 0\n    return lst2\n  end\n  tot1 = 0\n  tot2 = 0\n  lst1.each\
    \ do |item|\n    tot1 += item.length\n  end\n  lst2.each do |item|\n    tot2 +=\
    \ item.length\n  end\n  if tot1 < tot2\n    return lst1\n  elsif tot2 < tot1\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "  lst1.join(\"\").length\
    \ < lst2.join(\"\").length ? lst1 : lst2\nend", "  if lst1.map(&:length).reduce(:+)\
    \ < lst2.map(&:length).reduce(:+)\n    lst1\n  else\n    lst2\n  end\nend", " \
    \ if lst1.join.length < lst2.join.length\n    lst1\n  else\n    lst2\n  end\n\
    end", "  # lst1.join(\"\").length < lst2.join(\"\").length ? lst1 : lst2\n  lst1.count\
    \ < lst2.count ? lst1 : lst2\nend", "  lst1.inject(0) { |count, str| count +=\
    \ str.length } <=> lst2.inject(0) { |count, str| count += str.length } < 0 ? lst1\
    \ : lst2\nend", "  if lst1.join(\"\").length <= lst2.join(\"\").length\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\np total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\np total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\np total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\
    p total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\np total_match([],\
    \ [])\np total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"\
    ]\np total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]\np total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\np total_match([\"4\"], [\"1\", \"2\",\
    \ \"3\", \"4\", \"5\"]) == [\"4\"]\np total_match([], []) == []", "  total_sum1\
    \ = lst1.map{|s| s.length}.sum\n  total_sum2 = lst2.map{|s| s.length}.sum\n  total_sum1\
    \ > total_sum2 ? lst1 : lst2\nend", "  (lst1.join.length < lst2.join.length) ?\
    \ lst1 : lst2\nend", "\ts1, s2 = 0, 0\n\tfor i in 0...lst1.length\n\t\ts1 += lst1[i].length\n\
    \tend\n\tfor i in 0...lst2.length\n\t\ts2 += lst2[i].length\n\tend\n\tif (s1 <\
    \ s2)\n\t\treturn lst1\n\telsif (s1 > s2)\n\t\treturn lst2\n\telse\n\t\treturn\
    \ lst1\n\tend\nend", "  lst1_total = lst1.map { |i| i.size }.sum\n  lst2_total\
    \ = lst2.map { |i| i.size }.sum\n  lst1_total < lst2_total ? lst1 : lst2\nend",
  "\tif lst1.join.length < lst2.join.length\n\t\treturn lst1\n\telsif lst1.join.length\
    \ > lst2.join.length\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", " \
    \ if lst1.join.length < lst2.join.length\n    lst1\n  else\n    lst2\n  end\n\
    end", "    lst1.join(\"\").length <= lst2.join(\"\").length ? lst1 : lst2\nend\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])", "  total_lst1 = lst1.inject(0)\
    \ { |sum, item| sum + item.length }\n  total_lst2 = lst2.inject(0) { |sum, item|\
    \ sum + item.length }\n  if total_lst1 < total_lst2\n    lst1\n  elsif total_lst1\
    \ > total_lst2\n    lst2\n  else\n    lst1\n  end\nend", "  return lst1 if lst1.empty?\n\
    \  return lst2 if lst2.empty?\n  lst1_total = total_length(lst1)\n  lst2_total\
    \ = total_length(lst2)\n  lst1_total > lst2_total ? lst2 : lst1\nend", "  return\
    \ lst1 if lst1.size == lst2.size\n  return lst1 if lst1.size > lst2.size\n  return\
    \ lst2 if lst2.size > lst1.size\nend", "  return lst1 if lst1.length == lst2.length\n\
    \  return lst1 if lst1.length > lst2.length\n  return lst2 if lst2.length > lst1.length\n\
    end", "    if lst1.join.length < lst2.join.length\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "  lst1_length, lst2_length = lst1.join.length,\
    \ lst2.join.length\n  return lst1_length <= lst2_length ? lst1 : lst2\nend", "\t\
    count1 = 0\n\tcount2 = 0\n\tlst1.each {|x| count1 += x.length}\n\tlst2.each {|x|\
    \ count2 += x.length}\n\tif count1 < count2\n\t\treturn lst1\n\telsif count2 <\
    \ count1\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", "\tchar_ct_lst1\
    \ = lst1.join.length\n\tchar_ct_lst2 = lst2.join.length\n\tif char_ct_lst1 ==\
    \ char_ct_lst2\n\t\treturn lst1\n\telsif char_ct_lst1 > char_ct_lst2\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend", "\tsum1 = 0\n\tsum2 = 0\n\tlst1.each\
    \ do |x|\n\t\tsum1 += x.length\n\tend\n\tlst2.each do |x|\n\t\tsum2 += x.length\n\
    \tend\n\tif sum1 < sum2\n\t\treturn lst1\n\telsif sum2 < sum1\n\t\treturn lst2\n\
    \telse\n\t\treturn lst1\n\tend\nend\nputs total_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\nputs total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\nputs total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ])\nputs total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\nputs '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
  "    if lst1.join.length > lst2.join.length\n        return lst2\n    elsif lst1.join.length\
    \ < lst2.join.length\n        return lst1\n    else\n        return lst1\n   \
    \ end\nend", "  count1 = 0\n  count2 = 0\n  lst1.each { |e| count1 += e.length\
    \ }\n  lst2.each { |e| count2 += e.length }\n  count1 <= count2 ? lst1 : lst2\n\
    end", "  return lst1 if lst1.length == lst2.length\n  lst1.join.length > lst2.join.length\
    \ ? lst2 : lst1\nend", "  lst1.size < lst2.size ? lst1 : lst2\nend\nputs \"--total_match--\"\
    \nputs total_match([], []) == []\nputs total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]\nputs total_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\nputs total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\nputs\
    \ total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "   \
    \ lst_count = []\n    lst_count << lst1.join.size\n    lst_count << lst2.join.size\n\
    \    if lst_count[0] < lst_count[1]\n        lst1\n    else\n        lst2\n  \
    \  end\nend", "  lst1_total = 0\n  lst2_total = 0\n  lst1.each { |element| lst1_total\
    \ += element.length }\n  lst2.each { |element| lst2_total += element.length }\n\
    \  return lst1 if lst1_total == lst2_total\n  lst1_total < lst2_total ? lst1 :\
    \ lst2\nend", "  total_chars_1 = 0\n  total_chars_2 = 0\n  lst1.each { |word|\
    \ total_chars_1 += word.length }\n  lst2.each { |word| total_chars_2 += word.length\
    \ }\n  total_chars_1 < total_chars_2 ? lst1 : lst2\nend\np total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])", "  num_char_lst1 = lst1.inject(0) { |total,\
    \ word| total + word.length }\n  num_char_lst2 = lst2.inject(0) { |total, word|\
    \ total + word.length }\n  num_char_lst1 < num_char_lst2 ? lst1 : lst2\nend",
  "  if lst1.join.length < lst2.join.length\n    lst1\n  else\n    lst2\n  end\nend",
  "  lst1_total = 0\n  lst2_total = 0\n  lst1.each do |x|\n    lst1_total += x.length\n\
    \  end\n  lst2.each do |x|\n    lst2_total += x.length\n  end\n  if lst1_total\
    \ == lst2_total\n    return lst1\n  elsif lst1_total < lst2_total\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\nputs total_match([\"4\"], [\"1\"\
    , \"2\", \"3\", \"4\", \"5\"])", "  sum1 = lst1.inject(0) { |sum, word| sum +\
    \ word.length }\n  sum2 = lst2.inject(0) { |sum, word| sum + word.length }\n \
    \ if sum1 < sum2\n    lst1\n  elsif sum2 < sum1\n    lst2\n  else\n    lst1\n\
    \  end\nend", "  lst1_chars = 0\n  lst2_chars = 0\n  lst1.each { |word| lst1_chars\
    \ += word.length }\n  lst2.each { |word| lst2_chars += word.length }\n  if lst1_chars\
    \ < lst2_chars\n    return lst1\n  elsif lst2_chars < lst1_chars\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "  len1 = lst1.inject(0) { |sum, str| sum\
    \ + str.length }\n  len2 = lst2.inject(0) { |sum, str| sum + str.length }\n  if\
    \ len1 < len2\n    lst1\n  elsif len2 < len1\n    lst2\n  else\n    lst1\n  end\n\
    end", "    lst1_count = lst1.reduce(0) { |count, str| count + str.length }\n \
    \   lst2_count = lst2.reduce(0) { |count, str| count + str.length }\n    lst1_count\
    \ == lst2_count ? lst1 : lst1_count < lst2_count ? lst1 : lst2\nend", "  lst1_size\
    \ = lst1.join.size\n  lst2_size = lst2.join.size\n  if lst1_size > lst2_size\n\
    \    lst2\n  else\n    lst1\n  end\nend", "  sum_chars_1 = 0\n  sum_chars_2 =\
    \ 0\n  lst1.each { |x| sum_chars_1 += x.length }\n  lst2.each { |x| sum_chars_2\
    \ += x.length }\n  return sum_chars_1 < sum_chars_2 ? lst1 : lst2\nend", "   \
    \ count1 = 0\n    count2 = 0\n    lst1.each {|i| count1 += i.length}\n    lst2.each\
    \ {|i| count2 += i.length}\n    count1 < count2 ? lst1 : lst2\nend", "\tc1 = lst1.join.size\n\
    \tc2 = lst2.join.size\n\tif c1 == c2\n\t\treturn lst1\n\telsif c1 < c2\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend", "    total_chars_lst1 = lst1.join.length\n\
    \    total_chars_lst2 = lst2.join.length\n    return lst1 if total_chars_lst1\
    \ < total_chars_lst2\n    return lst2 if total_chars_lst2 < total_chars_lst1\n\
    \    return lst1 if total_chars_lst1 == total_chars_lst2\nend", "  first_total\
    \ = lst1.inject(0) { |sum, word| sum + word.length }\n  second_total = lst2.inject(0)\
    \ { |sum, word| sum + word.length }\n  if first_total < second_total\n    lst1\n\
    \  elsif second_total < first_total\n    lst2\n  else\n    lst1\n  end\nend",
  "\tif lst1.join('').length > lst2.join('').length\n\t\tlst2\n\telse\n\t\tlst1\n\t\
    end\nend", "  return lst1 if lst1.size == lst2.size\n  sum1 = lst1.inject(0) {\
    \ |sum, word| sum + word.size }\n  sum2 = lst2.inject(0) { |sum, word| sum + word.size\
    \ }\n  if sum1 < sum2\n    lst1\n  else\n    lst2\n  end\nend", "    lst1_total\
    \ = 0\n    lst2_total = 0\n    lst1.each do |ele|\n        lst1_total += ele.length\n\
    \    end\n    lst2.each do |ele|\n        lst2_total += ele.length\n    end\n\
    \    if lst1_total > lst2_total\n        return lst2\n    elsif lst1_total < lst2_total\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\np total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) #[\"hI\", \"Hi\"]\np total_match([\"hi\",\
    \ \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) #[\"hi\", \"admin\"]\n\
    p total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) #[\"hI\", \"hi\"\
    , \"hi\"]\np total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) #[\"4\"\
    ]", "\ttotal_match.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\nend", "  lst1_sum\
    \ = 0\n  lst2_sum = 0\n  lst1.each do |i|\n    lst1_sum += i.length\n  end\n \
    \ lst2.each do |i|\n    lst2_sum += i.length\n  end\n  if lst1_sum == lst2_sum\n\
    \    return lst1\n  end\n  if lst1_sum < lst2_sum\n    return lst1\n  else\n \
    \   return lst2\n  end\nend", "    # iterate through each list and add up the\
    \ total number of characters in each list\n    # compare the two lists to determine\
    \ which list has a higher amount of characters\n    # the list with the highest\
    \ amount of characters is returned\n    total_lst1 = 0\n    total_lst2 = 0\n \
    \   lst1.each { |str| total_lst1 += str.length }\n    lst2.each { |str| total_lst2\
    \ += str.length }\n    total_lst1 >= total_lst2 ? lst1 : lst2\nend", "  if lst1.join.length\
    \ > lst2.join.length\n    lst2\n  else\n    lst1\n  end\nend", "  return [] if\
    \ lst1.empty? && lst2.empty?\n  lst1_chars = lst1.map { |word| word.chars.count\
    \ }.reduce(:+)\n  lst2_chars = lst2.map { |word| word.chars.count }.reduce(:+)\n\
    \  lst1_chars < lst2_chars ? lst1 : lst2\nend", "    num_chars1 = lst1.map{|str|\
    \ str.length}.sum\n    num_chars2 = lst2.map{|str| str.length}.sum\n    num_chars1\
    \ < num_chars2 ? lst1 : lst2\nend", "  if lst1.join.length > lst2.join.length\n\
    \    lst2\n  else\n    lst1\n  end\nend", "  total1 = lst1.map{|x| x.length}.inject(:+)\n\
    \  total2 = lst2.map{|x| x.length}.inject(:+)\n  total1 < total2 ? lst1 : lst2\n\
    end\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])", "  return lst1 if lst1.length\
    \ == lst2.length\n  lst1, lst2 = lst2, lst1 if lst1.length > lst2.length\n  lst1.each_with_index\
    \ do |word, i|\n    return lst2 if word.length > lst2[i].length\n  end\n  lst1\n\
    end", end, "  if lst1.empty? && lst2.empty?\n    return []\n  elsif lst1.join.length\
    \ < lst2.join.length\n    return lst1\n  else\n    return lst2\n  end\nend", "\t\
    result = lst1\n\tsum1 = lst1.reduce(0) { |s, w| s + w.length }\n\tsum2 = lst2.reduce(0)\
    \ { |s, w| s + w.length }\n\tif sum1 == sum2 || sum1 > sum2\n\t\tresult = lst2\n\
    \tend\n\tresult\nend", "\tlst1.to_s.length < lst2.to_s.length ? lst1 : lst2\n\
    end", "  lst1.length > lst2.length ? lst2 : lst1\nend", "  count_1 = 0\n  count_2\
    \ = 0\n  lst1.each { |str| count_1 += str.length }\n  lst2.each { |str| count_2\
    \ += str.length }\n  count_1 < count_2 ? lst1 : count_1 == count_2 ? lst1 : lst2\n\
    end", "  lst1.join(\"\").length < lst2.join(\"\").length ? lst1 : lst2\nend",
  "  return lst1 if lst1.size < lst2.size\n  return lst2 if lst2.size < lst1.size\n\
    \  lst1\nend", "\ttotal_lst1 = 0\n\ttotal_lst2 = 0\n\tlst1.each {|item| total_lst1\
    \ += item.length}\n\tlst2.each {|item| total_lst2 += item.length}\n\t\n\tif total_lst1\
    \ == total_lst2\n\t\treturn lst1\n\telsif total_lst1 < total_lst2\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend", "  if lst1.join.length <= lst2.join.length\n\
    \    lst1\n  else\n    lst2\n  end\nend\np total_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\np total_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\np total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\np total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\np total_match([], []) ==\
    \ []", "  lst1_len = 0\n  lst2_len = 0\n  lst1.each do |item|\n    lst1_len +=\
    \ item.length\n  end\n  lst2.each do |item|\n    lst2_len += item.length\n  end\n\
    \  if lst1_len == lst2_len\n    return lst1\n  elsif lst1_len < lst2_len\n   \
    \ return lst1\n  else\n    return lst2\n  end\nend", "  count1 = 0\n  count2 =\
    \ 0\n  i = 0\n  j = 0\n  while i < lst1.length\n    count1 += lst1[i].length\n\
    \    i += 1\n  end\n  while j < lst2.length\n    count2 += lst2[j].length\n  \
    \  j += 1\n  end\n  if count1 < count2\n    lst1\n  elsif count2 < count1\n  \
    \  lst2\n  else\n    lst1\n  end\nend", "  lst1_count = 0\n  lst2_count = 0\n\
    \  lst1.each { |str| lst1_count += str.length }\n  lst2.each { |str| lst2_count\
    \ += str.length }\n  if lst1_count > lst2_count\n    return lst2\n  else\n   \
    \ return lst1\n  end\nend", end, "  count1 = 0\n  count2 = 0\n  for i in lst1\n\
    \    count1 += i.length\n  end\n  for i in lst2\n    count2 += i.length\n  end\n\
    \  if count1 < count2\n    return lst1\n  elsif count1 > count2\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "    total1 = 0\n    total2 = 0\n    lst1.each\
    \ {|str| total1 += str.length}\n    lst2.each {|str| total2 += str.length}\n \
    \   if total1 < total2\n        return lst1\n    elsif total2 < total1\n     \
    \   return lst2\n    else\n        return lst1\n    end\nend", "  lst1_count =\
    \ 0\n  lst2_count = 0\n  lst1.each { |str| lst1_count += str.length }\n  lst2.each\
    \ { |str| lst2_count += str.length }\n  if lst1_count == lst2_count\n    return\
    \ lst1\n  elsif lst1_count < lst2_count\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "  return [] if lst1.empty? && lst2.empty?\n  total1 = 0\n  total2\
    \ = 0\n  lst1.each { |e| total1 += e.length }\n  lst2.each { |e| total2 += e.length\
    \ }\n  return lst1 if total1 == total2\n  total1 < total2 ? lst1 : lst2\nend",
  "  lst1.join.length < lst2.join.length ? lst1 : lst2\nend", "  sum_lst1 = 0\n  sum_lst2\
    \ = 0\n  lst1.each { |e| sum_lst1 += e.length }\n  lst2.each { |e| sum_lst2 +=\
    \ e.length }\n  sum_lst1 < sum_lst2 ? lst1 : lst2\nend", "  char_count(lst1) <\
    \ char_count(lst2) ? lst1 : lst2\nend", "  if lst1.join.length < lst2.join.length\n\
    \    lst1\n  else\n    lst2\n  end\nend", "  count1 = lst1.join(\"\").length\n\
    \  count2 = lst2.join(\"\").length\n  return lst1 if count1 <= count2\n  return\
    \ lst2 if count2 <= count1\nend", "  lst1_total = lst1.join.length\n  lst2_total\
    \ = lst2.join.length\n  if lst1_total < lst2_total\n    return lst1\n  elsif lst1_total\
    \ > lst2_total\n    return lst2\n  else\n    return lst1\n  end\nend\np total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\np total_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]\np total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"\
    hi\", \"hi\"]\np total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) ==\
    \ [\"4\"]\np total_match([], []) == []", "  lst1.inject(0) { |sum, x| sum + x.length\
    \ } <=> lst2.inject(0) { |sum, x| sum + x.length }\nend", "\tsum1 = lst1.inject(0)\
    \ {|sum, string| sum + string.length}\n\tsum2 = lst2.inject(0) {|sum, string|\
    \ sum + string.length}\n\tsum1 < sum2 ? lst1 : lst2\nend", "\ttotal_char1 = 0\n\
    \ttotal_char2 = 0\n\tlst1.each do |i|\n\t\ttotal_char1 += i.length\n\tend\n\t\
    lst2.each do |i|\n\t\ttotal_char2 += i.length\n\tend\n\tif total_char1 > total_char2\n\
    \t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", "\tlst1.inject(0) {|sum,\
    \ str| sum += str.length} < lst2.inject(0) {|sum, str| sum += str.length} ? lst1\
    \ : lst2\nend", "  if lst1.join.length < lst2.join.length\n    lst1\n  else\n\
    \    lst2\n  end\nend", "  total1 = 0\n  total2 = 0\n  lst1.each { |element| total1\
    \ += element.length }\n  lst2.each { |element| total2 += element.length }\n  if\
    \ total1 < total2\n    return lst1\n  elsif total2 < total1\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "  first_arr_leng = lst1.inject(0) { |sum,\
    \ str| sum + str.length }\n  second_arr_leng = lst2.inject(0) { |sum, str| sum\
    \ + str.length }\n  if first_arr_leng < second_arr_leng\n    return lst1\n  elsif\
    \ second_arr_leng < first_arr_leng\n    return lst2\n  else\n    return lst1\n\
    \  end\nend", "  lst1_len = lst1.reduce(0) { |sum, str| sum + str.length }\n \
    \ lst2_len = lst2.reduce(0) { |sum, str| sum + str.length }\n  if lst1_len > lst2_len\n\
    \    lst2\n  else\n    lst1\n  end\nend", "  lst1_total = lst1.inject(0) { |sum,\
    \ i| sum + i.length }\n  lst2_total = lst2.inject(0) { |sum, i| sum + i.length\
    \ }\n  lst1_total < lst2_total ? lst1 : lst2\nend", "  if lst1.map {|word| word.length}.sum\
    \ == lst2.map {|word| word.length}.sum\n    return lst1\n  elsif lst1.map {|word|\
    \ word.length}.sum > lst2.map {|word| word.length}.sum\n    return lst2\n  else\n\
    \    return lst1\n  end\nend", "  lst1.to_s.length < lst2.to_s.length ? lst1 :\
    \ lst2\nend", "  lst1.reduce(0) { |sum, ele| sum + ele.length } <=> lst2.reduce(0)\
    \ { |sum, ele| sum + ele.length }\nend", "  string_count(lst1) < string_count(lst2)\
    \ ? lst1 : lst2\nend", "\tif lst1.join(\"\").length < lst2.join(\"\").length\n\
    \t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend", "  if lst1.join.length\
    \ < lst2.join.length\n    lst1\n  else\n    lst2\n  end\nend", "\tnum1 = 0\n\t\
    num2 = 0\n\tlst1.each do |x|\n\t\tnum1 += x.length\n\tend\n\tlst2.each do |x|\n\
    \t\tnum2 += x.length\n\tend\n\tif num1 < num2\n\t\treturn lst1\n\telsif num2 <\
    \ num1\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", "  sum1 = 0\n \
    \ sum2 = 0\n  lst1.each { |str| sum1 += str.length }\n  lst2.each { |str| sum2\
    \ += str.length }\n  return lst1 if sum1 == sum2\n  sum1 < sum2 ? lst1 : lst2\n\
    end\nputs total_match([], [])\nputs total_match([\"hi\", \"admin\"], [\"hI\",\
    \ \"Hi\"])\nputs total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\",\
    \ \"project\"])\nputs total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ])\nputs total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])", "  lst1_size\
    \ = 0\n  lst2_size = 0\n  lst1.each do |word|\n    lst1_size += word.size\n  end\n\
    \  lst2.each do |word|\n    lst2_size += word.size\n  end\n  lst1_size < lst2_size\
    \ ? lst1 : lst2\nend", "  lst1_sum = 0\n  lst2_sum = 0\n  lst1.each { |x| lst1_sum\
    \ += x.length }\n  lst2.each { |x| lst2_sum += x.length }\n  lst1_sum > lst2_sum\
    \ ? lst2 : lst1\nend", "  length1 = lst1.inject(0) { |sum, word| sum + word.length\
    \ }\n  length2 = lst2.inject(0) { |sum, word| sum + word.length }\n  if length1\
    \ < length2\n    lst1\n  elsif length2 < length1\n    lst2\n  else\n    lst1\n\
    \  end\nend", "    cnt1 = 0\n    cnt2 = 0\n    lst1.each {|x| cnt1 += x.length}\n\
    \    lst2.each {|x| cnt2 += x.length}\n    if cnt1 < cnt2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "  sum1 = 0\n  sum2 = 0\n  lst1.each\
    \ { |x| sum1 += x.length }\n  lst2.each { |x| sum2 += x.length }\n  sum1 < sum2\
    \ ? lst1 : lst2\nend", "  total_chars1 = 0\n  total_chars2 = 0\n  lst1.each {\
    \ |x| total_chars1 += x.length }\n  lst2.each { |x| total_chars2 += x.length }\n\
    \  total_chars1 > total_chars2 ? lst2 : lst1\nend", "  lst1_total = lst1.join.length\n\
    \  lst2_total = lst2.join.length\n  if lst1_total == lst2_total\n    lst1\n  elsif\
    \ lst1_total < lst2_total\n    lst1\n  else\n    lst2\n  end\nend", "\ttotal_1\
    \ = 0\n\ttotal_2 = 0\n\tlst1.each {|word| total_1 += word.length}\n\tlst2.each\
    \ {|word| total_2 += word.length}\n\ttotal_1 < total_2 ? lst1 : lst2\nend", " \
    \ total1 = lst1.inject(0) { |sum, str| sum + str.length }\n  total2 = lst2.inject(0)\
    \ { |sum, str| sum + str.length }\n  total1 < total2 ? lst1 : lst2\nend", "  \
    \  char_count_lst1 = 0\n    char_count_lst2 = 0\n    (0...lst1.length).each do\
    \ |index|\n        char_count_lst1 += lst1[index].length\n    end\n    (0...lst2.length).each\
    \ do |index|\n        char_count_lst2 += lst2[index].length\n    end\n    if char_count_lst1\
    \ == char_count_lst2\n        return lst1\n    elsif char_count_lst1 < char_count_lst2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend", "\ttotal_lst1\
    \ = 0\n\ttotal_lst2 = 0\n\tlst1.each do |str|\n\t\ttotal_lst1 += str.length\n\t\
    end\n\tlst2.each do |str|\n\t\ttotal_lst2 += str.length\n\tend\n\tif total_lst1\
    \ < total_lst2\n\t\treturn lst1\n\telsif total_lst2 < total_lst1\n\t\treturn lst2\n\
    \telse\n\t\treturn lst1\n\tend\nend", "  total_char_count = lambda { |lst| lst.sum\
    \ { |el| el.length } }\n  if total_char_count.call(lst1) < total_char_count.call(lst2)\n\
    \    lst1\n  else\n    lst2\n  end\nend", "  total1 = lst1.inject(0) { |sum, elem|\
    \ sum + elem.length }\n  total2 = lst2.inject(0) { |sum, elem| sum + elem.length\
    \ }\n  if total1 == total2\n    lst1\n  elsif total1 < total2\n    lst1\n  else\n\
    \    lst2\n  end\nend", "    sums = [lst1, lst2].map do |lst|\n        lst.map(&:length).reduce(:+)\n\
    \    end\n    sums[0] < sums[1] ? lst1 : lst2\nend", "  x = lst1.join.size\n \
    \ y = lst2.join.size\n  if x < y\n    return lst1\n  elsif x > y\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "  chars1 = char_count(lst1)\n  chars2\
    \ = char_count(lst2)\n  return lst1 if chars1 == chars2\n  chars1 < chars2 ? lst1\
    \ : lst2\nend", "\tchars1 = lst1.join.length\n\tchars2 = lst2.join.length\n\t\
    if chars1 <= chars2\n\t\tlst1\n\telse\n\t\tlst2\n\tend\nend\np total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\np total_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"])\np total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\np total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ])", "  lst1.size < lst2.size ? lst1 : lst2\nend", "  total_chars_lst1 = lst1.inject(0)\
    \ { |memo, string| memo + string.length }\n  total_chars_lst2 = lst2.inject(0)\
    \ { |memo, string| memo + string.length }\n  if total_chars_lst1 < total_chars_lst2\n\
    \    lst1\n  else\n    lst2\n  end\nend", "\tcount1 = 0\n\tcount2 = 0\n\tlst1.each\
    \ {|word| count1 += word.length}\n\tlst2.each {|word| count2 += word.length}\n\
    \tcount1 < count2 ? lst1 : lst2\nend", "  lst1.join.length <= lst2.join.length\
    \ ? lst1 : lst2\nend", "  total_char_count(lst1) < total_char_count(lst2) ? lst1\
    \ : lst2\nend", "  total_chars = 0\n  lst1.each do |word|\n    total_chars +=\
    \ word.length\n  end\n  new_total_chars = 0\n  lst2.each do |word|\n    new_total_chars\
    \ += word.length\n  end\n  return lst1 if total_chars < new_total_chars\n  return\
    \ lst2 if new_total_chars < total_chars\n  lst1\nend", "  len1 = lst1.inject(0)\
    \ { |sum, x| sum + x.length }\n  len2 = lst2.inject(0) { |sum, x| sum + x.length\
    \ }\n  (len1 < len2) ? lst1 : lst2\nend", "  total_char1 = 0\n  total_char2 =\
    \ 0\n  lst1.each do |el|\n    total_char1 += el.length\n  end\n  lst2.each do\
    \ |el|\n    total_char2 += el.length\n  end\n  return lst1 if total_char1 < total_char2\n\
    \  return lst2 if total_char2 < total_char1\n  return lst1 if total_char1 == total_char2\n\
    end", "  total_lst1 = lst1.join.size\n  total_lst2 = lst2.join.size\n  return\
    \ lst1 if total_lst1 == total_lst2\n  total_lst1 < total_lst2 ? lst1 : lst2\n\
    end", "  sum_lst1 = lst1.map { |str| str.length }.reduce(:+)\n  sum_lst2 = lst2.map\
    \ { |str| str.length }.reduce(:+)\n  if lst1.empty? || lst2.empty?\n    return\
    \ lst1.empty? ? lst2 : lst1\n  elsif sum_lst1 == sum_lst2\n    return lst1\n \
    \ elsif sum_lst1 < sum_lst2\n    return lst1\n  else\n    return lst2\n  end\n\
    end", "  return lst1 if lst1.empty?\n  return lst2 if lst2.empty?\n  total1 =\
    \ lst1.join(\"\").size\n  total2 = lst2.join(\"\").size\n  total1 < total2 ? lst1\
    \ : lst2\nend", "\ttotal_lst1 = 0\n\ttotal_lst2 = 0\n\tlst1.each do |char|\n\t\
    \ttotal_lst1 += char.length\n\tend\n\tlst2.each do |char|\n\t\ttotal_lst2 += char.length\n\
    \tend\n\tif total_lst1 < total_lst2\n\t\tlst1\n\telsif total_lst2 < total_lst1\n\
    \t\tlst2\n\telse\n\t\tlst1\n\tend\nend", "  sum1 = 0\n  sum2 = 0\n  lst1.each\
    \ { |str| sum1 += str.length }\n  lst2.each { |str| sum2 += str.length }\n  if\
    \ sum1 > sum2\n    return lst2\n  else\n    return lst1\n  end\nend", "  len1\
    \ = lst1.inject(0) { |sum, n| sum + n.length }\n  len2 = lst2.inject(0) { |sum,\
    \ n| sum + n.length }\n  return lst1 if len1 == len2\n  len1 < len2 ? lst1 : lst2\n\
    end", "  if total_size(lst1) < total_size(lst2)\n    lst1\n  else\n    lst2\n\
    \  end\nend", "  if lst1.join(\"\").length < lst2.join(\"\").length\n    return\
    \ lst1\n  elsif lst1.join(\"\").length > lst2.join(\"\").length\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "  lst1 = lst1.map { |word| word.length\
    \ }.sum\n  lst2 = lst2.map { |word| word.length }.sum\n  if lst1 == lst2\n   \
    \ return lst1\n  elsif lst1 < lst2\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "    lst1_count = lst1.join('').length\n    lst2_count = lst2.join('').length\n\
    \    if lst1_count < lst2_count\n        return lst1\n    elsif lst1_count > lst2_count\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "    length1\
    \ = 0\n    length2 = 0\n    lst1.each do |ele|\n        length1 += ele.length\n\
    \    end\n    lst2.each do |ele|\n        length2 += ele.length\n    end\n   \
    \ if length1 <= length2\n        return lst1\n    end\n    return lst2\nend",
  "  return lst1 if lst1.empty? && lst2.empty?\n  if lst1.inject(0) { |sum, x| sum\
    \ + x.length } > lst2.inject(0) { |sum, x| sum + x.length }\n    return lst2\n\
    \  else\n    return lst1\n  end\nend\nputs \"test for total_match\"\nputs total_match([],\
    \ []) == []\nputs total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]\nputs total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]\nputs total_match([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\nputs total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]", "    total_lst1 = 0\n    total_lst2\
    \ = 0\n    lst1.each do |word|\n        total_lst1 += word.length\n    end\n \
    \   lst2.each do |word|\n        total_lst2 += word.length\n    end\n    if total_lst1\
    \ > total_lst2\n        return lst2\n    else\n        return lst1\n    end\n\
    end", "  lst1_length = lst1.join(\"\").length\n  lst2_length = lst2.join(\"\"\
    ).length\n  lst1_length < lst2_length ? lst1 : lst2\nend", "  count1 = 0\n  count2\
    \ = 0\n  lst1.each { |word| count1 += word.length }\n  lst2.each { |word| count2\
    \ += word.length }\n  count1 < count2 ? lst1 : lst2\nend\np total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\np total_match([\"hi\", \"admin\"], [\"hi\", \"\
    hi\", \"admin\", \"project\"])\np total_match([\"hi\", \"admin\"], [\"hI\", \"\
    hi\", \"hi\"])\np total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])",
  "  lst1_chars_total = lst1.inject(0) { |sum, str| sum + str.length }\n  lst2_chars_total\
    \ = lst2.inject(0) { |sum, str| sum + str.length }\n  lst1_chars_total < lst2_chars_total\
    \ ? lst1 : lst2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
