language: rb
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuv956asr

    Started

    .

    Finished in 0.000458431 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2181.35 tests/s, 23994.89 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  if a == b && b == c\n \
    \   return false\n  elsif c*c == a*a + b*b\n    return true\n  elsif a*a == b*b\
    \ + c*c\n    return true\n  elsif b*b == a*a + c*c\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmps8g5vc87

    Started

    .

    Finished in 0.000442276 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2261.03 tests/s, 24871.35 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  return false if a + b <=\
    \ c || a + c <= b || b + c <= a\n  max = [a, b, c].max\n  max == (a**2 + b**2\
    \ + c**2 - 2 * max**2)**0.5\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdhana9ur\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdhana9ur.rb:19:in `test_right_angle_triangle'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_right_angle_triangle\n\
    \     18:     candidate = method(:right_angle_triangle)\n  => 19:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008602427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.25 tests/s, 116.25 assertions/s\n"
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # ...\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpddbcs80z\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpddbcs80z.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.007867328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.11 tests/s, 127.11 assertions/s\n"
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # if we square each side,\
    \ then one side will equal the sum of the squares of\n  # the other two sides\n\
    \  sides = [a, b, c].map { |side| side ** 2 }\n  sides.include?(sides.reduce(:+))\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuqbtr__e\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpuqbtr__e.rb:20:in `test_right_angle_triangle'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_right_angle_triangle\n\
    \     19:     candidate = method(:right_angle_triangle)\n  => 20:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     21:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     22:     assert_equal(true, candidate.call(10, 6, 8))\n     23:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008479559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.93 tests/s, 117.93 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a ** 2 + b ** 2 == c ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdld3_59

    Started

    .

    Finished in 0.000464802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2151.45 tests/s, 23665.99 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n\
    \  a ** 2 + b ** 2 == c ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdld3_59

    Started

    .

    Finished in 0.000464802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2151.45 tests/s, 23665.99 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # your code goes here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfklyirsq\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpfklyirsq.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.013239238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.53 tests/s, 75.53 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # if a > b && a > c\n \
    \ #   a ** 2 == b ** 2 + c ** 2\n  # elsif b > a && b > c\n  #   b ** 2 == a **\
    \ 2 + c ** 2\n  # else\n  #   c ** 2 == a ** 2 + b ** 2\n  # end\n  # a, b, c\
    \ = [a, b, c].sort.reverse\n  # c ** 2 == a ** 2 + b ** 2\n  # (a, b, c) = [a,\
    \ b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # (a, b, c) = [a, b, c].sort\n\
    \  # a ** 2 + b ** 2 == c ** 2\n  # (a, b, c) = [a, b, c].sort\n  # a ** 2 + b\
    \ ** 2 == c ** 2\n  # c, b, a = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n\
    \  # c, b, a = [a, b, c].sort\n  # a ** 2 + b ** 2 == c ** 2\n  # [a, b, c].sort\n\
    \  a, b, c = [a, b, c].sort\n  a ** 2 + b ** 2 == c ** 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4o3_ds7_

    Started

    .

    Finished in 0.001219319 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    820.13 tests/s, 9021.43 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxhyku0x0\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxhyku0x0.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.008742101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.39 tests/s, 114.39 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n\
    \  hypotenuse = sides.pop\n  cathet_one = sides.pop\n  cathet_two = sides.pop\n\
    \  return hypotenuse**2 == cathet_one**2 + cathet_two**2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpaa9os_b6

    Started

    .

    Finished in 0.000440202 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2271.68 tests/s, 24988.53 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  #TODO: implement your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpimnobkz7\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpimnobkz7.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.008322774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.15 tests/s, 120.15 assertions/s\n"
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  [a, b, c].sort!\n  a **\
    \ 2 + b ** 2 == c ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiej_4ysd\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpiej_4ysd.rb:20:in `test_right_angle_triangle'\n\
    \     17:     candidate = method(:right_angle_triangle)\n     18:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     19:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n  => 20:     assert_equal(true, candidate.call(10, 6, 8))\n     21:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n     22:     assert_equal(true,\
    \ candidate.call(7, 24, 25))\n     23:     assert_equal(false, candidate.call(10,\
    \ 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n\
    ===============================================================================\n\
    \nFinished in 0.008263603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.01 tests/s, 363.04 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  ([a, b, c].max)**2 == a**2\
    \ + b**2 + c**2 - ([a, b, c].max)**2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpun5696ww

    Started

    .

    Finished in 0.000942356 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1061.17 tests/s, 11672.87 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxhyku0x0\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpxhyku0x0.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.008742101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.39 tests/s, 114.39 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n    if (Math.hypot(a, b)\
    \ == c.to_f) || (Math.hypot(a, c) == b.to_f) || (Math.hypot(b, c) == a.to_f)\n\
    \        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp050goqf1

    Started

    .

    Finished in 0.000457671 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2184.98 tests/s, 24034.73 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  long = [a, b, c].max\n\
    \  long == Math.sqrt( (a**2 + b**2 + c**2) - 2 * long**2 )\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
    \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
    \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
    \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
    \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
    \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
    \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
    \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
    \ 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm9oajpvs\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpm9oajpvs.rb:18:in `test_right_angle_triangle'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_right_angle_triangle\n\
    \     17:     candidate = method(:right_angle_triangle)\n  => 18:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     19:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     20:     assert_equal(true, candidate.call(10, 6, 8))\n     21:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007865813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.13 tests/s, 127.13 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n\tsides = [a, b, c].sort\n\
    \thypotenuse = sides[2]\n\tsides.delete_at(2)\n\tsides[0]**2 + sides[1]**2 ==\
    \ hypotenuse**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2rnq9s0c

    Started

    .

    Finished in 0.000455394 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2195.90 tests/s, 24154.91 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  # implement right_angle_triangle\
    \ function here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5ydq9pls\nStarted\nF\n===============================================================================\n\
    Failure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5ydq9pls.rb:17:in `test_right_angle_triangle'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_right_angle_triangle\n\
    \     16:     candidate = method(:right_angle_triangle)\n  => 17:     assert_equal(true,\
    \ candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1,\
    \ 2, 3))\n     19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:\
    \     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.008679892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.21 tests/s, 115.21 assertions/s\n"
  timestamp: 1659823496
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
    \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n\td = [a, b, c].sort\n\t\
    Math.sqrt(d[0]**2 + d[1]**2) == d[2]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n\
    \    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1,\
    \ 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false,\
    \ candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n\
    \    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5,\
    \ 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true,\
    \ candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n\
    \    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpshtw71t0

    Started

    .

    Finished in 0.000912136 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1096.33 tests/s, 12059.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823496
