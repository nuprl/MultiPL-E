name: HumanEval_150_x_or_y
language: rb
prompt: "# A simple program which should return the value of x if n is \n# a prime\
  \ number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y.call(7,\
  \ 34, 12)\n# 34\n# >>> x_or_y.call(15, 8, 5)\n# 5\ndef x_or_y(n, x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n\
  \    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n\
  \    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3,\
  \ 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1,\
  \ candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245,\
  \ 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234,\
  \ candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n \
  \   assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n"
completions: ["  #replace this for solution\n  (2..Math.sqrt(n)).each do |i|\n   \
    \ return y if n % i == 0\n  end\n  x\nend", "  if n.prime?\n    return x\n  else\n\
    \    return y\n  end\nend", "  return x if is_prime?(n)\n  y\nend", "  prime =\
    \ 1\n  if n == 1 || n == 0\n    prime = 0\n  else\n    for i in 2..n/2\n     \
    \ if n % i == 0\n        prime = 0\n        break\n      end\n    end\n  end\n\
    \  if prime == 1\n    return x\n  else\n    return y\n  end\nend", "  # The following\
    \ line generates a new method called\n  # #is_prime? which returns true if the\
    \ number is a prime number\n  # and false otherwise.\n  n.define_singleton_method(:is_prime?)\
    \ {\n    return false if n == 1\n    (2..Math.sqrt(n)).each { |i| return false\
    \ if n % i == 0 }\n    true\n  }\n  n.is_prime? ? x : y\nend", "  # write your\
    \ code here\nend", "  if n.is_prime?\n    return x\n  else\n    return y\n  end\n\
    end", "  n > 1 && is_prime(n) ? x : y\nend", "  n.prime? ? x : y\nend", "  if\
    \ is_prime?(n)\n    x\n  else\n    y\n  end\nend", "  if is_prime(n)\n    return\
    \ x\n  else\n    return y\n  end\nend", "  if n.prime?\n    return x\n  else\n\
    \    return y\n  end\nend", "    return x if prime?(n)\n    y\nend", "  if n.prime?\n\
    \    return x\n  else\n    return y\n  end\nend", "  is_prime(n) ? x : y\nend",
  "  for i in 2..n/2\n    if n % i == 0\n      return y\n    end\n  end\n  return\
    \ x\nend", "  if is_prime(n)\n    x\n  else\n    y\n  end\nend", "  return y if\
    \ not prime?(n)\n  return x\nend", "  # Write code here!\nend", "  # Write your\
    \ code here.\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
