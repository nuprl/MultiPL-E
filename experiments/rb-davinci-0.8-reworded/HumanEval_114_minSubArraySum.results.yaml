language: rb
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \    return 0 if nums.empty?\n    n = nums.length\n    min_sum = nums[0]\n   \
    \ current_sum = nums[0]\n    (1...n).each do |i|\n        current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n        min_sum = [min_sum, current_sum].min\n \
    \   end\n    min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpujposcsj

    Started

    .

    Finished in 0.000615171 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1625.56 tests/s, 19506.77 assertions/s

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min = nums[0]\n  sum = nums[0]\n  i = 1\n  while i < nums.length\n    sum +=\
    \ nums[i]\n    min = sum if sum < min\n    sum = 0 if sum < 0\n    i += 1\n  end\n\
    \  min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytrgpjoj\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpytrgpjoj.rb:24:in `test_minSubArraySum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_minSubArraySum\n\
    \     23:     candidate = method(:minSubArraySum)\n  => 24:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     25:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     26:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     27:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006430278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.51 tests/s, 155.51 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \    return 0 if nums.empty?\n    min_sum = Float::INFINITY\n    sum = 0\n   \
    \ nums.each do |el|\n        sum += el\n        min_sum = sum if sum < min_sum\n\
    \        sum = 0 if sum < 0\n    end\n    min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw75kgwbh\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpw75kgwbh.rb:23:in `test_minSubArraySum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_minSubArraySum\n\
    \     22:     candidate = method(:minSubArraySum)\n  => 23:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     24:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     25:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     26:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008467717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.10 tests/s, 118.10 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nil\n  current_sum = 0\n  last_idx = nums.length - 1\n  (0..last_idx).each\
    \ do |idx|\n    current_sum += nums[idx]\n    min_sum = current_sum if min_sum.nil?\
    \ || current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprgyq8ro7\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmprgyq8ro7.rb:23:in `test_minSubArraySum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_minSubArraySum\n\
    \     22:     candidate = method(:minSubArraySum)\n  => 23:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     24:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     25:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     26:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009982795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.17 tests/s, 100.17 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n\
    \    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplsrodddx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmplsrodddx.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008097731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.49 tests/s, 123.49 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = Float::INFINITY\n  curr_sum = 0\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpjmjlwsp9.rb:12: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpjmjlwsp9.rb:28: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = Float::INFINITY\n  sum = 0\n  nums.each do |num|\n    sum += num\n\
    \    min_sum = sum if sum < min_sum\n    sum = 0 if sum < 0\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwyvp4_ab\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpwyvp4_ab.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008101105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.44 tests/s, 123.44 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  return nil if nums.nil? || nums.empty?\n  min_sum = nums[0]\n  sum = 0\n  nums.each\
    \ do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n    sum = 0 if\
    \ sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv344_3jh\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpv344_3jh.rb:23:in `test_minSubArraySum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_minSubArraySum\n\
    \     22:     candidate = method(:minSubArraySum)\n  => 23:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     24:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     25:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     26:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007398349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.17 tests/s, 135.17 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  l = 0\n  r = 0\n  curr_sum = 0\n  min_sum = nil\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp6tl7hf5f.rb:14: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp6tl7hf5f.rb:30: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 0
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  arr = []\n  (0...nums.length).each do |i|\n    (i...nums.length).each do |j|\n\
    \      arr << nums[i..j].reduce(:+)\n    end\n  end\n  arr.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6f83nyti

    Started

    .

    Finished in 0.001089572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    917.79 tests/s, 11013.50 assertions/s

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  size = nums.size\n  i = 0\n  min_sum = 0\n  while i < size do\n    min_sum\
    \ += nums[i]\n    i += 1\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq6xybtqf\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpq6xybtqf.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007430802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.57 tests/s, 134.57 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |n|\n    curr_sum += n\n\
    \    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmd1_07a5\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmd1_07a5.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00700012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.85 tests/s, 142.85 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = Float::INFINITY\n  sum = 0\n  curr_min = 0\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpz6f1pw4x.rb:13: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpz6f1pw4x.rb:29: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  current_sum = nums[0]\n  min_sum = nums[0]\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpat_k9am3.rb:12: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpat_k9am3.rb:28: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  i = 0\n  j = 0\n  current_sum = 0\n  min_sum = nums[0]\n  min_sum = nums[1]\
    \ if nums[1] < min_sum\n  for i in 0..nums.length-1\n    current_sum = nums[i]\n\
    \    for j in i+1..nums.length-1\n      current_sum += nums[j]\n      if current_sum\
    \ < min_sum\n        min_sum = current_sum\n      end\n    end\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplcyjqmnu\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmplcyjqmnu.rb:29:in `test_minSubArraySum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_minSubArraySum\n\
    \     28:     candidate = method(:minSubArraySum)\n  => 29:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     30:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     31:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     32:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009157898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.20 tests/s, 109.20 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = Float::INFINITY\n  current_sum = 0\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp9w2kib3q.rb:12: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp9w2kib3q.rb:28: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 0
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  sum = 0\n  nums.each do |num|\n    sum += num\n    if\
    \ sum < min_sum\n      min_sum = sum\n    end\n    if sum > 0\n      sum = 0\n\
    \    end\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcpojd804

    Started

    .

    Finished in 0.000584291 seconds.

    -------------------------------------------------------------------------------

    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1711.48 tests/s, 20537.71 assertions/s

    '
  stdout: ''
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n    current_sum\
    \ += num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpurhofg6h\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpurhofg6h.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006316493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.32 tests/s, 158.32 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  max_so_far = nums[0]\n  (1...nums.length).each do |i|\n\
    \    max_so_far = [nums[i], max_so_far + nums[i]].max\n    min_sum = [min_sum,\
    \ max_so_far].min\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp9hfbk7u\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpp9hfbk7u.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007174666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.38 tests/s, 139.38 assertions/s\n"
  timestamp: 1659824286
- exit_code: 1
  program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2,\
    \ 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n\
    \  min_sum = nums[0]\n  current_sum = 0\n  for num in nums\n    current_sum +=\
    \ num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum = 0\
    \ if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1broanc6\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1broanc6.rb:22:in `test_minSubArraySum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_minSubArraySum\n\
    \     21:     candidate = method(:minSubArraySum)\n  => 22:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     23:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     24:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     25:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011049859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.50 tests/s, 90.50 assertions/s\n"
  timestamp: 1659824286
