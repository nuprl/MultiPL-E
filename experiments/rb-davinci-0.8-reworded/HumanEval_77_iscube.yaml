name: HumanEval_77_iscube
language: rb
prompt: "# Write a function that takes an integer a and returns true \n# if this ingeger\
  \ is a cube of some integer number.\n# Note: you may assume the input is always\
  \ valid.\n# Examples:\n# >>> iscube.call(1)\n# true\n# >>> iscube.call(2)\n# false\n\
  # >>> iscube.call(-1)\n# true\n# >>> iscube.call(64)\n# true\n# >>> iscube.call(0)\n\
  # true\n# >>> iscube.call(180)\n# false\ndef iscube(a)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n\
  \    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n  \
  \  assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n\
  \    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n\
  \    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n\
  \    assert_equal(false, candidate.call(1729))\n  end\nend\n"
completions: ["  return true if a==0\n  (1..a).each do |i|\n    return true if i**3==a\n\
    \  end\n  return false\nend\nputs iscube(4)", "  r = a**(1.0/3.0)\n  a == r*r*r\n\
    end", "\tx = 0\n\twhile x**3 <= a\n\t\treturn true if x**3 == a\n\t\tx += 1\n\t\
    end\n\treturn false\nend", "\tif a == 0\n\t\treturn true\n\tend\n\tif a < 0\n\t\
    \ta = a.abs\n\tend\n\ti = 1\n\twhile i <= a\n\t\tif i ** 3 == a\n\t\t\treturn\
    \ true\n\t\tend\n\t\ti += 1\n\tend\n\treturn false\nend", "  \n  for i in 1..a\n\
    \    if i**3 == a\n      return true\n    end\n  end\n  return false\n  \nend",
  "  (a == 0) or (a == 1) or (a == -1) or ((a > 0) and (a == (a**(1.0/3)).to_i**3))\
    \ or ((a < 0) and (a == -(a**(1.0/3)).to_i**3))\nend", "\tresult = Math.cbrt(a)\n\
    \tresult % 1 == 0 ? true : false\nend", "  if a == 0\n    return true\n  end\n\
    \  a = a.abs\n  i = 2\n  while i < a do\n    if i * i * i == a\n      return true\n\
    \    end\n    i += 1\n  end\n  return false\nend\n  ", "  if a % Math.cbrt(a)\
    \ == 0\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend", "\treturn\
    \ true if a.abs==0\n\treturn true if a.abs==1\n\treturn a.abs**(1.0/3)%1==0\n\
    end", "  if Math.cbrt(a)%1==0\n    return true\n  else\n    return false\n  end\n\
    end\np iscube(1)", "  Math.cbrt(a) == Math.cbrt(a).to_i\nend", "    b = a.abs.to_f\n\
    \    c = Math.cbrt(b)\n    if c % 1 == 0 \n        return true\n    else\n   \
    \     return false\n    end\nend", "  # Write your code here.\nend", "    i =\
    \ 0 \n    while i ** 3 <= a\n        return true if i ** 3 == a\n        i +=\
    \ 1\n    end\n    return false\nend", "  if (a.is_a? Integer) && (a >= 0) && (a\
    \ % 1 == 0)\n    l = 0\n    h = a\n    while (l <= h)\n      m = (l + h) / 2\n\
    \      if (m * m * m == a)\n        return true\n      elsif (m * m * m > a)\n\
    \        h = m - 1\n      else\n        l = m + 1\n      end\n    end\n  end\n\
    \  return false\nend", "  return (a>=0 ? Math.cbrt(a) : (-1 * Math.cbrt(-1 * a)))\
    \ % 1 == 0 \nend", "\tif a == 0\n\t\tputs true\n\telsif a > 0\n\t\tif a**(1.0/3.0)\
    \ == a**(1.0/3.0).floor\n\t\t\tputs true\n\t\telse\n\t\t\tputs false\n\t\tend\n\
    \telse\n\t\tif (-a)**(1.0/3.0) == (-a)**(1.0/3.0).floor\n\t\t\tputs true\n\t\t\
    else\n\t\t\tputs false\n\t\tend\n\tend\nend", "  Math.cbrt(a) == Math.cbrt(a).to_i\n\
    end", "    unless a==0\n        Math.cbrt(a) % 1 == 0\n    else\n        return\
    \ true\n    end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
