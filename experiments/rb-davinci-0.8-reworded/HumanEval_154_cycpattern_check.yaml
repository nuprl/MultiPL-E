name: HumanEval_154_cycpattern_check
language: rb
prompt: "# You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n# >>> cycpattern_check.call(\"\
  abcd\", \"abd\")\n# false\n# >>> cycpattern_check.call(\"hello\", \"ell\")\n# true\n\
  # >>> cycpattern_check.call(\"whassup\", \"psus\")\n# false\n# >>> cycpattern_check.call(\"\
  abab\", \"baa\")\n# true\n# >>> cycpattern_check.call(\"efef\", \"eeff\")\n# false\n\
  # >>> cycpattern_check.call(\"himenss\", \"simen\")\n# true\ndef cycpattern_check(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n\
  \    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"\
  xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n\
  \    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true,\
  \ candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"\
  abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"\
  ))\n  end\nend\n"
completions: ["  a_length = a.length\n  while a_length > 0\n    a_length -= 1\n  \
    \  a = a[1..-1] + a[0]\n    return true if a.include?(b)\n  end\n  false\nend",
  "  a.include?(b)\nend", "  b.each_char.with_index do |c,i|\n    if a.include? b[i..-1]\
    \ + b[0..i-1]\n      return true\n    end\n  end\n  return false\nend", "  # remove\
    \ any trailing characters that match the pattern\n  # rotate pattern to the left\
    \ until the first character matches\n  # if the pattern first matches, check to\
    \ see if the pattern matched the string\n  # if it matched, return true, else\
    \ rotate pattern and check again\n  return true if a == b\n  return false if a.length\
    \ < b.length", "  a.length.times do |i|\n    a_rotated = a.slice(i, a.length)\
    \ + a.slice(0, i)\n    return true if a_rotated.include?(b)\n  end\n  false\n\
    end", "  b = b.dup\n  b = b.reverse if b < b.reverse\n  b.each_char do |c|\n \
    \   b << b.slice!(0)\n    return true if a.include?(b)\n  end\n  false\nend\n\
    cycpattern_check.call(\"abcd\", \"abd\")\ncycpattern_check.call(\"hello\", \"\
    ell\")\ncycpattern_check.call(\"whassup\", \"psus\")\ncycpattern_check.call(\"\
    abab\", \"baa\")\ncycpattern_check.call(\"efef\", \"eeff\")\ncycpattern_check.call(\"\
    himenss\", \"simen\")", "  # your code goes here\n  len = b.length\n  0.upto(len-1)\
    \ do |i|\n    new_b = b[i..len-1] + b[0..i-1]\n    return true if a.include?(new_b)\n\
    \  end\n  false\nend", "  (0..b.length).each do |i|\n    b << b[0..i-1]\n    b.shift(i)\n\
    \    return true if a.include?(b)\n  end\n  false\nend", "  len = b.length\n \
    \ b.split('').each_with_index do |c, i|\n    return true if a.include?(b[i..-1]\
    \ + b[0..i-1])\n  end\n  false\nend\ncycpattern_check.call(\"abcd\", \"abd\")",
  "  return false if b.length == 0\n  max_rotations = a.length\n  str_a = a*2\n  (0..max_rotations-1).each\
    \ do |x|\n    break if str_a[x..x+b.length-1] == b\n  end\nend", "  first = a.chars\n\
    \  second = b.chars\n  counter = 0\n  while counter < first.length\n    first\
    \ << first.shift\n    return true if first == second\n    counter += 1\n  end\n\
    \  false\nend", "  (b*2).include?(a)\nend", "  n = b.length\n  shift_count = 1\n\
    \  (1..n-1).each do |i|\n    if b[i] == b[0]\n      shift_count = i\n      break\n\
    \    end\n  end\n  f = b[0, shift_count]\n  s = b[shift_count, n-shift_count]\n\
    \  a.include?(f+s) or a.include?(s+f)\nend", "  i = 0\n  while i < a.length\n\
    \    return true if a.include?(b)\n    a = a.chars.rotate.join\n    i += 1\n \
    \ end\n  false\nend", "  k = 0\n  while k < a.length do\n    if a.include? b\n\
    \      return true\n    else\n      return false\n    end\n    b = b[1..-1] +\
    \ b[0]\n    k += 1\n  end\nend", "  check_len = false\n  a_string = a\n  length\
    \ = a.length - 1\n  until check_len == true\n    check_len = a_string.split('').last\
    \ == b.split('').first ? true : false\n    a_string = a_string.split('').rotate(1).join\n\
    \  end\n  a_string.include?(b)\nend", "  #Your code here\n  a.include?(b)\nend",
  "  return true if a.include?(b)\n  b.length.times do |i|\n    b = b[-1] + b[0...-1]\n\
    \    return true if a.include?(b)\n  end\n  false\nend", "  is_rotation = b[0]==a[-1]\n\
    \  if is_rotation\n    return a.include?(b)\n  else\n    return a.include?(b)\
    \ || a.include?(b[1..-1]+b[0])\n  end\nend", "  if a.length != b.length\n    return\
    \ false\n  end\n  i = 0\n  while i < a.length\n    if a[i, a.length] + a[0, i]\
    \ == b\n      return true\n    end\n    i += 1\n  end\n  return false\nend\nputs\
    \ \"cycpattern_check\"\nputs cycpattern_check.call(\"abcd\", \"abd\")\nputs cycpattern_check.call(\"\
    hello\", \"ell\")\nputs cycpattern_check.call(\"whassup\", \"psus\")\nputs cycpattern_check.call(\"\
    abab\", \"baa\")\nputs cycpattern_check.call(\"efef\", \"eeff\")\nputs cycpattern_check.call(\"\
    himenss\", \"simen\")\nputs \"cycpattern_check\""]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
