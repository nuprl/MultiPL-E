name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n\
    \  return 0 if n == 3\n  fib4_minus_1 = 0\n  fib4_minus_2 = 0\n  fib4_minus_3\
    \ = 2\n  fib4_minus_4 = 0\n  fib4_value = 0\n  for i in 4..n\n    fib4_value =\
    \ fib4_minus_1 + fib4_minus_2 + fib4_minus_3 + fib4_minus_4\n    fib4_minus_1\
    \ = fib4_minus_2\n    fib4_minus_2 = fib4_minus_3\n    fib4_minus_3 = fib4_minus_4\n\
    \    fib4_minus_4 = fib4_value\n  end\n  fib4_value\nend", "  # your code here\n\
    end", "  fib4_numbers = [0, 0, 2, 0]\n  return fib4_numbers[n] if n < 4\n  4.upto(n)\
    \ do |x|\n    fib4_numbers[x] = fib4_numbers[x-1] + fib4_numbers[x-2] + fib4_numbers[x-3]\
    \ + fib4_numbers[x-4]\n  end\n  fib4_numbers[n]\nend", end, "  return 0 if n <\
    \ 2\n  arr = [0,0,2,0]\n  (4..n).each do |i|\n    arr.unshift(arr.inject(:+))\n\
    \    arr.pop\n  end\n  arr.first\nend", "\tfib = [0, 0, 2, 0]\n\t(4..n).each do\
    \ |idx|\n\t\tfib[idx%4] = fib[(idx-1)%4] + fib[(idx-2)%4] + fib[(idx-3)%4] + fib[(idx-4)%4]\n\
    \tend\n\tfib[n%4]\nend", "\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  index\
    \ = 3\n  while index <= n\n    a = b\n    b = c\n    c = d\n    d = a + b + c\n\
    \    index += 1\n  end\n  return d\nend", "  fibs = [0, 0, 2, 0]\n  return fibs[n]\
    \ if n < 4\n  (4..n).each do |i|\n    fibs << fibs[i-1] + fibs[i-2] + fibs[i-3]\
    \ + fibs[i-4]\n  end\n  fibs[n]\nend", "  return 0 if n <= 1\n  return 2 if n\
    \ == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n - 4).times do\n\
    \    a, b, c, d = b, c, d, (a + b + c + d)\n  end\n  d\nend", "    a = 0\n   \
    \ b = 0\n    c = 2\n    d = 0\n    while n > 3\n        a = b\n        b = c\n\
    \        c = d\n        d = a + b + c\n        n -= 1\n    end\n    return d\n\
    end", "\treturn 0 if n == 0\n\treturn 0 if n == 1\n\treturn 2 if n == 2\n\treturn\
    \ 0 if n == 3\n\t\n\tres = [0, 0, 2, 0]\n\t(4..n).each do |i|\n\t\tres << res[i-1]\
    \ + res[i-2] + res[i-3] + res[i-4]\n\tend\n\tres[n]\nend", "  x, y, z, w = 0,\
    \ 0, 2, 0\n  n.times do\n    x, y, z, w = y, z, w, x + y + z + w\n  end\n  x\n\
    end", "\treturn 0 if n < 2\n\treturn 2 if n == 2\n\tfib = [0, 0, 2, 0]\n\t(4..n).each\
    \ do |i|\n\t\tfib << fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\tend\n\tfib[n]\n\
    end", "  return 0 if n <= 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a =\
    \ 0\n  b = 0\n  c = 2\n  d = 0\n  n.times do\n    a = b\n    b = c\n    c = d\n\
    \    d = a + b + c\n  end\n  d\nend", "\ta, b, c, d = 0, 0, 2, 0\n\ti = 0\n\t\
    while i < n\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\t\ti += 1\n\tend\n\ta\n\
    end", "  fib4 = [0, 0, 2, 0]\n  for i in 4..n\n    fib4[i] = fib4[i-1] + fib4[i-2]\
    \ + fib4[i-3] + fib4[i-4]\n  end\n  fib4[n]\nend", "  raise ArgumentError.new(\"\
    n must be >= 0\") if n < 0\n  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  i = 4\n  while\
    \ i <= n\n    a, b, c, d = b, c, d, a + b + c + d\n    i += 1\n  end\n  return\
    \ d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n\
    \  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n-4).times do |i|\n    a,\
    \ b, c, d = b, c, d, b + c + d + a\n  end\n  b + c + d + a\nend", "\t# compute\
    \ fib4(n)\nend", "  a, b, c, d = 0, 0, 2, 0\n  n.times do\n    a, b, c, d = b,\
    \ c, d, a + b + c + d\n  end\n  d\nend", "  if n < 4\n    0\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0\n    0\n\
    \  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", '  raise ArgumentError if n.negative?',
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  for i in 4..n\n    a = b\n   \
    \ b = c\n    c = d\n    d = a + b + c + d\n  end\n  return d\nend", end, "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n ==\
    \ 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nputs \"fib4(5) = #{fib4(5)}\"\
    \nputs \"fib4(6) = #{fib4(6)}\"\nputs \"fib4(7) = #{fib4(7)}\"\nputs \"fib4(10)\
    \ = #{fib4(10)}\"\nputs", "  return 0 if n == 0 || n == 1\n  return 2 if n ==\
    \ 2\n  return 0 if n == 3\n  x1 = 0\n  x2 = 0\n  x3 = 2\n  x4 = 0\n  (4..n).each\
    \ do |i|\n    next_fib = x1 + x2 + x3 + x4\n    x1 = x2\n    x2 = x3\n    x3 =\
    \ x4\n    x4 = next_fib\n  end\n  x4\nend", "  n < 3 ? n*2 : n<4 ? 0 : (1..4).inject(0)\
    \ {|sum, i| sum + fib4(n-i)}\nend", "  return 0 if n <= 1\n  return 2 if n ==\
    \ 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n - 4).times do\n   \
    \ a, b, c, d = b, c, d, (a + b + c + d)\n  end\n  a + b + c + d\nend", "  if n\
    \ == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 2\n  elsif n == 3\n    return 0\n  else\n    x = 0\n    y = 0\n    z = 2\n \
    \   w = 0\n    for i in (4..n)\n      w = x + y + z + w\n      x = y\n      y\
    \ = z\n      z = w\n    end\n    return w\n  end\nend", "  return 0 if n <= 1\n\
    \  a = b = c = d = 0\n  e = 2\n  (3..n).each do\n    a = b\n    b = c\n    c =\
    \ d\n    d = e\n    e = a + b + c + d\n  end\n  e\nend", "\nend", "  a, b, c,\
    \ d = 0, 0, 2, 0\n  idx = 0\n  while idx < n\n    a, b, c, d = b, c, d, a + b\
    \ + c + d\n    idx += 1\n  end\n  d\nend", "  raise NotImplementedError\nend",
  "    a = 0\n    b = 0\n    c = 2\n    d = 0\n    count = 3\n    while count <= n\n\
    \        a = b\n        b = c\n        c = d\n        d = a + b + c\n        count\
    \ += 1\n    end\n    d\nend\nputs fib4(5)\nputs fib4(6)\nputs fib4(7)\nputs fib4(8)",
  "  return 0 if n <= 0\n  return 1 if n <= 2\n  return 3 if n == 3\n  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  # TODO\nend", end, "  return 0\
    \ if n == 0 || n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  fib4_prev4\
    \ = 0\n  fib4_prev3 = 0\n  fib4_prev2 = 2\n  fib4_prev1 = 0\n  (n-4).times do\n\
    \    curr = fib4_prev4 + fib4_prev3 + fib4_prev2 + fib4_prev1\n    fib4_prev4\
    \ = fib4_prev3\n    fib4_prev3 = fib4_prev2\n    fib4_prev2 = fib4_prev1\n   \
    \ fib4_prev1 = curr\n  end\n  return fib4_prev4 + fib4_prev3 + fib4_prev2 + fib4_prev1\n\
    end", "  return 0 if n < 1\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  for i in 1..n\n\
    \    a = b\n    b = c\n    c = d\n    d = a + b + c\n  end\n  d\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n ==\
    \ 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  fib_array = [0,\
    \ 0, 2, 0]\n  return fib_array[n] if fib_array[n]\n  if n > 3\n    (n-3).times\
    \ do\n      fib_array << fib_array[-1] + fib_array[-2] + fib_array[-3] + fib_array[-4]\n\
    \    end\n  end\n  fib_array[n]\nend", "    if n == 0\n        return 0\n    elsif\
    \ n == 1\n        return 0\n    elsif n == 2\n        return 2\n    elsif n ==\
    \ 3\n        return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    end\nend", "    seq = [0, 0, 2, 0]\n    4.upto(n) do |i|\n\
    \        seq[i%4] = seq[(i-1)%4] + seq[(i-2)%4] + seq[(i-3)%4] + seq[(i-4)%4]\n\
    \    end\n    seq[n%4]\nend", "    return 0 if n == 0\n    return 0 if n == 1\n\
    \    return 2 if n == 2\n    return 0 if n == 3\n    prev,prev_prev,prev_prev_prev,prev_prev_prev_prev\
    \ = 0,0,2,0\n    curr = (prev + prev_prev + prev_prev_prev + prev_prev_prev_prev)\n\
    \    n.times do\n        prev,prev_prev,prev_prev_prev,prev_prev_prev_prev = curr,prev,prev_prev,prev_prev_prev\n\
    \        curr = (prev + prev_prev + prev_prev_prev + prev_prev_prev_prev)\n  \
    \  end\n    curr\nend\np fib4(5)\np fib4(6)\np fib4(7)", "  return 0 if n < 2\n\
    \  a, b, c, d = 0, 0, 2, 0\n  (n - 3).times do\n    e = a + b + c + d\n    a,\
    \ b, c, d = b, c, d, e\n  end\n  a + b + c + d\nend", "  n = n.to_i\n  return\
    \ n if n < 2\n  return n * 2 if n == 2\n  f1 = 0\n  f2 = 0\n  f3 = 2\n  f4 = 0\n\
    \  (n - 3).times do\n    f4 = f1 + f2 + f3 + f4\n    f1 = f2\n    f2 = f3\n  \
    \  f3 = f4\n  end\n  f4\nend", "  return 0 if n == 0\n  return 0 if n == 1\n \
    \ return 2 if n == 2\n  return 0 if n == 3\n  return 4 if n == 4\n  cache = [0,\
    \ 0, 2, 0, 4]\n  (5..n).each do |i|\n    cache[i] = cache[i-1] + cache[i-2] +\
    \ cache[i-3] + cache[i-4]\n  end\n  cache[n]\nend", "  arr = [0, 0, 2, 0]\n  return\
    \ arr[n] if arr[n]", "\ta = 0\n\tb = 0\n\tc = 2\n\td = 0\n\treturn a if n == 0\n\
    \treturn b if n == 1\n\treturn c if n == 2\n\treturn d if n == 3\n\tif n >= 4\n\
    \t\t(n-4).times do\n\t\t\ta = b\n\t\t\tb = c\n\t\t\tc = d\n\t\t\td = a + b + c\
    \ + d\n\t\tend\n\tend\n\treturn d\nend", "\ta = 0\n\tb = 0\n\tc = 2\n\td = 0\n\
    \tif n == 0\n\t\treturn a\n\telsif n == 1\n\t\treturn b\n\telsif n == 2\n\t\t\
    return c\n\telsif n == 3\n\t\treturn d\n\tend\n\t(4..n).each do\n\t\ta = b\n\t\
    \tb = c\n\t\tc = d\n\t\td = a + b + c + d\n\tend\n\treturn d\nend", "  return\
    \ n if n < 2\n  a, b, c, d = 0, 0, 2, 0\n  i = 0\n  while i < n-3\n    a, b, c,\
    \ d = b, c, d, a+b+c+d\n    i += 1\n  end\n  d\nend", "  return 0 if n < 2\n \
    \ return 2 if n == 2\n  fibs = [0, 0, 2, 0]\n  (n - 3).times do\n    fibs.shift\n\
    \    fibs << fibs.inject(:+)\n  end\n  fibs.last\nend", end, "  return 0 if n\
    \ == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  fib_array\
    \ = [0, 0, 2, 0]\n  4.upto(n) do |i|\n    fib_array << fib_array[i-1] + fib_array[i-2]\
    \ + fib_array[i-3] + fib_array[i-4]\n  end\n  fib_array[n]\nend", "  return 0\
    \ if n <= 1\n  return 2 if n == 2\n  return 0 if n == 3\n  n1 = 0\n  n2 = 0\n\
    \  n3 = 2\n  n4 = 0\n  (n-4).times do\n    n4 = n1 + n2 + n3 + n4\n    n1 = n2\n\
    \    n2 = n3\n    n3 = n4\n  end\n  n4\nend", end, end, "  fib4_iter(1, 0, 0,\
    \ 2, n)\nend", "  a, b, c, d = 0, 0, 2, 0\n  n.times do\n    e = a + b + c + d\n\
    \    a, b, c, d = b, c, d, e\n  end\n  d\nend", end, "  return n if n <= 1\n \
    \ seq = [0, 0, 2, 0]\n  (3..n).each do |i|\n    seq << seq[-1] + seq[-2] + seq[-3]\
    \ + seq[-4]\n  end\n  seq[n]\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 2 if n == 2\n  return 0 if n == 3\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  curr = 0\n  prev1 = 0\n  prev2 = 0\n  prev3\
    \ = 0\n  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n\
    \    return 2\n  elsif n == 3\n    return 0\n  else\n    (n-4).times do\n    \
    \  curr = prev1 + prev2 + prev3 + prev4\n      prev4 = prev3\n      prev3 = prev2\n\
    \      prev2 = prev1\n      prev1 = curr\n    end\n    return curr\n  end\nend",
  end, "  a, b, c, d = 0, 0, 2, 0\n  (n-1).times do\n    e = a + b + c + d\n    a,\
    \ b, c, d = b, c, d, e\n  end\n  return d\nend", "  case n\n  when 0, 1\n    0\n\
    \  when 2\n    2\n  when 3\n    0\n  else\n    # Just keep track of the last 4\
    \ Fib4 numbers and add them together.\n    # Once you have 4 numbers, you can\
    \ just update them and you are done.\n    prev2 = prev3 = prev4 = 0\n    prev1\
    \ = 2\n    curr = 0\n    (n - 2).times do\n      prev4 = prev3\n      prev3 =\
    \ prev2\n      prev2 = prev1\n      prev1 = curr\n      curr = prev4 + prev3 +\
    \ prev2 + prev1\n    end\n    curr\n  end\nend", "  a = 0\n  b = 0\n  c = 2\n\
    \  d = 0\n  if n < 4\n    n < 2 ? n : n == 2 ? 2 : 0\n  else\n    (n - 3).times\
    \ do |i|\n      d = a + b + c\n      a = b\n      b = c\n      c = d\n    end\n\
    \    d\n  end\nend", "  base = [0, 0, 2, 0]\n  fib = [0, 0, 2, 0]\n  return fib[n]\
    \ if n < 4\n  (4..n).each do |i|\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4]\n  end\n  fib[n]\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n \
    \ n.times do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  # your code\
    \ goes here\nend", end, "  return 0 if n <= 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  return fib4_rec(n-1) + fib4_rec(n-2) + fib4_rec(n-3) + fib4_rec(n-4)\n\
    end", "\treturn n if n == 0 || n == 1\n\treturn 2 if n == 2\n\treturn 0 if n ==\
    \ 3\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  # ...\n\
    end", "\treturn 0 if n <= 0\n\treturn 1 if n <= 2\n\t\n\t@fib4s = Array.new(n\
    \ + 1)\n\t@fib4s[0] = 0\n\t@fib4s[1] = 0\n\t@fib4s[2] = 2\n\t@fib4s[3] = 0\n\t\
    (4..n).each do |i|\n\t\t@fib4s[i] = @fib4s[i-1] + @fib4s[i-2] + @fib4s[i-3] +\
    \ @fib4s[i-4]\n\tend\n\t@fib4s[n]\nend", "  if n == 0\n    return 0\n  elsif n\
    \ == 1\n    return 0\n  elsif n == 2\n    return 2\n  elsif n == 3\n    return\
    \ 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  f4 = [0, 0, 2, 0]\n  (4..n).each do |i|\n    f4[i%4] = f4[(i-1)%4] +\
    \ f4[(i-2)%4] + f4[(i-3)%4] + f4[(i-4)%4]\n  end\n  f4[n%4]\nend", end, "  if\
    \ n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 2\n  elsif n == 3\n    return 0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (4..n).each\
    \ do |i|\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "\tif n ==\
    \ 0\n\t\treturn 0\n\telsif n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 2\n\
    \telsif n == 3\n\t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\tend\nend\nputs 'fib4(5) = '+fib4(5).to_s\nputs 'fib4(6) = '+fib4(6).to_s\n\
    puts 'fib4(7) = '+fib4(7).to_s\nputs 'fib4(8) = '+fib4(8).to_s\nputs 'fib4(9)\
    \ = '+fib4(9).to_s\nputs 'fib4(10) = '+fib4(10).to_s\nputs 'fib4(11) = '+fib4(11).to_s\n\
    puts 'fib4(12) = '+fib4(12).to_s\nputs 'fib4(13) = '+fib4(13).to_s\nputs 'fib4(14)\
    \ = '+fib4(14).to_s\nputs 'fib4(15) = '+fib4(15).to_s\nputs 'fib4(16) = '+fib4(16).to_s\n\
    puts 'fib4(17) = '+fib4(17).to_s\nputs 'fib4(18) = '+fib4(18).to_s\nputs 'fib4(19)\
    \ = '+fib4(19).to_s\nputs 'fib4(20) = '+fib4(20).to_s\nputs 'fib4(21) = '+fib4(21).to_s\n\
    puts 'fib4(22) = '+fib4(22).to_s\nputs 'fib4(23) = '+fib4(23).to_s\nputs '", " \
    \ # code here\nend", "  f0 = 0\n  f1 = 0\n  f2 = 2\n  f3 = 0\n  return f0 if n\
    \ == 0\n  return f1 if n == 1\n  return f2 if n == 2\n  return f3 if n == 3\n\
    \  for i in (4..n)\n    f4 = f0 + f1 + f2 + f3\n    f0 = f1\n    f1 = f2\n   \
    \ f2 = f3\n    f3 = f4\n  end\n  return f3\nend", "  return 0 if n <= 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n - 4).times\
    \ do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "  seq = [0,\
    \ 0, 2, 0]\n  return 0 if n < 4\n  (4..n).each do |i|\n    seq << seq[i-1] + seq[i-2]\
    \ + seq[i-3] + seq[i-4]\n  end\n  seq[n]\nend", "  f = [0, 0, 2, 0]\n  return\
    \ f[n] if n < 4\n  (4..n).each do |i|\n    f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4]\n\
    \  end\n  f[n]\nend\nputs fib4(4)\nputs fib4(5)\nputs fib4(6)\nputs fib4(7)",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  a, b, c, d = 0, 0, 2, 0\n  for i in 4..n\n    e = a + b + c + d\n\
    \    a, b, c, d = b, c, d, e\n  end\n  d\nend", "  return n if n <= 2\n  f, f_1,\
    \ f_2, f_3 = 0, 0, 2, 0\n  (n - 3).times do\n    f = f_1 + f_2 + f_3\n    f_1,\
    \ f_2, f_3 = f_2, f_3, f\n  end\n  f\nend", "  arr = []\n  arr[0] = 0\n  arr[1]\
    \ = 0\n  arr[2] = 2\n  arr[3] = 0\n  if n < 4\n    return arr[n]\n  end\n  (4..n).each\
    \ do |i|\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  end\n  return\
    \ arr[n]\nend", "  (0..n).inject([0,0,2,0]){|a, e| e == 0 ? a[0] : a.push(a[-1]\
    \ + a[-2] + a[-3] + a[-4])}\nend", "    return 0 if n == 0\n    return 0 if n\
    \ == 1\n    return 2 if n == 2\n    return 0 if n == 3\n    last_four = [0, 0,\
    \ 2, 0]\n    4.upto(n).each do |i|\n        last_four[i % 4] = last_four.sum\n\
    \    end\n    last_four[n % 4]\nend", end, "  return 0 if n == 0 || n == 1\n \
    \ return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n\
    \  (n-4).times do\n    temp = a\n    a = b\n    b = c\n    c = d\n    d = temp\
    \ + b + c + d\n  end\n  return d\nend", "  # Create a base array of the first\
    \ 4 Fibonacci numbers\n  # Then loop through the array until there are n elements\n\
    \  # Loop through the array, adding together the last four elements,\n  # and\
    \ pushing the sum to the end of the array.\n  # Finally, return the nth element\
    \ of the array.\n  base_arr = [0, 0, 2, 0]\n  (4..n).each do |index|\n    base_arr.push(base_arr[index-1]\
    \ + base_arr[index-2] + base_arr[index-3] + base_arr[index-4])\n  end\n  base_arr[n]\n\
    end", "  return 0 if n <= 1\n  return 2 if n == 2\n  return 0 if n == 3\n  nth_num\
    \ = 0\n  n1 = 0\n  n2 = 0\n  n3 = 2\n  n4 = 0\n  4.upto(n) do |i|\n    nth_num\
    \ = n1 + n2 + n3 + n4\n    n1 = n2\n    n2 = n3\n    n3 = n4\n    n4 = nth_num\n\
    \  end\n  nth_num\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  sum = 0\n  previous = 1\n  previous_to_previous\
    \ = 2\n  two_before_previous = 0\n  three_before_previous = 0\n  (4..n).each do\
    \ |i|\n    sum = previous + previous_to_previous + two_before_previous + three_before_previous\n\
    \    three_before_previous = two_before_previous\n    two_before_previous = previous_to_previous\n\
    \    previous_to_previous = previous\n    previous = sum\n  end\n  sum\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n-4).times do\n    a, b, c, d = b, c,\
    \ d, a + b + c + d\n  end\n  a + b + c + d\nend", "  if n == 0\n    return 0\n\
    \  elsif n == 1\n    return 0\n  elsif n == 2\n    return 2\n  elsif n == 3\n\
    \    return 0\n  else\n    prev = [0, 0, 2, 0]\n    result = 0\n    i = 4\n  \
    \  while i <= n\n      result = prev[1] + prev[2] + prev[3] + prev[0]\n      prev[0]\
    \ = prev[1]\n      prev[1] = prev[2]\n      prev[2] = prev[3]\n      prev[3] =\
    \ result\n      i += 1\n    end\n    return result\n  end\nend", "  return 0 if\
    \ n <= 0\n  return n + 1 if n <= 3\n  prev4 = 1; prev3 = 1; prev2 = 2; prev1 =\
    \ 4\n  (n - 4).times do |i|\n    prev1, prev2, prev3, prev4 = prev1 + prev2 +\
    \ prev3 + prev4, prev1, prev2, prev3\n  end\n  prev1\nend", "\treturn 0 if n <=\
    \ 1\n\treturn 2 if n == 2\n\treturn 0 if n == 3\n\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "\nend", "  fib_seq = [0, 0, 2, 0]\n  return\
    \ fib_seq[n] if n < 4\n  (4..n).each do |i|\n    fib_seq[i] = fib_seq[i-1] + fib_seq[i-2]\
    \ + fib_seq[i-3] + fib_seq[i-4]\n  end\n  fib_seq[n]\nend", "  return 0 if n <\
    \ 1\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  for i in 1..n-2\n    a = b\n    b =\
    \ c\n    c = d\n    d = a + b + c\n  end\n  return d\nend", "    return 0 if n\
    \ == 0\n    return 0 if n == 1\n    return 2 if n == 2\n    return 0 if n == 3\n\
    \    list = [0, 0, 2, 0]\n    n -= 4\n    while n > 0\n        list.shift\n  \
    \      list << (list[0] + list[1] + list[2] + list[3])\n        n -= 1\n    end\n\
    \    list[-1]\nend", "  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n\
    \  elsif n == 2\n    return 2\n  elsif n == 3\n    return 0\n  else\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  #TODO\nend",
  "  if n <= 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif n ==\
    \ 3\n    0\n  else\n    f1 = 0\n    f2 = 0\n    f3 = 2\n    f4 = 0\n    (n-4).times\
    \ do\n      f1 = f2\n      f2 = f3\n      f3 = f4\n      f4 = f1 + f2 + f3 + f4\n\
    \    end\n    f4\n  end\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  if n <=\
    \ 0\n    return a\n  elsif n == 1\n    return b\n  elsif n == 2\n    return c\n\
    \  elsif n == 3\n    return d\n  else\n    i = 4\n    while i <= n\n      a =\
    \ b\n      b = c\n      c = d\n      d = a + b + c + d\n      i += 1\n    end\n\
    \    return d\n  end\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  # your solution here\nend", "  if n == 0\n    return 0\n  elsif n ==\
    \ 1\n    return 0\n  elsif n == 2\n    return 2\n  elsif n == 3\n    return 0\n\
    \  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  nth_fib4_number = 0\n  before_last_fib4_number = 0\n  last_fib4_number = 0\n\
    \  before_before_last_fib4_number = 0\n  last_last_fib4_number = 0\n  (0..n).each\
    \ do |i|\n    if i == 0\n      nth_fib4_number = 0\n    elsif i == 1\n      nth_fib4_number\
    \ = 0\n    elsif i == 2\n      nth_fib4_number = 2\n    elsif i == 3\n      nth_fib4_number\
    \ = 0\n    else\n      nth_fib4_number = before_last_fib4_number + last_fib4_number\
    \ + before_before_last_fib4_number + last_last_fib4_number\n    end\n    last_last_fib4_number\
    \ = before_before_last_fib4_number\n    before_before_last_fib4_number = last_fib4_number\n\
    \    last_fib4_number = before_last_fib4_number\n    before_last_fib4_number =\
    \ nth_fib4_number\n  end\n  nth_fib4_number\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n\
    \  c = 2\n  d = 0\n  4.upto(n) do\n    temp = d\n    d = c + b + a + d\n    a\
    \ = b\n    b = c\n    c = temp\n  end\n  d\nend", "  a = 0\n  b = 0\n  c = 2\n\
    \  d = 0\n  5.upto(n).each do |i|\n    a = b\n    b = c\n    c = d\n    d = a\
    \ + b + c\n  end\n  d\nend", "    return n if n <= 1\n    fib_nums = [0, 0, 2,\
    \ 0]\n    (4..n).each do |i|\n        fib_nums << fib_nums[i-1] + fib_nums[i-2]\
    \ + fib_nums[i-3] + fib_nums[i-4]\n    end\n    fib_nums[n]\nend", "\tfib = [0,\
    \ 0, 2, 0]\n\t4.upto(n) do |i|\n\t\tfib[i % 4] = fib[(i-1) % 4] + fib[(i-2) %\
    \ 4] + fib[(i-3) % 4] + fib[(i-4) % 4]\n\tend\n\tfib[n % 4]\nend", "  a, b, c,\
    \ d = 0, 0, 2, 0\n  (n-3).times do\n    a, b, c, d = b, c, d, a+b+c+d\n  end\n\
    \  d\nend", "  fib4 = []\n  fib4[0] = 0\n  fib4[1] = 0\n  fib4[2] = 2\n  fib4[3]\
    \ = 0\n  for i in 4..n do\n    fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n\
    \  end\n  return fib4[n]\nend", "  return 0 if n == 0\n  return 0 if n == 1\n\
    \  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d =\
    \ 0\n  for i in 4..n\n    a = b\n    b = c\n    c = d\n    d = a + b + c + d\n\
    \  end\n  return d\nend", "  first = 0\n  second = 0\n  third = 2\n  fourth =\
    \ 0\n  if n == 0\n    return first\n  elsif n == 1\n    return second\n  elsif\
    \ n == 2\n    return third\n  elsif n == 3\n    return fourth\n  else\n    (n-3).times\
    \ do\n      temp = first\n      first = second\n      second = third\n      third\
    \ = fourth\n      fourth = first + second + third + temp\n    end\n    return\
    \ fourth\n  end\nend", "  a = [0, 0, 2, 0]\n  4.upto(n) do |num|\n    a << a[-1]\
    \ + a[-2] + a[-3] + a[-4]\n  end\n  a[n]\nend", "  return 0 if n <= 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  previous = [0, 0, 2, 0]\n  (4..n).each\
    \ do |i|\n    new_num = previous.reduce(:+)\n    previous.shift\n    previous\
    \ << new_num\n  end\n  previous.last\nend", "\tif n == 0\n\t\treturn 0\n\telsif\
    \ n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 2\n\telsif n == 3\n\t\treturn\
    \ 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\n\
    end", "  f1 = 0\n  f2 = 0\n  f3 = 2\n  f4 = 0\n  (n-2).times do\n    f4 = f1 +\
    \ f2 + f3 + f4\n    f1 = f2\n    f2 = f3\n    f3 = f4\n  end\n  f4\nend", "  a\
    \ = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-2).times do\n    d = a + b + c\n    a =\
    \ b\n    b = c\n    c = d\n  end\n  d\nend", "  # write your code here\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n-4).times do\n    a, b, c, d = b, c,\
    \ d, a + b + c + d\n  end\n  d\nend", "  fibs = [0, 0, 2, 0]\n  return fibs[n]\
    \ if n < 4\n  (4..n).each do |i|\n    fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3]\
    \ + fibs[i-4]\n  end\n  fibs[n]\nend", "  return 0 if n == 0 || n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  # This was my first attempt:\n  # return\
    \ (n-1) + (n-2) + (n-3) + (n-4)\n  # This was the problem:  The above code would\
    \ work for fib4(5) but not fib4(6).\n  # The problem was that I wasn't adding\
    \ the previous four numbers.\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end\nputs fib4(5)\nputs fib4(6)\nputs fib4(7)\nputs fib4(8)", "\t(n < 4) ? 2**(n-1)\
    \ : 2**(n-1) + fib4(n-1) + fib4(n-2) + fib4(n-3)\nend", "  if n < 4\n    return\
    \ [0, 0, 2, 0][n]\n  end\n  a, b, c, d = 0, 0, 2, 0\n  (n - 3).times do\n    a,\
    \ b, c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "  return 0 if n == 0\n\
    \  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  prev = [0,\
    \ 0, 2, 0]\n  (4..n).each do |i|\n    new_prev = prev.inject(:+)\n    prev = [prev[1],\
    \ prev[2], prev[3], new_prev]\n  end\n  prev.inject(:+)\nend", "  # TODO\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  fib4_0 = 0\n  fib4_1 = 0\n  fib4_2 = 2\n  fib4_3 = 0\n  (4..n).each\
    \ do |i|\n    tmp = fib4_0 + fib4_1 + fib4_2 + fib4_3\n    fib4_0 = fib4_1\n \
    \   fib4_1 = fib4_2\n    fib4_2 = fib4_3\n    fib4_3 = tmp\n  end\n  fib4_3\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  prev = 0\n  prev_prev = 0\n  prev_prev_prev = 0\n  curr = 2\n\
    \  (n-3).times do\n    prev_prev_prev = prev_prev\n    prev_prev = prev\n    prev\
    \ = curr\n    curr = prev + prev_prev + prev_prev_prev\n  end\n  curr\nend", "\t\
    return 0 if n < 1\n\t# if n < 2\n\t# \treturn 0\n\t# elsif n == 2\n\t# \treturn\
    \ 2\n\t# elsif n == 3\n\t# \treturn 0\n\t# end\n\tarr = [0, 0, 2, 0]\n\t4.upto(n)\
    \ do |x|\n\t\tarr.shift\n\t\tarr << (arr[0] + arr[1] + arr[2] + arr[3])\n\tend\n\
    \tarr[-1]\nend", "  return n if n <= 1\n  first, second, third, fourth = 0, 0,\
    \ 2, 0\n  (n - 3).times do\n    fourth = first + second + third + fourth\n   \
    \ first = second\n    second = third\n    third = fourth\n  end\n  return first\
    \ + second + third + fourth\nend", "  return 0 if n == 0\n  return 0 if n == 1\n\
    \  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d =\
    \ 0\n  4.upto(n) do\n    next_fib = a + b + c + d\n    a = b\n    b = c\n    c\
    \ = d\n    d = next_fib\n  end\n  d\nend", "  arr = [0, 0, 2, 0]\n  a = 0\n  b\
    \ = 0\n  c = 2\n  d = 0\n  i = 4\n  return arr[n] if n < 4\n  while i <= n\n \
    \   a = b\n    b = c\n    c = d\n    d = a + b + c + d\n    i += 1\n  end\n  d\n\
    end", "  sequence = []\n  (0..n).each do |i|\n    sequence << fib4_helper(i)\n\
    \  end\n  sequence[n]\nend", "  return 0 if n <= 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n - 4).times do |i|\n    a, b, c,\
    \ d = b, c, d, a + b + c + d\n  end\n  a + b + c + d\nend", "  if n < 2\n    return\
    \ 0\n  elsif n == 2\n    return 2\n  end\n  return fib4_iter(n, 0, 0, 2, 0)\n\
    end", "  return 0 if n <= 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  4.upto(n) do\n    e = a +\
    \ b + c + d\n    a = b\n    b = c\n    c = d\n    d = e\n  end\n  d\nend", " \
    \   if n < 3\n        return n\n    end\n    i = 3\n    fib_1 = 0\n    fib_2 =\
    \ 2\n    fib_3 = 0\n    fib_4 = 0\n    fib_new = 0\n    while i <= n\n       \
    \ fib_new = fib_1 + fib_2 + fib_3 + fib_4\n        fib_1 = fib_2\n        fib_2\
    \ = fib_3\n        fib_3 = fib_4\n        fib_4 = fib_new\n        i += 1\n  \
    \  end\n    return fib_new\nend", "  return 0 if n < 2\n  a, b, c, d = 0, 0, 2,\
    \ 0\n  3.upto(n) do |i|\n    a, b, c, d = b, c, d, d + c + b + a\n  end\n  d\n\
    end", "    a, b, c, d = 0, 0, 2, 0\n    (n-3).times do\n        a, b, c, d = b,\
    \ c, d, a+b+c+d\n    end\n    return d\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  n < 3 ? n : fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if\
    \ n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times\
    \ do\n    a, b, c, d = b, c, d, (a + b + c + d)\n  end\n  d\nend", "  return 0\
    \ if n < 2\n  return 2 if n == 2\n  return 0 if n == 3\n  count = 4\n  n1 = 0\n\
    \  n2 = 0\n  n3 = 2\n  n4 = 0\n  until count == n\n    temp = n4\n    n4 = n1\
    \ + n2 + n3 + n4\n    n1 = n2\n    n2 = n3\n    n3 = temp\n    count += 1\n  end\n\
    \  n4\nend", "\tfib4_array = Array.new(n+1)\n\t\n\tfib4_array[0] = 0\n\tfib4_array[1]\
    \ = 0\n\tfib4_array[2] = 2\n\tfib4_array[3] = 0\n\t\n\tfor i in 4..n\n\t\tfib4_array[i]\
    \ = fib4_array[i-1] + fib4_array[i-2] + fib4_array[i-3] + fib4_array[i-4]\n\t\
    end\n\t\n\treturn fib4_array[n]\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n \
    \ (n-2).times do\n    e = a + b + c + d\n    a = b\n    b = c\n    c = d\n   \
    \ d = e\n  end\n  return d\nend", end, end, "\tx = 0;\n\ty = 0;\n\tz = 2;\n\t\
    w = 0;\n\tresult = 0;\n\tif (n == 0)\n\t\treturn 0;\n\telsif (n == 1)\n\t\treturn\
    \ 0;\n\telsif (n == 2)\n\t\treturn 2;\n\telsif (n == 3)\n\t\treturn 0;\n\tend\n\
    \t(n-3).times do\n\t\tresult = x + y + z + w;\n\t\tx = y;\n\t\ty = z;\n\t\tz =\
    \ w;\n\t\tw = result;\n\tend\n\treturn result;\nend", "  # ...\nend", "  fib4\
    \ = [0, 0, 2, 0]\n  if n < 4\n    return fib4[n]\n  end\n  for i in 4..n\n   \
    \ fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n  end\n  return fib4[n]\n\
    end", "  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n\
    \    return 2\n  elsif n == 3\n    return 0\n  end\n  a, b, c, d = 0, 0, 2, 0\n\
    \  (n-4).times do\n    a, b, c, d = b, c, d, a+b+c+d\n  end\n  return a+b+c+d\n\
    end", "\treturn 0 if n == 0 || n == 1\n\treturn 2 if n == 2\n\treturn 0 if n ==\
    \ 3\n\tfib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  first, second,\
    \ third, fourth = 0, 0, 2, 0\n  return first if n == 0\n  return second if n ==\
    \ 1\n  return third if n == 2\n  return fourth if n == 3\n  while n > 3\n    fifth\
    \ = first + second + third + fourth\n    first = second\n    second = third\n\
    \    third = fourth\n    fourth = fifth\n    n -= 1\n  end\n  fourth\nend", " \
    \ # your code here\nend", "  if n < 3\n    return n*2\n  end\n  a = 0\n  b = 0\n\
    \  c = 2\n  d = 2\n  counter = 3\n  while counter < n\n    fib4 = a + b + c +\
    \ d\n    a = b\n    b = c\n    c = d\n    d = fib4\n    counter += 1\n  end\n\
    \  fib4\nend", "  fibs = [0, 0, 2, 0]\n  return fibs[n] if n < 4\n  (4..n).each\
    \ do |i|\n    fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4]\n  end\n\
    \  fibs[n]\nend", "  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n \
    \ elsif n == 2\n    return 2\n  elsif n == 3\n    return 0\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n <= 2\n    return 2\n\
    \  elsif n == 3\n    return 0\n  end\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", " \
    \ return 0 if n <= 1\n  return 2 if n == 2\n  return 0 if n == 3\n  # The first\
    \ 4 numbers are defined by the problem.\n  prev_4 = [0, 0, 2, 0]\n  for i in 4..n\n\
    \    prev_4.shift\n    prev_4 << (prev_4[0] + prev_4[1] + prev_4[2] + prev_4[3])\n\
    \  end\n  prev_4[3]\nend", "  fib = [0, 0, 2, 0]\n  return fib[n] if fib[n]\n\
    \  (4..n).each do |i|\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\
    \  end\n  fib[n]\nend", end, "\tarr = [0,0,2,0]\n\treturn arr[n] if n <= 3\n\t\
    x = 4\n\twhile x <= n\n\t\tarr[x] = arr[x-1] + arr[x-2] + arr[x-3] + arr[x-4]\n\
    \t\tx += 1\n\tend\n\tarr[n]\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  n.times\
    \ do\n    a = b\n    b = c\n    c = d\n    d = a + b + c\n  end\n  return d\n\
    end", "  return n if n < 2\n  f4 = []\n  f4[0] = 0\n  f4[1] = 0\n  f4[2] = 2\n\
    \  f4[3] = 0\n  for i in 4..n\n    f4[i] = f4[i-1] + f4[i-2] + f4[i-3] + f4[i-4]\n\
    \  end\n  f4[n]\nend", "\tseq = [0, 0, 2, 0]\n\tif n < 4\n\t\treturn seq[n]\n\t\
    end\n\t4.upto(n) do |i|\n\t\tseq[0] = seq[1]\n\t\tseq[1] = seq[2]\n\t\tseq[2]\
    \ = seq[3]\n\t\tseq[3] = seq[0] + seq[1] + seq[2] + seq[3]\n\tend\n\treturn seq[3]\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  memo = [0, 0, 2, 0]\n  for i in 4..n\n    memo << memo[i-1] +\
    \ memo[i-2] + memo[i-3] + memo[i-4]\n  end\n  memo[n]\nend", "  return n if n\
    \ < 2\n  f1 = 0\n  f2 = 0\n  f3 = 2\n  f4 = 0\n  (n-3).times do\n    new_f1 =\
    \ f1 + f2 + f3 + f4\n    f1 = f2\n    f2 = f3\n    f3 = f4\n    f4 = new_f1\n\
    \  end\n  f1 + f2 + f3 + f4\nend", "  return 0 if n < 2\n  arr = [0, 0, 2, 0]\n\
    \  (3..n).each do |i|\n    arr << arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n\
    \  end\n  arr[n]\nend", "  return 0 if n < 2\n  return 2 if n == 2\n  curr = 0\n\
    \  prev1 = 2\n  prev2 = 0\n  prev3 = 0\n  prev4 = 0\n  3.upto(n) do |i|\n    curr\
    \ = prev1 + prev2 + prev3 + prev4\n    prev4 = prev3\n    prev3 = prev2\n    prev2\
    \ = prev1\n    prev1 = curr\n  end\n  curr\nend\nputs fib4(5)\nputs fib4(6)\n\
    puts fib4(7)\nputs fib4(8)", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  if n == 0\n\
    \    a\n  elsif n == 1\n    b\n  elsif n == 2\n    c\n  elsif n == 3\n    d\n\
    \  else\n    for x in (4..n)\n      e = a + b + c + d\n      a = b\n      b =\
    \ c\n      c = d\n      d = e\n    end\n    d\n  end\nend", "\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n ==\
    \ 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  count = 4\n  until count == n\n   \
    \ a = b\n    b = c\n    c = d\n    d = a + b + c + d\n    count += 1\n  end\n\
    \  d\nend", "  a, b, c, d = 0, 0, 2, 0\n  (n-1).times do\n    e = a+b+c+d\n  \
    \  a, b, c, d = b, c, d, e\n  end\n  a+b+c+d\nend", '  return n if n < 3', " \
    \ n < 4 ? n : fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return 0\
    \ if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n\
    \  count, a, b, c, d = 4, 0, 0, 2, 0\n  while count <= n\n    temp = a + b + c\
    \ + d\n    a = b\n    b = c\n    c = d\n    d = temp\n    count += 1\n  end\n\
    \  return d\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  i = 3\n  return a if\
    \ n == 0\n  return b if n == 1\n  return c if n == 2\n  return d if n == 3\n \
    \ while i <= n\n    d = a + b + c + d\n    a = b\n    b = c\n    c = d\n    i\
    \ += 1\n  end\n  d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  [0, 0, 2, 0].each_with_index do |_, i|\n\
    \    if n > 3 && i > 3\n      tmp_arr = [0, 0, 2, 0]\n      tmp_arr[3] = tmp_arr[0]\
    \ + tmp_arr[1] + tmp_arr[2] + tmp_arr[3]\n      tmp_arr.shift\n      return tmp_arr[3]\
    \ if i == n - 1\n    end\n  end\nend", "  # implement me!\nend", "\treturn 0 if\
    \ n == 0\n\treturn 0 if n == 1\n\treturn 2 if n == 2\n\treturn 0 if n == 3\n\t\
    a, b, c, d = 0, 0, 2, 0\n\tfor i in 4..n\n\t\ttemp = a + b + c + d\n\t\ta = b\n\
    \t\tb = c\n\t\tc = d\n\t\td = temp\n\tend\n\treturn d\nend\nputs fib4(5)\nputs\
    \ fib4(6)\nputs fib4(7)", "    if n < 2\n        return n\n    elsif n == 2\n\
    \        return 2\n    elsif n == 3\n        return 0\n    else\n        return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", end, "  if n ==\
    \ 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return 2\n\
    \  elsif n == 3\n    return 0\n  else\n    fib4_result = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n    return fib4_result\n  end\nend", "  nums = [0,\
    \ 0, 2, 0]\n  if n > 3\n    (n - 3).times do\n      nums << nums[-1] + nums[-2]\
    \ + nums[-3] + nums[-4]\n    end\n  end\n  nums[n]\nend", "  f0 = 0\n  f1 = 0\n\
    \  f2 = 2\n  f3 = 0\n  f4 = 0\n  (n-2).times do\n    f4 = f0 + f1 + f2 + f3\n\
    \    f0 = f1\n    f1 = f2\n    f2 = f3\n    f3 = f4\n  end\n  f4\nend", "    prev\
    \ = [0, 0, 2, 0]\n    if n <= 3\n        return prev[n]\n    end\n    curr = 0\n\
    \    4.upto(n) do |i|\n        curr = prev[0] + prev[1] + prev[2] + prev[3]\n\
    \        prev[0] = prev[1]\n        prev[1] = prev[2]\n        prev[2] = prev[3]\n\
    \        prev[3] = curr\n    end\n    return curr\nend", "  if n == 0\n    return\
    \ 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return 2\n  elsif n ==\
    \ 3\n    return 0\n  end\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  i = 0\n  while\
    \ i < n-3\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n    i += 1\n  end\n\
    \  return d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if\
    \ n == 2\n  return 0 if n == 3\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "\tif n < 0\n\t\traise ArgumentError, \"n must be a positive integer\"\n\
    \tend\n\tif n == 0\n\t\treturn 0\n\tend\n\tif n <= 3\n\t\treturn 2**(n-1)\n\t\
    end\n\tfib4_array = [0, 0, 2, 0]\n\tfor i in 4..n\n\t\tfib4_array[i%4] = fib4_array[(i-1)%4]\
    \ + fib4_array[(i-2)%4] + fib4_array[(i-3)%4] + fib4_array[(i-4)%4]\n\tend\n\t\
    return fib4_array[n%4]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
