name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n\
    \  return 0 if n == 3\n  fib4_minus_1 = 0\n  fib4_minus_2 = 0\n  fib4_minus_3\
    \ = 2\n  fib4_minus_4 = 0\n  fib4_value = 0\n  for i in 4..n\n    fib4_value =\
    \ fib4_minus_1 + fib4_minus_2 + fib4_minus_3 + fib4_minus_4\n    fib4_minus_1\
    \ = fib4_minus_2\n    fib4_minus_2 = fib4_minus_3\n    fib4_minus_3 = fib4_minus_4\n\
    \    fib4_minus_4 = fib4_value\n  end\n  fib4_value\nend", "  # your code here\n\
    end", "  fib4_numbers = [0, 0, 2, 0]\n  return fib4_numbers[n] if n < 4\n  4.upto(n)\
    \ do |x|\n    fib4_numbers[x] = fib4_numbers[x-1] + fib4_numbers[x-2] + fib4_numbers[x-3]\
    \ + fib4_numbers[x-4]\n  end\n  fib4_numbers[n]\nend", end, "  return 0 if n <\
    \ 2\n  arr = [0,0,2,0]\n  (4..n).each do |i|\n    arr.unshift(arr.inject(:+))\n\
    \    arr.pop\n  end\n  arr.first\nend", "\tfib = [0, 0, 2, 0]\n\t(4..n).each do\
    \ |idx|\n\t\tfib[idx%4] = fib[(idx-1)%4] + fib[(idx-2)%4] + fib[(idx-3)%4] + fib[(idx-4)%4]\n\
    \tend\n\tfib[n%4]\nend", "\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  index\
    \ = 3\n  while index <= n\n    a = b\n    b = c\n    c = d\n    d = a + b + c\n\
    \    index += 1\n  end\n  return d\nend", "  fibs = [0, 0, 2, 0]\n  return fibs[n]\
    \ if n < 4\n  (4..n).each do |i|\n    fibs << fibs[i-1] + fibs[i-2] + fibs[i-3]\
    \ + fibs[i-4]\n  end\n  fibs[n]\nend", "  return 0 if n <= 1\n  return 2 if n\
    \ == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n - 4).times do\n\
    \    a, b, c, d = b, c, d, (a + b + c + d)\n  end\n  d\nend", "    a = 0\n   \
    \ b = 0\n    c = 2\n    d = 0\n    while n > 3\n        a = b\n        b = c\n\
    \        c = d\n        d = a + b + c\n        n -= 1\n    end\n    return d\n\
    end", "\treturn 0 if n == 0\n\treturn 0 if n == 1\n\treturn 2 if n == 2\n\treturn\
    \ 0 if n == 3\n\t\n\tres = [0, 0, 2, 0]\n\t(4..n).each do |i|\n\t\tres << res[i-1]\
    \ + res[i-2] + res[i-3] + res[i-4]\n\tend\n\tres[n]\nend", "  x, y, z, w = 0,\
    \ 0, 2, 0\n  n.times do\n    x, y, z, w = y, z, w, x + y + z + w\n  end\n  x\n\
    end", "\treturn 0 if n < 2\n\treturn 2 if n == 2\n\tfib = [0, 0, 2, 0]\n\t(4..n).each\
    \ do |i|\n\t\tfib << fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\tend\n\tfib[n]\n\
    end", "  return 0 if n <= 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a =\
    \ 0\n  b = 0\n  c = 2\n  d = 0\n  n.times do\n    a = b\n    b = c\n    c = d\n\
    \    d = a + b + c\n  end\n  d\nend", "\ta, b, c, d = 0, 0, 2, 0\n\ti = 0\n\t\
    while i < n\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\t\ti += 1\n\tend\n\ta\n\
    end", "  fib4 = [0, 0, 2, 0]\n  for i in 4..n\n    fib4[i] = fib4[i-1] + fib4[i-2]\
    \ + fib4[i-3] + fib4[i-4]\n  end\n  fib4[n]\nend", "  raise ArgumentError.new(\"\
    n must be >= 0\") if n < 0\n  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  i = 4\n  while\
    \ i <= n\n    a, b, c, d = b, c, d, a + b + c + d\n    i += 1\n  end\n  return\
    \ d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n\
    \  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n-4).times do |i|\n    a,\
    \ b, c, d = b, c, d, b + c + d + a\n  end\n  b + c + d + a\nend", "\t# compute\
    \ fib4(n)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
