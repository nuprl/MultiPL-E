name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n# such that the smallest number will become 0 and the largest\
  \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  max = numbers.max\n  min = numbers.min\n  new_numbers = []\n  numbers.each\
    \ do |number|\n    new_numbers << ((number - min) / (max - min))\n  end\n  new_numbers\n\
    end", "  max = numbers.max\n  numbers.map { |n| n / max }\nend", "  min = numbers.min\n\
    \  max = numbers.max\n  numbers.map { |num| (num - min) / (max - min) }\nend",
  "  # TODO: implement this method\nend", "  largest = numbers.max\n  smallest = numbers.min\n\
    \  numbers.map do |n|\n    (n - smallest) / (largest - smallest)\n  end\nend",
  "  # raise NotImplementedError\n  (numbers.map{|x| x.to_f} - numbers.min).map{|x|\
    \ x / (numbers.max - numbers.min)}\nend", "  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend", "  min = numbers.min\n\
    \  max = numbers.max\n  scale = max - min\n  numbers.map { |number| (number -\
    \ min) / scale }\nend", "  # FIXME\nend", "  # TODO: implement\nend", "  min =\
    \ numbers.min\n  max = numbers.max\n  numbers.map { |n| (n - min) / (max - min)\
    \ }\nend", "  min = numbers.min\n  max = numbers.max\n  numbers.map { |n| (n -\
    \ min) / (max - min) }\nend", "  min, max = numbers.minmax\n  numbers.map { |n|\
    \ (n - min) / (max - min) }\nend", "  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend", "  [numbers.min, numbers.max].map\
    \ { |number| (number - numbers.min) / (numbers.max - numbers.min) }\nend", " \
    \ min = numbers.min.to_f\n  max = numbers.max.to_f\n  numbers.map { |n| (n - min)\
    \ / (max - min) }\nend", "  max = numbers.max.to_f\n  min = numbers.min.to_f\n\
    \  numbers.map{|n| (n - min) / (max - min)}\nend", "  max = numbers.max\n  min\
    \ = numbers.min\n  numbers.map { |n| (n - min) / (max - min) }\nend", "  return\
    \ [] if numbers.empty?\n  min = numbers.min\n  max = numbers.max\n  numbers.map\
    \ { |n| (n - min) / (max - min) }\nend", "  numbers.minmax.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
