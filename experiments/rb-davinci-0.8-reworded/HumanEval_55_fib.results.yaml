language: rb
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nfib = lambda { |n| fib(n) }\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprr58axih

    Started

    .

    Finished in 0.000740962 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1349.60 tests/s, 6747.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  return fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnfuowh69

    Started

    .

    Finished in 0.001112545 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    898.84 tests/s, 4494.20 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvqp6bnn

    Started

    .

    Finished in 0.001278041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.45 tests/s, 3912.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n \
    \   return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp16pq1dh8

    Started

    .

    Finished in 0.000620114 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1612.61 tests/s, 8063.03 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  i = 0\n  a = 0\n  b = 1\n  while i\
    \ < n\n    i += 1\n    c = a + b\n    a = b\n    b = c\n  end\n  a\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpndsep9zv

    Started

    .

    Finished in 0.000399686 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2501.96 tests/s, 12509.82 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2xgx_rut

    Started

    .

    Finished in 0.000656801 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1522.53 tests/s, 7612.66 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvqp6bnn

    Started

    .

    Finished in 0.001278041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.45 tests/s, 3912.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoxoj61r8

    Started

    .

    Finished in 0.000619048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1615.38 tests/s, 8076.92 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg5d5ahga

    Started

    .

    Finished in 0.001310406 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    763.12 tests/s, 3815.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvo3mshzy

    Started

    .

    Finished in 0.000535411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1867.72 tests/s, 9338.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tcall(n)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplv8mfjks\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `call' for\
    \ #<TestHumanEval:0x00002ad3e5426830 @method_name=\"test_fib\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ad3e5426808\
    \ @start_time=2022-08-06 18:09:10.068807581 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ad3e5445348\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ad3e5544208\
    \ @test_name=\"test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `call' for #<TestHumanEval:0x00002ad3e5426830 ...>\n  \n  \tcall(n)\n\
    \  \t^^^^\n  Did you mean?  caller>, @method_name=\"test_fib\">], @stop_tag=#<Object:0x00002ad3e54440d8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002ad3e5544208 @test_name=\"\
    test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined method `call'\
    \ for #<TestHumanEval:0x00002ad3e5426830 ...>\n  \n  \tcall(n)\n  \t^^^^\n  Did\
    \ you mean?  caller>, @method_name=\"test_fib\">], @pendings=[], @omissions=[],\
    \ @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ad3e5547ea8\
    \ @a_proc=#<Proc:0x00002ad3e5547ed0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47089573986000>=>#<Proc:0x00002ad3e5547ed0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ad3e55479a8\
    \ @a_proc=#<Proc:0x00002ad3e55479d0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=47089573984720>=>#<P"
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    return 0 if n == 0\n    return 1\
    \ if n == 1\n    return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppz8g7cor

    Started

    .

    Finished in 0.00065082 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1536.52 tests/s, 7682.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg5d5ahga

    Started

    .

    Finished in 0.001310406 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    763.12 tests/s, 3815.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n == 0 || n == 1\n        n\n\
    \    else\n        fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpka86a8nt

    Started

    .

    Finished in 0.001427586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    700.48 tests/s, 3502.42 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tif n <= 2\n\t\t1\n\telse\n\t\tfib(n-1)\
    \ + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbmvbqc8w

    Started

    .

    Finished in 0.000780108 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1281.87 tests/s, 6409.37 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2xgx_rut

    Started

    .

    Finished in 0.000656801 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1522.53 tests/s, 7612.66 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  x, y = 0, 1\n  n.times do\n    x,\
    \ y = y, x + y\n  end\n  x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpawoliskt

    Started

    .

    Finished in 0.000438002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2283.09 tests/s, 11415.47 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvo3mshzy

    Started

    .

    Finished in 0.000535411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1867.72 tests/s, 9338.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\treturn n if n <= 1\n\treturn fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2k63wjue

    Started

    .

    Finished in 0.000645602 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1548.94 tests/s, 7744.71 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg5d5ahga

    Started

    .

    Finished in 0.001310406 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    763.12 tests/s, 3815.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  fib = Proc.new do |t|\n    if t ==\
    \ 0 or t == 1\n      t\n    else\n      fib.call(t-1) + fib.call(t-2)\n    end\n\
    \  end\n  fib.call(n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp82xcpy_9

    Started

    .

    Finished in 0.000703475 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1421.51 tests/s, 7107.57 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 0 if n.zero?\n  return 1 if\
    \ n == 1\n  fib(n - 1) + fib(n - 2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcwhfpo7k

    Started

    .

    Finished in 0.000653953 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1529.16 tests/s, 7645.81 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n < 3\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1hw3op22

    Started

    .

    Finished in 0.000596048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1677.72 tests/s, 8388.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvqp6bnn

    Started

    .

    Finished in 0.001278041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.45 tests/s, 3912.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n < 3\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1hw3op22

    Started

    .

    Finished in 0.000596048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1677.72 tests/s, 8388.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n <= 1\n        n\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdgq3blwf

    Started

    .

    Finished in 0.000825947 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1210.73 tests/s, 6053.66 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgs3ptkvw

    Started

    .

    Finished in 0.001223143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    817.57 tests/s, 4087.83 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_40ky4_5

    Started

    .

    Finished in 0.000628915 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1590.04 tests/s, 7950.20 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  (fib(n-1) + fib(n-2))\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpejkq00hb

    Started

    .

    Finished in 0.000677792 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1475.38 tests/s, 7376.89 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n == 0 ? 0 : n == 1 ? 1 : fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1_2_by3b

    Started

    .

    Finished in 0.001066567 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    937.59 tests/s, 4687.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm91t2wks

    Started

    .

    Finished in 0.000634499 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1576.05 tests/s, 7880.23 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgs3ptkvw

    Started

    .

    Finished in 0.001223143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    817.57 tests/s, 4087.83 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  @fib ||= {}\n\
    \  @fib[n] ||= fib(n - 1) + fib(n - 2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqida1lq_

    Started

    .

    Finished in 0.000483859 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.72 tests/s, 10333.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvghzhzlb

    Started

    .

    Finished in 0.00080741 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1238.53 tests/s, 6192.64 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8utpavw_

    Started

    .

    Finished in 0.00066543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1502.79 tests/s, 7513.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  return fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpd2jff668

    Started

    .

    Finished in 0.000654782 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1527.23 tests/s, 7636.13 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  a, b = 0, 1\n  n.times do\n    a,\
    \ b = b, a + b\n  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnq5vj9a

    Started

    .

    Finished in 0.000470084 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2127.28 tests/s, 10636.40 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrvcg44

    Started

    .

    Finished in 0.000662656 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1509.08 tests/s, 7545.39 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  # this is where I need to create a\
    \ hash that will save the values of the method call\n  fib = Hash.new()\n  # this\
    \ is where I will set the base case\n  if n == 0\n    return 0\n  elsif n == 1\n\
    \    return 1\n  else\n    # this is where I need to check if the value of the\
    \ call is in the hash, if it is I will return the value and save the calculation\n\
    \    if fib.has_key?(n)\n      return fib[n]\n    else\n      # if the call is\
    \ not in the hash then I will use recursion to save the value in the hash and\
    \ return it\n      fib[n] = fib(n-1) + fib(n-2)\n      return fib[n]\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcvljxmcr

    Started

    .

    Finished in 0.000983615 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1016.66 tests/s, 5083.29 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  first\
    \ = 1\n  second = 1\n  (n - 2).times do\n    first, second = second, first + second\n\
    \  end\n  second\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmivikw2n

    Started

    .

    Finished in 0.000448458 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2229.86 tests/s, 11149.32 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpaw3ab961

    Started

    .

    Finished in 0.000824932 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1212.22 tests/s, 6061.11 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return nil if n <= 0\n  return 1 if\
    \ n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp970cgd9q

    Started

    .

    Finished in 0.000605809 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1650.69 tests/s, 8253.43 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8utpavw_

    Started

    .

    Finished in 0.00066543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1502.79 tests/s, 7513.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nputs \"Fibonacci number:\"\nputs fib(9)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Fibonacci number:

    34

    Loaded suite /tmp/tmpllbpfahh

    Started

    .

    Finished in 0.000784065 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1275.40 tests/s, 6377.02 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  return fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnfuowh69

    Started

    .

    Finished in 0.001112545 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    898.84 tests/s, 4494.20 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  @fib ||= []\n\
    \  @fib[n] ||= fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp25yhhhup

    Started

    .

    Finished in 0.000420785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2376.51 tests/s, 11882.55 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_dhx64l

    Started

    .

    Finished in 0.000643949 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1552.92 tests/s, 7764.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  (1..n).reduce([0, 1]) { |(a, b), _|\
    \ [b, a + b] }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdutemhpx

    Started

    .

    Finished in 0.00061232 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.13 tests/s, 8165.67 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n < 2\n        n\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppf7_71qr

    Started

    .

    Finished in 0.000670022 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1492.49 tests/s, 7462.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n \
    \   return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp16pq1dh8

    Started

    .

    Finished in 0.000620114 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1612.61 tests/s, 8063.03 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n == 0\n        return 0\n  \
    \  elsif n == 1\n        return 1\n    end\n    fib(n-1) + fib(n-2)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqo6m90ca

    Started

    .

    Finished in 0.000710326 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1407.80 tests/s, 7039.02 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if\
    \ n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpw33v1z27.rb:12: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpw33v1z27.rb:21: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tif n < 1\n\t\treturn 0\n\telsif n\
    \ == 1\n\t\treturn 1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyk8qm8a7

    Started

    .

    Finished in 0.000721155 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1386.66 tests/s, 6933.32 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoxoj61r8

    Started

    .

    Finished in 0.000619048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1615.38 tests/s, 8076.92 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_dhx64l

    Started

    .

    Finished in 0.000643949 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1552.92 tests/s, 7764.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  i, a, b = 1, 0, 1\n  while i < n\n\
    \    i += 1\n    a, b = b, a + b\n  end\n  a\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4yksov4a\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmp4yksov4a.rb:20:in `test_fib'\n     17:\
    \ class TestHumanEval < Test::Unit::TestCase\n     18:   def test_fib\n     19:\
    \     candidate = method(:fib)\n  => 20:     assert_equal(55, candidate.call(10))\n\
    \     21:     assert_equal(1, candidate.call(1))\n     22:     assert_equal(21,\
    \ candidate.call(8))\n     23:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<34>\n===============================================================================\n\
    \nFinished in 0.009816517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.87 tests/s, 101.87 assertions/s\n"
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  (n < 2) ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyfz6phne

    Started

    .

    Finished in 0.000676055 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1479.17 tests/s, 7395.85 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  puts \"n = #{n}\"\n  if n == 1 ||\
    \ n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3ip8xrns

    Started

    n = 10

    n = 9

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 1

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 11

    n = 10

    n = 9

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 9

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 5

    n = 4

    n = 3

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    n = 1

    n = 12

    n = 11

    n = 10

    n = 9

    n = 8

    n = 7

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_dhx64l

    Started

    .

    Finished in 0.000643949 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1552.92 tests/s, 7764.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8utpavw_

    Started

    .

    Finished in 0.00066543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1502.79 tests/s, 7513.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  puts \"n = #{n}\"\n  return 1 if n\
    \ == 1\n  return 1 if n == 2\n  puts \"fib(n-1) = #{fib(n-1)}\"\n  puts \"fib(n-2)\
    \ = #{fib(n-2)}\"\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp44xjpbdl

    Started

    n = 10

    n = 9

    n = 8

    n = 7

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-1) = 3

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-2) = 2

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 5

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-2) = 3

    n = 5

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-1) = 3

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-2) = 2

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-1) = 8

    n = 5

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-1) = 3

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-2) = 2

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-2) = 5

    n = 6

    n = 5

    n = 4

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-1) = 2

    n = 2

    fib(n-2) = 1

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    n = 2

    fib(n-1) = 3

    n = 3

    n = 2

    fib(n-1) = 1

    n = 1

    fib(n-2) = 1

    n = 2

    n = 1

    fib(n-2) ='
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbxu9vang

    Started

    .

    Finished in 0.000712908 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1402.71 tests/s, 7013.53 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nputs fib(10)\nputs fib(8)\n\
    puts fib(1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: '55

    21

    1

    Loaded suite /tmp/tmpha964agw

    Started

    .

    Finished in 0.000705811 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1416.81 tests/s, 7084.05 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm91t2wks

    Started

    .

    Finished in 0.000634499 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1576.05 tests/s, 7880.23 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  return fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnfuowh69

    Started

    .

    Finished in 0.001112545 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    898.84 tests/s, 4494.20 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm91t2wks

    Started

    .

    Finished in 0.000634499 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1576.05 tests/s, 7880.23 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvo3mshzy

    Started

    .

    Finished in 0.000535411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1867.72 tests/s, 9338.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n \
    \   return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp16pq1dh8

    Started

    .

    Finished in 0.000620114 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1612.61 tests/s, 8063.03 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg5d5ahga

    Started

    .

    Finished in 0.001310406 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    763.12 tests/s, 3815.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n == 0\n        return 0\n  \
    \  elsif n == 1\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n\
    \    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpiirxt5kr

    Started

    .

    Finished in 0.00072499 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1379.33 tests/s, 6896.65 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 3\n    return 1\n  else\n \
    \   return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwun5kpyw

    Started

    .

    Finished in 0.000575044 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1739.00 tests/s, 8694.99 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    if n == 0\n        0\n    elsif\
    \ n == 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwxl4b_jz

    Started

    .

    Finished in 0.00073971 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1351.88 tests/s, 6759.41 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tn <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptl3b8a2l

    Started

    .

    Finished in 0.000660422 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1514.18 tests/s, 7570.92 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgpm1m36r

    Started

    .

    Finished in 0.000540895 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1848.79 tests/s, 9243.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpaqekief7

    Started

    .

    Finished in 0.000866581 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1153.96 tests/s, 5769.80 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n \
    \   return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp16pq1dh8

    Started

    .

    Finished in 0.000620114 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1612.61 tests/s, 8063.03 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvo3mshzy

    Started

    .

    Finished in 0.000535411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1867.72 tests/s, 9338.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\np fib(1)\np fib(3)\np fib(8)\np fib(15)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: '1

    2

    21

    610

    Loaded suite /tmp/tmpeq2csz7x

    Started

    .

    Finished in 0.000552238 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1810.81 tests/s, 9054.07 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n :  fib( n - 1 ) + fib(\
    \ n - 2 )\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9jx4d_gz

    Started

    .

    Finished in 0.000601263 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1663.17 tests/s, 8315.83 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  x, y = 0, 1\n  n.times do\n    x,\
    \ y = y, x + y\n  end\n  x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpawoliskt

    Started

    .

    Finished in 0.000438002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2283.09 tests/s, 11415.47 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  @calls = 1\n  fib2(n)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprifat8gj\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `fib2' for\
    \ #<TestHumanEval:0x00002b89479bc930 @method_name=\"test_fib\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b89479bc908\
    \ @start_time=2022-08-08 22:34:00.470424354 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b8947ae3818\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b8947adb488\
    \ @test_name=\"test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `fib2' for #<TestHumanEval:0x00002b89479bc930 ...>\n  \n    fib2(n)\n\
    \    ^^^^\n  Did you mean?  fib>, @method_name=\"test_fib\">], @stop_tag=#<Object:0x00002b8947ae3390>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002b8947adb488 @test_name=\"\
    test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined method `fib2'\
    \ for #<TestHumanEval:0x00002b89479bc930 ...>\n  \n    fib2(n)\n    ^^^^\n  Did\
    \ you mean?  fib>, @method_name=\"test_fib\">], @pendings=[], @omissions=[], @notifications=[],\
    \ @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b8947ae3188\
    \ @a_proc=#<Proc:0x00002b8947ae31b0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47868613112240>=>#<Proc:0x00002b8947ae31b0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b8947ae2c88\
    \ @a_proc=#<Proc:0x00002b8947ae2cb0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=47868613110960>=>#<Pro"
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_40ky4_5

    Started

    .

    Finished in 0.000628915 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1590.04 tests/s, 7950.20 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  puts \"Fib: #{n}\"\n  if n <= 2\n\
    \    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzy492z1v

    Started

    Fib: 10

    Fib: 9

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 1

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 11

    Fib: 10

    Fib: 9

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 9

    Fib: 8

    Fib: 7

    Fib: 6

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 5

    Fib: 4

    Fib: 3

    Fib: 2

    Fib: 1

    Fib: 2

    Fib: 3

    Fib: '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n    @fib ||= Hash.new do |hash, n|\n\
    \        if n == 0\n            hash[n] = 0\n        elsif n == 1\n          \
    \  hash[n] = 1\n        else\n            hash[n] = hash[n-1] + hash[n-2]\n  \
    \      end\n    end\n    @fib[n]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxyuy4w81

    Started

    .

    Finished in 0.000416277 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2402.25 tests/s, 12011.23 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  fib_rec(n, 1, 0)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9dgwbk74\nStarted\nE\n===============================================================================\n\
    Error: test_fib(TestHumanEval):\n  NoMethodError: undefined method `fib_rec' for\
    \ #<TestHumanEval:0x00002b4590c46430 @method_name=\"test_fib\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b4590c462a0\
    \ @start_time=2022-08-08 22:34:00.67320168 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b4590c7bae0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b4590d79f00\
    \ @test_name=\"test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `fib_rec' for #<TestHumanEval:0x00002b4590c46430 ...>\n  \n    fib_rec(n,\
    \ 1, 0)\n    ^^^^^^^>, @method_name=\"test_fib\">], @stop_tag=#<Object:0x00002b4590c7b018>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002b4590d79f00 @test_name=\"\
    test_fib(TestHumanEval)\", @exception=#<NoMethodError: undefined method `fib_rec'\
    \ for #<TestHumanEval:0x00002b4590c46430 ...>\n  \n    fib_rec(n, 1, 0)\n    ^^^^^^^>,\
    \ @method_name=\"test_fib\">], @pendings=[], @omissions=[], @notifications=[],\
    \ @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b4590c7ade8\
    \ @a_proc=#<Proc:0x00002b4590c7ae38 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47577781743160>=>#<Proc:0x00002b4590c7ae38 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b4590c7a758\
    \ @a_proc=#<Proc:0x00002b4590c7a780 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=47577781741440>=>#<Proc:0x00002b"
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n == 0 ? 0 : n == 1 ? 1 : fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1_2_by3b

    Started

    .

    Finished in 0.001066567 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    937.59 tests/s, 4687.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n < 3\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1hw3op22

    Started

    .

    Finished in 0.000596048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1677.72 tests/s, 8388.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_dhx64l

    Started

    .

    Finished in 0.000643949 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1552.92 tests/s, 7764.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tcase n\n\twhen 0\n\t\t0\n\twhen 1\n\
    \t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50_kg4ob

    Started

    .

    Finished in 0.00063811 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1567.13 tests/s, 7835.64 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvqp6bnn

    Started

    .

    Finished in 0.001278041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.45 tests/s, 3912.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  (n <= 1) ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo8gatsze

    Started

    .

    Finished in 0.000575985 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1736.16 tests/s, 8680.78 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvo3mshzy

    Started

    .

    Finished in 0.000535411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1867.72 tests/s, 9338.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrvcg44

    Started

    .

    Finished in 0.000662656 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1509.08 tests/s, 7545.39 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm91t2wks

    Started

    .

    Finished in 0.000634499 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1576.05 tests/s, 7880.23 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 0 if\
    \ n == 0\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4ht51htw

    Started

    .

    Finished in 0.000634275 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1576.60 tests/s, 7883.02 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n <= 1 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbuhouwqm

    Started

    .

    Finished in 0.000606273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1649.42 tests/s, 8247.11 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1c3o4ow

    Started

    .

    Finished in 0.000606488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1648.84 tests/s, 8244.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvqp6bnn

    Started

    .

    Finished in 0.001278041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    782.45 tests/s, 3912.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  i = 3\n  f1 = 1\n  f2 = 1\n  while i <= n\n    fn = f1 + f2\n    f1\
    \ = f2\n    f2 = fn\n    i += 1\n  end\n  fn\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjbwkt31a

    Started

    .

    Finished in 0.000384595 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2600.14 tests/s, 13000.69 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  case n\n  when 0, 1\n    n\n  else\n\
    \    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpf8wm3s1y

    Started

    .

    Finished in 0.000630883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1585.08 tests/s, 7925.40 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg5d5ahga

    Started

    .

    Finished in 0.001310406 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    763.12 tests/s, 3815.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpavloq15v

    Started

    .

    Finished in 0.000563961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1773.17 tests/s, 8865.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmfy1louj

    Started

    .

    Finished in 0.0006007 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1664.72 tests/s, 8323.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 1
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  fib = -> (x) {\n    if x < 2\n   \
    \   1\n    else\n      fib.call(x - 1) + fib.call(x - 2)\n    end\n  }\n  fib.call(n)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcmkqo_92\nStarted\nF\n===============================================================================\n\
    Failure: test_fib(TestHumanEval)\n/tmp/tmpcmkqo_92.rb:22:in `test_fib'\n     19:\
    \ class TestHumanEval < Test::Unit::TestCase\n     20:   def test_fib\n     21:\
    \     candidate = method(:fib)\n  => 22:     assert_equal(55, candidate.call(10))\n\
    \     23:     assert_equal(1, candidate.call(1))\n     24:     assert_equal(21,\
    \ candidate.call(8))\n     25:     assert_equal(89, candidate.call(11))\n<55>\
    \ expected but was\n<89>\n===============================================================================\n\
    \nFinished in 0.006508025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.66 tests/s, 153.66 assertions/s\n"
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_odvvk8

    Started

    .

    Finished in 0.000560392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1784.47 tests/s, 8922.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  case n\n  when 0, 1\n    n\n  else\n\
    \    fib(n - 1) + fib(n - 2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpf8wm3s1y

    Started

    .

    Finished in 0.000630883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1585.08 tests/s, 7925.40 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrvcg44

    Started

    .

    Finished in 0.000662656 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1509.08 tests/s, 7545.39 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n\tif n == 0\n\t\t0\n\telsif n == 1\n\
    \t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9tletl7j

    Started

    .

    Finished in 0.000736092 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1358.53 tests/s, 6792.63 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n < 3\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1hw3op22

    Started

    .

    Finished in 0.000596048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1677.72 tests/s, 8388.59 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgpm1m36r

    Started

    .

    Finished in 0.000540895 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1848.79 tests/s, 9243.94 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  case n\n  when 0\n    return 0\n \
    \ when 1\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdflj4mey

    Started

    .

    Finished in 0.000714248 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1400.07 tests/s, 7000.37 assertions/s

    '
  stdout: ''
  timestamp: 1660012440
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrvcg44

    Started

    .

    Finished in 0.000662656 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1509.08 tests/s, 7545.39 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrvcg44

    Started

    .

    Finished in 0.000662656 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1509.08 tests/s, 7545.39 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzri3bkse

    Started

    .

    Finished in 0.000598341 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1671.29 tests/s, 8356.44 assertions/s

    '
  stdout: ''
  timestamp: 1660012439
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdn93wphb

    Started

    .

    Finished in 0.000609652 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1640.28 tests/s, 8201.40 assertions/s

    '
  stdout: ''
  timestamp: 1659823750
