{
  "name": "mbpp_779_unique_sublists",
  "language": "go_test.go",
  "prompt": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nfunc unique_sublists(list1 interface{}) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}, []int{4, 5}, []int{6, 7}}), expected: map[[]int]int{[]interface{}{1, 2}: 1, []interface{}{3, 4}: 1, []interface{}{4, 5}: 1, []interface{}{6, 7}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n"
  ]
}