{
  "name": "mbpp_479_first_Digit",
  "language": "go_test.go",
  "prompt": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var i int\n    for i = 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if string(fmt.Sprintf(\"%d\", n)[i]) != \"0\" {\n            break\n        }\n    }\n    return int(fmt.Sprintf(\"%d\", n)[i]) - 48\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var digit int\n    for n > 0 {\n        digit = n % 10\n        n /= 10\n    }\n    return digit\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var d int\n    for n > 0 {\n        d = n % 10\n        n /= 10\n    }\n    return d\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmppxho3rz6_test.go:29: expected '%!s(int=1)', got '%!s(int=123)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmppxho3rz6_test.go:29: expected '%!s(int=4)', got '%!s(int=456)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmppxho3rz6_test.go:29: expected '%!s(int=1)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var result int\n    for n > 0 {\n        result = n % 10\n        n /= 10\n    }\n    return result\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var firstDigit int\n    for n > 0 {\n        firstDigit = n % 10\n        n /= 10\n    }\n    return firstDigit\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    if n < 0 {\n        n = -n\n    }\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var i int\n    for i = 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if fmt.Sprintf(\"%d\", n)[i] >= 48 && fmt.Sprintf(\"%d\", n)[i] <= 57 {\n            break\n        }\n    }\n    return int(fmt.Sprintf(\"%d\", n)[i]) - 48\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var digit int\n    for n > 0 {\n        digit = n % 10\n        n = n / 10\n    }\n    return digit\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    return n / 10\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpdm3orm1o_test.go:28: expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpdm3orm1o_test.go:28: expected '%!s(int=4)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    if n < 0 {\n        n = -n\n    }\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    // your code here\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFirst_Digit/test_num__2 (0.00s)\n        tmpc3nuhm1o_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    return n / 10\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "--- FAIL: TestFirst_Digit (0.00s)\n    --- FAIL: TestFirst_Digit/test_num__0 (0.00s)\n        tmpdm3orm1o_test.go:28: expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestFirst_Digit/test_num__1 (0.00s)\n        tmpdm3orm1o_test.go:28: expected '%!s(int=4)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    var digit int\n    for n > 0 {\n        digit = n % 10\n        n /= 10\n    }\n    return digit\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return 0\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 9 {\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n /= 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n    for n > 0 {\n        if n < 10 {\n            return n\n        }\n        n = n / 10\n    }\n    return n\n}\n\nfunc TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510672,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}