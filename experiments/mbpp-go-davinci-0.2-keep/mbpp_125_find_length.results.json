{
  "name": "mbpp_125_find_length",
  "language": "go_test.go",
  "prompt": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    count_0 := 0\n    count_1 := 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmplwnbx4nj_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmplwnbx4nj_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmplwnbx4nj_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    var i int = 0\n    for i < len(myString) {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n        i++\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp629to8ya_test.go:48: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp629to8ya_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp629to8ya_test.go:48: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    for _, char := range myString {\n        if char == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n        if count_1 == count_0 {\n            if count_1 + count_0 > max_diff {\n                max_diff = count_1 + count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpisi53rh4_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpisi53rh4_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpisi53rh4_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    for i := 0; i < len(myString); i++ {\n        for j := i + 1; j <= len(myString); j++ {\n            diff := 0\n            for k := i; k < j; k++ {\n                if myString[k] == '0' {\n                    diff++\n                } else {\n                    diff--\n                }\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            if count0 - count1 > maxDiff {\n                maxDiff = count0 - count1\n            }\n        }\n        count0 = 0\n        count1 = 0\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var zero_count, one_count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < (zero_count + one_count) {\n                max_diff = zero_count + one_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpeb_o9irv_test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpeb_o9irv_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpeb_o9irv_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            count = zeroCount + oneCount\n            if count > max {\n                max = count\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    var numZeros int\n    var numOnes int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            numZeros++\n        } else {\n            numOnes++\n        }\n        currDiff = numZeros - numOnes\n        if currDiff < 0 {\n            currDiff = -currDiff\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpcmzyy75x_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpcmzyy75x_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpcmzyy75x_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if count0 + count1 > maxDiff {\n                maxDiff = count0 + count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpdqs21iyq_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpdqs21iyq_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpdqs21iyq_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n\n    for i < len(myString) {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n        i++\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdht_y71y_test.go:15:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(\"myString:\", myString)\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpkjpbn3x6_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpkjpbn3x6_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkjpbn3x6_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    var i int\n    var j int\n\n    for i = 0; i < len(myString); i++ {\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpmaw8ptll_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpmaw8ptll_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfsg9o8pm_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfsg9o8pm_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfsg9o8pm_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpn3d7__82_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpn3d7__82_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1 int = 0\n    var count0 int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2b5qy7jd_test.go:46: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2b5qy7jd_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(myString); i++ {\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            if count_zero - count_one > max_diff {\n                max_diff = count_zero - count_one\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            count = zeroCount + oneCount\n            if count > max {\n                max = count\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpan8tyj9__test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var count0, count1, max int\n    for _, c := range myString {\n        if c == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if count0 + count1 > max {\n                max = count0 + count1\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpstxjvlv0_test.go:41: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpstxjvlv0_test.go:41: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpstxjvlv0_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if string(char) == \"0\" {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2xd9urd0_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2xd9urd0_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var zeroCount, oneCount, maxDiff int\n    for _, c := range myString {\n        if c == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            diff := zeroCount - oneCount\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > maxDiff {\n                maxDiff = diff\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9vw7c5_s_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9vw7c5_s_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9vw7c5_s_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    count_0 := 0\n    count_1 := 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmphtonx8fy_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmphtonx8fy_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            diff -= 1\n        } else {\n            diff += 1\n        }\n        if diff < 0 {\n            diff = 0\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuh_kyhsi_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuh_kyhsi_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuh_kyhsi_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            if count_0 - count_1 > max_diff {\n                max_diff = count_0 - count_1\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(myString)\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count > max {\n            max = count\n        }\n        if count < 0 {\n            count = 0\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpj6l5qejz_test.go:44: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpj6l5qejz_test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpj6l5qejz_test.go:44: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n    var i, j int = 0, 0\n    for j < len(myString) {\n        if myString[j] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        j++\n        for count1 > 0 && count0 > 0 {\n            if myString[i] == '1' {\n                count1--\n            } else {\n                count0--\n            }\n            i++\n        }\n        if count1 == 0 && count0 == 0 {\n            if j - i > maxDiff {\n                maxDiff = j - i\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpt8jwv6m0_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpt8jwv6m0_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpt8jwv6m0_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > maxDiff {\n            maxDiff = count\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var oneCount int\n    var zeroCount int\n    for _, char := range myString {\n        if char == '1' {\n            oneCount++\n        } else {\n            zeroCount++\n        }\n        count = oneCount - zeroCount\n        if count > max {\n            max = count\n        } else if count < 0 {\n            count = 0\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpv33tcrut_test.go:45: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpv33tcrut_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpv33tcrut_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var num_zeros int = 0\n    var num_ones int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            num_zeros++\n        } else {\n            num_ones++\n        }\n        diff = num_zeros - num_ones\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpnzc39t4n_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpnzc39t4n_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpnzc39t4n_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < (count_0 + count_1) {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpsp7lbv7t_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpsp7lbv7t_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpsp7lbv7t_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if count < zeroCount {\n                count = zeroCount\n            }\n        }\n    }\n    if count > max {\n        max = count\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp3cewfpuo_test.go:47: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp3cewfpuo_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_length int\n    var count_0, count_1 int\n    for i := 0; i < len(myString); i++ {\n        count_0, count_1 = 0, 0\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            if count_0 == count_1 && count_0 + count_1 > max_length {\n                max_length = count_0 + count_1\n            }\n        }\n    }\n    return max_length\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9frtpgxu_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9frtpgxu_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9frtpgxu_test.go:43: expected '%!s(int=2)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2xxg_0k4_test.go:45: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2xxg_0k4_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0q92as71_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0q92as71_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0q92as71_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currentDiff int\n    var zeroCount int\n    var oneCount int\n\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        currentDiff = zeroCount - oneCount\n        if currentDiff < 0 {\n            currentDiff = -currentDiff\n        }\n        if currentDiff > maxDiff {\n            maxDiff = currentDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpt2c456ck_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpt2c456ck_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpt2c456ck_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            diff := count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp1b2lo5un_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp1b2lo5un_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp1b2lo5un_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var len_str int = len(myString)\n\n    for i = 0; i < len_str; i++ {\n        count_0 = 0\n        count_1 = 0\n        for j = i; j < len_str; j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpq27r8y1a_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpq27r8y1a_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count += 1\n        } else {\n            count -= 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpj683uxf__test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpj683uxf__test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpj683uxf__test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > maxDiff {\n            maxDiff = count\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        curr_diff = zero_count - one_count\n        if curr_diff < 0 {\n            curr_diff = -curr_diff\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpsti0rchk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpsti0rchk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpsti0rchk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(\"myString:\", myString)\n    if len(myString) == 0 {\n        return 0\n    }\n    var max_length int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_length < zero_count {\n                max_length = zero_count\n            }\n        }\n    }\n    // fmt.Println(\"max_length:\", max_length)\n    return max_length\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp7s3498d2_test.go:48: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp7s3498d2_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(\"myString:\", myString)\n    var zeroCount int = 0\n    var oneCount int = 0\n    var maxDiff int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if string(char) == \"0\" {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpwa1rjm7s_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpwa1rjm7s_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpwa1rjm7s_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if count_zero + count_one > max_diff {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount, oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < zeroCount {\n                maxDiff = zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgn_a_47e_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgn_a_47e_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    diff := 0\n    for _, c := range myString {\n        if c == '0' {\n            diff -= 1\n        } else {\n            diff += 1\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpsdn2she4_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpsdn2she4_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpsdn2she4_test.go:40: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmphj0bdlfx_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmphj0bdlfx_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0 += 1\n        } else {\n            count_1 += 1\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqfm9yr17_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpqfm9yr17_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqfm9yr17_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < (zeroCount + oneCount) {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpd8cinnzo_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpd8cinnzo_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpd8cinnzo_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var zeroCount int = 0\n    var oneCount int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < zeroCount {\n                maxDiff = zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpk01vh563_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpk01vh563_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, c := range myString {\n        if c == '0' {\n            count_0 += 1\n        } else {\n            count_1 += 1\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprmnfq2hv_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprmnfq2hv_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if string(char) == \"1\" {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp92eryo0h_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp92eryo0h_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp92eryo0h_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > maxDiff {\n            maxDiff = count\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var num_zeros, num_ones, max_diff int\n    for _, char := range myString {\n        if char == '0' {\n            num_zeros++\n        } else {\n            num_ones++\n        }\n        if num_zeros > num_ones {\n            if num_zeros - num_ones > max_diff {\n                max_diff = num_zeros - num_ones\n            }\n        } else {\n            if num_ones - num_zeros > max_diff {\n                max_diff = num_ones - num_zeros\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp4atehmcx_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp4atehmcx_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp4atehmcx_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for _, c := range myString {\n        if c == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmphleoyifb_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmphleoyifb_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmphleoyifb_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjh2w222s_test.go:46: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjh2w222s_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6qobylxq_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp6qobylxq_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6qobylxq_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > maxDiff {\n            maxDiff = count\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_0094ja3_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_0094ja3_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_0094ja3_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max := 0\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                if j - i > max {\n                    max = j - i\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0pe_1jya_test.go:38: expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0pe_1jya_test.go:38: expected '%!s(int=2)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp25pzi0lv_test.go:46: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp25pzi0lv_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        currDiff = zeroCount - oneCount\n        if currDiff < 0 {\n            currDiff = -currDiff\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgjec70ey_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpgjec70ey_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgjec70ey_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var n int = len(myString)\n    for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            diff = count_zero - count_one\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp5hc8bdbj_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp5hc8bdbj_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n            diff++\n        } else {\n            count_1++\n            diff--\n        }\n        if diff < 0 {\n            diff = 0\n            count_0 = 0\n            count_1 = 0\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            max_diff = count_0\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpn376kvza_test.go:41: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpn376kvza_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count > one_count {\n            if zero_count - one_count > max_diff {\n                max_diff = zero_count - one_count\n            }\n        } else {\n            if one_count - zero_count > max_diff {\n                max_diff = one_count - zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp5xeu2z8z_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp5xeu2z8z_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp5xeu2z8z_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff := zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6r1xog46_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp6r1xog46_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6r1xog46_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    var numZeros int\n    var numOnes int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            numZeros++\n        } else {\n            numOnes++\n        }\n        currDiff = numZeros - numOnes\n        if currDiff < 0 {\n            currDiff = -currDiff\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_1bb901p_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_1bb901p_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_1bb901p_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n        if count_1 == count_0 {\n            if max_diff < count_1 {\n                max_diff = count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpihy96pfk_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpihy96pfk_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxLength int\n    var length int\n    var zeroCount int\n    var oneCount int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n\n        if zeroCount == oneCount {\n            length = zeroCount + oneCount\n            if length > maxLength {\n                maxLength = length\n            }\n        }\n    }\n\n    zeroCount = 0\n    oneCount = 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n\n        if zeroCount == oneCount {\n            length = zeroCount + oneCount\n            if length > maxLength {\n                maxLength = length\n            }\n        }\n    }\n\n    return maxLength\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpndqewppk_test.go:65: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpndqewppk_test.go:65: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpndqewppk_test.go:65: expected '%!s(int=2)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if count < zeroCount {\n                count = zeroCount\n            }\n        }\n    }\n    max = count\n    count = 0\n    zeroCount = 0\n    oneCount = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if count < oneCount {\n                count = oneCount\n            }\n        }\n    }\n    if max < count {\n        max = count\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpnh3c93wb_test.go:63: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpnh3c93wb_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var current_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count += 1\n        } else {\n            one_count += 1\n        }\n        current_diff = zero_count - one_count\n        if current_diff > max_diff {\n            max_diff = current_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpshy0wm5q_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpshy0wm5q_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpshy0wm5q_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var zeroCount int\n    var oneCount int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if max < count {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < zeroCount {\n                maxDiff = zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgrr94p45_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgrr94p45_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    var diff int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuo4r0of5_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuo4r0of5_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuo4r0of5_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n\n    for _, c := range myString {\n        if c == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n\n        if zero_count == one_count {\n            diff = zero_count - one_count\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp5kf954kz_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp5kf954kz_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp5kf954kz_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var i int = 0\n    var j int = 0\n    var n int = len(myString)\n    for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9yzxoy19_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9yzxoy19_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '1' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpcip59jck_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpcip59jck_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpcip59jck_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n\n    for _, c := range myString {\n        if c == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpkt0pcbdf_test.go:44: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpkt0pcbdf_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkt0pcbdf_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var zeroCount, oneCount, maxDiff int\n    for _, c := range myString {\n        if c == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount > oneCount {\n            if zeroCount - oneCount > maxDiff {\n                maxDiff = zeroCount - oneCount\n            }\n        } else {\n            if oneCount - zeroCount > maxDiff {\n                maxDiff = oneCount - zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjptjlrdp_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpjptjlrdp_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjptjlrdp_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_zero int\n    var count_one int\n    var diff int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp8o5wme3o_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp8o5wme3o_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp8o5wme3o_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpauhth8bu_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpauhth8bu_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    for _, c := range myString {\n        if c == '0' {\n            curr_diff += 1\n        } else {\n            curr_diff -= 1\n        }\n        if curr_diff < 0 {\n            curr_diff = 0\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    zero_count := 0\n    one_count := 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count += 1\n        } else {\n            one_count += 1\n        }\n        if zero_count > one_count {\n            if zero_count - one_count > max_diff {\n                max_diff = zero_count - one_count\n            }\n        } else {\n            if one_count - zero_count > max_diff {\n                max_diff = one_count - zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6kj_6hy3_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp6kj_6hy3_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6kj_6hy3_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpha6zn3oq_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpha6zn3oq_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpha6zn3oq_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var i int = 0\n    var j int = 0\n    var n int = len(myString)\n\n    for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp3a4p6809_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp3a4p6809_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp55rnv1pv_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1 int = 0\n    var count0 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_1, count_0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n        if count_1 - count_0 > max_diff {\n            max_diff = count_1 - count_0\n        }\n        if count_0 > count_1 {\n            count_1 = 0\n            count_0 = 0\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpl6l6bf_3_test.go:44: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpl6l6bf_3_test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpl6l6bf_3_test.go:44: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    for _, c := range myString {\n        if c == '0' {\n            diff -= 1\n        } else {\n            diff += 1\n        }\n        if diff < 0 {\n            diff = 0\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp48imphvs_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp48imphvs_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp48imphvs_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpauhth8bu_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpauhth8bu_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_0, count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfez8eg4z_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfez8eg4z_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmptbpzumb3_test.go:50: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmptbpzumb3_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmptbpzumb3_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp340hm867_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var length int = len(myString)\n    for i = 0; i < length; i++ {\n        for j = i; j < length; j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            diff = count_zero - count_one\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpis2afija_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpis2afija_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var count_0 int = 0\n    var count_1 int = 0\n    var max_diff int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp4v4sjc5__test.go:46: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp4v4sjc5__test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var diff int = 0\n    var zeroCount int = 0\n    var oneCount int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpyth1f75f_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpyth1f75f_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpyth1f75f_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpwdwqtzjf_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgmpbgipo_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpgmpbgipo_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgmpbgipo_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbruwigfe_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpbruwigfe_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbruwigfe_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var current_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        current_diff = zero_count - one_count\n        if current_diff < 0 {\n            current_diff = -1 * current_diff\n        }\n        if current_diff > max_diff {\n            max_diff = current_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpcv62wzsd_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpcv62wzsd_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpcv62wzsd_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var i int = 0\n    var j int = 0\n    var n int = len(myString)\n\n    for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123098,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp3a4p6809_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp3a4p6809_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < (count1 + count0) {\n                maxDiff = count1 + count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var i, j, max int\n    var count0, count1 int\n    for i = 0; i < len(myString); i++ {\n        count0 = 0\n        count1 = 0\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            if count0 > count1 {\n                if count0 - count1 > max {\n                    max = count0 - count1\n                }\n            } else {\n                if count1 - count0 > max {\n                    max = count1 - count0\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprryz5q_x_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprryz5q_x_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    for _, c := range myString {\n        if c == '0' {\n            curr_diff -= 1\n        } else {\n            curr_diff += 1\n        }\n        if curr_diff < 0 {\n            curr_diff = 0\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp8ew1w4uw_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp8ew1w4uw_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp8ew1w4uw_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var count_0, count_1 int\n    var max_diff int\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpzd5axc4u_test.go:44: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpzd5axc4u_test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpzd5axc4u_test.go:44: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpdr4emuo8_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpdr4emuo8_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpdr4emuo8_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(myString); i++ {\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            if count_zero - count_one > max_diff {\n                max_diff = count_zero - count_one\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123094,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zeros int = 0\n    var ones int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zeros++\n        } else {\n            ones++\n        }\n        diff = zeros - ones\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmppvh1st7r_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmppvh1st7r_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppvh1st7r_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_length int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count == 0 {\n            max_length = i + 1\n        }\n        if count < 0 {\n            count = 0\n        }\n    }\n    return max_length\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_km_khgw_test.go:43: expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_km_khgw_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_km_khgw_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDifference int\n    var currentDifference int\n    var zeroCount int\n    var oneCount int\n\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        currentDifference = zeroCount - oneCount\n        if currentDifference < 0 {\n            currentDifference = -currentDifference\n        }\n        if currentDifference > maxDifference {\n            maxDifference = currentDifference\n        }\n    }\n    return maxDifference\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpq7ixix1q_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpq7ixix1q_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpq7ixix1q_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    var i int\n    var j int\n    var n int\n\n    n = len(myString)\n    for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            diff = count0 - count1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > maxDiff {\n                maxDiff = diff\n            }\n        }\n        count0 = 0\n        count1 = 0\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmppv_v7fsk_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppv_v7fsk_test.go:55: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var zeroCount, oneCount, maxDiff int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount > oneCount {\n            if zeroCount - oneCount > maxDiff {\n                maxDiff = zeroCount - oneCount\n            }\n        } else {\n            if oneCount - zeroCount > maxDiff {\n                maxDiff = oneCount - zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprmbrsfv6_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var current_diff int = 0\n    var current_ones int = 0\n    var current_zeros int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            current_ones++\n        } else {\n            current_zeros++\n        }\n        current_diff = current_ones - current_zeros\n        if current_diff < 0 {\n            current_diff = -current_diff\n        }\n        if current_diff > max_diff {\n            max_diff = current_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpg4fvde_2_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpg4fvde_2_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpg4fvde_2_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmphremset6_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmphremset6_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmphremset6_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    if len(myString) == 0 {\n        return 0\n    }\n\n    var maxDiff int\n    var count0, count1 int\n    for _, char := range myString {\n        if char == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff := count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9i72qndw_test.go:49: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9i72qndw_test.go:49: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9i72qndw_test.go:49: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, c := range myString {\n        if c == '0' {\n            count_0 += 1\n        } else {\n            count_1 += 1\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123096,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprmnfq2hv_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprmnfq2hv_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510003,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    for _, c := range myString {\n        if c == '0' {\n            currDiff--\n        } else {\n            currDiff++\n        }\n        if currDiff < 0 {\n            currDiff = 0\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123100,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpmx8lfvj2_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpmx8lfvj2_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpmx8lfvj2_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}