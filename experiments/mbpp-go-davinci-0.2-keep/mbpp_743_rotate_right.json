{
  "name": "mbpp_743_rotate_right",
  "language": "go_test.go",
  "prompt": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list) - m:]...)\n    result = append(result, list[:len(list) - m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    return append(list[m:], list[:m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    var i int\n    for i = 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    for i = len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n"
  ]
}