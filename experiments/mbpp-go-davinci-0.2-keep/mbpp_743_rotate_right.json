{
  "name": "mbpp_743_rotate_right",
  "language": "go_test.go",
  "prompt": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list) - m:]...)\n    result = append(result, list[:len(list) - m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    return append(list[m:], list[:m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    var i int\n    for i = 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    for i = len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m < 0 {\n        m = len(list) + m\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    n := len(list)\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:n], list[0:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    for i := 0; i < m; i++ {\n        last := list[len(list) - 1]\n        for j := len(list) - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n    return list\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list) - m:]...)\n    result = append(result, list[:len(list) - m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    n := len(list)\n    m = m % n\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n\n    for i := 0; i < m; i++ {\n        last := list[len(list) - 1]\n        for j := len(list) - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n\n    return list\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    for i := 0; i < m; i++ {\n        last := list[len(list) - 1]\n        for j := len(list) - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n    return list\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    l := len(list)\n    if l == 0 {\n        return list\n    }\n    m = m % l\n    if m == 0 {\n        return list\n    }\n    return append(list[l-m:], list[:l-m]...)\n}\n",
    "    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    if m == 0 {\n        return list\n    }\n\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    var length = len(list)\n    if m > length {\n        m = m % length\n    }\n    for i := 0; i < length; i++ {\n        result = append(result, list[(i + m) % length])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m <= 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    // Write your code here\n    return list\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    for i := 0; i < m; i++ {\n        last := list[len(list) - 1]\n        for j := len(list) - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n    return list\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    var length = len(list)\n    var index = length - m\n    for i := 0; i < length; i++ {\n        result = append(result, list[index])\n        index++\n        if index == length {\n            index = 0\n        }\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    for i := 0; i < m; i++ {\n        last := list[len(list) - 1]\n        for j := len(list) - 1; j > 0; j-- {\n            list[j] = list[j - 1]\n        }\n        list[0] = last\n    }\n    return list\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m < 0 {\n        return rotate_left(list, -m)\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    n := len(list)\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    n := len(list)\n    m = m % n\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    // TODO: implement\n    return list\n}\n",
    "    if m == 0 {\n        return list\n    }\n    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    // Write your code here\n    return list\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    n := len(list)\n    if n == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    n := len(list)\n    if m > n {\n        m = m % n\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    n := len(list)\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:n], list[0:n-m]...)\n}\n",
    "    n := len(list)\n    m = m % n\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    // m is the number of items to be rotated\n    // m can be greater than the length of the list\n    // m can be negative\n    // m can be zero\n    // list can be empty\n    // list can be nil\n    // list can have one item\n    // list can have two items\n    // list can have three items\n    // list can have four items\n    // list can have five items\n    // list can have six items\n    // list can have seven items\n    // list can have eight items\n    // list can have nine items\n    // list can have ten items\n    // list can have eleven items\n    // list can have twelve items\n    // list can have thirteen items\n    // list can have fourteen items\n    // list can have fifteen items\n    // list can have sixteen items\n    // list can have seventeen items\n    // list can have eighteen items\n    // list can have nineteen items\n    // list can have twenty items\n    // list can have twenty one items\n    // list can have twenty two items\n    // list can have twenty three items\n    // list can have twenty four items\n    // list can have twenty five items\n    // list can have twenty six items\n    // list can have twenty seven items\n    // list can have twenty eight items\n    // list can have twenty nine items\n    // list can have thirty items\n    // list can have thirty one items\n    // list can have thirty two items\n    // list can have thirty three items\n    // list can have thirty four items\n    // list can have thirty five items\n    // list can have thirty six items\n    // list can have thirty seven items\n    // list can have thirty eight items\n    // list can have thirty nine items\n    // list can have forty items\n    // list can have forty one items\n    // list can have forty two items\n    // list can have forty three items\n    // list can have forty four items\n    // list can have forty five items\n    // list can have forty six items\n    // list can have forty seven items\n    // list can have forty eight items\n    // list can have forty nine items\n    // list can have fifty items\n    // list can have fifty one items\n    // list can have fifty two items\n    // list can have fifty three items\n    // list can",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n\n    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n\n    if m > len(list) {\n        m = m % len(list)\n    }\n\n    return append(list[len(list) - m:], list[:len(list) - m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    n := len(list)\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list); i++ {\n        result = append(result, list[(i + m) % len(list)])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    for i := len(list) - m; i < len(list); i++ {\n        result = append(result, list[i])\n    }\n    for i := 0; i < len(list) - m; i++ {\n        result = append(result, list[i])\n    }\n    return result\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    var result []int\n    if m > len(list) {\n        m = m % len(list)\n    }\n    result = append(result, list[len(list)-m:]...)\n    result = append(result, list[:len(list)-m]...)\n    return result\n}\n",
    "    if m == 0 {\n        return list\n    }\n    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    if m > len(list) {\n        m = m % len(list)\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n",
    "    n := len(list)\n    if n == 0 || m == 0 {\n        return list\n    }\n    m = m % n\n    if m == 0 {\n        return list\n    }\n    return append(list[n-m:], list[:n-m]...)\n}\n",
    "    if len(list) == 0 {\n        return list\n    }\n    m = m % len(list)\n    if m == 0 {\n        return list\n    }\n    return append(list[len(list)-m:], list[:len(list)-m]...)\n}\n"
  ]
}