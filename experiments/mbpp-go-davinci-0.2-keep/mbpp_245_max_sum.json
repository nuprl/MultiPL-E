{
  "name": "mbpp_245_max_sum",
  "language": "go_test.go",
  "prompt": "package max_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Sum(t *testing.T) {\n  candidate := max_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 15, 51, 45, 33, 100, 12, 18, 9}), expected: 194 },\n     { actual: candidate([]int{80, 60, 30, 40, 20, 10}), expected: 210 },\n     { actual: candidate([]int{2, 3, 14, 16, 21, 23, 29, 30}), expected: 138 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := arr[0]\n    max_sum_ending_here := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_ending_at(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = arr[0]\n    var max_sum_ending_here int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            if arr[0] > arr[2] {\n                return arr[0]\n            }\n            return arr[2]\n        }\n        if arr[1] > arr[2] {\n            return arr[1]\n        }\n        return arr[2]\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of the first increasing subsequence\n    max_sum := 0\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    // find the max sum of the second decreasing subsequence\n    sum = 0\n    for i := len(arr) - 1; i >= 0; i-- {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    var max_sum int\n    for i := 0; i < len(arr); i++ {\n        var sum int\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_from(arr, i))\n    }\n    return max_sum\n}\n",
    "    // find the max sum of a bitonic sequence\n    // a bitonic sequence is one that is first increasing and then decreasing\n    // for example: [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    // the max sum is 1 + 2 + 3 + 4 + 5 + 4 + 3 + 2 + 1 = 25\n    // the max sum is the sum of the entire array\n    // the max sum is the sum of the increasing part and the decreasing part\n    // the increasing part is the longest increasing subsequence\n    // the decreasing part is the longest decreasing subsequence\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i+1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i-1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < n; i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_helper(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                break\n            }\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += arr[k]\n            }\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n"
  ]
}