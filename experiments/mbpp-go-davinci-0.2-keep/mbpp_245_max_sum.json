{
  "name": "mbpp_245_max_sum",
  "language": "go_test.go",
  "prompt": "package max_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Sum(t *testing.T) {\n  candidate := max_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 15, 51, 45, 33, 100, 12, 18, 9}), expected: 194 },\n     { actual: candidate([]int{80, 60, 30, 40, 20, 10}), expected: 210 },\n     { actual: candidate([]int{2, 3, 14, 16, 21, 23, 29, 30}), expected: 138 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := arr[0]\n    max_sum_ending_here := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_ending_at(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = arr[0]\n    var max_sum_ending_here int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            if arr[0] > arr[2] {\n                return arr[0]\n            }\n            return arr[2]\n        }\n        if arr[1] > arr[2] {\n            return arr[1]\n        }\n        return arr[2]\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of the first increasing subsequence\n    max_sum := 0\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    // find the max sum of the second decreasing subsequence\n    sum = 0\n    for i := len(arr) - 1; i >= 0; i-- {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    var max_sum int\n    for i := 0; i < len(arr); i++ {\n        var sum int\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_from(arr, i))\n    }\n    return max_sum\n}\n",
    "    // find the max sum of a bitonic sequence\n    // a bitonic sequence is one that is first increasing and then decreasing\n    // for example: [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    // the max sum is 1 + 2 + 3 + 4 + 5 + 4 + 3 + 2 + 1 = 25\n    // the max sum is the sum of the entire array\n    // the max sum is the sum of the increasing part and the decreasing part\n    // the increasing part is the longest increasing subsequence\n    // the decreasing part is the longest decreasing subsequence\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest subsequence that is decreasing\n    // the longest increasing subsequence is the longest subsequence that is increasing\n    // the longest decreasing subsequence is the longest",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i+1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i-1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < n; i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_helper(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                break\n            }\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += arr[k]\n            }\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n\n    // find the max sum of the increasing subsequence\n    inc := make([]int, len(arr))\n    inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n    }\n\n    // find the max sum of the decreasing subsequence\n    dec := make([]int, len(arr))\n    dec[len(arr)-1] = arr[len(arr)-1]\n    for i := len(arr) - 2; i >= 0; i-- {\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n    }\n\n    // find the max sum of the bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                sum := arr[i]\n                for k := i + 1; k < j; k++ {\n                    sum += arr[k]\n                }\n                if sum > max {\n                    max = sum\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    var max_sum_arr []int = make([]int, len(arr))\n    max_sum_arr[0] = arr[0]\n    max_sum_arr[1] = max(arr[0], arr[1])\n\n    for i := 2; i < len(arr); i++ {\n        max_sum_arr[i] = max(max_sum_arr[i-1], max_sum_arr[i-2] + arr[i])\n    }\n\n    return max_sum_arr[len(arr)-1]\n}\n",
    "    // find the max sum of increasing subsequence\n    // find the max sum of decreasing subsequence\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end\n    // find the max sum of decreasing subsequence from the end\n    // find the max sum of increasing subsequence from the end",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] < arr[i] {\n                max_sum = max(max_sum, arr[i] + max_sum_sub(arr[j:i]))\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    // find the max sum of the increasing subsequence\n    inc := make([]int, len(arr))\n    inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                inc[i] = max(inc[i], inc[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of the decreasing subsequence\n    dec := make([]int, len(arr))\n    dec[len(arr) - 1] = arr[len(arr) - 1]\n    for i := len(arr) - 2; i >= 0; i-- {\n        for j := len(arr) - 1; j > i; j-- {\n            if arr[j] < arr[i] {\n                dec[i] = max(dec[i], dec[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of the bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    var max_sum int = 0\n    var max_sum_ending_here int = 0\n\n    for i := 0; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                if sum > max_sum {\n                    max_sum = sum\n                }\n            } else {\n                break\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of the increasing subsequence\n    max_inc := make([]int, len(arr))\n    max_inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_inc[i] = max(max_inc[i-1] + arr[i], arr[i])\n    }\n\n    // find the max sum of the decreasing subsequence\n    max_dec := make([]int, len(arr))\n    max_dec[len(arr)-1] = arr[len(arr)-1]\n    for i := len(arr)-2; i >= 0; i-- {\n        max_dec[i] = max(max_dec[i+1] + arr[i], arr[i])\n    }\n\n    // find the max sum of the bitonic subsequence\n    max_bitonic := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        max_bitonic[i] = max_inc[i] + max_dec[i] - arr[i]\n    }\n\n    return max_array(max_bitonic)\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                for k := j + 1; k < len(arr); k++ {\n                    if arr[j] > arr[k] {\n                        sum := arr[i] + arr[j] + arr[k]\n                        if sum > max_sum {\n                            max_sum = sum\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = arr[0]\n    var sum int = arr[0]\n    var i int = 1\n    for i < len(arr) {\n        sum = max(arr[i], sum + arr[i])\n        max_sum = max(max_sum, sum)\n        i++\n    }\n    return max_sum\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = arr[0]\n    var max_sum_ending_here int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] + arr[1]\n    }\n\n    // find the max sum of increasing subsequence\n    max_inc := make([]int, len(arr))\n    max_inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_inc[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[i] > arr[j] && max_inc[i] < max_inc[j] + arr[i] {\n                max_inc[i] = max_inc[j] + arr[i]\n            }\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    max_dec := make([]int, len(arr))\n    max_dec[len(arr) - 1] = arr[len(arr) - 1]\n    for i := len(arr) - 2; i >= 0; i-- {\n        max_dec[i] = arr[i]\n        for j := len(arr) - 1; j > i; j-- {\n            if arr[i] > arr[j] && max_dec[i] < max_dec[j] + arr[i] {\n                max_dec[i] = max_dec[j] + arr[i]\n            }\n        }\n    }\n\n    // find the max sum of bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        if max_sum < max_inc[i] + max_dec[i] - arr[i] {\n            max_sum = max_inc[i] + max_dec[i] - arr[i]\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] < arr[i] {\n                sum += arr[j]\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[i] {\n                sum += arr[j]\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    // find the max sum of increasing subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] >= arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] < arr[i] {\n                sum += arr[j]\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < n; i++ {\n        sum := 0\n        for j := i; j < n; j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    var max_sum int\n    for i := 0; i < len(arr); i++ {\n        var sum int\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < n; i++ {\n        max_sum = max(max_sum, max_sum_bitonic(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of the increasing sequence\n    max_sum := 0\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    // find the max sum of the decreasing sequence\n    max_sum_dec := 0\n    sum = 0\n    for i := len(arr) - 1; i >= 0; i-- {\n        sum += arr[i]\n        if sum > max_sum_dec {\n            max_sum_dec = sum\n        }\n    }\n\n    return max(max_sum, max_sum_dec)\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum_arr := make([]int, len(arr))\n    max_sum_arr[0] = arr[0]\n    max_sum_arr[1] = max(arr[0], arr[1])\n    for i := 2; i < len(arr); i++ {\n        max_sum_arr[i] = max(max_sum_arr[i-1], max_sum_arr[i-2]+arr[i])\n    }\n    return max_sum_arr[len(arr)-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of increasing subsequence\n    max_inc := make([]int, len(arr))\n    max_inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_inc[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                max_inc[i] = max(max_inc[i], max_inc[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    max_dec := make([]int, len(arr))\n    max_dec[len(arr) - 1] = arr[len(arr) - 1]\n    for i := len(arr) - 2; i >= 0; i-- {\n        max_dec[i] = arr[i]\n        for j := len(arr) - 1; j > i; j-- {\n            if arr[j] < arr[i] {\n                max_dec[i] = max(max_dec[i], max_dec[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, max_inc[i] + max_dec[i] - arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    var max_sum int = arr[0]\n    var max_sum_ending_here int = arr[0]\n    var max_sum_ending_here_reverse int = arr[len(arr)-1]\n    var max_sum_reverse int = arr[len(arr)-1]\n\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    for i := len(arr) - 2; i >= 0; i-- {\n        max_sum_ending_here_reverse = max(arr[i], max_sum_ending_here_reverse + arr[i])\n        max_sum_reverse = max(max_sum_reverse, max_sum_ending_here_reverse)\n    }\n\n    return max(max_sum, max_sum_reverse)\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum += arr[i]\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    // find the max sum of increasing subsequence\n    max_sum := 0\n    max_sum_arr := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        max_sum_arr[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] && max_sum_arr[j] + arr[i] > max_sum_arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n        if max_sum_arr[i] > max_sum {\n            max_sum = max_sum_arr[i]\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    max_sum_arr = make([]int, len(arr))\n    for i := len(arr) - 1; i >= 0; i-- {\n        max_sum_arr[i] = arr[i]\n        for j := len(arr) - 1; j > i; j-- {\n            if arr[j] < arr[i] && max_sum_arr[j] + arr[i] > max_sum_arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n        if max_sum_arr[i] > max_sum {\n            max_sum = max_sum_arr[i]\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[i - 1] {\n            arr[i] += arr[i - 1]\n        }\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            arr[i] += arr[i + 1]\n        }\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    var max int = 0\n    for i := 0; i < len(arr); i++ {\n        var sum int = arr[i]\n        var max_sum int = arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        if max_sum > max {\n            max = max_sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr) - 1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of increasing sequence\n    max_sum := arr[0]\n    cur_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    }\n\n    // find the max sum of decreasing sequence\n    max_sum_dec := arr[len(arr) - 1]\n    cur_sum_dec := arr[len(arr) - 1]\n    for i := len(arr) - 2; i >= 0; i-- {\n        cur_sum_dec = max(arr[i], cur_sum_dec + arr[i])\n        max_sum_dec = max(max_sum_dec, cur_sum_dec)\n    }\n\n    return max(max_sum, max_sum_dec)\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i] + max_sum_helper(arr[:i]))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_recursive(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    if len(arr) == 4 {\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    }\n    return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n\n    for i := 1; i < len(arr); i++ {\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                arr[i] += arr[j]\n                if arr[i] > max_sum {\n                    max_sum = arr[i]\n                }\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = arr[0]\n    var max_sum_ending_here int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n    return max_sum\n}\n",
    "    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    var max_sum int\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i-1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] < arr[i] {\n                sum += arr[j]\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    var max_sum int\n    var sum int\n    var max_sum_left []int\n    var max_sum_right []int\n    var sum_left int\n    var sum_right int\n    var max_left int\n    var max_right int\n\n    for i := 0; i < len(arr); i++ {\n        sum_left = 0\n        sum_right = 0\n        max_left = 0\n        max_right = 0\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                sum_left = sum_left + arr[j]\n                if sum_left > max_left {\n                    max_left = sum_left\n                }\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[i] {\n                sum_right = sum_right + arr[j]\n                if sum_right > max_right {\n                    max_right = sum_right\n                }\n            }\n        }\n        sum = max_left + max_right + arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    // find the maximum sum of a bitonic subsequence for the given array\n    // a sequence is bitonic if it is first increasing and then decreasing\n    // return the maximum sum\n    //\n    // ex:\n    //   input: [1, 15, 51, 45, 33, 100, 12, 18, 9]\n    //   output: 194\n    //\n    // ex:\n    //   input: [80, 60, 30, 40, 20, 10]\n    //   output: 210\n    //\n    // ex:\n    //   input: [1, 2, 3, 4, 5, 6]\n    //   output: 21\n    //\n    // ex:\n    //   input: [6, 5, 4, 3, 2, 1]\n    //   output: 21\n    //\n    // ex:\n    //   input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    //   output: 55\n    //\n    // ex:\n    //   input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    //   output: 55\n    //\n    // ex:\n    //   input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    //   output: 210\n    //\n    // ex:\n    //   input: [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    //   output: 210\n    //\n    // ex:\n    //   input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    //   output: 465\n    //\n    // ex:\n    //   input: [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum_arr := make([]int, len(arr))\n    max_sum_arr[0] = arr[0]\n    max_sum_arr[1] = max(arr[0], arr[1])\n    for i := 2; i < len(arr); i++ {\n        max_sum_arr[i] = max(max_sum_arr[i-1], max_sum_arr[i-2] + arr[i])\n    }\n    return max_sum_arr[len(arr)-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    // find the max sum of increasing subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    for i := len(arr) - 1; i >= 0; i-- {\n        sum := 0\n        for j := i; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                max_sum = max(max_sum, arr[i] + max_sum(arr[j:i]))\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for k := i - 1; k >= 0; k-- {\n            if arr[k] > arr[k + 1] {\n                sum += arr[k]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > sum {\n                sum += arr[j]\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                max_sum = max(max_sum, arr[i] + max_sum_sub(arr, j, i))\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i] + max_sum_recursive(arr[i+1:], true))\n    }\n    return max_sum\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < n; i++ {\n        sum := 0\n        for j := i; j < n; j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        var sum int\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += arr[k]\n            }\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    max_sum_ending_here := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    if len(arr) == 4 {\n        return max(arr[0] + arr[2], arr[1] + arr[3])\n    }\n    if len(arr) == 5 {\n        return max(arr[0] + arr[2] + arr[4], arr[1] + arr[3])\n    }\n    return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i+1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i+1; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    if len(arr) == 4 {\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    }\n    return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    // find the peak\n    peak := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            peak = i\n        } else {\n            break\n        }\n    }\n    // find the max sum of left\n    left := make([]int, peak+1)\n    left[0] = arr[0]\n    for i := 1; i <= peak; i++ {\n        left[i] = max(left[i-1]+arr[i], arr[i])\n    }\n    // find the max sum of right\n    right := make([]int, len(arr)-peak)\n    right[0] = arr[peak]\n    for i := 1; i < len(right); i++ {\n        right[i] = max(right[i-1]+arr[peak+i], arr[peak+i])\n    }\n    // find the max sum of left and right\n    max_sum := 0\n    for i := 0; i < len(left); i++ {\n        for j := 0; j < len(right); j++ {\n            if i == 0 && j == 0 {\n                continue\n            }\n            if i == peak && j == 0 {\n                continue\n            }\n            sum := left[i] + right[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    if len(arr) == 4 {\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    }\n    return max(arr[0] + max_sum(arr[2:]), arr[1] + max_sum(arr[3:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if j > 0 && arr[j] < arr[j-1] {\n                break\n            }\n            sum += arr[j]\n        }\n        for j := i-1; j >= 0; j-- {\n            if j < len(arr)-1 && arr[j] < arr[j+1] {\n                break\n            }\n            sum += arr[j]\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] + arr[1]\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n    // dp[i] = max sum of bitonic subsequence ending at i\n    dp := make([]int, n)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i := 2; i < n; i++ {\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    }\n    return dp[n-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr) - 1]) + arr[len(arr) - 1])\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if j == i {\n                sum += arr[j]\n            } else {\n                if arr[j] > arr[j-1] {\n                    sum += arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n        for j := i-1; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, arr[i])\n    }\n    return max_sum\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                sum := 0\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n                if sum > max {\n                    max = sum\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    max_sum_ending_here := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    // find the max sum of a bitonic subsequence\n    // first find the max sum of a strictly increasing subsequence\n    // then find the max sum of a strictly decreasing subsequence\n    // then find the max sum of a bitonic subsequence\n    // the max sum of a bitonic subsequence is the max of the max sum of a strictly increasing subsequence and the max sum of a strictly decreasing subsequence\n    // the max sum of a strictly increasing subsequence is the max sum of a strictly increasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a strictly decreasing subsequence is the max sum of a strictly decreasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a bitonic subsequence is the max of the max sum of a strictly increasing subsequence and the max sum of a strictly decreasing subsequence\n    // the max sum of a strictly increasing subsequence is the max sum of a strictly increasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a strictly decreasing subsequence is the max sum of a strictly decreasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a bitonic subsequence is the max of the max sum of a strictly increasing subsequence and the max sum of a strictly decreasing subsequence\n    // the max sum of a strictly increasing subsequence is the max sum of a strictly increasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a strictly decreasing subsequence is the max sum of a strictly decreasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a bitonic subsequence is the max of the max sum of a strictly increasing subsequence and the max sum of a strictly decreasing subsequence\n    // the max sum of a strictly increasing subsequence is the max sum of a strictly increasing subsequence of the first n-1 elements plus the nth element\n    // the max sum of a strictly decreasing subsequence is the max sum",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    var left_max, right_max int\n    for i := 1; i < len(arr) - 1; i++ {\n        left_max = max_sum(arr[:i])\n        right_max = max_sum(arr[i:])\n        if left_max + right_max > max(left_max, right_max) {\n            return left_max + right_max\n        }\n    }\n    return max(left_max, right_max)\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                if sum > max_sum {\n                    max_sum = sum\n                }\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                if sum > max_sum {\n                    max_sum = sum\n                }\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[:len(arr) - 1]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n",
    "    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of increasing subsequence\n    max_sum_inc := make([]int, len(arr))\n    max_sum_inc[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_inc[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                max_sum_inc[i] = max(max_sum_inc[i], max_sum_inc[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    max_sum_dec := make([]int, len(arr))\n    max_sum_dec[len(arr)-1] = arr[len(arr)-1]\n    for i := len(arr)-2; i >= 0; i-- {\n        max_sum_dec[i] = arr[i]\n        for j := len(arr)-1; j > i; j-- {\n            if arr[j] < arr[i] {\n                max_sum_dec[i] = max(max_sum_dec[i], max_sum_dec[j] + arr[i])\n            }\n        }\n    }\n\n    // find the max sum of bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum int = 0\n    var max_sum_ending_here int = 0\n    for i := 0; i < len(arr); i++ {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[i] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return arr[0]\n    }\n    if n == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < n; i++ {\n        sum := arr[i]\n        max_sum = max(max_sum, sum)\n        for j := i + 1; j < n; j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < arr[j - 1] {\n                sum += arr[j]\n                max_sum = max(max_sum, sum)\n            } else {\n                break\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n",
    "    max := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[j-1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i; j >= 0; j-- {\n            if arr[j] > arr[j+1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_at(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(max(arr[0], arr[1]), arr[2])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    // find the max sum of increasing subsequence\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_sum {\n            max_sum = arr[i]\n        }\n    }\n\n    // find the max sum of decreasing subsequence\n    max_sum = max(max_sum, max_sum_dec(arr))\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    // find the peak\n    peak := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[peak] {\n            peak = i\n        }\n    }\n\n    // find the max sum of the left side\n    left_sum := arr[0]\n    for i := 1; i < peak; i++ {\n        if arr[i] > arr[i - 1] {\n            left_sum += arr[i]\n        }\n    }\n\n    // find the max sum of the right side\n    right_sum := arr[len(arr) - 1]\n    for i := len(arr) - 2; i > peak; i-- {\n        if arr[i] > arr[i + 1] {\n            right_sum += arr[i]\n        }\n    }\n\n    return left_sum + right_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    var max_sum_arr []int = make([]int, len(arr))\n    max_sum_arr[0] = arr[0]\n    max_sum_arr[1] = max(arr[0], arr[1])\n    for i := 2; i < len(arr); i++ {\n        max_sum_arr[i] = max(max_sum_arr[i-1], max_sum_arr[i-2] + arr[i])\n    }\n    return max_sum_arr[len(arr)-1]\n}\n"
  ]
}