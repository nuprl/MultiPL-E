{
  "name": "mbpp_586_split_Arr",
  "language": "go_test.go",
  "prompt": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var res []int\n    for i := n; i < len(l); i++ {\n        res = append(res, l[i])\n    }\n    for i := 0; i < n; i++ {\n        res = append(res, l[i])\n    }\n    return res\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if len(l) < n {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var new_l []int\n    for i, v := range l {\n        if i < n {\n            new_l = append(new_l, v)\n        } else {\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var result []int\n    result = append(result, l[n:]...)\n    result = append(result, l[:n]...)\n    return result\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var res []int\n    if n > len(l) {\n        return l\n    }\n    res = append(res, l[n:]...)\n    res = append(res, l[:n]...)\n    return res\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    l1 := l[:n]\n    l2 := l[n:]\n    l2 = append(l2, l1...)\n    return l2\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var res []int\n    res = append(res, l[n:]...)\n    res = append(res, l[:n]...)\n    return res\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n == 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var result []int\n    for i := n; i < len(l); i++ {\n        result = append(result, l[i])\n    }\n    for i := 0; i < n; i++ {\n        result = append(result, l[i])\n    }\n    return result\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var result []int\n    for i, v := range l {\n        if i == n {\n            result = append(result, v)\n            break\n        }\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < len(l) {\n        return append(l[n:], l[:n]...)\n    }\n    return l\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n == 0 {\n        return l\n    }\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var result []int\n    if n > len(l) {\n        return l\n    }\n    result = append(result, l[n:]...)\n    result = append(result, l[:n]...)\n    return result\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 {\n        n = 0\n    }\n    if n > len(l) {\n        n = len(l)\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n >= len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var res []int\n    res = append(res, l[n:]...)\n    res = append(res, l[:n]...)\n    return res\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510010,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    if n < 0 || n > len(l) {\n        return l\n    }\n    return append(l[n:], l[:n]...)\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n    var res []int\n    res = append(res, l[n:]...)\n    res = append(res, l[:n]...)\n    return res\n}\n\nfunc TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    }
  ]
}