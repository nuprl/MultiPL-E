{
  "name": "mbpp_11_remove_Occ",
  "language": "go_test.go",
  "prompt": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var result string\n    var first bool\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && !first {\n            first = true\n            continue\n        }\n        result += string(s[i])\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if result[len(result) - 1] == rune(ch[0]) {\n        result = result[:len(result) - 1]\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9feds73c_test.go:22:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmp9feds73c_test.go:31:32: invalid operation: result[len(result) - 1] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) < 1 {\n        return s\n    }\n    if len(ch) != 1 {\n        return s\n    }\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n                break\n            } else {\n                result = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbwno5z97_test.go:18:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        } else {\n            res += string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2h_w9ezg_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s) - 1 {\n            continue\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjqk2436k_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmpjqk2436k_test.go:14:24: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var new_s string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            new_s += string(s[i])\n        }\n    }\n    return new_s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp33mvbdh0_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpj15lfnri_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpj15lfnri_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpj15lfnri_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var flag bool\n    for i := 0; i < len(s); i++ {\n        if s[i:i+1] == ch {\n            if flag == false {\n                flag = true\n                continue\n            }\n        }\n        res += s[i:i+1]\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpi0tzf7j1_test.go:39: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpi0tzf7j1_test.go:39: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpi0tzf7j1_test.go:39: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t string\n    var u string\n    var v string\n    var w string\n    var x string\n    var y string\n    var z string\n    var aa string\n    var bb string\n    var cc string\n    var dd string\n    var ee string\n    var ff string\n    var gg string\n    var hh string\n    var ii string\n    var jj string\n    var kk string\n    var ll string\n    var mm string\n    var nn string\n    var oo string\n    var pp string\n    var qq string\n    var rr string\n    var ss string\n    var tt string\n    var uu string\n    var vv string\n    var ww string\n    var xx string\n    var yy string\n    var zz string\n    var aaa string\n    var bbb string\n    var ccc string\n    var ddd string\n    var eee string\n    var fff string\n    var ggg string\n    var hhh string\n    var iii string\n    var jjj string\n    var kkk string\n    var lll string\n    var mmm string\n    var nnn string\n    var ooo string\n    var ppp string\n    var qqq string\n    var rrr string\n    var sss string\n    var ttt string\n    var uuu string\n    var vvv string\n    var www string\n    var xxx string\n    var yyy string\n    var zzz string\n    var aaaa string\n    var bbbb string\n    var cccc string\n    var dddd string\n    var eeee string\n    var ffff string\n    var gggg string\n    var hhhh string\n    var iiii string\n    var jjjj string\n    var kkkk string\n    var llll string\n    var mmmm string\n    var nnnn string\n    var oooo string\n    var pppp string\n    var qqqq string\n    var rrrr string\n    var ssss string\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1tk0a8ha_test.go:98:6: expected '(', found TestRemove_Occ\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        return s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        return s[:len(s)-1]\n    }\n    return s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpco3l4sdn_test.go:37: expected 'heo', got 'hello'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpco3l4sdn_test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpco3l4sdn_test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) != 1 {\n        return s\n    }\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp60_l0khm_test.go:18:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9a7woowq_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        }\n        if s[i] == rune(ch[0]) && i == len(s) - 1 {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyeqmrpnf_test.go:18:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmpyeqmrpnf_test.go:21:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if i == 0 {\n            result += string(s[i+1:])\n        } else if i == len(s) - 1 {\n            result += string(s[:i])\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpho7t2adl_test.go:40: expected 'heo', got 'heheloheloo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpho7t2adl_test.go:40: expected 'bcd', got 'bcdabcdabcd'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpho7t2adl_test.go:40: expected 'H', got 'HPHPH'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        }\n        return s\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        } else if i == 0 {\n            res += string(v)\n        } else if i == len(s) - 1 {\n            res += string(v)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpzfxjqztk_test.go:38: expected 'bcd', got 'abcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpzfxjqztk_test.go:38: expected 'H', got 'PHP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i:i+1] == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if result[i:i+1] == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp76cvwoy1_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var i int\n    for i = 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            break\n        }\n    }\n    result = s[:i] + s[i+1:]\n    for i = len(result) - 1; i >= 0; i-- {\n        if result[i] == rune(ch[0]) {\n            break\n        }\n    }\n    result = result[:i] + result[i+1:]\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnp5ji06a_test.go:13:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmpnp5ji06a_test.go:19:22: invalid operation: result[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u5hr1fk_test.go:21:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpu2g9afj9_test.go:29: expected 'heo', got ''\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpu2g9afj9_test.go:29: expected 'bcd', got ''\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpu2g9afj9_test.go:29: expected 'H', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i:=0; i<len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i:=len(res)-1; i>=0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var i int\n    var j int\n    for i = 0; i < len(s); i++ {\n        if s[i] == ch[0] {\n            break\n        }\n    }\n    for j = len(s) - 1; j >= 0; j-- {\n        if s[j] == ch[0] {\n            break\n        }\n    }\n    if i == len(s) || j == -1 {\n        return s\n    }\n    return s[0:i] + s[i+1:j] + s[j+1:]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var first, last int\n    for i, v := range s {\n        if string(v) == ch {\n            if first == 0 {\n                first = i\n            }\n            last = i\n        }\n    }\n    res = s[:first] + s[last+1:]\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpv2zv87t0_test.go:39: expected 'bcd', got 'abcd'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpv2zv87t0_test.go:39: expected 'H', got 'PH'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, c := range s {\n        if string(c) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp7a51pxy4_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t string\n    var u string\n    var v string\n    var w string\n    var x string\n    var y string\n    var z string\n    var aa string\n    var bb string\n    var cc string\n    var dd string\n    var ee string\n    var ff string\n    var gg string\n    var hh string\n    var ii string\n    var jj string\n    var kk string\n    var ll string\n    var mm string\n    var nn string\n    var oo string\n    var pp string\n    var qq string\n    var rr string\n    var ss string\n    var tt string\n    var uu string\n    var vv string\n    var ww string\n    var xx string\n    var yy string\n    var zz string\n    var aaa string\n    var bbb string\n    var ccc string\n    var ddd string\n    var eee string\n    var fff string\n    var ggg string\n    var hhh string\n    var iii string\n    var jjj string\n    var kkk string\n    var lll string\n    var mmm string\n    var nnn string\n    var ooo string\n    var ppp string\n    var qqq string\n    var rrr string\n    var sss string\n    var ttt string\n    var uuu string\n    var vvv string\n    var www string\n    var xxx string\n    var yyy string\n    var zzz string\n    var aaaa string\n    var bbbb string\n    var cccc string\n    var dddd string\n    var eeee string\n    var ffff string\n    var gggg string\n    var hhhh string\n    var iiii string\n    var jjjj string\n    var kkkk string\n    var llll string\n    var mmmm string\n    var nnnn string\n    var oooo string\n    var pppp string\n    var qqqq string\n    var rrrr string\n    var ssss string\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1tk0a8ha_test.go:98:6: expected '(', found TestRemove_Occ\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var first_occ bool\n    for _, c := range s {\n        if string(c) == ch && !first_occ {\n            first_occ = true\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp0r24d8g5_test.go:37: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp0r24d8g5_test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp0r24d8g5_test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        } else {\n            if i == 0 {\n                res += string(s[i+1:])\n            } else if i == len(s) - 1 {\n                res += string(s[:i])\n            } else {\n                res += string(s[:i]) + string(s[i+1:])\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz69u4sv1_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7t3fe6i4_test.go:101:6: expected '(', found TestRemove_Occ\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var first bool = true\n    for _, v := range s {\n        if string(v) == ch {\n            if first {\n                first = false\n                continue\n            } else {\n                break\n            }\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpd_4ilur8_test.go:41: expected 'heo', got 'he'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s)-1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn1plrncq_test.go:21:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var result string\n    var first bool = true\n    for _, c := range s {\n        if string(c) == ch {\n            if first {\n                first = false\n            } else {\n                result += string(c)\n            }\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpkqdxntua_test.go:50: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpkqdxntua_test.go:50: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpkqdxntua_test.go:50: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    // Write your code here\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp76z31hzz_test.go:42: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp76z31hzz_test.go:42: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp76z31hzz_test.go:42: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var first bool = true\n    for _, c := range s {\n        if string(c) == ch {\n            if first {\n                first = false\n            } else {\n                res += string(c)\n            }\n        } else {\n            res += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpr3dy8t71_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpr3dy8t71_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpr3dy8t71_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:len(s)]\n            } else if i == len(s) - 1 {\n                res = s[0:len(s) - 1]\n            } else {\n                res = s[0:i] + s[i + 1:len(s)]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpk353zlyt_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpk353zlyt_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpk353zlyt_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl2bd6a3i_test.go:18:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, _ := range s {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpjibojh89_test.go:29: expected 'heo', got ''\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpjibojh89_test.go:29: expected 'bcd', got ''\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpjibojh89_test.go:29: expected 'H', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            new_s += string(s[i])\n        } else {\n            if i == 0 || i == len(s) - 1 {\n                continue\n            } else {\n                new_s += string(s[i])\n            }\n        }\n    }\n    return new_s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpbrsaszeo_test.go:40: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp76cvwoy1_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpov3h1fcs_test.go:37: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n                break\n            } else {\n                result = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpub0ivht3_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpkxvluizl_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpkxvluizl_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpkxvluizl_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        } else {\n            res += string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2h_w9ezg_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8xhiz3et_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9a7woowq_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        } else if i == 0 {\n            res += string(v)\n        } else if i == len(s) - 1 {\n            res += string(v)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpzfxjqztk_test.go:38: expected 'bcd', got 'abcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpzfxjqztk_test.go:38: expected 'H', got 'PHP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(ch) != 1 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        }\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpmi95zgdl_test.go:46: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        } else {\n            if i == 0 {\n                result += string(s[i+1:])\n            } else if i == len(s)-1 {\n                result += string(s[:i])\n            } else {\n                result += string(s[:i]) + string(s[i+1:])\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpici9m9jr_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        } else if i == 0 {\n            res += string(v)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpimzxwufx_test.go:36: expected 'bcd', got 'abcd'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpimzxwufx_test.go:36: expected 'H', got 'PH'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8xhiz3et_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n    var uuuu\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7unls337_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123251,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpiw10_kgj_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpiw10_kgj_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpiw10_kgj_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var flag bool = false\n    for _, v := range s {\n        if string(v) == ch && flag == false {\n            flag = true\n            continue\n        }\n        if string(v) == ch && flag == true {\n            break\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpws4msgnv_test.go:40: expected 'heo', got 'he'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var flag bool\n    for _, v := range s {\n        if string(v) == ch && flag == false {\n            flag = true\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpblc9yle2_test.go:37: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpblc9yle2_test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpblc9yle2_test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_Occ(0x54564e, 0x1, 0x54527a, 0x1, 0x0, 0x608a20)\n\t/tmp/tmpyotim1qm_test.go:19 +0x1c5\ncommand-line-arguments_test.remove_Occ(0x54564e, 0x2, 0x54527a, 0x1, 0x0, 0x0)\n\t/tmp/tmpyotim1qm_test.go:17 +0x12d\ncommand-line-arguments_test.remove_Occ(0x54564e, 0x3, 0x54527a, 0x1, 0xf, 0x58a5df)\n\t/tmp/tmpyotim1qm_test.go:17 +0x12d\ncommand-line-arguments_test.remove_Occ(0x54564d, 0x5, 0x54527a, 0x1, 0x5824c3, 0xf)\n\t/tmp/tmpyotim1qm_test.go:19 +0xa5\ncommand-line-arguments_test.TestRemove_Occ(0xc000001380)\n\t/tmp/tmpyotim1qm_test.go:29 +0x68\ntesting.tRunner(0xc000001380, 0x54f1f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch && i == 0 {\n            continue\n        }\n        if string(v) == ch && i == len(s) - 1 {\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpalb_17rj_test.go:38: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp2crsnmhm_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var str string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            str += string(s[i])\n        } else if string(s[i]) == ch && i != 0 && i != len(s) - 1 {\n            str += string(s[i])\n        }\n    }\n    return str\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpkvpe17og_test.go:36: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzmkgo_8s_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else {\n            result += string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpm31oz1e7_test.go:37: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpm31oz1e7_test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpm31oz1e7_test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzmkgo_8s_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        }\n        if string(v) == ch && i == 0 {\n            res += string(v)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp_qyehv4v_test.go:37: expected 'bcd', got 'abcd'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp_qyehv4v_test.go:37: expected 'H', got 'PH'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpmqj_raxu_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpmqj_raxu_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpmqj_raxu_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp26lf_h83_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp_x301obj_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp_x301obj_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp_x301obj_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == []rune(ch)[0] {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpng1auk2i_test.go:12:17: invalid operation: s[i] == ([]rune)(ch)[0] (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s) - 1 {\n            continue\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjqk2436k_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmpjqk2436k_test.go:14:24: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_s = s[1:]\n                break\n            } else if i == len(s)-1 {\n                new_s = s[:len(s)-1]\n                break\n            } else {\n                new_s = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return new_s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpty7n88ou_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpty7n88ou_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpty7n88ou_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else if string(s[i]) == ch && i == 0 {\n            res += string(s[i+1:])\n            break\n        } else if string(s[i]) == ch && i == len(s) - 1 {\n            res += string(s[:i])\n            break\n        } else if string(s[i]) == ch && i != 0 && i != len(s) - 1 {\n            res += string(s[:i]) + string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpr0rwk8b8_test.go:43: expected 'heo', got 'hehelo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpr0rwk8b8_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpr0rwk8b8_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else {\n            if i == 0 {\n                res += string(s[i+1:])\n            } else {\n                res += string(s[:i])\n                res += string(s[i+1:])\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp0a4pv2s5_test.go:42: expected 'heo', got 'hehelo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp0a4pv2s5_test.go:42: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp0a4pv2s5_test.go:42: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i, v := range s {\n        if string(v) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        }\n        return s\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpjibojh89_test.go:29: expected 'heo', got ''\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpjibojh89_test.go:29: expected 'bcd', got ''\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpjibojh89_test.go:29: expected 'H', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var flag bool = false\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if flag == false {\n                flag = true\n            } else {\n                res += string(s[i])\n            }\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkpupj6ck_test.go:13:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps9n1cm4o_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, c := range s {\n        if string(c) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var k int\n    var res string\n    var flag bool\n    flag = false\n    for i = 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if flag == false {\n                flag = true\n            } else {\n                for j = i; j < len(s); j++ {\n                    res += string(s[j])\n                }\n                break\n            }\n        } else {\n            if flag == false {\n                res += string(s[i])\n            }\n        }\n    }\n    flag = false\n    for k = 0; k < len(res); k++ {\n        if res[k] == rune(ch[0]) {\n            if flag == false {\n                flag = true\n            } else {\n                for j = k; j < len(res); j++ {\n                    res += string(res[j])\n                }\n                break\n            }\n        } else {\n            if flag == false {\n                res += string(res[k])\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9k6xjstv_test.go:17:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmp9k6xjstv_test.go:34:19: invalid operation: res[k] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp70b_mzxo_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var first bool = true\n    for _, c := range s {\n        if string(c) == ch {\n            if first {\n                first = false\n            } else {\n                result += string(c)\n            }\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp49kr36jw_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp49kr36jw_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp49kr36jw_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var first bool = true\n    for _, v := range s {\n        if string(v) == ch {\n            if first {\n                first = false\n            } else {\n                result += string(v)\n            }\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpu_o2he0r_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpu_o2he0r_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpu_o2he0r_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else {\n            if i == 0 {\n                res += string(s[i+1:])\n            } else if i == len(s) - 1 {\n                res += string(s[:i])\n            } else {\n                res += string(s[:i]) + string(s[i+1:])\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpofbub5ki_test.go:43: expected 'heo', got 'hehelo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpofbub5ki_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpofbub5ki_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var flag bool\n    for _, c := range s {\n        if string(c) == ch && !flag {\n            flag = true\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp671ee24__test.go:37: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp671ee24__test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp671ee24__test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp26lf_h83_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_s = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                new_s = s[:len(s) - 1]\n                break\n            } else {\n                new_s = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return new_s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpj1iupjnw_test.go:43: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpj1iupjnw_test.go:43: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpj1iupjnw_test.go:43: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        } else {\n            if i == 0 || i == len(s) - 1 {\n                continue\n            } else {\n                res += string(v)\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpi2xuvya5_test.go:40: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp26lf_h83_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpov3h1fcs_test.go:37: expected 'heo', got 'hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    var first_occ bool = true\n    for _, c := range s {\n        if string(c) == ch {\n            if first_occ {\n                first_occ = false\n            } else {\n                result += string(c)\n            }\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp4_9xwa9a_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp4_9xwa9a_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp4_9xwa9a_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcmrz0v35_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    return s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpc24c63jp_test.go:28: expected 'heo', got 'hello'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpc24c63jp_test.go:28: expected 'bcd', got 'abcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpc24c63jp_test.go:28: expected 'H', got 'PHP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmprgxtkm4t_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    var flag bool\n    for _, v := range s {\n        if string(v) == ch && !flag {\n            flag = true\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpzreizx26_test.go:37: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpzreizx26_test.go:37: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpzreizx26_test.go:37: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res += s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp8unyzyyi_test.go:41: expected 'heo', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpx8umqndd_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9a7woowq_test.go:12:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123248,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n    var uuuu\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7unls337_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var i int\n    var j int\n    var res string\n    for i = 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            break\n        }\n    }\n    for j = len(s) - 1; j >= 0; j-- {\n        if s[j] == rune(ch[0]) {\n            break\n        }\n    }\n    res = s[:i] + s[i+1:j] + s[j+1:]\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcr4fotk1_test.go:14:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmpcr4fotk1_test.go:19:17: invalid operation: s[j] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) < 1 {\n        return s\n    }\n    if len(ch) != 1 {\n        return s\n    }\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            }\n            if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            }\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if res[i] == rune(ch[0]) {\n            if i == 0 {\n                res = res[1:]\n                break\n            }\n            if i == len(res) - 1 {\n                res = res[:len(res)-1]\n                break\n            }\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp29_x3u85_test.go:18:17: invalid operation: s[i] == rune(ch[0]) (mismatched types byte and rune)\n/tmp/tmp29_x3u85_test.go:32:19: invalid operation: res[i] == rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmp6tqawfv5_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var new_s string\n    var first_occ bool\n    for _, v := range s {\n        if string(v) == ch {\n            if first_occ == false {\n                first_occ = true\n            } else {\n                new_s += string(v)\n            }\n        } else {\n            new_s += string(v)\n        }\n    }\n    return new_s\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123253,
      "stdout": "--- FAIL: TestRemove_Occ (0.00s)\n    --- FAIL: TestRemove_Occ/test_num__0 (0.00s)\n        tmpcxlccm05_test.go:41: expected 'heo', got 'helo'\n    --- FAIL: TestRemove_Occ/test_num__1 (0.00s)\n        tmpcxlccm05_test.go:41: expected 'bcd', got 'bcda'\n    --- FAIL: TestRemove_Occ/test_num__2 (0.00s)\n        tmpcxlccm05_test.go:41: expected 'H', got 'HP'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        } else {\n            return s\n        }\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        } else {\n            if i == 0 {\n                res += string(s[i+1:])\n            } else if i == len(s) - 1 {\n                res += string(s[:i])\n            } else {\n                res += string(s[:i]) + string(s[i+1:])\n            }\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123249,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz69u4sv1_test.go:12:17: invalid operation: s[i] != rune(ch[0]) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510492,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}