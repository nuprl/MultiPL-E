{
  "name": "mbpp_758_unique_sublists",
  "language": "go_test.go",
  "prompt": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = list1.([]interface{})\n    case []int:\n        list2 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n    }\n    return list2\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result map[interface{}]int = make(map[interface{}]int)\n    for _, item := range list1.([]interface{}) {\n        result[item]++\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list1_ := list1.([]interface{})\n        list2 := make(map[interface{}]int)\n        for _, v := range list1_ {\n            list2[v]++\n        }\n        return list2\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        dict := make(map[int]int)\n        for _, v := range list {\n            dict[v]++\n        }\n        return dict\n    case []string:\n        list := list1.([]string)\n        dict := make(map[string]int)\n        for _, v := range list {\n            dict[v]++\n        }\n        return dict\n    case [][]int:\n        list := list1.([][]int)\n        dict := make(map[[2]int]int)\n        for _, v := range list {\n            dict[v]++\n        }\n        return dict\n    case [][]string:\n        list := list1.([][]string)\n        dict := make(map[[2]string]int)\n        for _, v := range list {\n            dict[v]++\n        }\n        return dict\n    default:\n        return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    var list4 []interface{}\n    var list5 []interface{}\n    var list6 []interface{}\n    var list7 []interface{}\n    var list8 []interface{}\n    var list9 []interface{}\n    var list10 []interface{}\n    var list11 []interface{}\n    var list12 []interface{}\n    var list13 []interface{}\n    var list14 []interface{}\n    var list15 []interface{}\n    var list16 []interface{}\n    var list17 []interface{}\n    var list18 []interface{}\n    var list19 []interface{}\n    var list20 []interface{}\n    var list21 []interface{}\n    var list22 []interface{}\n    var list23 []interface{}\n    var list24 []interface{}\n    var list25 []interface{}\n    var list26 []interface{}\n    var list27 []interface{}\n    var list28 []interface{}\n    var list29 []interface{}\n    var list30 []interface{}\n    var list31 []interface{}\n    var list32 []interface{}\n    var list33 []interface{}\n    var list34 []interface{}\n    var list35 []interface{}\n    var list36 []interface{}\n    var list37 []interface{}\n    var list38 []interface{}\n    var list39 []interface{}\n    var list40 []interface{}\n    var list41 []interface{}\n    var list42 []interface{}\n    var list43 []interface{}\n    var list44 []interface{}\n    var list45 []interface{}\n    var list46 []interface{}\n    var list47 []interface{}\n    var list48 []interface{}\n    var list49 []interface{}\n    var list50 []interface{}\n    var list51 []interface{}\n    var list52 []interface{}\n    var list53 []interface{}\n    var list54 []interface{}\n    var list55 []interface{}\n    var list56 []interface{}\n    var list57 []interface{}\n    var list58 []interface{",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            return unique_sublists_int(list1.([]int))\n        case []string:\n            return unique_sublists_string(list1.([]string))\n        default:\n            return nil\n    }\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var result = make(map[interface{}]int)\n    var list = list1.([]interface{})\n    for i := 0; i < len(list); i++ {\n        var sublist = list[i].([]interface{})\n        var tuple = make([]interface{}, len(sublist))\n        for j := 0; j < len(sublist); j++ {\n            tuple[j] = sublist[j]\n        }\n        result[tuple]++\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            dict := make(map[interface{}]int)\n            for _, item := range list {\n                dict[item] += 1\n            }\n            return dict\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    var list2 []interface{}\n    var dict1 = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        if v.([]interface{}) != nil {\n            list2 = append(list2, v)\n        }\n    }\n    for _, v := range list2 {\n        dict1[v] += 1\n    }\n    return dict1\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    var result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // your code here\n    return nil\n}\n"
  ]
}