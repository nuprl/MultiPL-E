{
  "name": "mbpp_20_is_woodall",
  "language": "go_test.go",
  "prompt": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x/2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmp3uinobyj_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmp3uinobyj_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp2qcsqw6f_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var i int = 1\n    for i <= x {\n        if i * i * i * i == x {\n            return true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpib19q802_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i *= 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpjshgwjfm_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpylqbfi9l_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i *= 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkk4cf3hp_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0 && is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkndc7uu7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp59te7bp1_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x/2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmp3uinobyj_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmp3uinobyj_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpylqbfi9l_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp79nqnz3i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x > 0 && x == (1 << uint(x)) - 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp44cswyl1_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpjyt85fgd_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 10 == 7\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpy6pfgpxk_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpylqbfi9l_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    if x % 5 == 0 {\n        return false\n    }\n    if x % 10 == 9 {\n        return false\n    }\n    if x % 100 == 99 {\n        return false\n    }\n    if x % 1000 == 999 {\n        return false\n    }\n    if x % 10000 == 9999 {\n        return false\n    }\n    if x % 100000 == 99999 {\n        return false\n    }\n    if x % 1000000 == 999999 {\n        return false\n    }\n    if x % 10000000 == 9999999 {\n        return false\n    }\n    if x % 100000000 == 99999999 {\n        return false\n    }\n    if x % 1000000000 == 999999999 {\n        return false\n    }\n    if x % 10000000000 == 9999999999 {\n        return false\n    }\n    if x % 100000000000 == 99999999999 {\n        return false\n    }\n    if x % 1000000000000 == 999999999999 {\n        return false\n    }\n    if x % 10000000000000 == 9999999999999 {\n        return false\n    }\n    if x % 100000000000000 == 99999999999999 {\n        return false\n    }\n    if x % 1000000000000000 == 999999999999999 {\n        return false\n    }\n    if x % 10000000000000000 == 9999999999999999 {\n        return false\n    }\n    if x % 100000000000000000 == 99999999999999999 {\n        return false\n    }\n    if x % 1000000000000000000 == 999999999999999999 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return (x & (x - 1)) == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp60qrsmhi_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    n := 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpe2btqb9k_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i <= x; i++ {\n        if i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp_lxt7sba_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmptgzwchzt_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 2\n    for i <= x {\n        if i * i * i * i == x {\n            return true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmplde4wfq8_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 2\n    for i <= x {\n        if i * i * i == x {\n            return true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpivjxiy0b_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxpz6732m_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmp20g3oa5l_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmp20g3oa5l_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpbmcfyk_7_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    var sum int = 1\n    for i < x {\n        sum = sum * 2\n        if sum == x {\n            return true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpbcxmih6g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    n := 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpe2btqb9k_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2 + 1\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpk1l5visu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    n := x\n    for n > 0 {\n        if n % 10 == 0 {\n            return false\n        }\n        n /= 10\n    }\n    return x % 10 == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp2ct0rn70_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2 + 1\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpg9it4pos_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp9etqn3om_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    n := 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpe2btqb9k_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    return is_woodall((x * x - 1) / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpnwbpkkb9_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 1 {\n        return false\n    }\n    for i := 2; i < x; i++ {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x > 0 && x == (1 << uint(x)) - 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp44cswyl1_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || (x % 2 == 0 && is_woodall(x / 2))\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpzfx45dbu_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpu3hu4k24_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509687,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp2qcsqw6f_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x == 7 || x == 9 || x == 11 || x == 13 || x == 17 || x == 19 || x == 23 || x == 25 || x == 27 || x == 29 || x == 31 || x == 37 || x == 41 || x == 43 || x == 47 || x == 49 || x == 53 || x == 59 || x == 61 || x == 67 || x == 71 || x == 73 || x == 79 || x == 83 || x == 89 || x == 97\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp5os3meeu_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxpz6732m_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return (x & (x - 1)) == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp60qrsmhi_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 10 == 7\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124287,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpy6pfgpxk_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}