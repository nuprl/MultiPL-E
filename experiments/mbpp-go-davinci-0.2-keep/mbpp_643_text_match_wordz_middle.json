{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "go_test.go",
  "prompt": "package text_match_wordz_middle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_Wordz_Middle(t *testing.T) {\n  candidate := text_match_wordz_middle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonzabc.\"), expected: true },\n     { actual: candidate(\"zxyabc.\"), expected: false },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // your code here\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    var result bool\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'z' {\n            if i == 0 || i == len(text) - 1 {\n                result = false\n            } else {\n                result = true\n            }\n        }\n    }\n    return result\n}\n",
    "    return true\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    // your code here\n    return false\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    for i := 1; i < len(text) - 1; i++ {\n        if text[i] == 'z' {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == 'z' {\n            if i > 0 && i < len(text) - 1 {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    return true\n}\n",
    "    return false\n}\n",
    "    return true\n}\n",
    "    return false\n}\n",
    "    return true\n}\n"
  ]
}