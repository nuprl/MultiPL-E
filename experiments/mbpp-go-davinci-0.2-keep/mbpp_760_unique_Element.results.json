{
  "name": "mbpp_760_unique_Element",
  "language": "go_test.go",
  "prompt": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmptcj71daq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmptcj71daq_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) < 2 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpkdlxnjuy_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpkdlxnjuy_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphezgau5g_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpyjhtyya4_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpyjhtyya4_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    }\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpw0uz0m2m_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpw0uz0m2m_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp10dvf73i_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp10dvf73i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n        count = 0\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp10dvf73i_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp10dvf73i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0mo9wby7_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp0mo9wby7_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0mo9wby7_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp0mo9wby7_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    m := make(map[int]bool)\n    for _, v := range arr {\n        if m[v] {\n            return false\n        }\n        m[v] = true\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp179hmaun_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp179hmaun_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmphcs7qv2c_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmphcs7qv2c_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp5jwv7z07_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp5jwv7z07_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    var unique int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] != unique {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp4nem7hg9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp4nem7hg9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0x2_pexd_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp56d_49wu_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique bool\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            } else {\n                unique = true\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpn7zm4szm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmpn7zm4szm_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpn7zm4szm_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique int\n    for _, v := range arr {\n        if unique == 0 {\n            unique = v\n        } else if unique != v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp83knhto9_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpf8l5hu6i_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    // Write your code here\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpjol_hice_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpjol_hice_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    if len(arr) == 1 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpv348y67w_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpv348y67w_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpyjhtyya4_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpyjhtyya4_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    }\n    return false\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpw0uz0m2m_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpw0uz0m2m_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var unique int\n    for _, v := range arr {\n        unique ^= v\n    }\n    return unique == 0\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp0wl3pptr_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__1 (0.00s)\n        tmp0wl3pptr_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n\n    var unique int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if unique != arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123307,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count++\n            }\n        }\n    }\n    if count == len(arr) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123307,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpxa98ceew_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpxa98ceew_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpu5y0gaye_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    var unique int = arr[0]\n    for _, v := range arr {\n        if v != unique {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123307,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    var m = make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123307,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpqrhmaxw1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpqrhmaxw1_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpdgv5j09m_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) < 2 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123307,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpr7q06910_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpr7q06910_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmp3m8z57vy_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpd6b6jndp_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517409,
      "stdout": "--- FAIL: TestUnique_Element (0.00s)\n    --- FAIL: TestUnique_Element/test_num__0 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestUnique_Element/test_num__2 (0.00s)\n        tmpom6uurjk_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123306,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}