{
  "name": "mbpp_119_search",
  "language": "go_test.go",
  "prompt": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        }\n        if arr[1] == arr[2] {\n            return arr[0]\n        }\n        return arr[1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1np6val4_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1np6val4_test.go:56: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    low := 1\n    high := len(arr) - 2\n\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpf0n4e5fy_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpf0n4e5fy_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp6lo3faan_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6lo3faan_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1e_iasqi_test.go:56: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1e_iasqi_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1e_iasqi_test.go:56: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1e_iasqi_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[mid + 2:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c630, 0x0, 0x5, 0x582483)\n\t/tmp/tmpkpzjva3z_test.go:15 +0x1dc\ncommand-line-arguments_test.search(0xc00008c630, 0x2, 0x5, 0xc0000c0b78)\n\t/tmp/tmpkpzjva3z_test.go:19 +0xd9\ncommand-line-arguments_test.search(0xc00008c630, 0x5, 0x5, 0x0)\n\t/tmp/tmpkpzjva3z_test.go:23 +0x185\ncommand-line-arguments_test.TestSearch(0xc000001380)\n\t/tmp/tmpkpzjva3z_test.go:39 +0xa2\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    start := 0\n    end := len(arr) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                end = mid - 1\n            } else {\n                start = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    var i int\n    for i = 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr) - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[mid + 2:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c630, 0x0, 0x5, 0x582483)\n\t/tmp/tmpkpzjva3z_test.go:15 +0x1dc\ncommand-line-arguments_test.search(0xc00008c630, 0x2, 0x5, 0xc0000c0b78)\n\t/tmp/tmpkpzjva3z_test.go:19 +0xd9\ncommand-line-arguments_test.search(0xc00008c630, 0x5, 0x5, 0x0)\n\t/tmp/tmpkpzjva3z_test.go:23 +0x185\ncommand-line-arguments_test.TestSearch(0xc000001380)\n\t/tmp/tmpkpzjva3z_test.go:39 +0xa2\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    return search(arr[1:len(arr)-1])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp0rrxqk32_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0rrxqk32_test.go:44: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1hiflxhp_test.go:60: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1hiflxhp_test.go:60: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    for i := 1; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else {\n        return search(arr[:mid])\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpl4wuz5s6_test.go:47: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpl4wuz5s6_test.go:47: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpr05nxzxz_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpr05nxzxz_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    l := 1\n    r := len(arr) - 2\n    for l <= r {\n        m := (l + r) / 2\n        if arr[m] != arr[m - 1] && arr[m] != arr[m + 1] {\n            return arr[m]\n        }\n        if arr[m] == arr[m - 1] {\n            if (m - 1 - l) % 2 == 0 {\n                l = m + 1\n            } else {\n                r = m - 2\n            }\n        } else {\n            if (r - m - 1) % 2 == 0 {\n                r = m - 1\n            } else {\n                l = m + 2\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 2:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    for i := 1; i < len(arr)-1; i++ {\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb5598lhs_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb5598lhs_test.go:45: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    for i := 1; i < len(arr)-1; i++ {\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else {\n        return search(arr[:mid])\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpr05nxzxz_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpr05nxzxz_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpn134m89v_test.go:46: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpn134m89v_test.go:46: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if (mid - 1) % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if (mid + 1) % 2 == 0 {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid:])\n        } else {\n            return search(arr[:mid])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[mid:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpnel9k66y_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnel9k66y_test.go:53: expected '%!s(int=8)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpnel9k66y_test.go:53: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpfypbjoh8_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpfypbjoh8_test.go:44: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr)-2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c640, 0x0, 0x3, 0x582483)\n\t/tmp/tmpwqgbnedy_test.go:15 +0x132\ncommand-line-arguments_test.search(0xc00008c630, 0x2, 0x5, 0xc000126f88)\n\t/tmp/tmpwqgbnedy_test.go:16 +0xee\ncommand-line-arguments_test.search(0xc00008c630, 0x5, 0x5, 0x0)\n\t/tmp/tmpwqgbnedy_test.go:18 +0x8e\ncommand-line-arguments_test.TestSearch(0xc000102600)\n\t/tmp/tmpwqgbnedy_test.go:31 +0xa2\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp7f93oc1p_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp7f93oc1p_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr) - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n\n    return search(arr[1:len(arr)-1])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpxctgfp46_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpxctgfp46_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if mid % 2 == 0 {\n        if arr[mid] == arr[mid - 1] {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        if arr[mid] == arr[mid - 1] {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpw9m5x6e6_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw9m5x6e6_test.go:49: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpw9m5x6e6_test.go:49: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    }\n\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    }\n\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpho7gkikw_test.go:62: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpho7gkikw_test.go:62: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid:])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpwxy79tqz_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpwxy79tqz_test.go:53: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpwxy79tqz_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzj216_sv_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzj216_sv_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    return search(arr[1:len(arr) - 1])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        } else if arr[1] == arr[2] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpfmwmhqs7_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpfmwmhqs7_test.go:57: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    for i := 1; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    return search(arr[:mid])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c640, 0x0, 0x3, 0x582483)\n\t/tmp/tmpchz9985o_test.go:20 +0x13d\ncommand-line-arguments_test.search(0xc00008c630, 0x2, 0x5, 0xc000126c48)\n\t/tmp/tmpchz9985o_test.go:21 +0xd4\ncommand-line-arguments_test.search(0xc00008c630, 0x5, 0x5, 0x0)\n\t/tmp/tmpchz9985o_test.go:23 +0x105\ncommand-line-arguments_test.TestSearch(0xc000102600)\n\t/tmp/tmpchz9985o_test.go:33 +0xa2\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp9ziv4ogo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp0ne1bqc4_test.go:59: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0ne1bqc4_test.go:59: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    return search(arr[:mid])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr) - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpwd5pw4_1_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    left, right := 0, len(arr)-1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp0ne1bqc4_test.go:59: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0ne1bqc4_test.go:59: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4xowwqc0_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4xowwqc0_test.go:44: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp8f_1g8jc_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp8f_1g8jc_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    return search(arr[:mid])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid + 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpyq0q_8as_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpk9hoegrb_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpk9hoegrb_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp2tldnpcq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        }\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 2:])\n        }\n        return search(arr[:mid - 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid:])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[mid+1:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp6bnxbp58_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6bnxbp58_test.go:56: expected '%!s(int=8)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp6bnxbp58_test.go:56: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    for i := 1; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i += 2 {\n        if i == len(arr) - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpruufyxrn_test.go:47: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpruufyxrn_test.go:47: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid:])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1aagp98p_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1aagp98p_test.go:56: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmptctiwdlr_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmptctiwdlr_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else {\n        return search(arr[:mid])\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp8f_1g8jc_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp8f_1g8jc_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else {\n        return search(arr[:mid])\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpck3nvl0r_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpck3nvl0r_test.go:47: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpck3nvl0r_test.go:47: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp7bmrvk20_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp7bmrvk20_test.go:47: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpruufyxrn_test.go:47: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpruufyxrn_test.go:47: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    if len(arr) % 2 == 0 {\n        if arr[len(arr)/2] == arr[len(arr)/2 - 1] {\n            return search(arr[len(arr)/2:])\n        } else {\n            return search(arr[:len(arr)/2])\n        }\n    } else {\n        if arr[len(arr)/2] == arr[len(arr)/2 - 1] {\n            return search(arr[len(arr)/2+1:])\n        } else {\n            return search(arr[:len(arr)/2])\n        }\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp7279d2dn_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp7279d2dn_test.go:53: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp0rrxqk32_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0rrxqk32_test.go:44: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpk9hoegrb_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpk9hoegrb_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                high = mid - 2\n            } else {\n                low = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n        return arr[mid]\n    }\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[:mid-1])\n        }\n    }\n    if mid % 2 == 0 {\n        return search(arr[:mid-1])\n    } else {\n        return search(arr[mid+1:])\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpexee1zvt_test.go:56: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpexee1zvt_test.go:56: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpexee1zvt_test.go:56: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    }\n\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    }\n\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c6b8, 0x2, 0x6, 0x1)\n\t/tmp/tmpsloz7n3m_test.go:28 +0x1c6\ncommand-line-arguments_test.search(0xc00008c6b8, 0x6, 0x6, 0x1)\n\t/tmp/tmpsloz7n3m_test.go:32 +0x171\ncommand-line-arguments_test.search(0xc00008c690, 0xb, 0xb, 0x1)\n\t/tmp/tmpsloz7n3m_test.go:24 +0xf9\ncommand-line-arguments_test.TestSearch(0xc000102600)\n\t/tmp/tmpsloz7n3m_test.go:47 +0x18c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    return search(arr[:mid])\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpthss8xiw_test.go:48: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid+1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    for i := 1; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n    }\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmper8r3het_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 1\n    high := len(arr) - 2\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 2:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpt09cx929_test.go:52: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpt09cx929_test.go:52: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpt2ofg66u_test.go:57: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpt2ofg66u_test.go:57: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c6b8, 0x2, 0x6, 0x1)\n\t/tmp/tmpv6i4ogw__test.go:21 +0x1b3\ncommand-line-arguments_test.search(0xc00008c6b8, 0x6, 0x6, 0x1)\n\t/tmp/tmpv6i4ogw__test.go:25 +0x171\ncommand-line-arguments_test.search(0xc00008c690, 0xb, 0xb, 0x1)\n\t/tmp/tmpv6i4ogw__test.go:19 +0xf6\ncommand-line-arguments_test.TestSearch(0xc000102600)\n\t/tmp/tmpv6i4ogw__test.go:40 +0x18c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i += 2 {\n        if i == len(arr) - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpfypbjoh8_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpfypbjoh8_test.go:44: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp2ljgjl34_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp2ljgjl34_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp9j_readi_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp9j_readi_test.go:59: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpb8cxs0il_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr) - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        }\n        if arr[1] == arr[2] {\n            return arr[0]\n        }\n        if arr[0] == arr[2] {\n            return arr[1]\n        }\n        return -1\n    }\n    if len(arr) % 2 == 0 {\n        if arr[len(arr)/2] == arr[len(arr)/2-1] {\n            return search(arr[len(arr)/2+1:])\n        } else {\n            return search(arr[:len(arr)/2])\n        }\n    } else {\n        if arr[len(arr)/2] == arr[len(arr)/2-1] {\n            return search(arr[len(arr)/2+1:])\n        } else if arr[len(arr)/2] == arr[len(arr)/2+1] {\n            return search(arr[:len(arr)/2])\n        } else {\n            return arr[len(arr)/2]\n        }\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpvr2_ff9l_test.go:67: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpvr2_ff9l_test.go:67: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    mid := len(arr) / 2\n\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpuvqjuxdr_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpuvqjuxdr_test.go:48: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpuvqjuxdr_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[mid+1:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpetur72uv_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpetur72uv_test.go:46: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpetur72uv_test.go:46: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    low := 1\n    high := len(arr) - 2\n\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid:])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpls2fzir9_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpls2fzir9_test.go:53: expected '%!s(int=8)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpls2fzir9_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpvvw09ptu_test.go:55: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpvvw09ptu_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgjbhpvw1_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmptctiwdlr_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmptctiwdlr_test.go:55: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    for i := 0; i < len(arr); i += 2 {\n        if i == len(arr) - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123281,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpgurynlf__test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgurynlf__test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n    start := 0\n    end := len(arr) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                start = mid + 2\n            } else {\n                end = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg64waisg_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.search(0xc00008c6b8, 0x2, 0x6, 0x1)\n\t/tmp/tmp1bbl8z83_test.go:23 +0x1c6\ncommand-line-arguments_test.search(0xc00008c6b8, 0x6, 0x6, 0x1)\n\t/tmp/tmp1bbl8z83_test.go:27 +0x171\ncommand-line-arguments_test.search(0xc00008c690, 0xb, 0xb, 0x1)\n\t/tmp/tmp1bbl8z83_test.go:21 +0xf9\ncommand-line-arguments_test.TestSearch(0xc000102600)\n\t/tmp/tmp1bbl8z83_test.go:42 +0x18c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp1jvk_k_q_test.go:53: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n\n    if arr[len(arr) - 1] != arr[len(arr) - 2] {\n        return arr[len(arr) - 1]\n    }\n\n    low, high := 0, len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        } else if arr[1] == arr[2] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpv3gwgvpf_test.go:54: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpv3gwgvpf_test.go:54: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    for i := 1; i < len(arr)-1; i++ {\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        }\n        return search(arr[mid:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        }\n        return search(arr[:mid + 1])\n    }\n    return arr[mid]\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpx4g3dyx0_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplxg3tcbj_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp4_tvlxkw_test.go:45: expected '%!s(int=8)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510191,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpzmfelsof_test.go:56: expected '%!s(int=8)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if arr[0] != arr[1] {\n        return arr[0]\n    }\n    if arr[len(arr)-1] != arr[len(arr)-2] {\n        return arr[len(arr)-1]\n    }\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1] {\n            return arr[mid]\n        } else if arr[mid] == arr[mid-1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr []int) int {\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123284,
      "stdout": "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n        tmpt6kzp7z8_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpt6kzp7z8_test.go:48: expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}